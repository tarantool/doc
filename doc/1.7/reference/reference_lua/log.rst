.. _log-module:

-------------------------------------------------------------------------------
                                   Module `log`
-------------------------------------------------------------------------------

.. module:: log

The Tarantool server puts all diagnostic messages in a log file specified by
the :ref:`log <cfg_logging-log>` configuration parameter. Diagnostic
messages may be either system-generated by the server's internal code, or
user-generated with the :samp:`log.{log_level_function_name}` function.

.. function:: error(message)
              warn(message)
              info(message)
              verbose(message)
              debug(message)

    Output a user-generated message to the :ref:`log file <cfg_logging-log>`,
    given log_level_function_name = ``error`` or ``warn`` or ``info`` or
    ``verbose`` or ``debug``.

    As explained in the description of the configuration setting for
    :ref:`log_level <cfg_logging-log_level>`, there are seven levels of detail:

    * 1 – ``SYSERROR``
    * 2 – ``ERROR`` -- this corresponds to ``log.error(...)``
    * 3 – ``CRITICAL``
    * 4 – ``WARNING``  -- this corresponds to ``log.warn(...)``
    * 5 – ``INFO`` -- this corresponds to ``log.info(...)``
    * 6 – ``VERBOSE``  -- this corresponds to ``log.verbose(...)``
    * 7 – ``DEBUG`` -- this corresponds to ``log.debug(...)``

    For example, if ``box.cfg.log_level`` is currently 5 (the default value),
    then ``log.error(...)``, ``log.warn(...)`` and ``log.info(...)`` messages
    will go to the log file. However, ``log.verbose(...)`` and
    ``log.debug(...)`` messages will not go to the log file, because they
    correspond to higher levels of detail.

    :param string message: The actual output will be a line containing:

                           * the current timestamp,
                           * a module name,
                           * 'E', 'W', 'I', 'V' or 'D' depending on ``log_level_function_name``, and
                           * ``message``.

                           Output will not occur if ``log_level_function_name``
                           is for a type greater than :ref:`log_level
                           <cfg_logging-log_level>`.

                           Messages may contain C-style format specifiers %d or
                           %s, so :samp:`log.error('...%d...%s', {x}, {y})`
                           will work if ``x`` is a number and ``y`` is a string.

    :return: nil

.. _log-logger_pid:

.. function:: logger_pid()

.. function:: rotate()

=================================================
                     Example
=================================================

.. code-block:: tarantoolsession

    $ tarantool
    tarantool> box.cfg{log_level=3, log='tarantool.txt'}
    tarantool> log = require('log')
    tarantool> log.error('Error')
    tarantool> log.info('Info %s', box.info.version)
    tarantool> os.exit()

.. code-block:: console

    $ less tarantool.txt
    2017-09-20 ... [68617] main/101/interactive C> version 1.7.5-31-ge939c6ea6
    2017-09-20 ... [68617] main/101/interactive C> log level 3
    2017-09-20 ... [68617] main/101/interactive [C]:-1 E> Error

The 'Error' line is visible in ``tarantool.txt`` preceded by the letter E.

The 'Info' line is not present because the ``log_level`` is 3.
