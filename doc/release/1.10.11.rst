Tarantool 1.10.11
=================

Released on 2021-08-19.

*   Release :tarantool-release:`1.10.11`.
*   Tagged ``1.10.11-0-gf0b0e7e``

Overview
--------

1.10.11 is the next stable release in the
:doc:`long-term support (LTS) version </release/policy>`
1.10.x release series.

The label "stable" means there are 1.10.x-based applications running in
production for quite a while without known crashes, incorrect results or
other showstopper bugs.

This release introduces 2 improvements and resolves roughly 18 issues
since version :doc:`1.10.9 </release/1.10.9>`.

Compatibility
-------------

Tarantool 1.10.x is backward compatible with Tarantool 1.9.x in binary
data layout, client-server protocol and replication protocol.

Please
`upgrade <https://www.tarantool.io/en/doc/1.10/book/admin/upgrades/>`__
using the ``box.schema.upgrade()`` procedure to unlock all the new
features of the 1.10.x series.

Functionality added or changed
------------------------------

LuaJIT
~~~~~~

-   Introduced support for ``LJ_DUALNUM`` mode in ``luajit-gdb.py``
    (:tarantool-issue:`6224`).

Build
~~~~~

-   Fedora 34 builds are now supported
    (:tarantool-issue:`6074`).

-   Fedora 28 and 29 builds are no longer supported.

Bugs fixed
----------

Core
~~~~

-   **[Breaking change]** ``fiber.wakeup()`` in Lua and
    ``fiber_wakeup()`` in C became NOP on the currently running fiber.
    Previously they allowed “ignoring” the next yield or sleep, which
    resulted in unexpected erroneous wake-ups. Calling these functions
    right before ``fiber.create()`` in Lua or ``fiber_start()`` in C
    could lead to a crash (in debug build) or undefined behaviour (in
    release build) (:tarantool-issue:`6043`).

    There was a single use case for the previous behaviour: rescheduling
    in the same event loop iteration, which is not the same as
    ``fiber.sleep(0)`` in Lua and ``fiber_sleep(0)`` in C. It could be
    done in the following way:

    in C:

    ..  code:: c

        fiber_wakeup(fiber_self());
        fiber_yield();

    and in Lua:

    ..  code:: lua

        fiber.self():wakeup()
        fiber.yield()

    To get the same effect in C, one can now use ``fiber_reschedule()``.
    In Lua, it is now impossible to reschedule the current fiber directly
    in the same event loop iteration. One can reschedule self
    through a second fiber, but it is strongly discouraged:

    ..  code:: lua

        -- do not use this code
        local self = fiber.self()
        fiber.new(function() self:wakeup() end)
        fiber.sleep(0)

-   Fixed memory leak on ``box.on_commit()`` and
    ``box.on_rollback()`` (:tarantool-issue:`6025`).

-   Fixed invalid results of the ``json`` module’s ``encode``
    function when it was used from the Lua garbage collector. For
    example, this could happen in functions used as ``ffi.gc()``
    (:tarantool-issue:`6050`).

-   Fixed console client connection failure in case of request timeout
    (:tarantool-issue:`6249`).

-   Added a missing broadcast to ``net.box.future:discard()`` so that now
    fibers waiting for a request result wake up when the request is discarded
    (:tarantool-issue:`6250`).

-   Fixed a bug when iterators became invalid (up to crash) after schema change
    (:tarantool-issue:`6147`).

-   Fixed crash in case of reloading a compiled module when the new module lacks some functions
    present in the former code. In turn, this event triggers a fallback procedure where we restore old functions,
    but instead of restoring each function, we process a sole entry only, leading to the crash later
    when these restored functions are called
    (:tarantool-issue:`5968`).

Vinyl
~~~~~

-   Fixed possible keys divergence during secondary index build, which
    might lead to missing tuples
    (:tarantool-issue:`6045`).

-   Fix crash which may occur while switching read_only mode due to duplicating
    transaction in tx writer list (:tarantool-issue:`5934`).

-   Fixed the race between Vinyl garbage collection and compaction that
    resulted in a broken vylog and recovery failure
    (:tarantool-issue:`5436`).

Replication
~~~~~~~~~~~

-   Fixed replication occasionally stopping with ``ER_INVALID_MSGPACK``
    when the replica is under high load (:tarantool-issue:`4040`).

LuaJIT
~~~~~~

-   Fixed optimization for single-char strings in the ``IR_BUFPUT`` assembly
    routine.

-   Fixed slots alignment in the ``lj-stack`` command output when ``LJ_GC64``
    is enabled (:tarantool-issue:`5876`).

-   Fixed dummy frame unwinding in the ``lj-stack`` command.

-   Fixed detection of inconsistent renames even in the presence of sunk
    values (:tarantool-issue:`4252`, :tarantool-issue:`5049`, :tarantool-issue:`5118`).

-   Fixed the VM register allocation order provided by LuaJIT frontend in case
    of ``BC_ISGE`` and ``BC_ISGT`` (:tarantool-issue:`6227`).

Lua
~~~

-   When an error occurs during encoding call results, the auxiliary
    lightuserdata value is not removed from the main Lua coroutine stack.
    Before the fix, it led to undefined behaviour during the next
    usage of this Lua coroutine (:tarantool-issue:`4617`).

-   Fixed a Lua C API misuse when the error is raised during call results
    encoding in an unprotected coroutine and expected to be caught in a
    different, protected coroutine (:tarantool-issue:`6248`).

Triggers
^^^^^^^^

-   Fixed a possible crash in case trigger removes itself. Fixed a
    possible crash in case someone destroys a trigger when it
    yields (:tarantool-issue:`6266`).