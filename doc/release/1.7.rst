--------------------------------------------------------------------------------
Tarantool 1.7
--------------------------------------------------------------------------------

.. _whats_new_17:

.. _whats_new_176:

**Release 1.7.6**

Release type: stable. Release date: 2017-11-07.  Tag: 1.7.6-0-g7b2945d6c.

Announcement: https://groups.google.com/forum/#!topic/tarantool/hzc7O2YDZUc.

This is the next stable release in the 1.7 series.
It resolves more than 75 issues since 1.7.5.

What's new in Tarantool 1.7.6?

  * In addition to :ref:`rollback <box-rollback>` of a transaction, there is now
    rollback to a defined point within a transaction -- :ref:`savepoint <box-savepoint>` support.
  * There is a new object type: :ref:`sequences <index-box_sequence>`.
    The older option, :ref:`auto-increment <box_space-auto_increment>`, will be deprecated.
  * String indexes can have :ref:`collations <index-collation>`.

New options are available for:

  * :ref:`net_box <net_box-module>` (timeouts),
  * :ref:`string <string-module>` functions,
  * space :ref:`formats <box_space-format>` (user-defined field names and types),
  * :ref:`base64 <digest-base64_encode>` (``urlsafe`` option), and
  * index :ref:`creation <box_space-create_index>`
    (collation, :ref:`is-nullable <box_space-is_nullable>`, field names).

Incompatible changes:

  * Layout of ``box.space._index`` has been extended to support
    :ref:`is_nullable <box_space-is_nullable>`
    and :ref:`collation <index-collation>` features.
    All new indexes created on columns with ``is_nullable`` or ``collation``
    properties will have the new definition format.
    Please update your client libraries if you plan to use these new features.
    Issue `2802 <https://github.com/tarantool/tarantool/issues/2802>`_
  * :ref:`fiber_name() <fiber_object-name_get>` now raises an exception instead of truncating long fiber names.
    We found that some Lua modules such as :ref:`expirationd <expirationd-module>` use ``fiber.name()``
    as a key to identify background tasks. If a name is truncated, this fact was
    silently missed. The new behavior allows to detect bugs caused by ``fiber.name()``
    truncation. Please use ``fiber.name(name, { truncate = true })`` to emulate
    the old behavior.
    Issue `2622 <https://github.com/tarantool/tarantool/issues/2622>`_
  * :ref:`space:format() <box_space-format>` is now validated on DML operations.
    Previously ``space:format()`` was only used by client libraries, but starting
    from Tarantool 1.7.6, field types in ``space:format()`` are validated on the
    server side on every DML operation, and field names can be used in indexes
    and Lua code. If you used ``space:format()`` in a non-standard way,
    please update layout and type names according to the official documentation for
    space formats.

Functionality added or changed:

  * Hybrid schema-less + schemaful data model.
    Earlier Tarantool versions allowed to store arbitrary MessagePack documents in spaces.
    Starting from Tarantool 1.7.6, you can use
    :ref:`space:format() <box_space-format>` to define schema restrictions and constraints
    for tuples in spaces. Defined field types are automatically validated on every DML operation,
    and defined field names can be used instead of field numbers in Lua code.
    A new function :ref:`tuple:tomap() <box_tuple-tomap>` was added to convert a tuple into a key-value Lua dictionary.
  * Collation and Unicode support.
    By default, when Tarantool compares strings, it takes into consideration only the numeric
    value of each byte in the string. To allow the ordering that you see in phone books and dictionaries,
    Tarantool 1.7.6 introduces support for collations based on the
    `Default Unicode Collation Element Table (DUCET) <http://unicode.org/reports/tr10/#Default_Unicode_Collation_Element_Table>`_
    and the rules described in
    `UnicodeÂ® Technical Standard #10 Unicode Collation Algorithm (UTS #10 UCA) <http://unicode.org/reports/tr10>`_
    See :ref:`collations <index-collation>`.
  * NULL values in unique and non-unique indexes.
    By default, all fields in Tarantool are  "NOT NULL".
    Starting from Tarantool 1.7.6, you can use
    ``is_nullable`` option in :ref:`space:format() <box_space-format>`
    or :ref:`inside an index part definition <box_space-is_nullable>`
    to allow storing NULL in indexes.
    Tarantool partially implements
    `three-valued logic <https://en.wikipedia.org/wiki/Three-valued_logic>`_
    from the SQL standard and allows storing multiple NULL values in unique indexes.
    Issue `1557 <https://github.com/tarantool/tarantool/issues/1557>`_.
  * Sequences and a new implementation of :ref:`auto_increment() <box_space-auto_increment>`.
    Tarantool 1.7.6 introduces new
    :ref:`sequence number generators <index-box_sequence>` (like CREATE SEQUENCE in SQL).
    This feature is used to implement new persistent auto increment in spaces.
    Issue `389 <https://github.com/tarantool/tarantool/issues/389>`_.
  * Vinyl: introduced gap locks in Vinyl transaction manager.
    The new locking mechanism in Vinyl TX manager reduces the number of conflicts in transactions.
    Issue `2671 <https://github.com/tarantool/tarantool/issues/2671>`_.
  * net.box: :ref:`on_connect <box_session-on_connect>`
    and :ref:`on_disconnect <box_session-on_disconnect>` triggers.
    Issue `2858 <https://github.com/tarantool/tarantool/issues/2858>`_.
  * Structured logging in :ref:`JSON format <cfg_logging-log_format>`.
    Issue `2795 <https://github.com/tarantool/tarantool/issues/2795>`_.
  * (Lua) Lua: :ref:`string.strip() <string-strip>`
    Issue `2785 <https://github.com/tarantool/tarantool/issues/2785>`_.
  * (Lua) added :ref:`base64_urlsafe_encode() <digest-base64_encode>` to ``digest`` module.
    Issue `2777 <https://github.com/tarantool/tarantool/issues/2777>`_.
  * Log conflicted keys in master-master replication.
    Issue `2779 <https://github.com/tarantool/tarantool/issues/2779>`_.
  * Allow to disable backtrace in :ref:`fiber.info() <fiber-info>`.
    Issue `2878 <https://github.com/tarantool/tarantool/issues/2878>`_.
  * Implemented ``tarantoolctl rocks make *.spec``.
    Issue `2846 <https://github.com/tarantool/tarantool/issues/2846>`_.
  * Extended the default loader to look for ``.rocks`` in the parent dir hierarchy.
    Issue `2676 <https://github.com/tarantool/tarantool/issues/2676>`_.
  * ``SOL_TCP`` options support in :ref:`socket:setsockopt() <socket-setsockopt>`.
    Issue `598 <https://github.com/tarantool/tarantool/issues/598>`_.
  * Partial emulation of LuaSocket on top of Tarantool Socket.
    Issue `2727 <https://github.com/tarantool/tarantool/issues/2727>`_.

Developer tools:

  * Integration with IntelliJ IDEA with debugging support.
    Now you can use IntelliJ IDEA as an IDE to develop and debug Lua applications for Tarantool.
    See :ref:`Using IDE <app_server-using_ide>`.
  * Integration with `MobDebug <https://github.com/pkulchenko/MobDebug>`_ remote Lua debugger.
    Issue `2728 <https://github.com/tarantool/tarantool/issues/2728>`_.
  * Configured ``/usr/bin/tarantool`` as an alternative Lua interpreter on Debian/Ubuntu.
    Issue `2730 <https://github.com/tarantool/tarantool/issues/2730>`_.

New rocks:

  * `smtp.client <https://github.com/tarantool/smtp>`_ - support SMTP via ``libcurl``.

.. _whats_new_175:

**Release 1.7.5**

Release type: stable. Release date: 2017-08-22.  Tag: 1.7.5.

Announcement: https://github.com/tarantool/doc/issues/289.

This is a stable release in the 1.7 series.
This release resolves more than 160 issues since 1.7.4.

Functionality added or changed:

  * (Vinyl) a new :ref:`force_recovery <cfg_binary_logging_snapshots-force_recovery>`
    mode to recover broken disk files.
    Use ``box.cfg{force_recovery=true}`` to recover corrupted data files
    after hardware issues or power outages.
    Issue `2253 <https://github.com/tarantool/tarantool/issues/2253>`_.
  * (Vinyl) index options can be changed on the fly without rebuild.
    Now :ref:`page_size <cfg_storage-vinyl_page_size>`,
    :ref:`run_size_ratio <cfg_storage-vinyl_run_size_ratio>`,
    :ref:`run_count_per_level <cfg_storage-vinyl_run_count_per_level>`
    and :ref:`bloom_fpr <cfg_storage-vinyl_bloom_fpr>`
    index options can be dynamically changed via :ref:`index:alter() <box_index-alter>`.
    The changes take effect in newly created data files only.
    Issue `2109 <https://github.com/tarantool/tarantool/issues/2109>`_.
  * (Vinyl) improve :ref:`box.info.vinyl() <box_introspection-box_info>` and ``index:info()`` output.
    Issue `1662 <https://github.com/tarantool/tarantool/issues/1662>`_.
  * (Vinyl) introduce :ref:`box.cfg.vinyl_timeout <cfg_basic-vinyl_timeout>` option to control quota throttling.
    Issue `2014 <https://github.com/tarantool/tarantool/issues/2014>`_.
  * Memtx: stable :ref:`index:pairs() <box_index-index_pairs>` iterators for the TREE index.
    TREE iterators are automatically restored to a proper position after index's modifications.
    Issue `1796 <https://github.com/tarantool/tarantool/issues/1796>`_.
  * (Memtx) :ref:`predictable order <box_index-index_pairs>` for non-unique TREE indexes.
    Non-unique TREE indexes preserve the sort order for duplicate entries.
    Issue `2476 <https://github.com/tarantool/tarantool/issues/2476>`_.
  * (Memtx+Vinyl) dynamic configuration of :ref:`max tuple size <cfg_storage-memtx_max_tuple_size>`.
    Now ``box.cfg.memtx_max_tuple_size`` and ``box.cfg.vinyl_max_tuple_size``
    configuration options can be changed on the fly without need to restart the server.
    Issue `2667 <https://github.com/tarantool/tarantool/issues/2667>`_.
  * (Memtx+Vinyl) new implementation.
    Space :ref:`truncation <box_space-truncate>` doesn't cause re-creation of all indexes any more.
    Issue `618 <https://github.com/tarantool/tarantool/issues/618>`_.
  * Extended the :ref:`maximal length <limitations_length>` of all identifiers from 32 to 65k characters.
    Space, user and function names are not limited by 32 characters anymore.
    Issue `944 <https://github.com/tarantool/tarantool/issues/944>`_.
  * :ref:`Heartbeat <cfg_replication-replication_timeout>` messages for replication.
    Replication client now sends the selective acknowledgments for processed
    records and automatically re-establish stalled connections.
    This feature also changes :ref:`box.info.replication[replica_id].vclock <box_info_replication>`.
    to display committed vclock of remote replica.
    Issue `2484 <https://github.com/tarantool/tarantool/issues/2484>`_.
  * Keep track of remote replicas during WAL maintenance.
    Replication master now automatically preserves xlogs needed for remote replicas.
    Issue `748 <https://github.com/tarantool/tarantool/issues/748>`_.
  * Enabled :ref:`box.tuple.new() <box_tuple-new>` to work without ``box.cfg()``.
    Issue `2047 <https://github.com/tarantool/tarantool/issues/2047>`_.
  * :ref:`box.atomic(fun, ...) <box-atomic>` wrapper to execute function in a transaction.
    Issue `818 <https://github.com/tarantool/tarantool/issues/818>`_.
  * :ref:`box.session.type() <box_session-type>` helper to determine session type.
    Issue `2642 <https://github.com/tarantool/tarantool/issues/2642>`_.
  * Hot code :ref:`reload <box_schema-func_reload>` for stored C stored procedures.
    Use ``box.schema.func.reload('modulename.function')``
    to reload dynamic shared libraries on the fly.
    Issue `910 <https://github.com/tarantool/tarantool/issues/910>`_.
  * :ref:`string.hex() <string-hex>` and ``str:hex()`` Lua API.
    Issue `2522 <https://github.com/tarantool/tarantool/issues/2522>`_.
  * Package manager based on LuaRocks.
    Use ``tarantoolctl rocks install MODULENAME`` to install MODULENAME Lua module
    from https://rocks.tarantool.org/.
    Issue `2067 <https://github.com/tarantool/tarantool/issues/2067>`_.
  * Lua 5.1 command line options.
    Tarantool binary now supports '-i', '-e', '-m' and '-l' command line options.
    Issue `1265 <https://github.com/tarantool/tarantool/issues/1265>`_.
  * Experimental GC64 mode for LuaJIT.
    GC64 mode allow to operate the full address space on 64-bit hosts.
    Enable via ``-DLUAJIT_ENABLE_GC64=ON compile-time`` configuration option.
    Issue `2643 <https://github.com/tarantool/tarantool/issues/2643>`_.
  * Syslog logger now support non-blocking mode.
    :ref:`box.cfg{log_nonblock=true} <cfg_logging-log_nonblock>` now also works for syslog logger.
    Issue `2466 <https://github.com/tarantool/tarantool/issues/2466>`_.
  * Added a VERBOSE :ref:`log level <cfg_logging-log_level>` beyond INFO.
    Issue `2467 <https://github.com/tarantool/tarantool/issues/2467>`_.
  * Tarantool now automatically makes snapshots every hour.
    Please set :ref:`box.cfg{checkpoint_interval=0  <cfg_checkpoint_daemon-checkpoint_interval>` to restore pre-1.7.5 behavior.
    Issue `2496 <https://github.com/tarantool/tarantool/issues/2496>`_.
  * Increase precision for percentage ratios provided by :ref:`box.slab.info() <box_slab_info>`.
    Issue `2082 <https://github.com/tarantool/tarantool/issues/2082>`_.
  * Stack traces now contain symbols names on all supported platforms.
    Previous versions of Tarantool didn't display meaningful function names in
    :ref:`fiber.info() <fiber-info>` on non-x86 platforms.
    Issue `2103 <https://github.com/tarantool/tarantool/issues/2103>`_.
  * Allowed to create fiber with custom stack size from C API.
    Issue `2438 <https://github.com/tarantool/tarantool/issues/2438>`_.
  * Added ``ipc_cond`` to public C API.
    Issue `1451 <https://github.com/tarantool/tarantool/issues/1451>`_.

New rocks:

  * :ref:`http.client <http-module>` (built-in) - libcurl-based HTTP client with SSL/TLS support.
    Issue `2083 <https://github.com/tarantool/tarantool/issues/x2083>`_.
  * :ref:`iconv <iconv-converter>` (built-in) - bindings for iconv.
    Issue `2587 <https://github.com/tarantool/tarantool/issues/2587>`_.
  * `authman <https://github.com/mailru/tarantool-authman>`_ - API for
    user registration and login in your site using email and social networks.
  * `document <https://github.com/tarantool/document>`_ - store nested documents in Tarantool.
  * `synchronized <https://github.com/tarantool/synchronized>`_ - critical sections for Lua.

.. _whats_new_174:

**Release 1.7.4**

Release type: release candidate. Release date: 2017-05-12. Release tag: Tag: 1.7.4.

Announcement: https://github.com/tarantool/tarantool/releases/tag/1.7.4
or https://groups.google.com/forum/#!topic/tarantool/3x88ATX9YbY

This is a release candidate in the 1.7 series.
Vinyl Engine, the flagship feature of 1.7.x, is now feature complete.

Incompatible changes

  * ``box.cfg()`` options were changed to add Vinyl support:

    * ``snap_dir`` renamed to ``memtx_dir``
    * ``slab_alloc_arena`` (gigabytes) renamed to ``memtx_memory`` (bytes),
      default value changed from 1Gb to 256MB
    * ``slab_alloc_minimal`` renamed to ``memtx_min_tuple_size``
    * ``slab_alloc_maximal`` renamed to ``memtx_max_tuple_size``
    * ``slab_alloc_factor`` is deprecated, not relevant in 1.7.x
    * ``snapshot_count`` renamed to ``checkpoint_count``
    * ``snapshot_period`` renamed to ``checkpoint_interval``
    * ``logger`` renamed to ``log``
    * ``logger_nonblock`` renamed to ``log_nonblock``
    * ``logger_level`` renamed to ``log_level``
    * ``replication_source`` renamed to ``replication``
    * ``panic_on_snap_error = true`` and ``panic_on_wal_error = true``
      superseded by ``force_recovery = false``

    Until Tarantool 1.8, you can use deprecated parameters for both
    initial and runtime configuration, but such usage will print
    a warning in the server log.
    Issues `1927 <https://github.com/tarantool/tarantool/issues/1927>`_ and
    `2042 <https://github.com/tarantool/tarantool/issues/2042>`_.

  * Hot standy mode is now off by default. Tarantool automatically detects
    another running instance in the same ``wal_dir`` and refuses to start.
    Use ``box.cfg {hot_standby = true}`` to enable the hot standby mode.
    Issue `775 <https://github.com/tarantool/tarantool/issues/775>`_.
  * UPSERT via a secondary key was banned to avoid unclear semantics.
    Issue `2226 <https://github.com/tarantool/tarantool/issues/2226>`_.
  * ``box.info`` and ``box.info.replication`` format was changed to display
    information about upstream and downstream connections
    (Issue `723 <https://github.com/tarantool/tarantool/issues/723>`_):

    * Added ``box.info.replication[instance_id].downstream.vclock`` to display
      the last sent row to remote replica.
    * Added ``box.info.replication[instance_id].id``.
    * Added ``box.info.replication[instance_id].lsn``.
    * Moved ``box.info.replication[instance_id].{vclock,status,error}`` to
      ``box.info.replication[instance_id].upstream.{vclock,status,error}``.
    * All registered replicas from ``box.space._cluster`` are included to
      ``box.info.replication`` output.
    * ``box.info.server.id`` renamed ``box.info.id``
    * ``box.info.server.lsn`` renamed ``box.info.lsn``
    * ``box.info.server.uuid`` renamed ``box.info.uuid``
    * ``box.info.cluster.signature`` renamed to ``box.info.signature``
    * ``box.info.id`` and ``box.info.lsn`` now return `nil` instead of `-1`
      during initial cluster bootstrap.

  * ``net.box``: added per-request options to all requests:

    * ``conn.call(func_name, arg1, arg2,...)`` changed to
      ``conn.call(func_name, {arg1, arg2, ...}, opts)``
    * ``conn.eval(func_name, arg1, arg2,...)`` changed to
      ``conn.eval(func_name, {arg1, arg2, ...}, opts)``

  * All requests now support ``timeout = <seconds>``, ``buffer = <ibuf>`` options.
  * Added ``connect_timeout`` option to ``netbox.connect()``.
  * ``netbox:timeout()`` and ``conn:timeout()`` are now deprecated.
    Use ``netbox.connect(host, port, { call_16 = true })`` for
    1.6.x-compatible behavior.
    Issue `2195 <https://github.com/tarantool/tarantool/issues/2195>`_.
  * systemd configuration changed to support ``Type=Notify`` / ``sd_notify()``.
    Now ``systemctl start tarantool@INSTANCE`` will wait until Tarantool
    has started and recovered from xlogs. The recovery status is reported to
    ``systemctl status tarantool@INSTANCE``.
    Issue `1923 <https://github.com/tarantool/tarantool/issues/1923>`_.
  * ``log`` module now doesn't prefix all messages with the full path to
    tarantool binary when used without ``box.cfg()``.
    Issue `1876 <https://github.com/tarantool/tarantool/issues/1876>`_.
  * ``require('log').logger_pid()`` was renamed to ``require('log').pid()``.
    Issue `2917 <https://github.com/tarantool/tarantool/issues/2917>`_.
  * Removed Lua 5.0 compatible defines and functions
    (Issue `2396 <https://github.com/tarantool/tarantool/issues/2396>`_):

    * ``luaL_reg`` removed in favor of ``luaL_Reg``
    * ``luaL_getn(L, i)`` removed in favor of ``lua_objlen(L, i)``
    * ``luaL_setn(L, i, j)`` removed (was no-op)
    * ``lua_ref(L, lock)`` removed in favor of ``luaL_ref(L, lock)``
    * ``lua_getref(L,ref)`` removed in favor of ``lua_rawgeti(L, LUA_REGISTRYINDEX, (ref))``
    * ``lua_unref(L, ref)`` removed in favor of ``luaL_unref(L, ref)``
    * ``math.mod()`` removed in favor of ``math.fmod()``
    * ``string.gfind()`` removed in favor of ``string.gmatch()``

Functionality added or changed:

  * (Vinyl) multi-level compaction.
    The compaction scheduler now groups runs of the same range into levels to
    reduce the write amplification during compaction. This design allows Vinyl
    to support 1:100+ ram:disk use-cases.
    Issue `1821 <https://github.com/tarantool/tarantool/issues/1821>`_.
  * (Vinyl) bloom filters for sorted runs.
    Bloom filter is a probabilistic data structure which can be used to test
    whether a requested key is present in a run file without reading the actual
    file from the disk. Bloom filter may have false-positive matches but
    false-negative matches are impossible. This feature reduces the number
    of seeks needed for random lookups and speeds up REPLACE/DELETE with
    enabled secondary keys.
    Issue `1919 <https://github.com/tarantool/tarantool/issues/1919>`_.
  * (Vinyl) key-level cache for point lookups and range queries.
    Vinyl storage engine caches selected keys and key ranges instead of
    entire disk pages like in traditional databases. This approach is more
    efficient because the cache is not polluted with raw disk data.
    Issue `1692 <https://github.com/tarantool/tarantool/issues/1692>`_.
  * (Vinyl) implemented the common memory level for in-memory indexes.
    Now all in-memory indexes of a space store pointers to the same tuples
    instead of cached secondary key index data. This feature significantly
    reduces the memory footprint in case of secondary keys.
    Issue `1908 <https://github.com/tarantool/tarantool/issues/1908>`_.
  * (Vinyl) new implementation of initial state transfer of JOIN command in
    replication protocol. New replication protocol fixes problems with
    consistency and secondary keys. We implemented a special kind of low-cost
    database-wide read-view to avoid dirty reads in JOIN procedure. This trick
    wasn't not possible in traditional B-Tree based databases.
    Issue `2001 <https://github.com/tarantool/tarantool/issues/2001>`_.
  * (Vinyl) index-wide mems/runs.
    Removed ranges from in-memory and and the stop layer of LSM tree on disk.
    Issue `2209 <https://github.com/tarantool/tarantool/issues/2209>`_.
  * (Vinyl) coalesce small ranges.
    Before dumping or compacting a range, consider coalescing it with its
    neighbors.
    Issue `1735 <https://github.com/tarantool/tarantool/issues/1735>`_.
  * (Vinyl) implemented transnational journal for metadata.
    Now information about all Vinyl files is logged in a special ``.vylog`` file.
    Issue `1967 <https://github.com/tarantool/tarantool/issues/1967>`_.
  * (Vinyl) implemented consistent secondary keys.
    Issue `2410 <https://github.com/tarantool/tarantool/issues/2410>`_.
  * (Memtx+Vinyl) implemented low-level Lua API to create consistent backups.
    of Memtx + Vinyl data. The new feature provides ``box.backup.start()/stop()``
    functions to create backups of all spaces.
    :ref:`box.backup.start() <reference_lua-box_backup-backup_start>` pauses the
    Tarantool garbage collector and returns the list of files to copy. These files then
    can be copied be any third-party tool, like cp, ln, tar, rsync, etc.
    ``box.backup.stop()`` lets the garbage collector continue.
    Created backups can be restored instantly by copying into a new directory
    and starting a new Tarantool instance. No special preparation, conversion
    or unpacking is needed.
    Issue `1916 <https://github.com/tarantool/tarantool/issues/1916>`_.
  * (Vinyl) added statistics for background workers to ``box.info.vinyl()``.
    Issue `2005 <https://github.com/tarantool/tarantool/issues/2005>`_.
  * (Memtx+Vinyl) reduced the memory footprint for indexes which keys are
    sequential and start from the first field. This optimization was necessary
    for secondary keys in Vinyl, but we optimized Memtx as well.
    Issue `2046 <https://github.com/tarantool/tarantool/issues/2046>`_.
  * LuaJIT was rebased on the latest 2.1.0b3 with out patches
    (Issue `2396 <https://github.com/tarantool/tarantool/issues/2396>`_):

    * Added JIT compiler backend for ARM64
    * Added JIT compiler backend and interpreter for MIPS64
    * Added some more Lua 5.2 and Lua 5.3 extensions
    * Fixed several bugs
    * Removed Lua 5.0 legacy (see incompatible changes above).

  * Enabled a new smart string hashing algorithm in LuaJIT to avoid significant
    slowdown when a lot of collisions are generated.
    Contributed by Yury Sokolov (@funny-falcon) and Nick Zavaritsky (@mejedi).
    See https://github.com/tarantool/luajit/pull/2.
  * ``box.snapshot()`` now updates mtime of a snapshot file if there were no
    changes to the database since the last snapshot.
    Issue `2045 <https://github.com/tarantool/tarantl/issues/2045>`_.
  * Implemented ``space:bsize()`` to return the memory size utilized by all
    tuples of the space.
    Contributed by Roman Tokarev (@rtokarev).
    Issue `2043 <https://github.com/tarantool/tarantool/issues/2043>`_.
  * Exported new Lua/C functions to public API:

    * ``luaT_pushtuple``, ``luaT_istuple``
      (issue `1878 <https://github.com/tarantool/tarantool/issues/1878>`_)
    * ``luaT_error``, ``luaT_call``, ``luaT_cpcall``
      (issue `2291 <https://github.com/tarantool/tarantool/issues/2291>`_)
    * ``luaT_state``
      (issue `2416 <https://github.com/tarantool/tarantool/issues/2416>`_)

  * Exported new Box/C functions to public API: ``box_key_def``, ``box_tuple_format``,
    ``tuple_compare()``, ``tuple_compare_with_key()``.
    Issue `2225 <https://github.com/tarantool/tarantool/issues/2225>`_.
  * xlogs now can be rotated based on size (``wal_max_size``) as well as
    the number of written rows (``rows_per_wal``).
    Issue `173 <https://github.com/tarantool/tarantool/issues/173>`_.
  * Added ``string.split()``, ``string.startswith()``, ``string.endswith()``,
    ``string.ljust()``, ``string.rjust()``, ``string.center()`` API.
    Issues `2211 <https://github.com/tarantool/tarantool/issues/2211>`_,
    `2214 <https://github.com/tarantool/tarantool/issues/2214>`_,
    `2415 <https://github.com/tarantool/tarantool/issues/2415>`_.
  * Added ``table.copy()`` and ``table.deepcopy()`` functions.
    Issue `2212 <https://github.com/tarantool/tarantool/issues/2412>`_.
  * Added ``pwd`` module to work with UNIX users and groups.
    Issue `2213 <https://github.com/tarantool/tarantool/issues/2213>`_.
  * Removed noisy "client unix/: connected" messages from logs. Use
    ``box.session.on_connect()``/``on_disconnect()`` triggers instead.
    Issue `1938 <https://github.com/tarantool/t`arantool/issues/1938>`_.

    ``box.session.on_connect()``/``on_disconnect()``/``on_auth()`` triggers
    now also fired for admin console connections.

  * tarantoolctl: ``eval``, ``enter``, ``connect`` commands now support UNIX pipes.
    Issue `672 <https://github.com/tarantool/tarantool/issues/672>`_.
  * tarantoolctl: improved error messages and added a new man page.
    Issue `1488 <https://github.com/tarantool/tarantool/issues/1488>`_.
  * tarantoolctl: added filter by ``replica_id`` to ``cat`` and ``play`` commands.
    Issue `2301 <https://github.com/tarantool/tarantool/issues/2301>`_.
  * tarantoolctl: ``start``, ``stop`` and ``restart`` commands now redirect to
    ``systemctl start/stop/restart`` when systemd is enabled.
    Issue `2254 <https://github.com/tarantool/tarantool/issues/2254>`_.
  * net.box: added ``buffer = <buffer>`` per-request option to store raw
    MessagePack responses into a C buffer.
    Issue `2195 <https://github.com/tarantool/tarantool/issues/2195>`_.
  * net.box: added ``connect_timeout`` option.
    Issue `2054 <https://github.com/tarantool/tarantool/issues/2054>`_.
  * net.box: added ``on_schema_reload()`` hook.
    Issue `2021 <https://github.com/tarantool/tarantool/issues/2021>`_.
  * net.box: exposed ``conn.schema_version`` and ``space.connection`` to API.
    Issue `2412 <https://github.com/tarantool/tarantool/issues/2412>`_.
  * log: ``debug()``/``info()``/``warn()``/``error()`` now doesn't fail on
    formatting errors.
    Issue `889 <https://github.com/tarantool/tarantool/issues/889>`_.
  * crypto: added HMAC support.
    Contributed by Andrey Kulikov (@amdei).
    Issue `725 <https://github.com/tarantool/tarantool/issues/725>`_.

.. _whats_new_173:

**Release 1.7.3**

Release type: beta. Release date: 2016-12-24. Release tag: Tag: 1.7.3-0-gf0c92aa.

Announcement: https://github.com/tarantool/tarantool/releases/tag/1.7.3

This is the second beta release in the 1.7 series.

Incompatible changes:

  * Broken ``coredump()`` Lua function was removed.
    Use ``gdb -batch -ex "generate-core-file" -p $PID`` instead.
    Issue `1886 <https://github.com/tarantool/tarantool/issues/1886>`_.
  * Vinyl disk layout was changed since 1.7.2 to add ZStandard compression and improve
    the performance of secondary keys.
    Use the replication mechanism to upgrade from 1.7.2 beta.
    Issue `1656 <https://github.com/tarantool/tarantool/issues/1656>`_.

Functionality added or changed:

  * Substantial progress on stabilizing the Vinyl storage engine:

    * Fix most known crashes and bugs with bad results.
    * Switch to use XLOG/SNAP format for all data files.
    * Enable ZStandard compression for all data files.
    * Squash UPSERT operations on the fly and merge hot keys using a
      background fiber.
    * Significantly improve the performance of index:pairs() and index:count().
    * Remove unnecessary conflicts from transactions.
    * In-memory level was mostly replaced by memtx data structures.
    * Specialized allocators are used in most places.

  * We're still actively working on Vinyl and plan to add multi-level
    compaction and improve the performance of secondary keys in 1.7.4.
    This implies a data format change.
  * Support for DML requests for space:on_replace() triggers.
    Issue `587 <https://github.com/tarantool/tarantool/issues/587>`_.
  * UPSERT can be used with the empty list of operations.
    Issue `1854 <https://github.com/tarantool/tarantool/issues/1854>`_.
  * Lua functions to manipulate environment variables.
    Issue `1718 <https://github.com/tarantool/tarantool/issues/1718>`_.
  * Lua library to read Tarantool snapshots and xlogs.
    Issue `1782 <https://github.com/tarantool/tarantool/issues/1782>`_.
  * New ``play`` and ``cat`` commands in ``tarantoolctl``.
    Issue `1861 <https://github.com/tarantool/tarantool/issues/1861>`_.
  * Improve support for the large number of active network clients.
    Issue#5#1892.
  * Support for ``space:pairs(key, iterator-type)`` syntax.
    Issue `1875 <https://github.com/tarantool/tarantool/issues/1875>`_.
  * Automatic cluster bootstrap now also works without authorization.
    Issue `1589 <https://github.com/tarantool/tarantool/issues/1589>`_.
  * Replication retries to connect to master indefinitely.
    Issue `1511 <https://github.com/tarantool/tarantool/issues/1511>`_.
  * Temporary spaces now work with ``box.cfg { read_only = true }``.
    Issue `1378 <https://github.com/tarantool/tarantool/issues/1378>`_.
  * The maximum length of space names increased to 64 bytes (was 32).
    Issue `2008 <https://github.com/tarantool/tarantool/issues/2008>`_.

.. _whats_new_172:

**Release 1.7.2**

Release type: beta. Release date: 2016-09-29. Release tag: Tag: `1.7.2-1-g92ed6c4`.

Announcement: https://groups.google.com/forum/#!topic/tarantool-ru/qUYUesEhRQg

This is a release in the 1.7 series.

Incompatible changes:

  * A new binary protocol command for CALL, which no more restricts a function
    to returning an array of tuples and allows returning an arbitrary MsgPack/JSON
    result, including scalars, nil and void (nothing).
    The old CALL is left intact for backward compatibility. It will be removed
    in the next major release. All programming language drivers will be gradually
    changed to use the new CALL.
    Issue `1296 <https://github.com/tarantool/tarantool/issues/1296>`_.

Functionality added or changed:

  * Vinyl storage engine finally reached the beta stage.
    This release fixes more than 90 bugs in Vinyl, in particular, removing
    unpredictable latency spikes, all known crashes and bad/lost result bugs.

    * new cooperative multitasking based architecture to eliminate latency spikes,
    * support for non-sequential multi-part keys,
    * support for secondary keys,
    * support for ``auto_increment()``,
    * number, integer, scalar field types in indexes,
    * INSERT, REPLACE and UPDATE return new tuple, like in memtx.

  * We're still actively working on Vinyl and plan to add ``zstd`` compression
    and a new memory allocator for Vinyl in-memory index in 1.7.3.
    This implies a data format change which we plan to implement before 1.7
    becomes generally available.
  * Tab-based autocompletion in the interactive console,
    ``require('console').connect()``, ``tarantoolctl enter`` and
    ``tarantoolctl connect`` commands.
    Issues `86 <https://github.com/tarantool/tarantool/issues/86>`_ and
    `1790 <https://github.com/tarantool/tarantool/issues/1790>`_.
    Use the TAB key to auto complete the names of Lua variables, functions
    and meta-methods.
  * A new implementation of ``net.box`` improving performance and solving problems
    when the Lua garbage collector handles dead connections.
    Issues `799 <https://github.com/tarantool/tarantool/issues/799>`_,
    `800 <https://github.com/tarantool/tarantool/issues/800>`_,
    `1138 <https://github.com/tarantool/tarantool/issues/1138>`_ and
    `1750 <https://github.com/tarantool/tarantool/issues/1750>`_.
  * memtx snapshots and xlog files are now compressed on the fly using the fast
    `ZStandard <https://github.com/facebook/zstd>`_ compression algorithm.
    Compression options are configured automatically to get an optimal trade-off
    between CPU utilization and disk throughput.
  * ``fiber.cond()`` - a new synchronization mechanism for cooperative multitasking.
    Issue `1731 <https://github.com/tarantool/tarantool/issues/1731>`_.
  * Tarantool can now be installed using universal Snappy packages
    (http://snapcraft.io/) with ``snap install tarantool --channel=beta``.

New rocks and packages:

  * `curl <https://github.com/tarantool/tarantool-curl>`_ - non-blocking bindings for libcurl
  * `prometheus <https://github.com/tarantool/prometheus>`_ - Prometheus metric collector for Tarantool
  * `gis <https://github.com/tarantool/gis>`_ - a full-featured geospatial extension for Tarantool
  * `mqtt <https://github.com/tarantool/mqtt>`_ - an MQTT protocol client for Tarantool
  * `luaossl <https://github.com/tarantool/luaossl>`_ - the most comprehensive OpenSSL module in the Lua universe

Deprecated, removed features and minor incompatibilities:

  * ``num`` and ``str`` fields type names are deprecated, use
    ``unsigned`` and ``string`` instead.
    Issue `1534 <https://github.com/tarantool/tarantool/issues/1534>`_.
  * ``space:inc()`` and ``space:dec()`` were removed (deprecated in 1.6.x)
    Issue `1289 <https://github.com/tarantool/tarantool/issues/1289>`_.
  * ``fiber:cancel()`` is now asynchronous and doesn't wait for the fiber to end.
    Issue `1732 <https://github.com/tarantool/tarantool/issues/1732>`_.
  * Implicit error-prone ``tostring()`` was removed from ``digest`` API.
    Issue `1591 <https://github.com/tarantool/tarantool/issues/1591>`_.
  * Support for SHA-0 (``digest.sha()``) was removed due to OpenSSL upgrade.
  * ``net.box`` now uses one-based indexes for ``space.name.index[x].parts``.
    Issue `1729 <https://github.com/tarantool/tarantool/issues/1729>`_.
  * Tarantool binary now dynamically links with ``libssl.so`` during compile time
    instead of loading it at the run time.
  * Debian and Ubuntu packages switched to use native ``systemd`` configuration
    alongside with old-fashioned ``sysvinit`` scripts.

    ``systemd`` provides its own facilities for multi-instance management.
    To upgrade, perform the following steps:

    1. Install new 1.7.2 packages.
    2. Ensure that ``INSTANCENAME.lua`` file is present in ``/etc/tarantool/instances.enabled``.
    3. Stop INSTANCENAME using ``tarantoolctl stop INSTANCENAME``.
    4. Start INSTANCENAME using ``systemctl start tarantool@INSTANCENAME``.
    5. Enable INSTANCENAME during system boot using ``systemctl enable trantool@INTANCENAME``.
    6. Say ``systemctl disable tarantool; update-rc.d tarantool remove`` to disable
       sysvinit-compatible wrappers.

    Refer to issue `1291 <https://github.com/tarantool/tarantool/issues/1291>`_
    comment and :ref:`the administration chapter <admin>` for additional information.

  * Debian and Ubuntu packages start a ready-to-use ``example.lua`` instance on
    a clean installation of the package.
    The default instance grants universe permissions for ``guest`` user and listens
    on "localhost:3313".
  * Fedora 22 packages were deprecated (EOL).

.. _whats_new_171:

**Release 1.7.1**

Release type: alpha. Release date: 2016-07-11.

Announcement: https://groups.google.com/forum/#!topic/tarantool/KGYj3VKJKb8

This is the first alpha in the 1.7 series.
The main feature of this release is a new storage engine, called "vinyl".
Vinyl is a write optimized storage engine, allowing the amount
of data stored exceed the amount of available RAM 10-100x times.
Vinyl is a continuation of the Sophia engine from 1.6, and
effectively a fork and a distant relative of Dmitry Simonenko's
Sophia. Sophia is superseded and replaced by Vinyl.
Internally it is organized as a log structured merge tree.
However, it takes a serious effort to improve on the traditional
deficiencies of log structured storage, such as poor read performance
and unpredictable write latency. A single index
is range partitioned among many LSM data structures, each having its
own in-memory buffers of adjustable size. Range partitioning allows
merges of LSM levels to be more granular, as well as to prioritize
hot ranges over cold ones in access to resources, such as RAM and
I/O. The merge scheduler is designed to minimize write latency
while ensuring read performance stays within acceptable limits.
Vinyl today only supports a primary key index. The index
can consist of up to 256 parts, like in MemTX, up from 8 in
Sophia. Partial key reads are supported.
Support of non-sequential multi part keys, as well as secondary keys
is on the short term todo.
Our intent is to remove all limitations currently present in
Vinyl, making it a first class citizen in Tarantool.

Functionality added or changed:

  * The disk-based storage engine, which was called ``sophia`` or ``phia``
    in earlier versions, is superseded by the ``vinyl`` storage engine.
  * There are new types for indexed fields.
  * The LuaJIT version is updated.
  * Automatic replica set bootstrap (for easier configuration of a new replica set)
    is supported.
  * The ``space_object:inc()`` function is removed.
  * The ``space_object:dec()`` function is removed.
  * The ``space_object:bsize()`` function is added.
  * The ``box.coredump()`` function is removed, for an alternative see
    :ref:`Core dumps <admin-core_dumps>`.
  * The ``hot_standby`` configuration option is added.
  * Configuration parameters revised or renamed:

    * ``slab_alloc_arena`` (in gigabytes) to ``memtx_memory`` (in bytes),
    * ``slab_alloc_minimal`` to ``memtx_min_tuple_size``,
    * ``slab_alloc_maximal`` to ``memtx_max_tuple_size``,
    * ``replication_source`` to ``replication``,
    * ``snap_dir`` to ``memtx_dir``,
    * ``logger`` to ``log``,
    * ``logger_nonblock`` to ``log_nonblock``,
    * ``snapshot_count`` to ``checkpoint_count``,
    * ``snapshot_period`` to ``checkpoint_interval``,
    * ``panic_on_wal_error`` and ``panic_on_snap_error`` united under ``force_recovery``.
  * Until Tarantool 1.8, you can use :ref:`deprecated parameters <cfg_deprecated>`
    for both initial and runtime configuration, but Tarantool will display a warning.
    Also, you can specify both deprecated and up-to-date parameters, provided
    that their values are harmonized. If not, Tarantool will display an error.
  * Automatic replication cluster bootstrap; it's now much
    easier to configure a new replication cluster.
  * New indexable data types: INTEGER and SCALAR.
  * Code refactoring and performance improvements.
  * Updated LuaJIT to 2.1-beta116.
