Tarantool 2.5.3
===============

Announcement: https://github.com/tarantool/tarantool/releases/tag/2.5.3
Date: 2020-12-30 Tag: 2.5.3-0-gf93e480

Overview
--------

2.5.3 is the second
`stable <https://www.tarantool.io/en/doc/latest/dev_guide/release_management/#release-policy>`_
version of the 2.5 release series. It introduces one improvement and
resolves 19 bugs since 2.5.2.

The “stable” label means that we have all planned features implemented
and we see no high-impact issues. However, if you encounter an issue,
feel free to `report
it <https://github.com/tarantool/tarantool/issues>`_ on GitHub.

Compatibility
-------------

Tarantool 2.x is backward compatible with Tarantool 1.10.x in the binary
data layout, client-server protocol, and replication protocol.

Please
`upgrade <https://www.tarantool.io/en/doc/latest/book/admin/upgrades/>`_
using the ``box.schema.upgrade()`` procedure to unlock all the new
features of the 2.x series.

Functionality added or changed
------------------------------

Replication
~~~~~~~~~~~

-   It is now possible to specify synchro quorum as a function of a
    number ``N`` of registered replicas instead of a ``const`` number,
    for example:

    ..  code:: lua

        box.cfg{replication_synchro_quorum = "N/2 + 1"}

    Only the non-anonymous bootstrapped replicas amount to ``N``. The
    expression should respect synchro guarantees: at least 50% of the
    cluster size + 1. The expression value is re-evaluated automatically
    inside of Tarantool when new replicas appear or old ones are removed
    (:tarantool-issue:`5446`).

Lua
~~~

-   Show JSON tokens themselves instead of token names ``T_*`` in the
    JSON decoder error messages (:tarantool-issue:`4339`).
-   Show a decoding context in the JSON decoder error messages (:tarantool-issue:`4339`).

Build
~~~~~

-   Deploy packages for Fedora 32 (:tarantool-issue:`4966`).
-   Deploy packages for Debian Bullseye (:tarantool-issue:`5638`).

Bugs fixed
----------

Core
~~~~

-   ``fiber.cond:wait()`` now correctly throws an error when a fiber is
    cancelled, instead of ignoring the timeout and returning without any
    signs of an error (:tarantool-issue:`5013`).
-   Fixed a memory corruption issue, which was most visible on macOS, but
    could affect any system (:tarantool-issue:`5312`).
-   A dynamic module now gets correctly unloaded from memory in case of
    an attempt to load a non-existing function from it (:tarantool-issue:`5475`).
-   A ``swim:quit()`` call now can’t result in a crash (:tarantool-issue:`4570`).
-   Snapshot recovery with no JSONPath or multikey indices involved now
    has normal performance (:tarantool-issue:`4774`).


Replication
~~~~~~~~~~~

-   A false-positive “too long WAL write” message no longer appears for
    synchronous transactions (:tarantool-issue:`5139`).
-   A ``box.ctl.wait_rw()`` call could return when the instance was not
    in fact writable due to having foreign synchronous transactions. As a
    result, there was no proper way to wait until the automatically
    elected leader would become writable. Now ``box.ctl.wait_rw()`` works
    correctly (:tarantool-issue:`5440`).

SQL
~~~

-   Data changes in read-only mode are now forbidden (:tarantool-issue:`5231`).
-   Query execution now does not occasionally raise an unrelated error
    “Space ‘0’ does not exist” (:tarantool-issue:`5592`).
-   Coinciding names of temporary files (used to store data during
    execution) having two instances running on the same machine no longer
    cause a segfault (:tarantool-issue:`5537`).
-   The return value of ``ifnull()`` built-in function is now of a
    correct type.
-   SQL calling Lua functions with box calls inside can no longer result
    in a memory corruption (:tarantool-issue:`5427`).

LuaJIT
~~~~~~

-   Dispatching ``__call`` metamethod no longer causes address clashing
    (:tarantool-issue:`4518`, :tarantool-issue:`4649`).
-   Fixed a false positive panic when yielding in debug hook (:tarantool-issue:`5649`).


Lua
~~~

-   An attempt to use a ``net.box`` connection which is not established
    yet now results in a correctly reported error (:tarantool-issue:`4787`).
-   Fixed a ``NULL`` dereference on error paths in merger which usually
    happened on a ‘wrong’ ``key_def`` (:tarantool-issue:`5450`).
-   Calling ``key_def.compare_with_key()`` with an invalid key no longer
    causes a segfault (:tarantool-issue:`5307`).
-   Fixed a hang which occured when ``tarantool`` ran a user script with
    the ``-e`` option and this script exited with an error (like with
    ``tarantool -e 'assert(false)'``) (:tarantool-issue:`4983`).

Memtx
~~~~~

-   The ``on_schema_init`` triggers now can’t cause duplicates in primary
    key (:tarantool-issue:`5304`).
