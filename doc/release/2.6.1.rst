Tarantool 2.6.1
===============

Announcement: https://github.com/tarantool/tarantool/releases/tag/2.6.1
Date: 2020-10-22 Tag: 2.6.1-0-gcfe0d1a

Overview
--------

2.6.1 is the beta version of the 2.6 release series.

This release introduces roughly 17 features and resolves 22 bugs since
the 2.5.1 version. There may be bugs in less common areas. If you find
any, feel free to report an issue at
`GitHub <https://github.com/tarantool/tarantool/issues>`_.

Notable changes are:

*   Transactional manager for the memtx engine that
    allows yielding in transactions. It also guarantees the data consistency
    for synchronous replication, eliminating dirty reads for unconfirmed
    transactions.

    Read more:

    *   :ref:`atomic-transactional-manager`
    *   :ref:`use_mvcc_engine configuration parameter <cfg_basic-memtx_use_mvcc_engine>`

*   Raft-based automated failover mechanism for a
    single-leader replica set. Replica set can be configured to provide
    automated leader election and failover. Accompanied with synchronous
    replication it brings data safety and service reliability on a new
    level.

    Read more:

    *   :doc:`/book/replication/repl_leader_elect`
    *   :ref:`election_mode configuration parameter <cfg_replication-election_mode>`
    *   :ref:`election_timeout configuration parameter <cfg_replication-election_timeout>`
    *   :doc:`/reference/reference_lua/box_info/election`

Compatibility
-------------

Tarantool 2.x is backward compatible with Tarantool 1.10.x in the binary
data layout, client-server protocol, and replication protocol.

Please
`upgrade <https://www.tarantool.io/en/doc/latest/book/admin/upgrades/>`_
using the ``box.schema.upgrade()`` procedure to unlock all the new
features of the 2.x series.

There are changes labeled with **[Breaking change]**. It means that the
old behavior was considered error-prone and therefore changed to protect
users from unintended mistakes. However, there is a little probability
that someone can lean on the old behavior, and this label is to bring
attention to the things that have been changed.

Functionality added or changed
------------------------------

Core
~~~~

-   Introduce a function to check that the specified value is of UUID
    type (:tarantool-issue:`5171`). Read more: :ref:`uuid.is_uuid() <uuid-is_uuid>`.
-   A new function ``space:alter(options)`` to change some space settings
    without recreation nor touching ``_space`` space.
    Read more: :doc:`/reference/reference_lua/box_space/alter`.
-   Composite types extraction is now supported in key_def (:tarantool-issue:`4538`).
-   Make memtx tuple hints an optional feature (:tarantool-issue:`4927`).
    Read more: :ref:`Options for space_object:create_index() <box_space-create_index-options>`.

Vinyl
~~~~~

Rework upsert operation in vinyl so that now (:tarantool-issue:`5107`):

-   if upsert can’t be applied it is skipped and corresponding error
    is logged (:tarantool-issue:`1622`);
-   upserts now follow associative property: the result of several
    upserts does not depend on the order of their application
    (:tarantool-issue:`5105`);
-   upserts referring to -1 fieldno are handled correctly now
    (:tarantool-issue:`5087`).
-   there’s no more upserts squash procedure: upserts referring to the
    same field with arithmetic operations are not merged into one
    operation since resulting upsert might not be applied - as a
    result both upserts would be ignored (meanwhile only one should
    be).

LuaJIT
~~~~~~

-   **[Breaking change]** Introduce LuaJIT platform metrics (:tarantool-issue:`5187`).
    Read more: :ref:`LuaJIT metrics <metrics-luajit>`.

    -   This change introduces new builtin library “misc” that may
        conflict with user’s modules.

SQL
~~~

-   SQL views are not alterable anymore. Beforehand it led to the
    undefined behaviour.
-   Introduce “automatic index” optimization. Ephemeral space with single
    index can be created to store and speed-up intermediate results
    access during query execution (:tarantool-issue:`4933`).

Replication
~~~~~~~~~~~

-   Automated leader election based on Raft algorithm (:tarantool-issue:`1146`).
    Read more: :doc:`/book/replication/repl_leader_elect`.
-   When election is enabled, a newly elected leader will automatically
    finish all the synchronous transactions, created by the old leader
    (:tarantool-issue:`5339`).

Build
~~~~~

-   Tarantool static build is enhanced in scope of :tarantool-issue:`5095`. It can be
    built on the host machine with no Docker at all. As a result it can
    be built using the OSX environment.

Misc
~~~~

-   Add all exported symbols from bundled libcurl library (:tarantool-issue:`5223`)
-   Add ``fselect`` method that is similar to select, but formats results
    like mysql would (:tarantool-issue:`5161`).

Module API
~~~~~~~~~~

-   Exposed the box region, key_def and several other functions in order
    to implement external tuple.keydef and tuple.merger modules on top of
    them (:tarantool-issue:`5273`, :tarantool-issue:`5384`).

Bugs fixed
----------


Core
~~~~

-   Fixed a bug related to ignoring internal getaddrinfo errors on macOS
    in logger (:tarantool-issue:`4138`).
-   Fixed a crash when JSON tuple field access was used to get a multikey
    indexed field, and when a JSON contained [*] in the beginning
    (:tarantool-issue:`5224`).
-   Fixed msgpack extension types decoding error message (:tarantool-issue:`5016`).
-   Dropped restrictions on nullable multikey index root. They were
    introduced due to inaccuracy in multikey index realization. It is now
    fixed. Also all fields are now nullable by default as it was before
    2.2.1 (:tarantool-issue:`5192`).
-   Fixed fibers switch-over to prevent JIT machinery misbehavior. Trace
    recording is aborted when fiber yields the execution. The yield
    occurring while the compiled code is being run (it’s likely a
    function with a yield underneath called via LuaJIT FFI) leads to the
    platform panic (:tarantool-issue:`1700`, :tarantool-issue:`4491`).
-   Fixed fibers switch-over to prevent implicit GC disabling. The yield
    occurring while user-defined \__gc metamethod is running leads to the
    platform panic.


Replication
~~~~~~~~~~~

-   Fixed a bug when a rolled back synchronous transaction could become
    committed after restart (:tarantool-issue:`5140`).
-   Fixed crash in synchronous replication when master’s local WAL write
    fails (:tarantool-issue:`5146`).
-   Instance will terminate if a synchronous transaction confirmation or
    rollback fail. Before it was undefined behavior (:tarantool-issue:`5159`).
-   Snapshot could contain changes from a rolled back synchronous
    transaction (:tarantool-issue:`5167`).
-   Fixed a crash when synchronous transaction’s rollback and confirm
    could be written simultaneously for the same LSN (:tarantool-issue:`5185`).
-   Fixed a crash when replica cleared synchronous transaction queue,
    while it was not empty on master (:tarantool-issue:`5195`).
-   During recovery of synchronous changes from snapshot the instance
    could crash (:tarantool-issue:`5288`).
-   Having synchronous rows in the snapshot could make the instance hang
    on recovery (:tarantool-issue:`5298`).
-   Anonymous replica could be registered and could prevent WAL files
    removal (:tarantool-issue:`5287`).
-   XlogGapError is not a critical error anymore. It means,
    box.info.replication will show upstream status as ‘loading’ if the
    error was found. The upstream will be restarted until the error is
    resolved automatically with a help of another instance, or until the
    replica is removed from box.cfg.replication (:tarantool-issue:`5287`).


LuaJIT
~~~~~~

-   Fixed the error occurring on loading luajit-gdb.py with Python 2
    (:tarantool-issue:`4828`).

Lua
~~~

-   Fixed a bug related to ignoring internal getaddrinfo errors. Now they
    can be thrown out by Lua socket functions (:tarantool-issue:`4138`).
-   Fixed: import of table.clear() method (:tarantool-issue:`5210`). Affected versions:
    all 2.6.\* until 2.6.0-53-g09aa813 (exclusive).
-   Fixed unhandled Lua error that may lead to memory leaks and
    inconsistencies in ``<space_object>:frommap()``,
    ``<key_def_object>:compare()``, ``<merge_source>:select()``
    (:tarantool-issue:`5382`).

Memtx
~~~~~

-   Transactional manager for memtx engine (:tarantool-issue:`4897`).

    Read more:

    *   :ref:`atomic-transactional-manager`
    *   :ref:`use_mvcc_engine configuration parameter <cfg_basic-memtx_use_mvcc_engine>`


Module API
~~~~~~~~~~

-   Get rid of typedef redefinitions for compatibility with C99
    (:tarantool-issue:`5313`).
