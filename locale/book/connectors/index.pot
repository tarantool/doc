
msgid "Connectors"
msgstr ""

msgid "This chapter documents APIs for various programming languages."
msgstr ""

msgid "Protocol"
msgstr ""

msgid "Tarantool's binary protocol was designed with a focus on asynchronous I/O and easy integration with proxies. Each client request starts with a variable-length binary header, containing request id, request type, instance id, log sequence number, and so on."
msgstr ""

msgid "The mandatory length, present in request header simplifies client or proxy I/O. A response to a request is sent to the client as soon as it is ready. It always carries in its header the same type and id as in the request. The id makes it possible to match a request to a response, even if the latter arrived out of order."
msgstr ""

msgid "Unless implementing a client driver, you needn't concern yourself with the complications of the binary protocol. Language-specific drivers provide a friendly way to store domain language data structures in Tarantool. A complete description of the binary protocol is maintained in annotated Backus-Naur form in the source tree. For detailed examples and diagrams of all binary-protocol requests and responses, see :ref:`Tarantool's binary protocol <box_protocol-iproto_protocol>`."
msgstr ""

msgid "Packet example"
msgstr ""

msgid "The Tarantool API exists so that a client program can send a request packet to a server instance, and receive a response. Here is an example of a what the client would send for ``box.space[513]:insert{'A', 'BB'}``. The BNF description of the components is on the page about :ref:`Tarantool's binary protocol <box_protocol-iproto_protocol>`."
msgstr ""

msgid "Component"
msgstr ""

msgid "Byte #0"
msgstr ""

msgid "Byte #1"
msgstr ""

msgid "Byte #2"
msgstr ""

msgid "Byte #3"
msgstr ""

msgid "code for insert"
msgstr ""

msgid "02"
msgstr ""

msgid "rest of header"
msgstr ""

msgid "..."
msgstr ""

msgid "2-digit number: space id"
msgstr ""

msgid "cd"
msgstr ""

msgid "01"
msgstr ""

msgid "code for tuple"
msgstr ""

msgid "21"
msgstr ""

msgid "1-digit number: field count = 2"
msgstr ""

msgid "92"
msgstr ""

msgid "1-character string: field[1]"
msgstr ""

msgid "a1"
msgstr ""

msgid "41"
msgstr ""

msgid "2-character string: field[2]"
msgstr ""

msgid "a2"
msgstr ""

msgid "42"
msgstr ""

msgid "Now, you could send that packet to the Tarantool instance, and interpret the response (the page about :ref:`Tarantool's binary protocol <box_protocol-iproto_protocol>` has a description of the packet format for responses as well as requests). But it would be easier, and less error-prone, if you could invoke a routine that formats the packet according to typed parameters. Something like ``response = tarantool_routine(\"insert\", 513, \"A\", \"B\");``. And that is why APIs exist for drivers for Perl, Python, PHP, and so on."
msgstr ""

msgid "Setting up the server for connector examples"
msgstr ""

msgid "This chapter has examples that show how to connect to a Tarantool instance via the Perl, PHP, Python, node.js, and C connectors. The examples contain hard code that will work if and only if the following conditions are met:"
msgstr ""

msgid "the Tarantool instance (tarantool) is running on localhost (127.0.0.1) and is listening on port 3301 (``box.cfg.listen = '3301'``),"
msgstr ""

msgid "space ``examples`` has id = 999 (``box.space.examples.id = 999``) and has a primary-key index for a numeric field (``box.space[999].index[0].parts[1].type = \"unsigned\"``),"
msgstr ""

msgid "user 'guest' has privileges for reading and writing."
msgstr ""

msgid "It is easy to meet all the conditions by starting the instance and executing this script:"
msgstr ""

msgid "box.cfg{listen=3301}\n"
"box.schema.space.create('examples',{id=999})\n"
"box.space.examples:create_index('primary', {type = 'hash', parts = {1, 'unsigned'}})\n"
"box.schema.user.grant('guest','read,write','space','examples')\n"
"box.schema.user.grant('guest','read','space','_space')"
msgstr ""

msgid "Java"
msgstr ""

msgid "See http://github.com/tarantool/tarantool-java/."
msgstr ""

msgid "Go"
msgstr ""

msgid "Please see https://github.com/mialinx/go-tarantool."
msgstr ""

msgid "R"
msgstr ""

msgid "See https://github.com/thekvs/tarantoolr."
msgstr ""

msgid "Erlang"
msgstr ""

msgid "See `Erlang tarantool driver <https://github.com/stofel/taran>`_."
msgstr ""

msgid "Perl"
msgstr ""

msgid "The most commonly used Perl driver is `tarantool-perl <https://github.com/tarantool/tarantool-perl>`_. It is not supplied as part of the Tarantool repository; it must be installed separately. The most common way to install it is by cloning from GitHub."
msgstr ""

msgid "To avoid minor warnings that may appear the first time ``tarantool-perl`` is installed, start with installing some other modules that ``tarantool-perl`` uses, with `CPAN, the Comprehensive Perl Archive Network <https://en.wikipedia.org/wiki/Cpan>`_:"
msgstr ""

msgid "$ sudo cpan install AnyEvent\n"
"$ sudo cpan install Devel::GlobalDestruction"
msgstr ""

msgid "Then, to install ``tarantool-perl`` itself, say:"
msgstr ""

msgid "$ git clone https://github.com/tarantool/tarantool-perl.git tarantool-perl\n"
"$ cd tarantool-perl\n"
"$ git submodule init\n"
"$ git submodule update --recursive\n"
"$ perl Makefile.PL\n"
"$ make\n"
"$ sudo make install"
msgstr ""

msgid "Here is a complete Perl program that inserts ``[99999,'BB']`` into ``space[999]`` via the Perl API. Before trying to run, check that the server instance is listening at ``localhost:3301`` and that the space ``examples`` exists, as :ref:`described earlier <index-connector_setting>`. To run, paste the code into a file named :file:`example.pl` and say :samp:`perl example.pl`. The program will connect using an application-specific definition of the space. The program will open a socket connection with the Tarantool instance at ``localhost:3301``, then send an :ref:`space_object:INSERT<box_space-insert>` request, then — if all is well — end without displaying any messages. If Tarantool is not running on ``localhost`` with :ref:`listen<cfg_basic-listen>` port = 3301, the program will print “Connection refused”."
msgstr ""

msgid "#!/usr/bin/perl\n"
"use DR::Tarantool ':constant', 'tarantool';\n"
"use DR::Tarantool ':all';\n"
"use DR::Tarantool::MsgPack::SyncClient;\n"
"\n"
"my $tnt = DR::Tarantool::MsgPack::SyncClient->connect(\n"
"  host    => '127.0.0.1',                      # look for tarantool on localhost\n"
"  port    => 3301,                             # on port 3301\n"
"  user    => 'guest',                          # username. for 'guest' we do not also say 'password=>...'\n"
"\n"
"  spaces  => {\n"
"    999 => {                                   # definition of space[999] ...\n"
"      name => 'examples',                      #   space[999] name = 'examples'\n"
"      default_type => 'STR',                   #   space[999] field type is 'STR' if undefined\n"
"      fields => [ {                            #   definition of space[999].fields ...\n"
"          name => 'field1', type => 'NUM' } ], #     space[999].field[1] name='field1',type='NUM'\n"
"      indexes => {                             #   definition of space[999] indexes ...\n"
"        0 => {\n"
"          name => 'primary', fields => [ 'field1' ] } } } } );\n"
"\n"
"$tnt->insert('examples' => [ 99999, 'BB' ]);"
msgstr ""

msgid "The example program uses field type names 'STR' and 'NUM' instead of :ref:`'string' and 'unsigned'<box_space-create_index>`, due to a temporary Perl limitation."
msgstr ""

msgid "The example program only shows one request and does not show all that's necessary for good practice. For that, please see the `tarantool-perl repository <https://github.com/tarantool/tarantool-perl>`_."
msgstr ""

msgid "PHP"
msgstr ""

msgid "`tarantool-php <https://github.com/tarantool/tarantool-php>`_ is the official PHP connector for Tarantool. It is not supplied as part of the Tarantool repository and must be installed separately (see `installation instructions <https://github.com/tarantool/tarantool-php/#installing-and-building>`_ in the connector's ``README`` file)."
msgstr ""

msgid "Here is a complete PHP program that inserts ``[99999,'BB']`` into a space named ``examples`` via the PHP API."
msgstr ""

msgid "Before trying to run, check that the server instance is :ref:`listening <cfg_basic-listen>` at ``localhost:3301`` and that the space ``examples`` exists, as :ref:`described earlier <index-connector_setting>`."
msgstr ""

msgid "To run, paste the code into a file named :file:`example.php` and say:"
msgstr ""

msgid "$ php -d extension=~/tarantool-php/modules/tarantool.so example.php"
msgstr ""

msgid "The program will open a socket connection with the Tarantool instance at ``localhost:3301``, then send an :ref:`INSERT <box_space-insert>` request, then -- if all is well -- print \"Insert succeeded\"."
msgstr ""

msgid "If the tuple already exists, the program will print \"Duplicate key exists in unique index 'primary' in space 'examples'\"."
msgstr ""

msgid "<?php\n"
"$tarantool = new Tarantool('localhost', 3301);\n"
"\n"
"try {\n"
"    $tarantool->insert('examples', [99999, 'BB']);\n"
"    echo \"Insert succeeded\\n\";\n"
"} catch (Exception $e) {\n"
"    echo $e->getMessage(), \"\\n\";\n"
"}"
msgstr ""

msgid "The example program only shows one request and does not show all that's necessary for good practice. For that, please see `tarantool/tarantool-php <https://github.com/tarantool/tarantool-php>`_ project at GitHub."
msgstr ""

msgid "Besides, there is another community-driven `GitHub project <https://github.com/tarantool-php>`_ which includes an `alternative connector <https://github.com/tarantool-php/client>`_ written in pure PHP, an `object mapper <https://github.com/tarantool-php/mapper>`_, a `queue <https://github.com/tarantool-php/queue>`_ and other packages."
msgstr ""

msgid "Python"
msgstr ""

msgid "`tarantool-python <http://github.com/tarantool/tarantool-python>`_ is the official Python connector for Tarantool. It is not supplied as part of the Tarantool repository and must be installed separately (see below for details)."
msgstr ""

msgid "Here is a complete Python program that inserts ``[99999,'Value','Value']`` into space ``examples`` via the high-level Python API."
msgstr ""

msgid "#!/usr/bin/python\n"
"from tarantool import Connection\n"
"\n"
"c = Connection(\"127.0.0.1\", 3301)\n"
"result = c.insert(\"examples\",(99999,'Value', 'Value'))\n"
"print result"
msgstr ""

msgid "To prepare, paste the code into a file named :file:`example.py` and install the ``tarantool-python`` connector with either :samp:`pip install tarantool\\>0.4` to install in :file:`/usr` (requires **root** privilege) or :samp:`pip install tarantool\\>0.4 --user` to install in :file:`~` i.e. user's default directory."
msgstr ""

msgid "Before trying to run, check that the server instance is :ref:`listening <cfg_basic-listen>` at ``localhost:3301`` and that the space ``examples`` exists, as :ref:`described earlier <index-connector_setting>`. To run the program, say :samp:`python example.py`. The program will connect to the Tarantool server, will send the :ref:`INSERT<box_space-insert>` request, and will not throw any exception if all went well. If the tuple already exists, the program will throw ``tarantool.error.DatabaseError: (3, \"Duplicate key exists in unique index 'primary' in space 'examples'\")``."
msgstr ""

msgid "The example program only shows one request and does not show all that's necessary for good practice. For that, please see `tarantool-python <http://github.com/tarantool/tarantool-python>`_ project at GitHub. For an example of using Python API with `queue managers for Tarantool <https://github.com/tarantool/queue>`_, see `queue-python <https://github.com/tarantool/queue-python>`_ project at GitHub."
msgstr ""

msgid "Also there are several community-driven Python connectors:"
msgstr ""

msgid "`asynctnt <https://github.com/igorcoding/asynctnt>`_ with asyncio support"
msgstr ""

msgid "`aiotarantool <https://github.com/shveenkov/aiotarantool>`_ also with asyncio support"
msgstr ""

msgid "`gtarantool <https://github.com/shveenkov/gtarantool>`_ with gevent support **no active maintenance**"
msgstr ""

msgid "Node.js"
msgstr ""

msgid "The most commonly used node.js driver is the `Node Tarantool driver <https://github.com/KlonD90/node-tarantool-driver>`_. It is not supplied as part of the Tarantool repository; it must be installed separately. The most common way to install it is with `npm <https://www.sitepoint.com/beginners-guide-node-package-manager/>`_. For example, on Ubuntu, the installation could look like this after npm has been installed:"
msgstr ""

msgid "$ npm install tarantool-driver --global"
msgstr ""

msgid "Here is a complete node.js program that inserts ``[99999,'BB']`` into ``space[999]`` via the node.js API. Before trying to run, check that the server instance is :ref:`listening <cfg_basic-listen>` at ``localhost:3301`` and that the space ``examples`` exists, as :ref:`described earlier <index-connector_setting>`. To run, paste the code into a file named :file:`example.rs` and say ``node example.rs``. The program will connect using an application-specific definition of the space. The program will open a socket connection with the Tarantool instance at ``localhost:3301``, then send an :ref:`INSERT <box_space-insert>` request, then — if all is well — end after saying \"Insert succeeded\". If Tarantool is not running on ``localhost`` with listen port = 3301, the program will print “Connect failed”. If :ref:`the 'guest' user <box_space-user>` does not have authorization to connect, the program will print \"Auth failed\". If the insert request fails for any reason, for example because the tuple already exists, the program will print \"Insert failed\"."
msgstr ""

msgid "var TarantoolConnection = require('tarantool-driver');\n"
"var conn = new TarantoolConnection({port: 3301});\n"
"var insertTuple = [99999, \"BB\"];\n"
"conn.connect().then(function() {\n"
"    conn.auth(\"guest\", \"\").then(function() {\n"
"        conn.insert(999, insertTuple).then(function() {\n"
"            console.log(\"Insert succeeded\");\n"
"            process.exit(0);\n"
"    }, function(e) { console.log(\"Insert failed\");  process.exit(1); });\n"
"    }, function(e) { console.log(\"Auth failed\");    process.exit(1); });\n"
"    }, function(e) { console.log(\"Connect failed\"); process.exit(1); });"
msgstr ""

msgid "The example program only shows one request and does not show all that's necessary for good practice. For that, please see  `The node.js driver repository <https://github.com/KlonD90/node-tarantool-driver>`_."
msgstr ""

msgid "C#"
msgstr ""

msgid "The most commonly used C# driver is `progaudi.tarantool <https://github.com/progaudi/progaudi.tarantool>`_, previously named ``tarantool-csharp``. It is not supplied as part of the Tarantool repository; it must be installed separately. The makers recommend `cross-platform installation using Nuget <https://www.nuget.org/packages/progaudi.tarantool>`_."
msgstr ""

msgid "To be consistent with the other instructions in this chapter, here is a way to install the driver directly on Ubuntu 16.04."
msgstr ""

msgid "Install .net core from Microsoft. Follow `.net core installation instructions <https://www.microsoft.com/net/core#ubuntu>`_."
msgstr ""

msgid "Mono will not work, nor will .Net from xbuild. Only .net core supported on Linux and Mac."
msgstr ""

msgid "Read the Microsoft End User License Agreement first, because it is not an ordinary open-source agreement and there will be a message during installation saying \"This software may collect information about you and your use of the software, and send that to Microsoft.\" Still you can `set environment variables <https://docs.microsoft.com/en-us/dotnet/core/tools/telemetry#behavior>`_ to opt out from telemetry."
msgstr ""

msgid "Create a new console project."
msgstr ""

msgid "$ cd ~\n"
"$ mkdir progaudi.tarantool.test\n"
"$ cd progaudi.tarantool.test\n"
"$ dotnet new console"
msgstr ""

msgid "Add ``progaudi.tarantool`` reference."
msgstr ""

msgid "$ dotnet add package progaudi.tarantool"
msgstr ""

msgid "Change code in ``Program.cs``."
msgstr ""

msgid "$ cat <<EOT > Program.cs\n"
"using System;\n"
"using System.Threading.Tasks;\n"
"using ProGaudi.Tarantool.Client;\n"
"\n"
"public class HelloWorld\n"
"{\n"
"  static public void Main ()\n"
"  {\n"
"    Test().GetAwaiter().GetResult();\n"
"  }\n"
"  static async Task Test()\n"
"  {\n"
"    var box = await Box.Connect(\"127.0.0.1:3301\");\n"
"    var schema = box.GetSchema();\n"
"    var space = await schema.GetSpace(\"examples\");\n"
"    await space.Insert((99999, \"BB\"));\n"
"  }\n"
"}\n"
"EOT"
msgstr ""

msgid "Build and run your application."
msgstr ""

msgid "Before trying to run, check that the server is listening at ``localhost:3301`` and that the space ``examples`` exists, as :ref:`described earlier <index-connector_setting>`."
msgstr ""

msgid "$ dotnet restore\n"
"$ dotnet run"
msgstr ""

msgid "The program will:"
msgstr ""

msgid "connect using an application-specific definition of the space,"
msgstr ""

msgid "open a socket connection with the Tarantool server at `localhost:3301`,"
msgstr ""

msgid "send an INSERT request, and — if all is well — end without saying anything."
msgstr ""

msgid "If Tarantool is not running on localhost with listen port = 3301, or if user 'guest' does not have authorization to connect, or if the INSERT request fails for any reason, the program will print an error message, among other things (stacktrace, etc)."
msgstr ""

msgid "The example program only shows one request and does not show all that’s necessary for good practice. For that, please see the `progaudi.tarantool driver repository <https://github.com/progaudi/progaudi.tarantool>`_."
msgstr ""

msgid "C"
msgstr ""

msgid "Here follow two examples of using Tarantool's high-level C API."
msgstr ""

msgid "Example 1"
msgstr ""

msgid "Here is a complete C program that inserts :code:`[99999,'B']` into space :code:`examples` via the high-level C API."
msgstr ""

msgid "#include <stdio.h>\n"
"#include <stdlib.h>\n"
"\n"
"#include <tarantool/tarantool.h>\n"
"#include <tarantool/tnt_net.h>\n"
"#include <tarantool/tnt_opt.h>\n"
"\n"
"void main() {\n"
"   struct tnt_stream *tnt = tnt_net(NULL);          /* See note = SETUP */\n"
"   tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");\n"
"   if (tnt_connect(tnt) < 0) {                      /* See note = CONNECT */\n"
"       printf(\"Connection refused\\n\");\n"
"       exit(-1);\n"
"   }\n"
"   struct tnt_stream *tuple = tnt_object(NULL);     /* See note = MAKE REQUEST */\n"
"   tnt_object_format(tuple, \"[%d%s]\", 99999, \"B\");\n"
"   tnt_insert(tnt, 999, tuple);                     /* See note = SEND REQUEST */\n"
"   tnt_flush(tnt);\n"
"   struct tnt_reply reply;  tnt_reply_init(&reply); /* See note = GET REPLY */\n"
"   tnt->read_reply(tnt, &reply);\n"
"   if (reply.code != 0) {\n"
"       printf(\"Insert failed %lu.\\n\", reply.code);\n"
"   }\n"
"   tnt_close(tnt);                                  /* See below = TEARDOWN */\n"
"   tnt_stream_free(tuple);\n"
"   tnt_stream_free(tnt);\n"
"}"
msgstr ""

msgid "Paste the code into a file named :file:`example.c` and install ``tarantool-c``. One way to install ``tarantool-c`` (using Ubuntu) is:"
msgstr ""

msgid "$ git clone git://github.com/tarantool/tarantool-c.git ~/tarantool-c\n"
"$ cd ~/tarantool-c\n"
"$ git submodule init\n"
"$ git submodule update\n"
"$ cmake .\n"
"$ make\n"
"$ make install"
msgstr ""

msgid "To compile and link the program, say:"
msgstr ""

msgid "$ # sometimes this is necessary:\n"
"$ export LD_LIBRARY_PATH=/usr/local/lib\n"
"$ gcc -o example example.c -ltarantool"
msgstr ""

msgid "Before trying to run, check that a server instance is listening at ``localhost:3301`` and that the space ``examples`` exists, as :ref:`described earlier <index-connector_setting>`. To run the program, say :samp:`./example`. The program will connect to the Tarantool instance, and will send the request. If Tarantool is not running on localhost with listen address = 3301, the program will print “Connection refused”. If the insert fails, the program will print \"Insert failed\" and an error number (see all error codes in the source file `/src/box/errcode.h <https://github.com/tarantool/tarantool/blob/2.1/src/box/errcode.h>`_)."
msgstr ""

msgid "Here are notes corresponding to comments in the example program."
msgstr ""

msgid "**SETUP:** The setup begins by creating a stream."
msgstr ""

msgid "struct tnt_stream *tnt = tnt_net(NULL);\n"
"tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");"
msgstr ""

msgid "In this program, the stream will be named ``tnt``. Before connecting on the ``tnt`` stream, some options may have to be set. The most important option is TNT_OPT_URI. In this program, the :ref:`URI <index-uri>` is ``localhost:3301``, since that is where the Tarantool instance is supposed to be listening."
msgstr ""

msgid "Function description:"
msgstr ""

msgid "struct tnt_stream *tnt_net(struct tnt_stream *s)\n"
"int tnt_set(struct tnt_stream *s, int option, variant option-value)"
msgstr ""

msgid "**CONNECT:** Now that the stream named ``tnt`` exists and is associated with a URI, this example program can connect to a server instance."
msgstr ""

msgid "if (tnt_connect(tnt) < 0)\n"
"   { printf(\"Connection refused\\n\"); exit(-1); }"
msgstr ""

msgid "int tnt_connect(struct tnt_stream *s)"
msgstr ""

msgid "The connection might fail for a variety of reasons, such as: the server is not running, or the URI contains an invalid :ref:`password<authentication-passwords>`. If the connection fails, the return value will be -1."
msgstr ""

msgid "**MAKE REQUEST:** Most requests require passing a structured value, such as the contents of a tuple."
msgstr ""

msgid "struct tnt_stream *tuple = tnt_object(NULL);\n"
"tnt_object_format(tuple, \"[%d%s]\", 99999, \"B\");"
msgstr ""

msgid "In this program, the request will be an :ref:`INSERT<box_space-insert>`, and the tuple contents will be an integer and a string. This is a simple serial set of values, that is, there are no sub-structures or arrays. Therefore it is easy in this case to format what will be passed using the same sort of arguments that one would use with a C ``printf()`` function: ``%d`` for the integer, ``%s`` for the string, then the integer value, then a pointer to the string value."
msgstr ""

msgid "ssize_t tnt_object_format(struct tnt_stream *s, const char *fmt, ...)"
msgstr ""

msgid "**SEND REQUEST:** The database-manipulation requests are analogous to the requests in the box library."
msgstr ""

msgid "tnt_insert(tnt, 999, tuple);\n"
"tnt_flush(tnt);"
msgstr ""

msgid "In this program, the choice is to do an INSERT request, so the program passes the ``tnt_stream`` that was used for connection (``tnt``) and the ``tnt_stream`` that was set up with :c:func:`tarantoolc:tnt_object_format` (``tuple``)."
msgstr ""

msgid "ssize_t tnt_insert(struct tnt_stream *s, uint32_t space, struct tnt_stream *tuple)\n"
"ssize_t tnt_replace(struct tnt_stream *s, uint32_t space, struct tnt_stream *tuple)\n"
"ssize_t tnt_select(struct tnt_stream *s, uint32_t space, uint32_t index,\n"
"                   uint32_t limit, uint32_t offset, uint8_t iterator,\n"
"                   struct tnt_stream *key)\n"
"ssize_t tnt_update(struct tnt_stream *s, uint32_t space, uint32_t index,\n"
"                   struct tnt_stream *key, struct tnt_stream *ops)"
msgstr ""

msgid "**GET REPLY:** For most requests, the client will receive a reply containing some indication whether the result was successful, and a set of tuples."
msgstr ""

msgid "struct tnt_reply reply;  tnt_reply_init(&reply);\n"
"tnt->read_reply(tnt, &reply);\n"
"if (reply.code != 0)\n"
"   { printf(\"Insert failed %lu.\\n\", reply.code); }"
msgstr ""

msgid "This program checks for success but does not decode the rest of the reply."
msgstr ""

msgid "struct tnt_reply *tnt_reply_init(struct tnt_reply *r)\n"
"tnt->read_reply(struct tnt_stream *s, struct tnt_reply *r)\n"
"void tnt_reply_free(struct tnt_reply *r)"
msgstr ""

msgid "**TEARDOWN:** When a session ends, the connection that was made with :c:func:`tarantoolc:tnt_connect()` should be closed, and the objects that were made in the setup should be destroyed."
msgstr ""

msgid "tnt_close(tnt);\n"
"tnt_stream_free(tuple);\n"
"tnt_stream_free(tnt);"
msgstr ""

msgid "void tnt_close(struct tnt_stream *s)\n"
"void tnt_stream_free(struct tnt_stream *s)"
msgstr ""

msgid "Example 2"
msgstr ""

msgid "Here is a complete C program that selects, using index key ``[99999]``, from space ``examples`` via the high-level C API. To display the results, the program uses functions in the `MsgPuck <https://github.com/tarantool/msgpuck>`_ library which allow decoding of `MessagePack <https://en.wikipedia.org/wiki/MessagePack>`_  arrays."
msgstr ""

msgid "#include <stdio.h>\n"
"#include <stdlib.h>\n"
"#include <tarantool/tarantool.h>\n"
"#include <tarantool/tnt_net.h>\n"
"#include <tarantool/tnt_opt.h>\n"
"\n"
"#define MP_SOURCE 1\n"
"#include <msgpuck.h>\n"
"\n"
"void main() {\n"
"    struct tnt_stream *tnt = tnt_net(NULL);\n"
"    tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");\n"
"    if (tnt_connect(tnt) < 0) {\n"
"        printf(\"Connection refused\\n\");\n"
"        exit(1);\n"
"    }\n"
"    struct tnt_stream *tuple = tnt_object(NULL);\n"
"    tnt_object_format(tuple, \"[%d]\", 99999); /* tuple = search key */\n"
"    tnt_select(tnt, 999, 0, (2^32) - 1, 0, 0, tuple);\n"
"    tnt_flush(tnt);\n"
"    struct tnt_reply reply; tnt_reply_init(&reply);\n"
"    tnt->read_reply(tnt, &reply);\n"
"    if (reply.code != 0) {\n"
"        printf(\"Select failed.\\n\");\n"
"        exit(1);\n"
"    }\n"
"    char field_type;\n"
"    field_type = mp_typeof(*reply.data);\n"
"    if (field_type != MP_ARRAY) {\n"
"        printf(\"no tuple array\\n\");\n"
"        exit(1);\n"
"    }\n"
"    long unsigned int row_count;\n"
"    uint32_t tuple_count = mp_decode_array(&reply.data);\n"
"    printf(\"tuple count=%u\\n\", tuple_count);\n"
"    unsigned int i, j;\n"
"    for (i = 0; i < tuple_count; ++i) {\n"
"        field_type = mp_typeof(*reply.data);\n"
"        if (field_type != MP_ARRAY) {\n"
"            printf(\"no field array\\n\");\n"
"            exit(1);\n"
"        }\n"
"        uint32_t field_count = mp_decode_array(&reply.data);\n"
"        printf(\"  field count=%u\\n\", field_count);\n"
"        for (j = 0; j < field_count; ++j) {\n"
"            field_type = mp_typeof(*reply.data);\n"
"            if (field_type == MP_UINT) {\n"
"                uint64_t num_value = mp_decode_uint(&reply.data);\n"
"                printf(\"    value=%lu.\\n\", num_value);\n"
"            } else if (field_type == MP_STR) {\n"
"                const char *str_value;\n"
"                uint32_t str_value_length;\n"
"                str_value = mp_decode_str(&reply.data, &str_value_length);\n"
"                printf(\"    value=%.*s.\\n\", str_value_length, str_value);\n"
"            } else {\n"
"                printf(\"wrong field type\\n\");\n"
"                exit(1);\n"
"            }\n"
"        }\n"
"    }\n"
"    tnt_close(tnt);\n"
"    tnt_stream_free(tuple);\n"
"    tnt_stream_free(tnt);\n"
"}"
msgstr ""

msgid "Similarly to the first example, paste the code into a file named :file:`example2.c`."
msgstr ""

msgid "$ gcc -o example2 example2.c -ltarantool"
msgstr ""

msgid "To run the program, say :samp:`./example2`."
msgstr ""

msgid "The two example programs only show a few requests and do not show all that's necessary for good practice. See more in the `tarantool-c documentation at GitHub <http://github.com/tarantool/tarantool-c>`_."
msgstr ""

msgid "Interpreting function return values"
msgstr ""

msgid "For all connectors, calling a function via Tarantool causes a return in the MsgPack format. If the function is called using the connector's API, some conversions may occur. All scalar values are returned as tuples (with a MsgPack type-identifier followed by a value); all non-scalar values are returned as a group of tuples (with a MsgPack array-identifier followed by the scalar values). If the function is called via the binary protocol command layer -- \"eval\" -- rather than via the connector's API, no conversions occur."
msgstr ""

msgid "In the following example, a Lua function will be created. Since it will be accessed externally by a :ref:`'guest' user<box_space-user>`, a :doc:`grant </reference/reference_lua/box_schema/user_grant>` of an execute privilege will be necessary. The function returns an empty array, a scalar string, two booleans, and a short integer. The values are the ones described in the table :ref:`Common Types and MsgPack Encodings <msgpack-common_types_and_msgpack_encodings>`."
msgstr ""

msgid "tarantool> box.cfg{listen=3301}\n"
"2016-03-03 18:45:52.802 [27381] main/101/interactive I> ready to accept requests\n"
"---\n"
"...\n"
"tarantool> function f() return {},'a',false,true,127; end\n"
"---\n"
"...\n"
"tarantool> box.schema.func.create('f')\n"
"---\n"
"...\n"
"tarantool> box.schema.user.grant('guest','execute','function','f')\n"
"---\n"
"..."
msgstr ""

msgid "Here is a C program which calls the function. Although C is being used for the example, the result would be precisely the same if the calling program was written in Perl, PHP, Python, Go, or Java."
msgstr ""

msgid "#include <stdio.h>\n"
"#include <stdlib.h>\n"
"#include <tarantool/tarantool.h>\n"
"#include <tarantool/tnt_net.h>\n"
"#include <tarantool/tnt_opt.h>\n"
"void main() {\n"
"  struct tnt_stream *tnt = tnt_net(NULL);              /* SETUP */\n"
"  tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");\n"
"   if (tnt_connect(tnt) < 0) {                         /* CONNECT */\n"
"       printf(\"Connection refused\\n\");\n"
"       exit(-1);\n"
"   }\n"
"   struct tnt_stream *arg; arg = tnt_object(NULL);     /* MAKE REQUEST */\n"
"   tnt_object_add_array(arg, 0);\n"
"   struct tnt_request *req1 = tnt_request_call(NULL);  /* CALL function f() */\n"
"   tnt_request_set_funcz(req1, \"f\");\n"
"   uint64_t sync1 = tnt_request_compile(tnt, req1);\n"
"   tnt_flush(tnt);                                     /* SEND REQUEST */\n"
"   struct tnt_reply reply;  tnt_reply_init(&reply);    /* GET REPLY */\n"
"   tnt->read_reply(tnt, &reply);\n"
"   if (reply.code != 0) {\n"
"     printf(\"Call failed %lu.\\n\", reply.code);\n"
"     exit(-1);\n"
"   }\n"
"   const unsigned char *p= (unsigned char*)reply.data; /* PRINT REPLY */\n"
"   while (p < (unsigned char *) reply.data_end)\n"
"   {\n"
"     printf(\"%x \", *p);\n"
"     ++p;\n"
"   }\n"
"   printf(\"\\n\");\n"
"   tnt_close(tnt);                                     /* TEARDOWN */\n"
"   tnt_stream_free(arg);\n"
"   tnt_stream_free(tnt);\n"
"}"
msgstr ""

msgid "When this program is executed, it will print:"
msgstr ""

msgid "dd 0 0 0 5 90 91 a1 61 91 c2 91 c3 91 7f"
msgstr ""

msgid "The first five bytes -- ``dd 0 0 0 5`` -- are the MsgPack encoding for \"32-bit array header with value 5\" (see `MsgPack specification <http://github.com/msgpack/msgpack/blob/master/spec.md>`_). The rest are as described in the table :ref:`Common Types and MsgPack Encodings <msgpack-common_types_and_msgpack_encodings>`."
msgstr ""

