# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-23 10:58+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../doc/dev_guide/build_contribute_index.rst:3
msgid "Build and contribute"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:5
msgid "Building from source"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:7
msgid "For downloading Tarantool source and building it, the platforms can differ and the preferences can differ. But strategically the steps are always the same."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:10
msgid "Get tools and libraries that will be necessary for building and testing."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:13
msgid "The absolutely necessary ones are:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:15
msgid "A program for downloading source repositories. |br| For all platforms, this is ``git``. It allows downloading the latest complete set of source files from the Tarantool repository on GitHub."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:19
msgid "A C/C++ compiler. |br| Ordinarily, this is ``gcc`` and ``g++`` version 4.6 or later. On Mac OS X, this is ``Clang`` version 3.2+."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:22
msgid "A program for managing the build process. |br| For all platforms, this is ``CMake`` version 2.8+."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:25
msgid "A build automation tool. |br| For all platforms this is ``GNU Make``."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:27
msgid "`ReadLine <http://www.gnu.org/software/readline/>`_ library, any version"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:28
msgid "`ncurses <https://www.gnu.org/software/ncurses/>`_ library, any version"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:29
msgid "`OpenSSL <https://www.openssl.org>`_ library, version 1.0.1+"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:30
msgid "`LibYAML <http://pyyaml.org/wiki/LibYAML>`_ library, version 0.1.4+"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:31
msgid "`ICU <http://site.icu-project.org/download>`_ library, recent version"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:32
msgid "`Autoconf <https://www.gnu.org/software/autoconf/>`_ library, any version"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:33
msgid "`Automake <https://www.gnu.org/software/automake/>`_ library, any version"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:34
msgid "`Libtool <https://www.gnu.org/software/libtool/>`_ library, any version"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:35
msgid "`Zlib-devel <https://www.zlib.net/>`_ library, any version"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:37
msgid "Python and modules. |br| Python interpreter is not necessary for building Tarantool itself, unless you intend to use the \"Run the test suite\" option in step 5. For all platforms, this is ``python`` version 2.7+ (but not 3.x). You need the following Python modules:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:42
msgid "`pyyaml <https://pypi.python.org/pypi/PyYAML>`_ version 3.10"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:43
msgid "`argparse <https://pypi.python.org/pypi/argparse>`_ version 1.1"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:44
msgid "`msgpack-python <https://pypi.python.org/pypi/msgpack-python>`_ version 0.4.6"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:45
msgid "`gevent <https://pypi.python.org/pypi/gevent>`_ version 1.1.2"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:46
msgid "`six <https://pypi.python.org/pypi/six>`_ version 1.8.0"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:48
msgid "To install all required dependencies, follow the instructions for your OS:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:50
msgid "For Debian/Ubuntu, say:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:52
msgid "$ apt install -y build-essential cmake make coreutils sed \\\n"
"      autoconf automake libtool zlib1g-dev \\\n"
"      libreadline-dev libncurses5-dev libyaml-dev libssl-dev \\\n"
"      libunwind-dev libicu-dev \\\n"
"      python python-pip python-setuptools python-dev \\\n"
"      python-msgpack python-yaml python-argparse python-six python-gevent"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:61
msgid "For RHEL/CentOS/Fedora, say:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:63
msgid "$ yum install -y gcc gcc-c++ cmake make coreutils sed \\\n"
"      autoconf automake libtool zlib-devel \\\n"
"      readline-devel ncurses-devel libyaml-devel openssl-devel \\\n"
"      libunwind-devel libicu-devel \\\n"
"      python python-pip python-setuptools python-devel \\\n"
"      python-msgpack python-yaml python-argparse python-six python-gevent"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:72
msgid "For Mac OS X (instructions below are for OS X El Capitan):"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:74
msgid "If you're using Homebrew as your package manager, say:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:76
msgid "$ brew install cmake make autoconf binutils zlib \\\n"
"       autoconf automake libtool \\\n"
"       readline ncurses libyaml openssl libunwind-headers icu4c \\\n"
"       && pip install python-daemon \\\n"
"       msgpack-python pyyaml configargparse six gevent"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:86
msgid "You can not install `zlib-devel <https://www.zlib.net/>`_  package this way."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:88
msgid "Alternatively, download Apple's default Xcode toolset:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:90
msgid "$ xcode-select --install\n"
"$ xcode-select -switch /Applications/Xcode.app/Contents/Developer"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:95
msgid "For FreeBSD (instructions below are for FreeBSD 10.1+ release), say:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:97
msgid "$ pkg install -y sudo git cmake gmake gcc coreutils \\\n"
"      autoconf automake libtool \\\n"
"      readline ncurses libyaml openssl libunwind icu \\\n"
"      python27 py27-pip py27-setuptools py27-daemon \\\n"
"      py27-msgpack py27-yaml py27-argparse py27-six py27-gevent"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:105
msgid "If some Python modules are not available in a repository, it is best to set up the modules by getting a tarball and doing the setup with ``python setup.py`` like this:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:109
msgid "$ # On some machines, this initial command may be necessary:\n"
"$ wget https://bootstrap.pypa.io/ez_setup.py -O - | sudo python\n"
"\n"
"$ # Python module for parsing YAML (pyYAML), for test suite:\n"
"$ # (If wget fails, check at http://pyyaml.org/wiki/PyYAML\n"
"$ # what the current version is.)\n"
"$ cd ~\n"
"$ wget http://pyyaml.org/download/pyyaml/PyYAML-3.10.tar.gz\n"
"$ tar -xzf PyYAML-3.10.tar.gz\n"
"$ cd PyYAML-3.10\n"
"$ sudo python setup.py install"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:123
msgid "Finally, use Python ``pip`` to bring in Python packages that may not be up-to-date in the distro repositories. (On CentOS 7, it will be necessary to install ``pip`` first, with :code:`sudo yum install epel-release` followed by :code:`sudo yum install python-pip`.)"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:129
msgid "$ pip install -r \\\n"
"      https://raw.githubusercontent.com/tarantool/test-run/master/requirements.txt \\\n"
"      --user"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:135
msgid "This step is only necessary once, the first time you do a download."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:137
msgid "Use ``git`` to download the latest Tarantool source code from the GitHub repository ``tarantool/tarantool``, branch 1.10, to a local directory named ``~/tarantool``, for example:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:141
msgid "$ git clone --recursive https://github.com/tarantool/tarantool.git -b 1.10 ~/tarantool"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:145
msgid "On rare occasions, the submodules need to be updated again with the command:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:148
msgid "cd ~/tarantool\n"
"$ git submodule update --init --recursive"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:153
msgid "Use CMake to initiate the build."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:155
msgid "$ cd ~/tarantool\n"
"$ make clean         # unnecessary, added for good luck\n"
"$ rm CMakeCache.txt  # unnecessary, added for good luck\n"
"$ cmake .            # start initiating with build type=Debug"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:162
msgid "On some platforms, it may be necessary to specify the C and C++ versions, for example:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:165
msgid "$ CC=gcc-4.8 CXX=g++-4.8 cmake ."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:169
msgid "The CMake option for specifying build type is :samp:`-DCMAKE_BUILD_TYPE={type}`, where :samp:`{type}` can be:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:172
msgid "``Debug`` -- used by project maintainers"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:173
msgid "``Release`` -- used only if the highest performance is required"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:174
msgid "``RelWithDebInfo`` -- used for production, also provides debugging capabilities"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:176
msgid "The CMake option for hinting that the result will be distributed is :code:`-DENABLE_DIST=ON`. If this option is on, then later ``make install`` will install ``tarantoolctl`` files in addition to ``tarantool`` files."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:180
msgid "Use ``make`` to complete the build."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:182
msgid "$ make"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:188
msgid "For FreeBSD, use ``gmake`` instead."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:190
msgid "This creates the 'tarantool' executable in the ``src/`` directory."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:194
msgid "If you encounter a ``curl`` or ``OpenSSL`` errors on this step try installing ``openssl111`` package of the specific ``1.1.1d`` version."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:197
msgid "Next, it's highly recommended to say ``make install`` to install Tarantool to the ``/usr/local`` directory and keep your system clean. However, it is possible to run the Tarantool executable without installation."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:201
msgid "Run the test suite."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:203
msgid "This step is optional. Tarantool's developers always run the test suite before they publish new versions. You should run the test suite too, if you make any changes in the code. Assuming you downloaded to ``~/tarantool``, the principal steps are:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:208
msgid "$ # make a subdirectory named `bin`\n"
"$ mkdir ~/tarantool/bin\n"
"\n"
"$ # link Python to bin (this may require superuser privileges)\n"
"$ ln /usr/bin/python ~/tarantool/bin/python\n"
"\n"
"$ # get to the test subdirectory\n"
"$ cd ~/tarantool/test\n"
"\n"
"$ # run tests using Python\n"
"$ PATH=~/tarantool/bin:$PATH ./test-run.py"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:222
msgid "The output should contain reassuring reports, for example:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:224
msgid "======================================================================\n"
"TEST                                            RESULT\n"
"------------------------------------------------------------\n"
"box/bad_trigger.test.py                         [ pass ]\n"
"box/call.test.py                                [ pass ]\n"
"box/iproto.test.py                              [ pass ]\n"
"box/xlog.test.py                                [ pass ]\n"
"box/admin.test.lua                              [ pass ]\n"
"box/auth_access.test.lua                        [ pass ]\n"
"... etc."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:237
msgid "To prevent later confusion, clean up what's in the ``bin`` subdirectory:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:239
msgid "$ rm ~/tarantool/bin/python\n"
"$ rmdir ~/tarantool/bin"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:244
msgid "Make RPM and Debian packages."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:246
msgid "This step is optional. It's only for people who want to redistribute Tarantool. We highly recommend to use official packages from the `tarantool.org <https://tarantool.org/download.html>`_ web-site. However, you can build RPM and Debian packages using `PackPack <https://github.com/packpack/packpack>`_ or using the ``dpkg-buildpackage`` or ``rpmbuild`` tools. Please consult ``dpkg`` or ``rpmbuild`` documentation for details."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:254
msgid "Verify your Tarantool installation."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:256
msgid "$ # if you installed tarantool locally after build\n"
"$ tarantool\n"
"$ # - OR -\n"
"$ # if you didn't install tarantool locally after build\n"
"$ ./src/tarantool"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:264
msgid "This starts Tarantool in the interactive mode."
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:266
msgid "See also:"
msgstr ""

#: ../doc/dev_guide/building_from_source.rst:268
msgid "`Tarantool README.md <https://github.com/tarantool/tarantool/blob/1.10/README.md>`_"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:3
msgid "C Style Guide"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:5
msgid "The project's coding style is based on a version of the Linux kernel coding style."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:7
msgid "The latest version of the Linux style can be found at: http://www.kernel.org/doc/Documentation/CodingStyle"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:10
msgid "Since it is open for changes, the version of style that we follow, one from 2007-July-13, will be also copied later in this document."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:13
msgid "There are a few additional guidelines, either unique to Tarantool or deviating from the Kernel guidelines."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:16
msgid "Chapters 10 \"Kconfig configuration files\", 11 \"Data structures\", 13 \"Printing kernel messages\", 14 \"Allocating memory\" and 17 \"Don't re-invent the kernel macros\" do not apply, since they are specific to Linux kernel programming environment."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:21
msgid "The rest of Linux Kernel Coding Style is amended as follows:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:25
msgid "General guidelines"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:27
msgid "We use Git for revision control. The latest development is happening in the default branch (currently ``2.0``). Our git repository is hosted on github, and can be checked out with ``git clone git://github.com/tarantool/tarantool.git`` (anonymous read-only access)."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:32
msgid "If you have any questions about Tarantool internals, please post them on the developer discussion list, https://groups.google.com/forum/#!forum/tarantool. However, please be warned: Launchpad silently deletes posts from non-subscribed members, thus please be sure to have subscribed to the list prior to posting. Additionally, some engineers are always present on #tarantool channel on irc.freenode.net."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:40
msgid "Commenting style"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:42
msgid "Use Doxygen comment format, Javadoc flavor, i.e. `@tag` rather than `\\tag`. The main tags in use are @param, @retval, @return, @see, @note and @todo."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:45
msgid "Every function, except perhaps a very short and obvious one, should have a comment. A sample function comment may look like below:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:48
msgid "/** Write all data to a descriptor.\n"
" *\n"
" * This function is equivalent to 'write', except it would ensure\n"
" * that all data is written to the file unless a non-ignorable\n"
" * error occurs.\n"
" *\n"
" * @retval 0  Success\n"
" *\n"
" * @reval  1  An error occurred (not EINTR)\n"
" * /\n"
"static int\n"
"write_all(int fd, void \\*data, size_t len);"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:63
msgid "Public structures and important structure members should be commented as well."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:67
msgid "Header files"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:69
msgid "Use header guards. Put the header guard in the first line in the header, before the copyright or declarations. Use all-uppercase name for the header guard. Derive the header guard name from the file name, and append _INCLUDED to get a macro name. For example, core/log_io.h -> CORE_LOG_IO_H_INCLUDED. In ``.c`` (implementation) file, include the respective declaration header before all other headers, to ensure that the header is self- sufficient. Header \"header.h\" is self-sufficient if the following compiles without errors:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:77
msgid "#include \"header.h\""
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:83
msgid "Allocating memory"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:85
msgid "Prefer the supplied slab (salloc) and pool (palloc) allocators to malloc()/free() for any performance-intensive or large  memory allocations. Repetitive use of malloc()/free() can lead to memory fragmentation and should therefore be avoided."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:89
msgid "Always free all allocated memory, even allocated  at start-up. We aim at being valgrind leak-check clean, and in most cases it's just as easy to free() the allocated memory as it is to write a valgrind suppression. Freeing all allocated memory is also dynamic-load friendly: assuming a plug-in can be dynamically loaded and unloaded multiple times, reload should not lead to a memory leak."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:97
msgid "Other"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:99
msgid "Select GNU C99 extensions are acceptable. It's OK to mix declarations and statements, use true and false."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:102
msgid "The not-so-current list of all GCC C extensions can be found at: http://gcc.gnu.org/onlinedocs/gcc-4.3.5/gcc/C-Extensions.html"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:107
msgid "Linux kernel coding style"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:109
msgid "This is a short document describing the preferred coding style for the linux kernel.  Coding style is very personal, and I won't _force_ my views on anybody, but this is what goes for anything that I have to be able to maintain, and I'd prefer it for most other things too.  Please at least consider the points made here."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:115
msgid "First off, I'd suggest printing out a copy of the GNU coding standards, and NOT read it.  Burn them, it's a great symbolic gesture."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:118
msgid "Anyway, here goes:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:122
msgid "Chapter 1: Indentation"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:124
msgid "Tabs are 8 characters, and thus indentations are also 8 characters. There are heretic movements that try to make indentations 4 (or even 2!) characters deep, and that is akin to trying to define the value of PI to be 3."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:129
msgid "Rationale: The whole idea behind indentation is to clearly define where a block of control starts and ends.  Especially when you've been looking at your screen for 20 straight hours, you'll find it a lot easier to see how the indentation works if you have large indentations."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:134
msgid "Now, some people will claim that having 8-character indentations makes the code move too far to the right, and makes it hard to read on a 80-character terminal screen.  The answer to that is that if you need more than 3 levels of indentation, you're screwed anyway, and should fix your program."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:140
msgid "In short, 8-char indents make things easier to read, and have the added benefit of warning you when you're nesting your functions too deep. Heed that warning."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:144
msgid "The preferred way to ease multiple indentation levels in a switch statement is to align the \"switch\" and its subordinate \"case\" labels in the same column instead of \"double-indenting\" the \"case\" labels. e.g.:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:148
msgid "switch (suffix) {\n"
"case 'G':\n"
"case 'g':\n"
"    mem <<= 30;\n"
"    break;\n"
"case 'M':\n"
"case 'm':\n"
"    mem <<= 20;\n"
"    break;\n"
"case 'K':\n"
"case 'k':\n"
"    mem <<= 10;\n"
"    /* fall through */\n"
"default:\n"
"    break;\n"
"}"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:168
msgid "Don't put multiple statements on a single line unless you have something to hide:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:171
msgid "if (condition) do_this;\n"
"  do_something_everytime;"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:176
msgid "Don't put multiple assignments on a single line either. Kernel coding style is super simple. Avoid tricky expressions."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:179
msgid "Outside of comments, documentation and except in Kconfig, spaces are never used for indentation, and the above example is deliberately broken."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:182
msgid "Get a decent editor and don't leave whitespace at the end of lines."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:187
msgid "Chapter 2: Breaking long lines and strings"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:189
msgid "Coding style is all about readability and maintainability using commonly available tools."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:192
msgid "The limit on the length of lines is 80 columns, reduced to 66 columns for comments, and this is a strongly preferred limit."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:195
msgid "Statements longer than 80 columns will be broken into sensible chunks. Descendants are always substantially shorter than the parent and are placed substantially to the right. The same applies to function headers with a long argument list. Long strings are as well broken into shorter strings. The only exception to this is where exceeding 80 columns significantly increases readability and does not hide information."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:202
msgid "void fun(int a, int b, int c)\n"
"{\n"
"    if (condition)\n"
"        printk(KERN_WARNING \"Warning this is a long printk with \"\n"
"                        \"3 parameters a: %u b: %u \"\n"
"                        \"c: %u \\n\", a, b, c);\n"
"    else\n"
"        next_statement;\n"
"}"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:216
msgid "Chapter 3: Placing Braces and Spaces"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:218
msgid "The other issue that always comes up in C styling is the placement of braces.  Unlike the indent size, there are few technical reasons to choose one placement strategy over the other, but the preferred way, as shown to us by the prophets Kernighan and Ritchie, is to put the opening brace last on the line, and put the closing brace first, thusly:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:224
msgid "if (x is true) {\n"
"    we do y\n"
"}"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:230
msgid "This applies to all non-function statement blocks (if, switch, for, while, do). e.g.:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:233
msgid "switch (action) {\n"
"case KOBJ_ADD:\n"
"    return \"add\";\n"
"case KOBJ_REMOVE:\n"
"    return \"remove\";\n"
"case KOBJ_CHANGE:\n"
"    return \"change\";\n"
"default:\n"
"    return NULL;\n"
"}"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:246
msgid "However, there is one special case, namely functions: they have the opening brace at the beginning of the next line, thus:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:249
msgid "int function(int x)\n"
"{\n"
"    body of function;\n"
"}"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:256
msgid "Heretic people all over the world have claimed that this inconsistency is ...  well ...  inconsistent, but all right-thinking people know that (a) K&R are _right_ and (b) K&R are right.  Besides, functions are special anyway (you can't nest them in C)."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:261
msgid "Note that the closing brace is empty on a line of its own, _except_ in the cases where it is followed by a continuation of the same statement, ie a \"while\" in a do-statement or an \"else\" in an if-statement, like this:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:266
msgid "do {\n"
"    body of do-loop;\n"
"} while (condition);"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:272
msgid "and"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:274
msgid "if (x == y) {\n"
"    ..\n"
"} else if (x > y) {\n"
"    ...\n"
"} else {\n"
"    ....\n"
"}"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:284
msgid "Rationale: K&R."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:286
msgid "Also, note that this brace-placement also minimizes the number of empty (or almost empty) lines, without any loss of readability.  Thus, as the supply of new-lines on your screen is not a renewable resource (think 25-line terminal screens here), you have more empty lines to put comments on."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:292
msgid "Do not unnecessarily use braces where a single statement will do."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:294
msgid "if (condition)\n"
"    action();"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:299
msgid "This does not apply if one branch of a conditional statement is a single statement. Use braces in both branches."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:302
msgid "if (condition) {\n"
"    do_this();\n"
"    do_that();\n"
"} else {\n"
"    otherwise();\n"
"}"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:313
msgid "Chapter 3.1:  Spaces"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:315
msgid "Linux kernel style for use of spaces depends (mostly) on function-versus-keyword usage.  Use a space after (most) keywords.  The notable exceptions are sizeof, typeof, alignof, and __attribute__, which look somewhat like functions (and are usually used with parentheses in Linux, although they are not required in the language, as in: \"sizeof info\" after \"struct fileinfo info;\" is declared)."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:322
msgid "So use a space after these keywords: if, switch, case, for, do, while but not with sizeof, typeof, alignof, or __attribute__.  E.g.,"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:325
msgid "s = sizeof(struct file);"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:329
msgid "Do not add spaces around (inside) parenthesized expressions. This example is **bad**:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:332
msgid "s = sizeof( struct file );"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:336
msgid "When declaring pointer data or a function that returns a pointer type, the preferred use of '*' is adjacent to the data name or function name and not adjacent to the type name.  Examples:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:340
msgid "char *linux_banner;\n"
"unsigned long long memparse(char *ptr, char **retptr);\n"
"char *match_strdup(substring_t *s);"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:346
msgid "Use one space around (on each side of) most binary and ternary operators, such as any of these:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:349
msgid "=  +  -  <  >  *  /  %  |  &  ^  <=  >=  ==  !=  ?  :"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:351
msgid "but no space after unary operators:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:353
msgid "&  *  +  -  ~  !  sizeof  typeof  alignof  __attribute__  defined"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:355
msgid "no space before the postfix increment & decrement unary operators:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:357
#: ../doc/dev_guide/c_style_guide.rst:361
msgid "++  --"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:359
msgid "no space after the prefix increment & decrement unary operators:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:363
msgid "and no space around the '.' and \"->\" structure member operators."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:365
msgid "Do not leave trailing whitespace at the ends of lines.  Some editors with \"smart\" indentation will insert whitespace at the beginning of new lines as appropriate, so you can start typing the next line of code right away. However, some such editors do not remove the whitespace if you end up not putting a line of code there, such as if you leave a blank line.  As a result, you end up with lines containing trailing whitespace."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:372
msgid "Git will warn you about patches that introduce trailing whitespace, and can optionally strip the trailing whitespace for you; however, if applying a series of patches, this may make later patches in the series fail by changing their context lines."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:380
msgid "Chapter 4: Naming"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:382
msgid "C is a Spartan language, and so should your naming be.  Unlike Modula-2 and Pascal programmers, C programmers do not use cute names like ThisVariableIsATemporaryCounter.  A C programmer would call that variable \"tmp\", which is much easier to write, and not the least more difficult to understand."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:388
msgid "HOWEVER, while mixed-case names are frowned upon, descriptive names for global variables are a must.  To call a global function \"foo\" is a shooting offense."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:392
msgid "GLOBAL variables (to be used only if you _really_ need them) need to have descriptive names, as do global functions.  If you have a function that counts the number of active users, you should call that \"count_active_users()\" or similar, you should _not_ call it \"cntusr()\"."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:397
msgid "Encoding the type of a function into the name (so-called Hungarian notation) is brain damaged - the compiler knows the types anyway and can check those, and it only confuses the programmer.  No wonder MicroSoft makes buggy programs."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:402
msgid "LOCAL variable names should be short, and to the point.  If you have some random integer loop counter, it should probably be called \"i\". Calling it \"loop_counter\" is non-productive, if there is no chance of it being mis-understood.  Similarly, \"tmp\" can be just about any type of variable that is used to hold a temporary value."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:408
msgid "If you are afraid to mix up your local variable names, you have another problem, which is called the function-growth-hormone-imbalance syndrome. See chapter 6 (Functions)."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:415
msgid "Chapter 5: Typedefs"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:417
msgid "Please don't use things like \"vps_t\"."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:419
msgid "It's a _mistake_ to use typedef for structures and pointers. When you see a"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:421
msgid "vps_t a;"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:425
msgid "in the source, what does it mean?"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:427
msgid "In contrast, if it says"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:429
msgid "struct virtual_container *a;"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:433
msgid "you can actually tell what \"a\" is."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:435
msgid "Lots of people think that typedefs \"help readability\". Not so. They are useful only for:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:438
msgid "totally opaque objects (where the typedef is actively used to _hide_ what the object is)."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:441
msgid "Example: \"pte_t\" etc. opaque objects that you can only access using the proper accessor functions."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:444
msgid "NOTE! Opaqueness and \"accessor functions\" are not good in themselves. The reason we have them for things like pte_t etc. is that there really is absolutely _zero_ portably accessible information there."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:448
msgid "Clear integer types, where the abstraction _helps_ avoid confusion whether it is \"int\" or \"long\"."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:451
msgid "u8/u16/u32 are perfectly fine typedefs, although they fit into category (d) better than here."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:454
msgid "NOTE! Again - there needs to be a _reason_ for this. If something is \"unsigned long\", then there's no reason to do"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:457
msgid "typedef unsigned long myflags_t;"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:461
msgid "but if there is a clear reason for why it under certain circumstances might be an \"unsigned int\" and under other configurations might be \"unsigned long\", then by all means go ahead and use a typedef."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:465
msgid "when you use sparse to literally create a _new_ type for type-checking."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:468
msgid "New types which are identical to standard C99 types, in certain exceptional circumstances."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:471
msgid "Although it would only take a short amount of time for the eyes and brain to become accustomed to the standard types like 'uint32_t', some people object to their use anyway."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:475
msgid "Therefore, the Linux-specific 'u8/u16/u32/u64' types and their signed equivalents which are identical to standard types are permitted -- although they are not mandatory in new code of your own."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:480
msgid "When editing existing code which already uses one or the other set of types, you should conform to the existing choices in that code."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:483
msgid "Types safe for use in userspace."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:485
msgid "In certain structures which are visible to userspace, we cannot require C99 types and cannot use the 'u32' form above. Thus, we use __u32 and similar types in all structures which are shared with userspace."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:490
msgid "Maybe there are other cases too, but the rule should basically be to NEVER EVER use a typedef unless you can clearly match one of those rules."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:493
msgid "In general, a pointer, or a struct that has elements that can reasonably be directly accessed should **never** be a typedef."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:499
msgid "Chapter 6: Functions"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:501
msgid "Functions should be short and sweet, and do just one thing.  They should fit on one or two screenfuls of text (the ISO/ANSI screen size is 80x24, as we all know), and do one thing and do that well."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:505
msgid "The maximum length of a function is inversely proportional to the complexity and indentation level of that function.  So, if you have a conceptually simple function that is just one long (but simple) case-statement, where you have to do lots of small things for a lot of different cases, it's OK to have a longer function."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:511
msgid "However, if you have a complex function, and you suspect that a less-than-gifted first-year high-school student might not even understand what the function is all about, you should adhere to the maximum limits all the more closely.  Use helper functions with descriptive names (you can ask the compiler to in-line them if you think it's performance-critical, and it will probably do a better job of it than you would have done)."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:519
msgid "Another measure of the function is the number of local variables.  They shouldn't exceed 5-10, or you're doing something wrong.  Re-think the function, and split it into smaller pieces.  A human brain can generally easily keep track of about 7 different things, anything more and it gets confu/sed.  You know you're brilliant, but maybe you'd like to understand what you did 2 weeks from now."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:526
msgid "In source files, separate functions with one blank line.  If the function is exported, the EXPORT* macro for it should follow immediately after the closing function brace line.  E.g.:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:530
msgid "int system_is_up(void)\n"
"{\n"
"    return system_state == SYSTEM_RUNNING;\n"
"}\n"
"EXPORT_SYMBOL(system_is_up);"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:538
msgid "In function prototypes, include parameter names with their data types. Although this is not required by the C language, it is preferred in Linux because it is a simple way to add valuable information for the reader."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:544
msgid "Chapter 7: Centralized exiting of functions"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:546
msgid "Albeit deprecated by some people, the equivalent of the goto statement is used frequently by compilers in form of the unconditional jump instruction."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:549
msgid "The goto statement comes in handy when a function exits from multiple locations and some common work such as cleanup has to be done."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:552
msgid "The rationale is:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:554
msgid "unconditional statements are easier to understand and follow"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:555
msgid "nesting is reduced"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:556
msgid "errors by not updating individual exit points when making modifications are prevented"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:558
msgid "saves the compiler work to optimize redundant code away ;)"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:560
msgid "int fun(int a)\n"
"{\n"
"    int result = 0;\n"
"    char *buffer = kmalloc(SIZE);\n"
"\n"
"    if (buffer == NULL)\n"
"        return -ENOMEM;\n"
"\n"
"    if (condition1) {\n"
"        while (loop1) {\n"
"            ...\n"
"        }\n"
"        result = 1;\n"
"        goto out;\n"
"    }\n"
"    ...\n"
"out:\n"
"    kfree(buffer);\n"
"    return result;\n"
"}"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:585
msgid "Chapter 8: Commenting"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:587
msgid "Comments are good, but there is also a danger of over-commenting. NEVER try to explain HOW your code works in a comment: it's much better to write the code so that the _working_ is obvious, and it's a waste of time to explain badly written code. с Generally, you want your comments to tell WHAT your code does, not HOW. Also, try to avoid putting comments inside a function body: if the function is so complex that you need to separately comment parts of it, you should probably go back to chapter 6 for a while.  You can make small comments to note or warn about something particularly clever (or ugly), but try to avoid excess.  Instead, put the comments at the head of the function, telling people what it does, and possibly WHY it does it."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:601
msgid "When commenting the kernel API functions, please use the kernel-doc format. See the files Documentation/kernel-doc-nano-HOWTO.txt and scripts/kernel-doc for details."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:605
msgid "Linux style for comments is the C89 :code:`/* ... */`` style. Don't use C99-style :code:`// ...` comments."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:608
msgid "The preferred style for long (multi-line) comments is:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:610
msgid "/*\n"
" * This is the preferred style for multi-line\n"
" * comments in the Linux kernel source code.\n"
" * Please use it consistently.\n"
" *\n"
" * Description:  A column of asterisks on the left side,\n"
" * with beginning and ending almost-blank lines.\n"
" */"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:621
msgid "It's also important to comment data, whether they are basic types or derived types.  To this end, use just one data declaration per line (no commas for multiple data declarations).  This leaves you room for a small comment on each item, explaining its use."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:628
msgid "Chapter 9: You've made a mess of it"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:630
msgid "That's OK, we all do.  You've probably been told by your long-time Unix user helper that \"GNU emacs\" automatically formats the C sources for you, and you've noticed that yes, it does do that, but the defaults it uses are less than desirable (in fact, they are worse than random typing - an infinite number of monkeys typing into GNU emacs would never make a good program)."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:637
msgid "So, you can either get rid of GNU emacs, or change it to use saner values.  To do the latter, you can stick the following in your .emacs file:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:640
msgid "(defun c-lineup-arglist-tabs-only (ignored)\n"
"\"Line up argument lists by tabs, not spaces\"\n"
"(let* ((anchor (c-langelem-pos c-syntactic-element))\n"
"    (column (c-langelem-2nd-pos c-syntactic-element))\n"
"    (offset (- (1+ column) anchor))\n"
"    (steps (floor offset c-basic-offset)))\n"
"    (* (max steps 1)\n"
"    c-basic-offset)))\n"
"\n"
"(add-hook 'c-mode-common-hook\n"
"        (lambda ()\n"
"            ;; Add kernel style\n"
"            (c-add-style\n"
"            \"linux-tabs-only\"\n"
"            '(\"linux\" (c-offsets-alist\n"
"                        (arglist-cont-nonempty\n"
"                        c-lineup-gcc-asm-reg\n"
"                        c-lineup-arglist-tabs-only))))))\n"
"\n"
"(add-hook 'c-mode-hook\n"
"        (lambda ()\n"
"            (let ((filename (buffer-file-name)))\n"
"            ;; Enable kernel mode for the appropriate files\n"
"            (when (and filename\n"
"                        (string-match (expand-file-name \"~/src/linux-trees\")\n"
"                                    filename))\n"
"                (setq indent-tabs-mode t)\n"
"                (c-set-style \"linux-tabs-only\")))))"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:671
msgid "This will make emacs go better with the kernel coding style for C files below ~/src/linux-trees."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:674
msgid "But even if you fail in getting emacs to do sane formatting, not everything is lost: use \"indent\"."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:677
msgid "Now, again, GNU indent has the same brain-dead settings that GNU emacs has, which is why you need to give it a few command line options. However, that's not too bad, because even the makers of GNU indent recognize the authority of K&R (the GNU people aren't evil, they are just severely misguided in this matter), so you just give indent the options \"-kr -i8\" (stands for \"K&R, 8 character indents\"), or use \"scripts/Lindent\", which indents in the latest style."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:685
msgid "\"indent\" has a lot of options, and especially when it comes to comment re-formatting you may want to take a look at the man page.  But remember: \"indent\" is not a fix for bad programming."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:692
msgid "Chapter 10: Kconfig configuration files"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:694
msgid "For all of the Kconfig* configuration files throughout the source tree, the indentation is somewhat different.  Lines under a \"config\" definition are indented with one tab, while help text is indented an additional two spaces. Example:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:699
msgid "config AUDIT\n"
"    bool \"Auditing support\"\n"
"    depends on NET\n"
"    help\n"
"    Enable auditing infrastructure that can be used with another\n"
"    kernel subsystem, such as SELinux (which requires this for\n"
"    logging of avc messages output).  Does not do system-call\n"
"    auditing without CONFIG_AUDITSYSCALL."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:710
msgid "Features that might still be considered unstable should be defined as dependent on \"EXPERIMENTAL\":"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:713
msgid "config SLUB\n"
"    depends on EXPERIMENTAL && !ARCH_USES_SLAB_PAGE_STRUCT\n"
"    bool \"SLUB (Unqueued Allocator)\"\n"
"    ..."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:720
msgid "while seriously dangerous features (such as write support for certain filesystems) should advertise this prominently in their prompt string:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:723
msgid "config ADFS_FS_RW\n"
"    bool \"ADFS write support (DANGEROUS)\"\n"
"    depends on ADFS_FS\n"
"    ..."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:730
msgid "For full documentation on the configuration files, see the file Documentation/kbuild/kconfig-language.txt."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:736
msgid "Chapter 11: Data structures"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:738
msgid "Data structures that have visibility outside the single-threaded environment they are created and destroyed in should always have reference counts.  In the kernel, garbage collection doesn't exist (and outside the kernel garbage collection is slow and inefficient), which means that you absolutely _have_ to reference count all your uses."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:744
msgid "Reference counting means that you can avoid locking, and allows multiple users to have access to the data structure in parallel - and not having to worry about the structure suddenly going away from under them just because they slept or did something else for a while."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:749
msgid "Note that locking is _not_ a replacement for reference counting. Locking is used to keep data structures coherent, while reference counting is a memory management technique.  Usually both are needed, and they are not to be confused with each other."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:754
msgid "Many data structures can indeed have two levels of reference counting, when there are users of different \"classes\".  The subclass count counts the number of subclass users, and decrements the global count just once when the subclass count goes to zero."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:759
msgid "Examples of this kind of \"multi-level-reference-counting\" can be found in memory management (\"struct mm_struct\": mm_users and mm_count), and in filesystem code (\"struct super_block\": s_count and s_active)."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:763
msgid "Remember: if another thread can find your data structure, and you don't have a reference count on it, you almost certainly have a bug."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:768
msgid "Chapter 12: Macros, Enums and RTL"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:770
msgid "Names of macros defining constants and labels in enums are capitalized."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:772
msgid "#define CONSTANT 0x12345"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:776
msgid "Enums are preferred when defining several related constants."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:778
msgid "CAPITALIZED macro names are appreciated but macros resembling functions may be named in lower case."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:781
msgid "Generally, inline functions are preferable to macros resembling functions."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:783
msgid "Macros with multiple statements should be enclosed in a do - while block:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:785
msgid "#define macrofun(a, b, c)   \\\n"
"    do {                    \\\n"
"        if (a == 5)         \\\n"
"            do_this(b, c);  \\\n"
"    } while (0)"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:793
msgid "Things to avoid when using macros:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:795
msgid "macros that affect control flow:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:797
msgid "#define FOO(x)                  \\\n"
"    do {                        \\\n"
"        if (blah(x) < 0)        \\\n"
"            return -EBUGGERED;  \\\n"
"    } while(0)"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:805
msgid "is a _very_ bad idea.  It looks like a function call but exits the \"calling\" function; don't break the internal parsers of those who will read the code."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:808
msgid "macros that depend on having a local variable with a magic name:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:810
msgid "#define FOO(val) bar(index, val)"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:814
msgid "might look like a good thing, but it's confusing as hell when one reads the code and it's prone to breakage from seemingly innocent changes."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:817
msgid "macros with arguments that are used as l-values: FOO(x) = y; will bite you if somebody e.g. turns FOO into an inline function."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:820
msgid "forgetting about precedence: macros defining constants using expressions must enclose the expression in parentheses. Beware of similar issues with macros using parameters."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:824
msgid "#define CONSTANT 0x4000\n"
"#define CONSTEXP (CONSTANT | 3)"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:829
msgid "The cpp manual deals with macros exhaustively. The gcc internals manual also covers RTL which is used frequently with assembly language in the kernel."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:834
msgid "Chapter 13: Printing kernel messages"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:836
msgid "Kernel developers like to be seen as literate. Do mind the spelling of kernel messages to make a good impression. Do not use crippled words like \"dont\"; use \"do not\" or \"don't\" instead.  Make the messages concise, clear, and unambiguous."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:841
msgid "Kernel messages do not have to be terminated with a period."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:843
msgid "Printing numbers in parentheses (%d) adds no value and should be avoided."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:845
msgid "There are a number of driver model diagnostic macros in <linux/device.h> which you should use to make sure messages are matched to the right device and driver, and are tagged with the right level:  dev_err(), dev_warn(), dev_info(), and so forth.  For messages that aren't associated with a particular device, <linux/kernel.h> defines pr_debug() and pr_info()."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:851
msgid "Coming up with good debugging messages can be quite a challenge; and once you have them, they can be a huge help for remote troubleshooting.  Such messages should be compiled out when the DEBUG symbol is not defined (that is, by default they are not included).  When you use dev_dbg() or pr_debug(), that's automatic.  Many subsystems have Kconfig options to turn on -DDEBUG. A related convention uses VERBOSE_DEBUG to add dev_vdbg() messages to the ones already enabled by DEBUG."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:861
msgid "Chapter 14: Allocating memory"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:863
msgid "The kernel provides the following general purpose memory allocators: kmalloc(), kzalloc(), kcalloc(), and vmalloc().  Please refer to the API documentation for further information about them."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:867
msgid "The preferred form for passing a size of a struct is the following:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:869
msgid "p = kmalloc(sizeof(*p), ...);"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:873
msgid "The alternative form where struct name is spelled out hurts readability and introduces an opportunity for a bug when the pointer variable type is changed but the corresponding sizeof that is passed to a memory allocator is not."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:877
msgid "Casting the return value which is a void pointer is redundant. The conversion from void pointer to any other pointer type is guaranteed by the C programming language."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:883
msgid "Chapter 15: The inline disease"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:885
msgid "There appears to be a common misperception that gcc has a magic \"make me faster\" speedup option called \"inline\". While the use of inlines can be appropriate (for example as a means of replacing macros, see Chapter 12), it very often is not. Abundant use of the inline keyword leads to a much bigger kernel, which in turn slows the system as a whole down, due to a bigger icache footprint for the CPU and simply because there is less memory available for the pagecache. Just think about it; a pagecache miss causes a disk seek, which easily takes 5 milliseconds. There are a LOT of cpu cycles that can go into these 5 milliseconds."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:895
msgid "A reasonable rule of thumb is to not put inline at functions that have more than 3 lines of code in them. An exception to this rule are the cases where a parameter is known to be a compiletime constant, and as a result of this constantness you *know* the compiler will be able to optimize most of your function away at compile time. For a good example of this later case, see the kmalloc() inline function."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:902
msgid "Often people argue that adding inline to functions that are static and used only once is always a win since there is no space tradeoff. While this is technically correct, gcc is capable of inlining these automatically without help, and the maintenance issue of removing the inline when a second user appears outweighs the potential value of the hint that tells gcc to do something it would have done anyway."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:911
msgid "Chapter 16: Function return values and names"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:913
msgid "Functions can return values of many different kinds, and one of the most common is a value indicating whether the function succeeded or failed.  Such a value can be represented as an error-code integer (-Exxx = failure, 0 = success) or a \"succeeded\" boolean (0 = failure, non-zero = success)."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:919
msgid "Mixing up these two sorts of representations is a fertile source of difficult-to-find bugs.  If the C language included a strong distinction between integers and booleans then the compiler would find these mistakes for us... but it doesn't.  To help prevent such bugs, always follow this convention:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:961
msgid "If the name of a function is an action or an imperative command,\n"
"the function should return an error-code integer.  If the name\n"
"is a predicate, the function should return a \"succeeded\" boolean."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:931
msgid "For example, \"add work\" is a command, and the add_work() function returns 0 for success or -EBUSY for failure.  In the same way, \"PCI device present\" is a predicate, and the pci_dev_present() function returns 1 if it succeeds in finding a matching device or 0 if it doesn't."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:936
msgid "All EXPORTed functions must respect this convention, and so should all public functions.  Private (static) functions need not, but it is recommended that they do."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:940
msgid "Functions whose return value is the actual result of a computation, rather than an indication of whether the computation succeeded, are not subject to this rule.  Generally they indicate failure by returning some out-of-range result.  Typical examples would be functions that return pointers; they use NULL or the ERR_PTR mechanism to report failure."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:949
msgid "Chapter 17:  Don't re-invent the kernel macros"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:951
msgid "The header file include/linux/kernel.h contains a number of macros that you should use, rather than explicitly coding some variant of them yourself. For example, if you need to calculate the length of an array, take advantage of the macro"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:956
msgid "#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:960
msgid "Similarly, if you need to calculate the size of some structure member, use"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:962
msgid "#define FIELD_SIZEOF(t, f) (sizeof(((t*)0)->f))"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:966
msgid "There are also min() and max() macros that do strict type checking if you need them.  Feel free to peruse that header file to see what else is already defined that you shouldn't reproduce in your code."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:972
msgid "Chapter 18:  Editor modelines and other cruft"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:974
msgid "Some editors can interpret configuration information embedded in source files, indicated with special markers.  For example, emacs interprets lines marked like this:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:978
msgid "-*- mode: c -*-"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:982
msgid "Or like this:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:984
msgid "/*\n"
"Local Variables:\n"
"compile-command: \"gcc -DMAGIC_DEBUG_FLAG foo.c\"\n"
"End:\n"
"*/"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:992
msgid "Vim interprets markers that look like this:"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:994
msgid "/* vim:set sw=8 noet */"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:998
msgid "Do not include any of these in source files.  People have their own personal editor configurations, and your source files should not override them.  This includes markers for indentation and mode configuration.  People may use their own custom mode, or may have some other magic method for making indentation work correctly."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:1006
msgid "Appendix I: References"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:1008
msgid "`The C Programming Language, Second Edition <https://en.wikipedia.org/wiki/The_C_Programming_Language>`_ by Brian W. Kernighan and Dennis M. Ritchie. |br| Prentice Hall, Inc., 1988. |br| ISBN 0-13-110362-8 (paperback), 0-13-110370-9 (hardback)."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:1013
msgid "`The Practice of Programming <https://en.wikipedia.org/wiki/The_Practice_of_Programming>`_ by Brian W. Kernighan and Rob Pike. |br| Addison-Wesley, Inc., 1999. |br| ISBN 0-201-61586-X."
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:1018
msgid "`GNU manuals <http://www.gnu.org/manual/>`_ - where in compliance with K&R and this text - for **cpp**, **gcc**, **gcc internals** and **indent**"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:1021
msgid "`WG14 International standardization workgroup for the programming language C <http://www.open-std.org/JTC1/SC22/WG14/>`_"
msgstr ""

#: ../doc/dev_guide/c_style_guide.rst:1024
msgid "`Kernel CodingStyle, by greg@kroah.com at OLS 2002 <http://www.kroah.com/linux/talks/ols_2002_kernel_codingstyle_talk/html/>`_"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:3
msgid "Developer guidelines"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:9
msgid "How to work on a bug"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:11
msgid "Any defect, even minor, if it changes the user-visible server behavior, needs a bug report. Report a bug at http://github.com/tarantool/tarantool/issues."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:14
msgid "When reporting a bug, try to come up with a test case right away. Set the current maintenance milestone for the bug fix, and specify the series. Assign the bug to yourself. Put the status to 'In progress' Once the patch is ready, put the bug the bug to 'In review' and solicit a review for the fix."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:19
msgid "Once there is a positive code review, push the patch and set the status to 'Closed'"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:21
msgid "Patches for bugs should contain a reference to the respective Launchpad bug page or at least bug id. Each patch should have a test, unless coming up with one is difficult in the current framework, in which case QA should be alerted."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:25
msgid "There are two things you need to do when your patch makes it into the master:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:27
msgid "put the bug to 'fix committed',"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:28
msgid "delete the remote branch."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:34
msgid "How to write a commit message"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:36
msgid "Any commit needs a helpful message. Mind the following guidelines when committing to any of Tarantool repositories at GitHub."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:39
msgid "Separate subject from body with a blank line."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:40
msgid "Try to limit the subject line to **50 characters** or so."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:41
msgid "Start the subject line with a capital letter unless it prefixed with a subsystem name and semicolon:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:44
msgid "memtx:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:45
msgid "vinyl:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:46
msgid "xlog:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:47
msgid "replication:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:48
msgid "recovery:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:49
msgid "iproto:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:50
msgid "net.box:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:51
msgid "lua:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:52
msgid "sql:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:54
msgid "Do not end the subject line with a period."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:55
msgid "Do not put \"gh-xx\", \"closes #xxx\" to the subject line."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:56
msgid "Use the imperative mood in the subject line. A properly formed Git commit subject line should always be able to complete the following sentence: \"If applied, this commit will */your subject line here/*\"."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:59
msgid "Wrap the body to **72 characters** or so."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:60
msgid "Use the body to explain **what and why** vs. how."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:61
msgid "Link GitHub issues on the lasts lines (`see how <https://help.github.com/articles/closing-issues-via-commit-messages>`_)."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:63
msgid "Use your real name and real email address. For Tarantool team members, **@tarantool.org** email is preferred, but not mandatory."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:67
msgid "A template:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:69
msgid "Summarize changes in 50 characters or less\n"
"\n"
"More detailed explanatory text, if necessary.\n"
"Wrap it to 72 characters or so.\n"
"In some contexts, the first line is treated as the subject of the\n"
"commit, and the rest of the text as the body.\n"
"The blank line separating the summary from the body is critical\n"
"(unless you omit the body entirely); various tools like `log`,\n"
"`shortlog` and `rebase` can get confused if you run the two together.\n"
"\n"
"Explain the problem that this commit is solving. Focus on why you\n"
"are making this change as opposed to how (the code explains that).\n"
"Are there side effects or other unintuitive consequences of this\n"
"change? Here's the place to explain them.\n"
"\n"
"Further paragraphs come after blank lines.\n"
"\n"
"- Bullet points are okay, too.\n"
"\n"
"- Typically a hyphen or asterisk is used for the bullet, preceded\n"
"  by a single space, with blank lines in between, but conventions\n"
"  vary here.\n"
"\n"
"Fixes: #123\n"
"Closes: #456\n"
"Needed for: #859\n"
"See also: #343, #789"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:99
msgid "Some real-world examples:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:101
msgid "`tarantool/tarantool@2993a75 <https://github.com/tarantool/tarantool/commit/2993a75858352f101deb4a15cefd497ae6a78cf7>`_"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:102
msgid "`tarantool/tarantool@ccacba2 <https://github.com/tarantool/tarantool/commit/ccacba28f813fb99fd9eaf07fb41bf604dd341bc>`_"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:103
msgid "`tarantool/tarantool@386df3d <https://github.com/tarantool/tarantool/commit/386df3d3eb9c5239fc83fd4dd3292d1b49446b89>`_"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:104
msgid "`tarantool/tarantool@076a842 <https://github.com/tarantool/tarantool/commit/076a842011e09c84c25fb5e68f1b23c9917a3750>`_"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:106
msgid "Based on [1_] and [2_]."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:112
msgid "How to submit a patch for review"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:114
msgid "We don't accept GitHub pull requests. Instead, all patches should be sent as plain-text messages to tarantool-patches@dev.tarantool.org. Please subscribe to our mailing list at https://lists.tarantool.org/mailman/listinfo/tarantool-patches to ensure that your messages are added to the archive."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:120
msgid "**Preparing a patch**"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:122
msgid "Once you have committed a patch to your local git repository, you can submit it for review."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:125
msgid "To prepare an email, use ``git format-patch`` command:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:127
msgid "$ git format-patch -1"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:131
msgid "It will format the commit at the top of your local git repository as a plain-text email and write it to a file in the current directory. The file name will look like ``0001-your-commit-subject-line.patch``. To specify a different directory, use ``-o`` option:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:136
msgid "$ git format-patch -1 -o ~/patches-to-send"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:140
msgid "Once the patch has been formatted, you can view and edit it with your favorite text editor (after all, it is a plain-text file!). We strongly recommend adding:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:144
msgid "a hyperlink to the branch where this patch can be found at GitHub, and"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:145
msgid "a hyperlink to the GitHub issue your patch is supposed to fix, if any."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:147
msgid "If there is just one patch, the change log should go right after ``---`` in the message body (it will be ignored by ``git am`` then)."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:150
msgid "If there are multiple patches you want to submit in one go (e.g. this is a big feature which requires some preparatory patches to be committed first), you should send each patch in a separate email in reply to a cover letter. To format a patch series accordingly, pass the following options to ``git format-patch``:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:156
msgid "$ git format-patch --cover-letter --thread=shallow HEAD~2"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:160
msgid "where:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:162
msgid "``--cover-letter`` will make ``git format-patch`` generate a cover letter;"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:163
msgid "``--thread=shallow`` will mark each formatted patch email to be sent in reply to the cover letter;"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:165
msgid "``HEAD~2`` (we now use it instead of ``-1``) will make ``git format-patch`` format the first two patches at the top of your local git branch instead of just one. To format three patches, use ``HEAD~3``, and so forth."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:169
msgid "After the command has been successfully executed, you will find all your patches formatted as separate emails in your current directory (or in the directory specified via ``-o`` option):"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:173
msgid "0000-cover-letter.patch\n"
"0001-first-commit.patch\n"
"0002-second-commit.patch\n"
"..."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:180
msgid "The cover letter will have BLURB in its subject and body. You'll have to edit it before submitting (again, it is a plain text file). Please write:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:183
msgid "a short series description in the subject line;"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:184
msgid "a few words about each patch of the series in the body."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:186
msgid "And don't forget to add hyperlinks to the GitHub issue and branch where your series can be found. In this case you don't need to put links or any additional information to each individual email -- the cover letter will cover everything."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:193
msgid "To omit ``--cover-letter`` and ``--thread=shallow`` options, you can add the following lines to your gitconfig:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:196
msgid "[format]\n"
"    thread = shallow\n"
"    coverLetter = auto"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:202
msgid "**Sending a patch**"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:204
msgid "Once you have formatted your patches, they are ready to be sent via email. Of course, you can send them with your favorite mail agent, but it is much easier to use ``git send-email`` for this. Before using this command, you need to configure it."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:209
msgid "If you use a GMail account, add the following code to your ``.gitconfig``:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:211
msgid "[sendemail]\n"
"    smtpencryption = tls\n"
"    smtpserver = smtp.gmail.com\n"
"    smtpserverport = 587\n"
"    smtpuser = your.name@gmail.com\n"
"    smtppass = topsecret"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:220
msgid "For mail.ru users, the configuration will be slightly different:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:222
msgid "[sendemail]\n"
"    smtpencryption = ssl\n"
"    smtpserver = smtp.mail.ru\n"
"    smtpserverport = 465\n"
"    smtpuser = your.name@mail.ru\n"
"    smtppass = topsecret"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:231
msgid "If your email account is hosted by another service, consult your service provider about your SMTP settings."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:234
msgid "Once configured, use the following command to send your patches:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:236
msgid "$ git send-email --to tarantool-patches@dev.tarantool.org 00*"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:240
msgid "(``00*`` wildcard will be expanded by your shell to the list of patches generated at the previous step.)"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:243
msgid "If you want someone in particular to review your patch, add them to the list of recipients by passing ``--to`` or ``--cc`` once per each recipient."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:248
msgid "It is useful to check that ``git send-email`` will work as expected without sending anything to the world. Use ``--dry-run`` option for that."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:251
msgid "**Review process**"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:253
msgid "After having sent your patches, you just wait for a review. The reviewer will send their comments back to you in reply to the email that contains the patch that in their opinion needs to be fixed."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:257
msgid "Upon receiving an email with review remarks, you carefully read it and reply about whether you agree or disagree with. Please note that we use the interleaved reply style (aka \"inline reply\") for communications over email."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:261
msgid "Upon reaching an agreement, you send a fixed patch in reply to the email that ended the discussion. To send a patch, you can either attach a plain diff (created by ``git diff`` or ``git format-patch``) to email and send it with your favorite mail agent, or use ``--in-reply-to`` option of ``git send-email`` command."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:267
msgid "If you feel that the accumulated change set is large enough to send the whole series anew and restart the review process in a different thread, you generate the patch email(s) again with ``git format-patch``, this time adding v2 (then v3, v4, and so forth) to the subject and a change log to the message body. To modify the subject line accordingly, use the ``--subject-prefix`` option to ``git format-patch`` command:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:274
msgid "$ git format-patch -1 --subject-prefix='PATCH v2'"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:278
msgid "To add a change log, open the generated email with you favorite text editor and edit the message body. If there is just one patch, the change log should go right after ``---`` in the message body (it will be ignored by ``git am`` then). If there is more than one patch, the change log should be added to the cover letter. Here is an example of a good change log:"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:284
msgid "Changes in v3:\n"
"  - Fixed comments as per review by Alex\n"
"  - Added more tests\n"
"Changes in v2:\n"
"  - Fixed a crash if the user passes invalid options\n"
"  - Fixed a memory leak at exit"
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:293
msgid "It is also a good practice to add a reference to the previous version of your patch set (via a hyperlink or message id)."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:298
msgid "Do not disagree with the reviewer without providing a good argument supporting your point of view."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:300
msgid "Do not take every word the reviewer says for granted. Reviewers are humans too, hence fallible."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:302
msgid "Do not expect that the reviewer will tell you how to do your thing. It is not their job. The reviewer might suggest alternative ways to tackle the problem, but in general it is your responsibility."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:305
msgid "Do not forget to update your remote git branch every time you send a new version of your patch."
msgstr ""

#: ../doc/dev_guide/developer_guidelines.rst:307
msgid "Do follow the guidelines above. If you do not comply, your patches are likely to be silently ignored."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:5
msgid "Documentation guidelines"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:7
msgid "These guidelines are updated on the on-demand basis, covering only those issues that cause pains to the existing writers. At this point, we do not aim to come up with an exhaustive Documentation Style Guide for the Tarantool project."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:13
msgid "Markup issues"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:17
msgid "Wrapping text"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:19
msgid "The limit is 80 characters per line for plain text, and no limit for any other constructions when wrapping affects ReST readability and/or HTML output. Also, it makes no sense to wrap text into lines shorter than 80 characters unless you have a good reason to do so."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:24
msgid "The 80-character limit comes from the ISO/ANSI 80x24 screen resolution, and it's unlikely that readers/writers will use 80-character consoles. Yet it's still a standard for many coding guidelines (including Tarantool). As for writers, the benefit is that an 80-character page guide allows keeping the text window rather narrow most of the time, leaving more space for other applications in a wide-screen environment."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:33
msgid "Formatting code snippets"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:35
msgid "For code snippets, we mainly use the ``code-block`` directive with an appropriate highlighting language. The most commonly used highlighting languages are:"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:39
msgid "``.. code-block:: tarantoolsession``"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:40
msgid "``.. code-block:: console``"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:41
msgid "``.. code-block:: lua``"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:43
msgid "For example (a code snippet in Lua):"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:45
msgid "for page in paged_iter(\"X\", 10) do\n"
"  print(\"New Page. Number Of Tuples = \" .. #page)\n"
"  for i=1,#page,1 do print(page[i]) end\n"
"end"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:52
msgid "In rare cases, when we need custom highlight for specific parts of a code snippet and the ``code-block`` directive is not enough, we use the per-line ``codenormal`` directive together and explicit output formatting (defined in :file:`doc/sphinx/_static/sphinx_design.css`)."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:57
msgid "Examples:"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:59
msgid "Function syntax (the placeholder `space-name` is displayed in italics):"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:61
msgid ":codenormal:`box.space.`:codeitalic:`space-name`:codenormal:`:create_index('index-name')`"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:63
msgid "A tdb session (user input is in bold, command prompt is in blue, computer output is in green):"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:103
msgid "$ :codebold:`tarantool example.lua`\n"
":codeblue:`(TDB)`  :codegreen:`Tarantool debugger v.0.0.3. Type h for help`\n"
"example.lua\n"
":codeblue:`(TDB)`  :codegreen:`[example.lua]`\n"
":codeblue:`(TDB)`  :codenormal:`3: i = 1`"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:75
msgid "Warning: Every entry of explicit output formatting (``codenormal``, ``codebold``, etc) tends to cause troubles when this documentation is translated to other languages. Please avoid using explicit output formatting unless it is REALLY needed."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:82
msgid "Using separated links"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:84
msgid "Avoid separating the link and the target definition (ref), like this:"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:86
msgid "This is a paragraph that contains `a link`_.\n"
"\n"
".. _a link: http://example.com/"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:92
msgid "Use non-separated links instead:"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:94
msgid "This is a paragraph that contains `a link <http://example.com/>`_."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:98
msgid "Warning: Every separated link tends to cause troubles when this documentation is translated to other languages. Please avoid using separated links unless it is REALLY needed (e.g. in tables)."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:104
msgid "Creating labels for local links"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:106
msgid "We avoid using links that sphinx generates automatically for most objects. Instead, we add our own labels for linking to any place in this documentation."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:109
msgid "Our naming convention is as follows:"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:111
msgid "Character set: a through z, 0 through 9, dash, underscore."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:113
msgid "Format: ``path dash filename dash tag``"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:115
msgid "Example: ``_c_api-box_index-iterator_type`` |br| where: |br| ``c_api`` is the directory name, |br| ``box_index`` is the file name (without \".rst\"), and |br| ``iterator_type`` is the tag."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:121
msgid "The file name is useful for knowing, when you see \"ref\", where it is pointing to. And if the file name is meaningful, you see that better."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:124
msgid "The file name alone, without a path, is enough when the file name is unique within ``doc/sphinx``. So, for ``fiber.rst`` it should be just \"fiber\", not \"reference-fiber\". While for \"index.rst\" (we have a handful of \"index.rst\" in different directories) please specify the path before the file name, e.g. \"reference-index\"."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:131
msgid "Use a dash \"-\" to delimit the path and the file name. In the documentation source, we use only underscores \"_\" in paths and file names, reserving dash \"-\" as the delimiter for local links."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:135
msgid "The tag can be anything meaningful. The only guideline is for Tarantool syntax items (such as members), where the preferred tag syntax is ``module_or_object_name dash member_name``. For example, ``box_space-drop``."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:141
msgid "Making comments"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:143
msgid "Sometimes we may need to leave comments in a ReST file. To make sphinx ignore some text during processing, use the following per-line notation with \".. //\" as the comment marker:"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:147
msgid ".. // your comment here"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:151
msgid "The starting symbols \".. //\" do not interfere with the other ReST markup, and they are easy to find both visually and using grep. There are no symbols to escape in grep search, just go ahead with something like this:"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:155
msgid "$ grep \".. //\" doc/sphinx/dev_guide/*.rst"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:159
msgid "These comments don't work properly in nested documentation, though (e.g. if you leave a comment in module -> object -> method, sphinx ignores the comment and all nested content that follows in the method description)."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:165
msgid "Language and style issues"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:169
msgid "US vs British spelling"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:171
msgid "We use English US spelling."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:175
msgid "Instance vs server"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:177
msgid "We say \"instance\" rather than \"server\" to refer to an instance of Tarantool server. This keeps the manual terminology consistent with names like ``/etc/tarantool/instances.enabled`` in the Tarantool environment."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:181
msgid "Wrong usage: \"Replication allows multiple Tarantool *servers* to work on copies of the same databases.\""
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:184
msgid "Correct usage: \"Replication allows multiple Tarantool *instances* to work on copies of the same databases.\""
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:189
msgid "Examples and templates"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:193
msgid "Module and function"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:195
msgid "Here is an example of documenting a module (``my_fiber``) and a function (``my_fiber.create``)."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:202
msgid "Create and start a ``my_fiber`` object. The object is created and begins to run immediately."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:0
#: ../doc/dev_guide/documentation_guidelines.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/coio.rst:0
#: ../doc/dev_guide/reference_capi/coio.rst:0
#: ../doc/dev_guide/reference_capi/error.rst:0
#: ../doc/dev_guide/reference_capi/error.rst:0
#: ../doc/dev_guide/reference_capi/error.rst:0
#: ../doc/dev_guide/reference_capi/error.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/latch.rst:0
#: ../doc/dev_guide/reference_capi/latch.rst:0
#: ../doc/dev_guide/reference_capi/latch.rst:0
#: ../doc/dev_guide/reference_capi/say.rst:0
#: ../doc/dev_guide/reference_capi/say.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
msgid "Parameters"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:205
msgid "the function to be associated with the ``my_fiber`` object"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:206
msgid "what will be passed to function"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:0
#: ../doc/dev_guide/documentation_guidelines.rst:0
msgid "return"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:208
msgid "created ``my_fiber`` object"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:0
msgid "rtype"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:209
msgid "userdata"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:211
#: ../doc/dev_guide/documentation_guidelines.rst:249
#: ../doc/dev_guide/reference_capi/coio.rst:48
#: ../doc/dev_guide/reference_capi/say.rst:52
#: ../doc/dev_guide/reference_capi/tuple.rst:241
msgid "**Example:**"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:213
msgid "tarantool> my_fiber = require('my_fiber')\n"
"---\n"
"...\n"
"tarantool> function function_name()\n"
"         >   my_fiber.sleep(1000)\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> my_fiber_object = my_fiber.create(function_name)\n"
"---\n"
"..."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:229
msgid "Module, class and method"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:231
msgid "Here is an example of documenting a module (``my_box.index``), a class (``my_index_object``) and a function (``my_index_object.rename``)."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:240
msgid "Rename an index."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:242
msgid "an object reference"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:243
msgid "a new name for the index (type = string)"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:245
msgid "nil"
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:247
msgid "Possible errors: index_object does not exist."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:251
msgid "tarantool> box.space.space55.index.primary:rename('secondary')\n"
"---\n"
"..."
msgstr ""

#: ../doc/dev_guide/documentation_guidelines.rst:257
msgid "Complexity Factors: Index size, Index type, Number of tuples accessed."
msgstr ""

#: ../doc/dev_guide/guidelines_index.rst:3
msgid "Guidelines"
msgstr ""

#: ../doc/dev_guide/index.rst:5
msgid "Contributor's Guide"
msgstr ""

#: ../doc/dev_guide/internals_index.rst:3
msgid "Internals"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:5
msgid "Tarantool's binary protocol"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:7
msgid "Tarantool's binary protocol is a binary request/response protocol."
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:11
msgid "Notation in diagrams"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:13
msgid "0    X\n"
"+----+\n"
"|    | - X + 1 bytes\n"
"+----+\n"
" TYPE - type of MsgPack value (if it is a MsgPack object)\n"
"\n"
"+====+\n"
"|    | - Variable size MsgPack object\n"
"+====+\n"
" TYPE - type of MsgPack value\n"
"\n"
"+~~~~+\n"
"|    | - Variable size MsgPack Array/Map\n"
"+~~~~+\n"
" TYPE - type of MsgPack value"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:32
msgid "MsgPack data types:"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:34
msgid "**MP_INT** - Integer"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:35
msgid "**MP_MAP** - Map"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:36
msgid "**MP_ARR** - Array"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:37
msgid "**MP_STRING** - String"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:38
msgid "**MP_FIXSTR** - Fixed size string"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:39
msgid "**MP_OBJECT** - Any MsgPack object"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:40
msgid "**MP_BIN** - MsgPack binary format"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:44
msgid "Greeting packet"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:46
msgid "TARANTOOL'S GREETING:\n"
"\n"
"0                                     63\n"
"+--------------------------------------+\n"
"|                                      |\n"
"| Tarantool Greeting (server version)  |\n"
"|               64 bytes               |\n"
"+---------------------+----------------+\n"
"|                     |                |\n"
"| BASE64 encoded SALT |      NULL      |\n"
"|      44 bytes       |                |\n"
"+---------------------+----------------+\n"
"64                  107              127"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:62
msgid "The server instance begins the dialogue by sending a fixed-size (128-byte) text greeting to the client. The greeting always contains two 64-byte lines of ASCII text, each line ending with a newline character (:code:`\\n`). The first line contains the instance version and protocol type. The second line contains up to 44 bytes of base64-encoded random string, to use in the authentication packet, and ends with up to 23 spaces."
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:70
msgid "Unified packet structure"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:72
msgid "Once a greeting is read, the protocol becomes pure request/response and features a complete access to Tarantool functionality, including:"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:75
msgid "request multiplexing, e.g. ability to asynchronously issue multiple requests via the same connection"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:77
msgid "response format that supports zero-copy writes"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:79
msgid "The protocol uses `msgpack <http://msgpack.org>`_ for data structures and encoding."
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:82
msgid "The protocol uses maps that contain some integer constants as keys. These constants are defined in `src/box/iproto_constants.h <https://github.com/tarantool/tarantool/blob/1.9/src/box/iproto_constants.h>`_. We list common constants here:"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:87
msgid "-- user keys\n"
"<iproto_sync>          ::= 0x01\n"
"<iproto_schema_id>     ::= 0x05  /* also known as schema_version */\n"
"<iproto_space_id>      ::= 0x10\n"
"<iproto_index_id>      ::= 0x11\n"
"<iproto_limit>         ::= 0x12\n"
"<iproto_offset>        ::= 0x13\n"
"<iproto_iterator>      ::= 0x14\n"
"<iproto_key>           ::= 0x20\n"
"<iproto_tuple>         ::= 0x21\n"
"<iproto_function_name> ::= 0x22\n"
"<iproto_username>      ::= 0x23\n"
"<iproto_expr>          ::= 0x27 /* also known as expression */\n"
"<iproto_ops>           ::= 0x28\n"
"<iproto_data>          ::= 0x30\n"
"<iproto_error>         ::= 0x31"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:106
msgid "-- -- Value for <code> key in request can be:\n"
"-- User command codes\n"
"<iproto_select>       ::= 0x01\n"
"<iproto_insert>       ::= 0x02\n"
"<iproto_replace>      ::= 0x03\n"
"<iproto_update>       ::= 0x04\n"
"<iproto_delete>       ::= 0x05\n"
"<iproto_call_16>      ::= 0x06 /* as used in version 1.6 */\n"
"<iproto_auth>         ::= 0x07\n"
"<iproto_eval>         ::= 0x08\n"
"<iproto_upsert>       ::= 0x09\n"
"<iproto_call>         ::= 0x0a\n"
"-- Admin command codes\n"
"-- (including codes for replica-set initialization and master election)\n"
"<iproto_ping>         ::= 0x40\n"
"<iproto_join>         ::= 0x41 /* i.e. replication join */\n"
"<iproto_subscribe>    ::= 0x42\n"
"<iproto_request_vote> ::= 0x43\n"
"\n"
"-- -- Value for <code> key in response can be:\n"
"<iproto_ok>           ::= 0x00\n"
"<iproto_type_error>   ::= 0x8XXX /* where XXX is a value in errcode.h */"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:132
msgid "Both :code:`<header>` and :code:`<body>` are msgpack maps:"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:134
msgid "Request/Response:\n"
"\n"
"0        5\n"
"+--------+ +============+ +===================================+\n"
"| BODY + | |            | |                                   |\n"
"| HEADER | |   HEADER   | |               BODY                |\n"
"|  SIZE  | |            | |                                   |\n"
"+--------+ +============+ +===================================+\n"
"  MP_INT       MP_MAP                     MP_MAP"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:146
msgid "UNIFIED HEADER:\n"
"\n"
"+================+================+=====================+\n"
"|                |                |                     |\n"
"|   0x00: CODE   |   0x01: SYNC   |    0x05: SCHEMA_ID  |\n"
"| MP_INT: MP_INT | MP_INT: MP_INT |  MP_INT: MP_INT     |\n"
"|                |                |                     |\n"
"+================+================+=====================+\n"
"                          MP_MAP"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:158
msgid "They only differ in the allowed set of keys and values. The key defines the type of value that follows. If a body has no keys, the entire msgpack map for the body may be missing. Such is the case, for example, for a <ping> request. ``schema_id`` may be absent in the request's header, meaning that there will be no version checking, but it must be present in the response. If ``schema_id`` is sent in the header, then it will be checked."
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:169
msgid "Authentication"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:171
msgid "When a client connects to the server instance, the instance responds with a 128-byte text greeting message. Part of the greeting is base-64 encoded session salt - a random string which can be used for authentication. The length of decoded salt (44 bytes) exceeds the amount necessary to sign the authentication message (first 20 bytes). An excess is reserved for future authentication schemas."
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:178
msgid "PREPARE SCRAMBLE:\n"
"\n"
"    LEN(ENCODED_SALT) = 44;\n"
"    LEN(SCRAMBLE)     = 20;\n"
"\n"
"prepare 'chap-sha1' scramble:\n"
"\n"
"    salt = base64_decode(encoded_salt);\n"
"    step_1 = sha1(password);\n"
"    step_2 = sha1(step_1);\n"
"    step_3 = sha1(salt, step_2);\n"
"    scramble = xor(step_1, step_3);\n"
"    return scramble;\n"
"\n"
"AUTHORIZATION BODY: CODE = 0x07\n"
"\n"
"+==================+====================================+\n"
"|                  |        +-------------+-----------+ |\n"
"|  (KEY)           | (TUPLE)|  len == 9   | len == 20 | |\n"
"|   0x23:USERNAME  |   0x21:| \"chap-sha1\" |  SCRAMBLE | |\n"
"| MP_INT:MP_STRING | MP_INT:|  MP_STRING  |  MP_BIN   | |\n"
"|                  |        +-------------+-----------+ |\n"
"|                  |                   MP_ARRAY         |\n"
"+==================+====================================+\n"
"                        MP_MAP"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:206
msgid ":code:`<key>` holds the user name. :code:`<tuple>` must be an array of 2 fields: authentication mechanism (\"chap-sha1\" is the only supported mechanism right now) and password, encrypted according to the specified mechanism. Authentication in Tarantool is optional, if no authentication is performed, session user is 'guest'. The instance responds to authentication packet with a standard response with 0 tuples."
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:214
msgid "Requests"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:216
msgid "SELECT: CODE - 0x01 Find tuples matching the search pattern"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:219
msgid "SELECT BODY:\n"
"\n"
"+==================+==================+==================+\n"
"|                  |                  |                  |\n"
"|   0x10: SPACE_ID |   0x11: INDEX_ID |   0x12: LIMIT    |\n"
"| MP_INT: MP_INT   | MP_INT: MP_INT   | MP_INT: MP_INT   |\n"
"|                  |                  |                  |\n"
"+==================+==================+==================+\n"
"|                  |                  |                  |\n"
"|   0x13: OFFSET   |   0x14: ITERATOR |   0x20: KEY      |\n"
"| MP_INT: MP_INT   | MP_INT: MP_INT   | MP_INT: MP_ARRAY |\n"
"|                  |                  |                  |\n"
"+==================+==================+==================+\n"
"                          MP_MAP"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:236
msgid "INSERT:  CODE - 0x02 Inserts tuple into the space, if no tuple with same unique keys exists. Otherwise throw *duplicate key* error."
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:238
msgid "REPLACE: CODE - 0x03 Insert a tuple into the space or replace an existing one."
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:241
msgid "INSERT/REPLACE BODY:\n"
"\n"
"+==================+==================+\n"
"|                  |                  |\n"
"|   0x10: SPACE_ID |   0x21: TUPLE    |\n"
"| MP_INT: MP_INT   | MP_INT: MP_ARRAY |\n"
"|                  |                  |\n"
"+==================+==================+\n"
"                 MP_MAP"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:254
msgid "UPDATE: CODE - 0x04 Update a tuple"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:257
msgid "UPDATE BODY:\n"
"\n"
"+==================+=======================+\n"
"|                  |                       |\n"
"|   0x10: SPACE_ID |   0x11: INDEX_ID      |\n"
"| MP_INT: MP_INT   | MP_INT: MP_INT        |\n"
"|                  |                       |\n"
"+==================+=======================+\n"
"|                  |          +~~~~~~~~~~+ |\n"
"|                  |          |          | |\n"
"|                  | (TUPLE)  |    OP    | |\n"
"|   0x20: KEY      |    0x21: |          | |\n"
"| MP_INT: MP_ARRAY |  MP_INT: +~~~~~~~~~~+ |\n"
"|                  |            MP_ARRAY   |\n"
"+==================+=======================+\n"
"                 MP_MAP"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:276
msgid "OP:\n"
"    Works only for integer fields:\n"
"    * Addition    OP = '+' . space[key][field_no] += argument\n"
"    * Subtraction OP = '-' . space[key][field_no] -= argument\n"
"    * Bitwise AND OP = '&' . space[key][field_no] &= argument\n"
"    * Bitwise XOR OP = '^' . space[key][field_no] ^= argument\n"
"    * Bitwise OR  OP = '|' . space[key][field_no] |= argument\n"
"    Works on any fields:\n"
"    * Delete      OP = '#'\n"
"      delete <argument> fields starting\n"
"      from <field_no> in the space[<key>]\n"
"\n"
"0           2\n"
"+-----------+==========+==========+\n"
"|           |          |          |\n"
"|    OP     | FIELD_NO | ARGUMENT |\n"
"| MP_FIXSTR |  MP_INT  |  MP_INT  |\n"
"|           |          |          |\n"
"+-----------+==========+==========+\n"
"              MP_ARRAY"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:299
msgid "    * Insert      OP = '!'\n"
"      insert <argument> before <field_no>\n"
"    * Assign      OP = '='\n"
"      assign <argument> to field <field_no>.\n"
"      will extend the tuple if <field_no> == <max_field_no> + 1\n"
"\n"
"0           2\n"
"+-----------+==========+===========+\n"
"|           |          |           |\n"
"|    OP     | FIELD_NO | ARGUMENT  |\n"
"| MP_FIXSTR |  MP_INT  | MP_OBJECT |\n"
"|           |          |           |\n"
"+-----------+==========+===========+\n"
"              MP_ARRAY\n"
"\n"
"    Works on string fields:\n"
"    * Splice      OP = ':'\n"
"      take the string from space[key][field_no] and\n"
"      substitute <offset> bytes from <position> with <argument>"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:321
msgid "0           2\n"
"+-----------+==========+==========+========+==========+\n"
"|           |          |          |        |          |\n"
"|    ':'    | FIELD_NO | POSITION | OFFSET | ARGUMENT |\n"
"| MP_FIXSTR |  MP_INT  |  MP_INT  | MP_INT |  MP_STR  |\n"
"|           |          |          |        |          |\n"
"+-----------+==========+==========+========+==========+\n"
"                         MP_ARRAY"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:333
msgid "It is an error to specify an argument of a type that differs from the expected type."
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:335
msgid "DELETE: CODE - 0x05 Delete a tuple"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:338
msgid "DELETE BODY:\n"
"\n"
"+==================+==================+==================+\n"
"|                  |                  |                  |\n"
"|   0x10: SPACE_ID |   0x11: INDEX_ID |   0x20: KEY      |\n"
"| MP_INT: MP_INT   | MP_INT: MP_INT   | MP_INT: MP_ARRAY |\n"
"|                  |                  |                  |\n"
"+==================+==================+==================+\n"
"                          MP_MAP"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:351
msgid "CALL_16: CODE - 0x06 Call a stored function, returning an array of tuples. This is deprecated; CALL (0x0a) is recommended instead."
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:354
msgid "CALL_16 BODY:\n"
"\n"
"+=======================+==================+\n"
"|                       |                  |\n"
"|   0x22: FUNCTION_NAME |   0x21: TUPLE    |\n"
"| MP_INT: MP_STRING     | MP_INT: MP_ARRAY |\n"
"|                       |                  |\n"
"+=======================+==================+\n"
"                    MP_MAP"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:368
msgid "EVAL: CODE - 0x08 Evaulate Lua expression"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:371
msgid "EVAL BODY:\n"
"\n"
"+=======================+==================+\n"
"|                       |                  |\n"
"|   0x27: EXPRESSION    |   0x21: TUPLE    |\n"
"| MP_INT: MP_STRING     | MP_INT: MP_ARRAY |\n"
"|                       |                  |\n"
"+=======================+==================+\n"
"                    MP_MAP"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:384
msgid "UPSERT: CODE - 0x09 Update tuple if it would be found elsewhere try to insert tuple. Always use primary index for key."
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:387
msgid "UPSERT BODY:\n"
"\n"
"+==================+==================+==========================+\n"
"|                  |                  |             +~~~~~~~~~~+ |\n"
"|                  |                  |             |          | |\n"
"|   0x10: SPACE_ID |   0x21: TUPLE    |       (OPS) |    OP    | |\n"
"| MP_INT: MP_INT   | MP_INT: MP_ARRAY |       0x28: |          | |\n"
"|                  |                  |     MP_INT: +~~~~~~~~~~+ |\n"
"|                  |                  |               MP_ARRAY   |\n"
"+==================+==================+==========================+\n"
"                                MP_MAP\n"
"\n"
"Operations structure same as for UPDATE operation.\n"
"   0           2\n"
"+-----------+==========+==========+\n"
"|           |          |          |\n"
"|    OP     | FIELD_NO | ARGUMENT |\n"
"| MP_FIXSTR |  MP_INT  |  MP_INT  |\n"
"|           |          |          |\n"
"+-----------+==========+==========+\n"
"              MP_ARRAY\n"
"\n"
"Supported operations:\n"
"\n"
"'+' - add a value to a numeric field. If the filed is not numeric, it's\n"
"      changed to 0 first. If the field does not exist, the operation is\n"
"      skipped. There is no error in case of overflow either, the value\n"
"      simply wraps around in C style. The range of the integer is MsgPack:\n"
"      from -2^63 to 2^64-1\n"
"'-' - same as the previous, but subtract a value\n"
"'=' - assign a field to a value. The field must exist, if it does not exist,\n"
"      the operation is skipped.\n"
"'!' - insert a field. It's only possible to insert a field if this create no\n"
"      nil \"gaps\" between fields. E.g. it's possible to add a field between\n"
"      existing fields or as the last field of the tuple.\n"
"'#' - delete a field. If the field does not exist, the operation is skipped.\n"
"      It's not possible to change with update operations a part of the primary\n"
"      key (this is validated before performing upsert)."
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:428
msgid "CALL: CODE - 0x0a Similar to CALL_16, but -- like EVAL, CALL returns a list of values, unconverted"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:431
msgid "CALL BODY:\n"
"\n"
"+=======================+==================+\n"
"|                       |                  |\n"
"|   0x22: FUNCTION_NAME |   0x21: TUPLE    |\n"
"| MP_INT: MP_STRING     | MP_INT: MP_ARRAY |\n"
"|                       |                  |\n"
"+=======================+==================+\n"
"                    MP_MAP"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:446
msgid "Response packet structure"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:448
msgid "We will show whole packets here:"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:450
msgid "OK:    LEN + HEADER + BODY\n"
"\n"
"0      5                                          OPTIONAL\n"
"+------++================+================++===================+\n"
"|      ||                |                ||                   |\n"
"| BODY ||   0x00: 0x00   |   0x01: SYNC   ||   0x30: DATA      |\n"
"|HEADER|| MP_INT: MP_INT | MP_INT: MP_INT || MP_INT: MP_OBJECT |\n"
"| SIZE ||                |                ||                   |\n"
"+------++================+================++===================+\n"
" MP_INT                MP_MAP                      MP_MAP"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:464
msgid "Set of tuples in the response :code:`<data>` expects a msgpack array of tuples as value EVAL command returns arbitrary `MP_ARRAY` with arbitrary MsgPack values."
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:467
msgid "ERROR: LEN + HEADER + BODY\n"
"\n"
"0      5\n"
"+------++================+================++===================+\n"
"|      ||                |                ||                   |\n"
"| BODY ||   0x00: 0x8XXX |   0x01: SYNC   ||   0x31: ERROR     |\n"
"|HEADER|| MP_INT: MP_INT | MP_INT: MP_INT || MP_INT: MP_STRING |\n"
"| SIZE ||                |                ||                   |\n"
"+------++================+================++===================+\n"
" MP_INT                MP_MAP                      MP_MAP\n"
"\n"
"Where 0xXXX is ERRCODE."
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:482
msgid "An error message is present in the response only if there is an error; :code:`<error>` expects as value a msgpack string."
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:485
msgid "Convenience macros which define hexadecimal constants for return codes can be found in `src/box/errcode.h <https://github.com/tarantool/tarantool/blob/1.10/src/box/errcode.h>`_"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:491
msgid "Replication packet structure"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:493
msgid "-- replication keys\n"
"<server_id>     ::= 0x02\n"
"<lsn>           ::= 0x03\n"
"<timestamp>     ::= 0x04\n"
"<server_uuid>   ::= 0x24\n"
"<cluster_uuid>  ::= 0x25\n"
"<vclock>        ::= 0x26"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:503
msgid "-- replication codes\n"
"<join>      ::= 0x41\n"
"<subscribe> ::= 0x42"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:510
msgid "JOIN:\n"
"\n"
"In the beginning you must send initial JOIN\n"
"               HEADER                      BODY\n"
"+================+================++===================+\n"
"|                |                ||   SERVER_UUID     |\n"
"|   0x00: 0x41   |   0x01: SYNC   ||   0x24: UUID      |\n"
"| MP_INT: MP_INT | MP_INT: MP_INT || MP_INT: MP_STRING |\n"
"|                |                ||                   |\n"
"+================+================++===================+\n"
"               MP_MAP                     MP_MAP\n"
"\n"
"Then instance, which we connect to, will send last SNAP file by, simply,\n"
"creating a number of INSERTs (with additional LSN and ServerID)\n"
"(don't reply). Then it'll send a vclock's MP_MAP and close a socket.\n"
"\n"
"+================+================++============================+\n"
"|                |                ||        +~~~~~~~~~~~~~~~~~+ |\n"
"|                |                ||        |                 | |\n"
"|   0x00: 0x00   |   0x01: SYNC   ||   0x26:| SRV_ID: SRV_LSN | |\n"
"| MP_INT: MP_INT | MP_INT: MP_INT || MP_INT:| MP_INT: MP_INT  | |\n"
"|                |                ||        +~~~~~~~~~~~~~~~~~+ |\n"
"|                |                ||               MP_MAP       |\n"
"+================+================++============================+\n"
"               MP_MAP                      MP_MAP\n"
"\n"
"SUBSCRIBE:\n"
"\n"
"Then you must send SUBSCRIBE:\n"
"\n"
"                              HEADER\n"
"+===================+===================+\n"
"|                   |                   |\n"
"|     0x00: 0x42    |    0x01: SYNC     |\n"
"|   MP_INT: MP_INT  |  MP_INT: MP_INT   |\n"
"|                   |                   |\n"
"+===================+===================+\n"
"|    SERVER_UUID    |    CLUSTER_UUID   |\n"
"|   0x24: UUID      |   0x25: UUID      |\n"
"| MP_INT: MP_STRING | MP_INT: MP_STRING |\n"
"|                   |                   |\n"
"+===================+===================+\n"
"                 MP_MAP\n"
"\n"
"      BODY\n"
"+================+\n"
"|                |\n"
"|   0x26: VCLOCK |\n"
"| MP_INT: MP_INT |\n"
"|                |\n"
"+================+\n"
"      MP_MAP\n"
"\n"
"Then you must process every query that'll came through other masters.\n"
"Every request between masters will have Additional LSN and SERVER_ID."
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:570
msgid "XLOG / SNAP"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:572
msgid "XLOG and SNAP files have nearly the same format. The header looks like:"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:574
msgid "<type>\\n                  SNAP\\n or XLOG\\n\n"
"<version>\\n               currently 0.13\\n\n"
"Server: <server_uuid>\\n   where UUID is a 36-byte string\n"
"VClock: <vclock_map>\\n    e.g. {1: 0}\\n\n"
"\\n"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:582
msgid "After the file header come the data tuples. Tuples begin with a row marker ``0xd5ba0bab`` and the last tuple may be followed by an EOF marker ``0xd510aded``. Thus, between the file header and the EOF marker, there may be data tuples that have this form:"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:589
msgid "0            3 4                                         17\n"
"+-------------+========+============+===========+=========+\n"
"|             |        |            |           |         |\n"
"| 0xd5ba0bab  | LENGTH | CRC32 PREV | CRC32 CUR | PADDING |\n"
"|             |        |            |           |         |\n"
"+-------------+========+============+===========+=========+\n"
"  MP_FIXEXT2    MP_INT     MP_INT       MP_INT      ---\n"
"\n"
"+============+ +===================================+\n"
"|            | |                                   |\n"
"|   HEADER   | |                BODY               |\n"
"|            | |                                   |\n"
"+============+ +===================================+\n"
"    MP_MAP                     MP_MAP"
msgstr ""

#: ../doc/dev_guide/box_protocol.rst:606
msgid "See the example in the following section."
msgstr ""

#: ../doc/dev_guide/internals.rst:9
msgid "Data persistence and the WAL file format"
msgstr ""

#: ../doc/dev_guide/internals.rst:11
msgid "To maintain data persistence, Tarantool writes each data change request (insert, update, delete, replace, upsert) into a write-ahead log (WAL) file in the :ref:`wal_dir <cfg_basic-wal_dir>` directory. A new WAL file is created for every :ref:`rows_per_wal <cfg_binary_logging_snapshots-rows_per_wal>` records, or for every :ref:`wal_max_size <cfg_binary_logging_snapshots-wal_max_size>` bytes. Each data change request gets assigned a continuously growing 64-bit log sequence number. The name of the WAL file is based on the log sequence number of the first record in the file, plus an extension ``.xlog``."
msgstr ""

#: ../doc/dev_guide/internals.rst:20
msgid "Apart from a log sequence number and the data change request (formatted as in :ref:`Tarantool's binary protocol <box_protocol-iproto_protocol>`), each WAL record contains a header, some metadata, and then the data formatted according to `msgpack <https://en.wikipedia.org/wiki/MessagePack>`_ rules. For example, this is what the WAL file looks like after the first INSERT request (\"s:insert({1})\") for the sandbox database created in our :ref:`\"Getting started\" exercises <getting_started>`. On the left are the hexadecimal bytes that you would see with:"
msgstr ""

#: ../doc/dev_guide/internals.rst:29
msgid "$ hexdump 00000000000000000000.xlog"
msgstr ""

#: ../doc/dev_guide/internals.rst:33
msgid "and on the right are comments."
msgstr ""

#: ../doc/dev_guide/internals.rst:35
msgid "Hex dump of WAL file       Comment\n"
"--------------------       -------\n"
"58 4c 4f 47 0a             \"XLOG\\n\"\n"
"30 2e 31 33 0a             \"0.13\\n\" = version\n"
"53 65 72 76 65 72 3a 20    \"Server: \"\n"
"38 62 66 32 32 33 65 30 2d [Server UUID]\\n\n"
"36 39 31 34 2d 34 62 35 35\n"
"2d 39 34 64 32 2d 64 32 62\n"
"36 64 30 39 62 30 31 39 36\n"
"0a\n"
"56 43 6c 6f 63 6b 3a 20    \"Vclock: \"\n"
"7b 7d                      \"{}\" = vclock value, initially blank\n"
"...                        (not shown = tuples for system spaces)\n"
"d5 ba 0b ab                Magic row marker always = 0xab0bbad5\n"
"19                         Length, not including length of header, = 25 bytes\n"
"00                           Record header: previous crc32\n"
"ce 8c 3e d6 70               Record header: current crc32\n"
"a7 cc 73 7f 00 00 66 39      Record header: padding\n"
"84                         msgpack code meaning \"Map of 4 elements\" follows\n"
"00 02                         element#1: tag=request type, value=0x02=IPROTO_INSERT\n"
"02 01                         element#2: tag=server id, value=0x01\n"
"03 04                         element#3: tag=lsn, value=0x04\n"
"04 cb 41 d4 e2 2f 62 fd d5 d4 element#4: tag=timestamp, value=an 8-byte \"Float64\"\n"
"82                         msgpack code meaning \"map of 2 elements\" follows\n"
"10 cd 02 00                   element#1: tag=space id, value=512, big byte first\n"
"21 91 01                      element#2: tag=tuple, value=1-element fixed array={1}"
msgstr ""

#: ../doc/dev_guide/internals.rst:64
msgid "A tool for reading .xlog files is Tarantool's :ref:`xlog module <xlog>`."
msgstr ""

#: ../doc/dev_guide/internals.rst:66
msgid "Tarantool processes requests atomically: a change is either accepted and recorded in the WAL, or discarded completely. Let's clarify how this happens, using the REPLACE request as an example:"
msgstr ""

#: ../doc/dev_guide/internals.rst:70
msgid "The server instance attempts to locate the original tuple by primary key. If found, a reference to the tuple is retained for later use."
msgstr ""

#: ../doc/dev_guide/internals.rst:73
msgid "The new tuple is validated. If for example it does not contain an indexed field, or it has an indexed field whose type does not match the type according to the index definition, the change is aborted."
msgstr ""

#: ../doc/dev_guide/internals.rst:77
msgid "The new tuple replaces the old tuple in all existing indexes."
msgstr ""

#: ../doc/dev_guide/internals.rst:79
msgid "A message is sent to the writer process running in the WAL thread, requesting that the change be recorded in the WAL. The instance switches to work on the next request until the write is acknowledged."
msgstr ""

#: ../doc/dev_guide/internals.rst:83
msgid "On success, a confirmation is sent to the client. On failure, a rollback procedure is begun. During the rollback procedure, the transaction processor rolls back all changes to the database which occurred after the first failed change, from latest to oldest, up to the first failed change. All rolled back requests are aborted with :errcode:`ER_WAL_IO <ER_WAL_IO>` error. No new change is applied while rollback is in progress. When the rollback procedure is finished, the server restarts the processing pipeline."
msgstr ""

#: ../doc/dev_guide/internals.rst:91
msgid "One advantage of the described algorithm is that complete request pipelining is achieved, even for requests on the same value of the primary key. As a result, database performance doesn't degrade even if all requests refer to the same key in the same space."
msgstr ""

#: ../doc/dev_guide/internals.rst:96
msgid "The transaction processor thread communicates with the WAL writer thread using asynchronous (yet reliable) messaging; the transaction processor thread, not being blocked on WAL tasks, continues to handle requests quickly even at high volumes of disk I/O. A response to a request is sent as soon as it is ready, even if there were earlier incomplete requests on the same connection. In particular, SELECT performance, even for SELECTs running on a connection packed with UPDATEs and DELETEs, remains unaffected by disk load."
msgstr ""

#: ../doc/dev_guide/internals.rst:104
msgid "The WAL writer employs a number of durability modes, as defined in configuration variable :ref:`wal_mode <index-wal_mode>`. It is possible to turn the write-ahead log completely off, by setting :ref:`wal_mode <cfg_binary_logging_snapshots-wal_mode>` to *none*. Even without the write-ahead log it's still possible to take a persistent copy of the entire data set with the :ref:`box.snapshot() <box-snapshot>` request."
msgstr ""

#: ../doc/dev_guide/internals.rst:111
msgid "An .xlog file always contains changes based on the primary key. Even if the client requested an update or delete using a secondary key, the record in the .xlog file will contain the primary key."
msgstr ""

#: ../doc/dev_guide/internals.rst:119
msgid "The snapshot file format"
msgstr ""

#: ../doc/dev_guide/internals.rst:121
msgid "The format of a snapshot .snap file is nearly the same as the format of a WAL .xlog file. However, the snapshot header differs: it contains the instance's global unique identifier and the snapshot file's position in history, relative to earlier snapshot files. Also, the content differs: an .xlog file may contain records for any data-change requests (inserts, updates, upserts, and deletes), a .snap file may only contain records of inserts to memtx spaces."
msgstr ""

#: ../doc/dev_guide/internals.rst:128
msgid "Primarily, the .snap file's records are ordered by space id. Therefore the records of system spaces -- such as ``_schema``, ``_space``, ``_index``, ``_func``, ``_priv`` and ``_cluster`` -- will be at the start of the .snap file, before the records of any spaces that were created by users."
msgstr ""

#: ../doc/dev_guide/internals.rst:133
msgid "Secondarily, the .snap file's records are ordered by primary key within space id."
msgstr ""

#: ../doc/dev_guide/internals.rst:139
msgid "The recovery process"
msgstr ""

#: ../doc/dev_guide/internals.rst:141
msgid "The recovery process begins when box.cfg{} happens for the first time after the Tarantool server instance starts."
msgstr ""

#: ../doc/dev_guide/internals.rst:144
msgid "The recovery process must recover the databases as of the moment when the instance was last shut down. For this it may use the latest snapshot file and any WAL files that were written after the snapshot. One complicating factor is that Tarantool has two engines -- the memtx data must be reconstructed entirely from the snapshot and the WAL files, while the vinyl data will be on disk but might require updating around the time of a checkpoint. (When a snapshot happens, Tarantool tells the vinyl engine to make a checkpoint, and the snapshot operation is rolled back if anything goes wrong, so vinyl's checkpoint is at least as fresh as the snapshot file.)"
msgstr ""

#: ../doc/dev_guide/internals.rst:161
msgid "Step 1"
msgstr ""

#: ../doc/dev_guide/internals.rst:157
msgid "Read the configuration parameters in the ``box.cfg{}`` request. Parameters which affect recovery may include :ref:`work_dir <cfg_basic-work_dir>`, :ref:`wal_dir <cfg_basic-wal_dir>`, :ref:`memtx_dir <cfg_basic-memtx_dir>`, :ref:`vinyl_dir <cfg_basic-vinyl_dir>` and :ref:`force_recovery <cfg_binary_logging_snapshots-force_recovery>`."
msgstr ""

#: ../doc/dev_guide/internals.rst:181
msgid "Step 2"
msgstr ""

#: ../doc/dev_guide/internals.rst:164
msgid "Find the latest snapshot file. Use its data to reconstruct the in-memory databases. Instruct the vinyl engine to recover to the latest checkpoint."
msgstr ""

#: ../doc/dev_guide/internals.rst:167
msgid "There are actually two variations of the reconstruction procedure for memtx databases, depending on whether the recovery process is \"default\"."
msgstr ""

#: ../doc/dev_guide/internals.rst:170
msgid "If the recovery process is default (``force_recovery`` is ``false``), memtx can read data in the snapshot with all indexes disabled. First, all tuples are read into memory. Then, primary keys are built in bulk, taking advantage of the fact that the data is already sorted by primary key within each space."
msgstr ""

#: ../doc/dev_guide/internals.rst:176
msgid "If the recovery process is non-default (``force_recovery`` is ``true``), Tarantool performs additional checking. Indexes are enabled at the start, and tuples are added one by one. This means that any unique-key constraint violations will be caught, and any duplicates will be skipped. Normally there will be no constraint violations or duplicates, so these checks are only made if an error has occurred."
msgstr ""

#: ../doc/dev_guide/internals.rst:188
msgid "Step 3"
msgstr ""

#: ../doc/dev_guide/internals.rst:184
msgid "Find the WAL file that was made at the time of, or after, the snapshot file. Read its log entries until the log-entry LSN is greater than the LSN of the snapshot, or greater than the LSN of the vinyl checkpoint. This is the recovery process's \"start position\"; it matches the current state of the engines."
msgstr ""

#: ../doc/dev_guide/internals.rst:192
msgid "Step 4"
msgstr ""

#: ../doc/dev_guide/internals.rst:191
msgid "Redo the log entries, from the start position to the end of the WAL. The engine skips a redo instruction if it is older than the engine's checkpoint."
msgstr ""

#: ../doc/dev_guide/internals.rst:196
msgid "Step 5"
msgstr ""

#: ../doc/dev_guide/internals.rst:195
msgid "For the memtx engine, re-create all secondary indexes."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:3
msgid "Lua Style Guide"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:5
msgid "Inspiration:"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:7
msgid "https://github.com/Olivine-Labs/lua-style-guide"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:8
msgid "http://dev.minetest.net/Lua_code_style_guidelines"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:9
msgid "http://sputnik.freewisdom.org/en/Coding_Standard"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:11
msgid "Programming style is an art. There is some arbitrariness to the rules, but there are sound rationales for them. It is useful not only to provide sound advice on style but to understand the underlying rationale and human aspect of why the style recommendations are formed:"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:16
msgid "http://mindprod.com/jgloss/unmain.html"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:17
msgid "http://www.oreilly.com/catalog/perlbp/"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:18
msgid "http://books.google.com/books?id=QnghAQAAIAAJ"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:20
msgid "Zen of Python is good; understand it and use wisely:"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "Beautiful is better than ugly."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "Explicit is better than implicit."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "Simple is better than complex."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "Complex is better than complicated."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "Flat is better than nested."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "Sparse is better than dense."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "Readability counts."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "Special cases aren't special enough to break the rules."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "Although practicality beats purity."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "Errors should never pass silently."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "Unless explicitly silenced."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "In the face of ambiguity, refuse the temptation to guess."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "There should be one -- and preferably only one -- obvious way to do it."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "Although that way may not be obvious at first unless you're Dutch."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "Now is better than never."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "Although never is often better than *right* now."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "If the implementation is hard to explain, it's a bad idea."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "If the implementation is easy to explain, it may be a good idea."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "Namespaces are one honking great idea -- let's do more of those!"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:0
msgid "https://www.python.org/dev/peps/pep-0020/"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:46
msgid "Indentation and Formatting"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:48
msgid "4 spaces instead tabs. PIL suggests using of two spaces, but programmer looks at code 4 up to 8 hours a day, so it's simplier to distinguish indentation with 4 spaces. Why spaces? Similar representation everywhere."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:52
msgid "You can use vim modelines:"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:54
msgid "-- vim:ts=4 ss=4 sw=4 expandtab"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:58
msgid "A file should ends w/ one newline symbol, but shouldn't ends w/ blank line (two newline symbols)."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:61
msgid "Every do/while/for/if/function should indent 4 spaces."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:63
msgid "related ``or``/``and`` in ``if`` must be enclosed in the round brackets (). Example:"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:65
msgid "if (a == true and b == false) or (a == false and b == true) then\n"
"    <...>\n"
"end -- good\n"
"\n"
"if a == true and b == false or a == false and b == true then\n"
"    <...>\n"
"end -- bad\n"
"\n"
"if a ^ b == true then\n"
"end -- good, but not explicit"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:78
msgid "Type conversion"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:80
msgid "Do not use concatenation to convert to string or addition to convert to number (use ``tostring``/``tonumber`` instead):"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:83
msgid "local a = 123\n"
"a = a .. ''\n"
"-- bad\n"
"\n"
"local a = 123\n"
"a = tostring(a)\n"
"-- good\n"
"\n"
"local a = '123'\n"
"a = a + 5 -- 128\n"
"-- bad\n"
"\n"
"local a = '123'\n"
"a = tonumber(a) + 5 -- 128\n"
"-- good"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:101
msgid "Try to avoid multiple nested ``if``'s with common body:"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:103
msgid "if (a == true and b == false) or (a == false and b == true) then\n"
"    do_something()\n"
"end\n"
"-- good\n"
"\n"
"if a == true then\n"
"    if b == false then\n"
"        do_something()\n"
"    end\n"
"if b == true then\n"
"    if a == false then\n"
"        do_something()\n"
"    end\n"
"end\n"
"-- bad"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:121
msgid "Avoid multiple concatenations in one statement, use ``string.format`` instead:"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:123
msgid "function say_greeting(period, name)\n"
"    local a = \"good  \" .. period .. \", \" .. name\n"
"end\n"
"-- bad\n"
"\n"
"function say_greeting(period, name)\n"
"    local a = string.format(\"good %s, %s\", period, name)\n"
"end\n"
"-- good\n"
"\n"
"local say_greeting_fmt = \"good %s, %s\"\n"
"function say_greeting(period, name)\n"
"    local a = say_greeting_fmt:format(period, name)\n"
"end\n"
"-- best"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:141
msgid "Use ``and``/``or`` for default variable values"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:143
msgid "function(input)\n"
"    input = input or 'default_value'\n"
"end -- good\n"
"\n"
"function(input)\n"
"    if input == nil then\n"
"        input = 'default_value'\n"
"    end\n"
"end -- ok, but excessive"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:155
msgid "``if``'s and return statements:"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:157
msgid "if a == true then\n"
"    return do_something()\n"
"end\n"
"do_other_thing() -- good\n"
"\n"
"if a == true then\n"
"    return do_something()\n"
"else\n"
"    do_other_thing()\n"
"end -- bad"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:170
msgid "Using spaces:"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:172
msgid "one shouldn't use spaces between function name and opening round bracket, but arguments must be splitted with one whitespace charachter"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:175
msgid "function name (arg1,arg2,...)\n"
"end -- bad\n"
"\n"
"function name(arg1, arg2, ...)\n"
"end -- good"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:183
msgid "use space after comment marker"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:185
msgid "while true do -- inline comment\n"
"-- comment\n"
"do_something()\n"
"end\n"
"--[[\n"
"  multiline\n"
"  comment\n"
"]]--"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:196
msgid "surrounding operators"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:198
msgid "local thing=1\n"
"thing = thing-1\n"
"thing = thing*1\n"
"thing = 'string'..'s'\n"
"-- bad\n"
"\n"
"local thing = 1\n"
"thing = thing - 1\n"
"thing = thing * 1\n"
"thing = 'string' .. 's'\n"
"-- good"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:212
msgid "use space after commas in tables"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:214
msgid "local thing = {1,2,3}\n"
"thing = {1 , 2 , 3}\n"
"thing = {1 ,2 ,3}\n"
"-- bad\n"
"\n"
"local thing = {1, 2, 3}\n"
"-- good"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:224
msgid "use space in map definitions around equality sign and commas"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:226
msgid "return {1,2,3,4} -- bad\n"
"return {\n"
"    key1 = val1,key2=val2\n"
"} -- bad\n"
"\n"
"return {\n"
"    1, 2, 3, 4\n"
"    key1 = val1, key2 = val2,\n"
"    key3 = vallll\n"
"} -- good"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:239
msgid "also, you may use alignment:"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:241
msgid "return {\n"
"    long_key  = 'vaaaaalue',\n"
"    key       = 'val',\n"
"    something = 'even better'\n"
"}"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:249
msgid "extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations)"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:253
msgid "use blank lines in function, sparingly, to indicate logical sections"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:255
msgid "if thing then\n"
"    -- ...stuff...\n"
"end\n"
"function derp()\n"
"    -- ...stuff...\n"
"end\n"
"local wat = 7\n"
"-- bad\n"
"\n"
"if thing then\n"
"    -- ...stuff...\n"
"end\n"
"\n"
"function derp()\n"
"    -- ...stuff...\n"
"end\n"
"\n"
"local wat = 7\n"
"-- good"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:277
msgid "Delete whitespace at EOL (strongly forbidden. Use ``:s/\\s\\+$//gc`` in vim to delete them)"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:282
msgid "Avoid global variable"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:284
msgid "You must avoid global variables. If you have an exceptional case, use ``_G`` variable to set it, add prefix or add table instead of prefix:"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:287
msgid "function bad_global_example()\n"
"end -- very, very bad\n"
"\n"
"function good_local_example()\n"
"end\n"
"_G.modulename_good_local_example = good_local_example -- good\n"
"_G.modulename = {}\n"
"_G.modulename.good_local_example = good_local_example -- better"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:298
msgid "Always use prefix to avoid name clash"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:302
msgid "Naming"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:304
msgid "names of variables/\"objects\" and \"methods\"/functions: snake_case"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:305
msgid "names of \"classes\": CamelCase"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:306
msgid "private variables/methods (properties in the future) of object starts with underscores ``<object>._<name>``. Avoid using of ``local function private_methods(self) end``"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:309
msgid "boolean - naming ``is_<...>``, ``isnt_<...>``, ``has_``, ``hasnt_`` is a good style."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:310
msgid "for \"very local\" variables: - ``t`` is for tables - ``i``, ``j`` are for indexing - ``n`` is for counting - ``k``, ``v`` is what you get out of ``pairs()`` (are acceptable, ``_`` if unused) - ``i``, ``v`` is what you get out of ``ipairs()`` (are acceptable, ``_`` if unused) - ``k``/``key`` is for table keys - ``v``/``val``/``value`` is for values that are passed around - ``x``/``y``/``z`` is for generic math quantities - ``s``/``str``/``string`` is for strings - ``c`` is for 1-char strings - ``f``/``func``/``cb`` are for functions - ``status, <rv>..`` or ``ok, <rv>..`` is what you get out of pcall/xpcall - ``buf, sz`` is a (buffer, size) pair - ``<name>_p`` is for pointers - ``t0``.. is for timestamps - ``err`` is for errors"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:327
msgid "abbrevations are acceptable if they're unambigous and if you'll document (or they're too common) them."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:329
msgid "global variables are written with ALL_CAPS. If it's some system variable, then they're using underscore to define it (``_G``/``_VERSION``/..)"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:331
msgid "module naming snake_case (avoid underscores and dashes) - 'luasql', instead of 'Lua-SQL'"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:333
msgid "``*_mt`` and ``*_methods`` defines metatable and methods table"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:337
msgid "Idioms and patterns"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:339
msgid "Always use round brackets in call of functions except multiple cases (common lua style idioms):"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:342
msgid "``*.cfg{ }`` functions (``box.cfg``/``memcached.cfg``/..)"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:343
msgid "``ffi.cdef[[ ]]`` function"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:345
msgid "Avoid these kind of constructions:"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:347
msgid "<func>'<name>' (strongly avoid require'..')"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:348
msgid "``function object:method() end`` (use ``functon object.method(self) end`` instead)"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:349
msgid "do not use semicolon as table separator (only comma)"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:350
msgid "semicolons at the end of line (only to split multiple statements on one line)"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:351
msgid "try to avoid unnecessary function creation (closures/..)"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:355
msgid "Modules"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:357
msgid "Don't start modules with license/authors/descriptions, you can write it in LICENSE/AUTHORS/README files. For writing modules use one of the two patterns (dont use ``modules()``):"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:361
msgid "local M = {}\n"
"\n"
"function M.foo()\n"
"...\n"
"end\n"
"\n"
"function M.bar()\n"
"...\n"
"end\n"
"\n"
"return M"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:375
msgid "or"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:377
msgid "local function foo()\n"
"...\n"
"end\n"
"\n"
"local function bar()\n"
"...\n"
"end\n"
"\n"
"return {\n"
"foo = foo,\n"
"bar = bar,\n"
"}"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:394
msgid "Commenting"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:396
msgid "You should write code the way it shouldn't be described, but don't forget about commenting it. You shouldn't comment Lua syntax (assume that reader already knows Lua language). Try to tell about functions/variable names/etc."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:400
msgid "Multiline comments: use matching (``--[[ ]]--``) instead of simple (``--[[ ]]``)."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:403
msgid "Public function comments (??):"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:405
msgid "--- Copy any table (shallow and deep version)\n"
"-- * deepcopy: copies all levels\n"
"-- * shallowcopy: copies only first level\n"
"-- Supports __copy metamethod for copying custom tables with metatables\n"
"-- @function gsplit\n"
"-- @table         inp  original table\n"
"-- @shallow[opt]  sep  flag for shallow copy\n"
"-- @returns            table (copy)"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:418
msgid "Testing"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:420
msgid "Use ``tap`` module for writing efficient tests. Example of test file:"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:422
msgid "#!/usr/bin/env tarantool\n"
"\n"
"local test = require('tap').test('table')\n"
"test:plan(31)\n"
"\n"
"do -- check basic table.copy (deepcopy)\n"
"    local example_table = {\n"
"        {1, 2, 3},\n"
"        {\"help, I'm very nested\", {{{ }}} }\n"
"    }\n"
"\n"
"    local copy_table = table.copy(example_table)\n"
"\n"
"    test:is_deeply(\n"
"        example_table,\n"
"        copy_table,\n"
"        \"checking, that deepcopy behaves ok\"\n"
"    )\n"
"    test:isnt(\n"
"        example_table,\n"
"        copy_table,\n"
"        \"checking, that tables are different\"\n"
"    )\n"
"    test:isnt(\n"
"        example_table[1],\n"
"        copy_table[1],\n"
"        \"checking, that tables are different\"\n"
"    )\n"
"    test:isnt(\n"
"        example_table[2],\n"
"        copy_table[2],\n"
"        \"checking, that tables are different\"\n"
"    )\n"
"    test:isnt(\n"
"        example_table[2][2],\n"
"        copy_table[2][2],\n"
"        \"checking, that tables are different\"\n"
"    )\n"
"    test:isnt(\n"
"        example_table[2][2][1],\n"
"        copy_table[2][2][1],\n"
"        \"checking, that tables are different\"\n"
"    )\n"
"end\n"
"\n"
"<...>\n"
"\n"
"os.exit(test:check() == true and 0 or 1)"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:473
msgid "When you'll test your code output will be something like this:"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:475
msgid "TAP version 13\n"
"1..31\n"
"ok - checking, that deepcopy behaves ok\n"
"ok - checking, that tables are different\n"
"ok - checking, that tables are different\n"
"ok - checking, that tables are different\n"
"ok - checking, that tables are different\n"
"ok - checking, that tables are different\n"
"..."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:489
msgid "Error Handling"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:491
msgid "Be generous in what you accept and strict in what you return."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:493
msgid "With error handling this means that you must provide an error object as second multi-return value in case of error. The error object can be a string, a Lua table or cdata, in the latter cases it must have ``__tostring`` metamethod defined."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:498
msgid "In case of error, use ``nil`` for the first return value. This makes the error hard to ignore."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:501
msgid "When checking function return values, check the first argument first. If it's ``nil``, look for error in the second argument:"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:504
msgid "local data, err = foo()\n"
"if not data\n"
"    return nil, err\n"
"end\n"
"return bar(data)"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:512
msgid "Unless performance of your code is paramount, try to avoid using more than two return values."
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:515
msgid "In rare cases you may want to return ``nil`` as a legal return value. In this case it's OK to check for error first, and return second:"
msgstr ""

#: ../doc/dev_guide/lua_style_guide.rst:518
msgid "local data, err = foo()\n"
"if not err\n"
"    return data\n"
"end\n"
"return nil, err"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:3
msgid "Python Style Guide"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:7
msgid "Introduction"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:9
msgid "This document gives coding conventions for the Python code comprising the standard library in the main Python distribution.  Please see the companion informational PEP describing style guidelines for the C code in the C implementation of Python [1]_."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:14
msgid "This document and PEP 257 (Docstring Conventions) were adapted from Guido's original Python Style Guide essay, with some additions from Barry's style guide [2]_."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:21
msgid "A Foolish Consistency is the Hobgoblin of Little Minds"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:23
msgid "One of Guido's key insights is that code is read much more often than it is written.  The guidelines provided here are intended to improve the readability of code and make it consistent across the wide spectrum of Python code.  As PEP 20 says, \"Readability counts\"."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:28
msgid "A style guide is about consistency.  Consistency with this style guide is important.  Consistency within a project is more important. Consistency within one module or function is the most important."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:32
msgid "But most importantly: know when to be inconsistent -- sometimes the style guide just doesn't apply.  When in doubt, use your best judgment.  Look at other examples and decide what looks best.  And don't hesitate to ask!"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:37
msgid "Two good reasons to break a particular rule:"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:39
msgid "When applying the rule would make the code less readable, even for someone who is used to reading code that follows the rules."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:42
msgid "To be consistent with surrounding code that also breaks it (maybe for historic reasons) -- although this is also an opportunity to clean up someone else's mess (in true XP style)."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:49
msgid "Code lay-out"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:53
msgid "Indentation"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:55
msgid "Use 4 spaces per indentation level."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:57
msgid "For really old code that you don't want to mess up, you can continue to use 8-space tabs."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:60
msgid "Continuation lines should align wrapped elements either vertically using Python's implicit line joining inside parentheses, brackets and braces, or using a hanging indent.  When using a hanging indent the following considerations should be applied; there should be no arguments on the first line and further indentation should be used to clearly distinguish itself as a continuation line."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:67
#: ../doc/dev_guide/python_style_guide.rst:324
#: ../doc/dev_guide/python_style_guide.rst:353
#: ../doc/dev_guide/python_style_guide.rst:372
#: ../doc/dev_guide/python_style_guide.rst:385
msgid "Yes::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:103
msgid "# Aligned with opening delimiter\n"
"foo = long_function_name(var_one, var_two,\n"
"                         var_three, var_four)\n"
"\n"
"# More indentation included to distinguish this from the rest.\n"
"def long_function_name(\n"
"        var_one, var_two, var_three,\n"
"        var_four):\n"
"    print(var_one)"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:79
#: ../doc/dev_guide/python_style_guide.rst:330
#: ../doc/dev_guide/python_style_guide.rst:361
#: ../doc/dev_guide/python_style_guide.rst:377
msgid "No::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:115
msgid "# Arguments on first line forbidden when not using vertical alignment\n"
"foo = long_function_name(var_one, var_two,\n"
"    var_three, var_four)\n"
"\n"
"# Further indentation required as indentation is not distinguishable\n"
"def long_function_name(\n"
"    var_one, var_two, var_three,\n"
"    var_four):\n"
"    print(var_one)"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:91
msgid "Optional::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:127
msgid "# Extra indentation is not necessary.\n"
"foo = long_function_name(\n"
"  var_one, var_two,\n"
"  var_three, var_four)"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:98
msgid "The closing brace/bracket/parenthesis on multi-line constructs may either line up under the first non-whitespace character of the last line of list, as in::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:136
msgid "my_list = [\n"
"    1, 2, 3,\n"
"    4, 5, 6,\n"
"    ]\n"
"result = some_function_that_takes_arguments(\n"
"    'a', 'b', 'c',\n"
"    'd', 'e', 'f',\n"
"    )"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:111
msgid "or it may be lined up under the first character of the line that starts the multi-line construct, as in::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:148
msgid "my_list = [\n"
"    1, 2, 3,\n"
"    4, 5, 6,\n"
"]\n"
"result = some_function_that_takes_arguments(\n"
"    'a', 'b', 'c',\n"
"    'd', 'e', 'f',\n"
")"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:126
msgid "Tabs or Spaces?"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:128
msgid "Never mix tabs and spaces."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:130
msgid "The most popular way of indenting Python is with spaces only.  The second-most popular way is with tabs only.  Code indented with a mixture of tabs and spaces should be converted to using spaces exclusively.  When invoking the Python command line interpreter with the ``-t`` option, it issues warnings about code that illegally mixes tabs and spaces.  When using ``-tt`` these warnings become errors. These options are highly recommended!"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:138
msgid "For new projects, spaces-only are strongly recommended over tabs. Most editors have features that make this easy to do."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:143
msgid "Maximum Line Length"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:145
msgid "Limit all lines to a maximum of 79 characters."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:147
msgid "There are still many devices around that are limited to 80 character lines; plus, limiting windows to 80 characters makes it possible to have several windows side-by-side.  The default wrapping on such devices disrupts the visual structure of the code, making it more difficult to understand.  Therefore, please limit all lines to a maximum of 79 characters.  For flowing long blocks of text (docstrings or comments), limiting the length to 72 characters is recommended."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:155
msgid "The preferred way of wrapping long lines is by using Python's implied line continuation inside parentheses, brackets and braces.  Long lines can be broken over multiple lines by wrapping expressions in parentheses. These should be used in preference to using a backslash for line continuation."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:161
msgid "Backslashes may still be appropriate at times.  For example, long, multiple ``with``-statements cannot use implicit continuation, so backslashes are acceptable::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:199
msgid "with open('/path/to/some/file/you/want/to/read') as file_1, \\\n"
"        open('/path/to/some/file/being/written', 'w') as file_2:\n"
"    file_2.write(file_1.read())"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:169
msgid "Another such case is with ``assert`` statements."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:171
msgid "Make sure to indent the continued line appropriately.  The preferred place to break around a binary operator is *after* the operator, not before it.  Some examples::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:209
msgid "class Rectangle(Blob):\n"
"\n"
"    def __init__(self, width, height,\n"
"                 color='black', emphasis=None, highlight=0):\n"
"        if (width == 0 and height == 0 and\n"
"            color == 'red' and emphasis == 'strong' or\n"
"            highlight > 100):\n"
"            raise ValueError(\"sorry, you lose\")\n"
"        if width == 0 and height == 0 and (color == 'red' or\n"
"                                           emphasis is None):\n"
"            raise ValueError(\"I don't think so -- values are %s, %s\" %\n"
"                             (width, height))\n"
"        Blob.__init__(self, width, height,\n"
"                      color, emphasis, highlight)"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:192
msgid "Blank Lines"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:194
msgid "Separate top-level function and class definitions with two blank lines."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:197
msgid "Method definitions inside a class are separated by a single blank line."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:200
msgid "Extra blank lines may be used (sparingly) to separate groups of related functions.  Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations)."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:204
msgid "Use blank lines in functions, sparingly, to indicate logical sections."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:206
msgid "Python accepts the control-L (i.e. ^L) form feed character as whitespace; Many tools treat these characters as page separators, so you may use them to separate pages of related sections of your file. Note, some editors and web-based code viewers may not recognize control-L as a form feed and will show another glyph in its place."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:214
msgid "Encodings (PEP 263)"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:216
msgid "Code in the core Python distribution should always use the ASCII or Latin-1 encoding (a.k.a. ISO-8859-1).  For Python 3.0 and beyond, UTF-8 is preferred over Latin-1, see PEP 3120."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:220
msgid "Files using ASCII should not have a coding cookie.  Latin-1 (or UTF-8) should only be used when a comment or docstring needs to mention an author name that requires Latin-1; otherwise, using ``\\x``, ``\\u`` or ``\\U`` escapes is the preferred way to include non-ASCII data in string literals."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:226
msgid "For Python 3.0 and beyond, the following policy is prescribed for the standard library (see PEP 3131): All identifiers in the Python standard library MUST use ASCII-only identifiers, and SHOULD use English words wherever feasible (in many cases, abbreviations and technical terms are used which aren't English). In addition, string literals and comments must also be in ASCII. The only exceptions are (a) test cases testing the non-ASCII features, and (b) names of authors. Authors whose names are not based on the latin alphabet MUST provide a latin transliteration of their names."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:237
msgid "Open source projects with a global audience are encouraged to adopt a similar policy."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:243
msgid "Imports"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:245
msgid "Imports should usually be on separate lines, e.g.::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:281
msgid "Yes: import os\n"
"     import sys\n"
"\n"
"No:  import sys, os"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:252
msgid "It's okay to say this though::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:288
msgid "from subprocess import Popen, PIPE"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:256
msgid "Imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:259
msgid "Imports should be grouped in the following order:"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:261
msgid "standard library imports"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:262
msgid "related third party imports"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:263
msgid "local application/library specific imports"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:265
msgid "You should put a blank line between each group of imports."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:267
msgid "Put any relevant ``__all__`` specification after the imports."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:269
msgid "Relative imports for intra-package imports are highly discouraged. Always use the absolute package path for all imports.  Even now that PEP 328 is fully implemented in Python 2.5, its style of explicit relative imports is actively discouraged; absolute imports are more portable and usually more readable."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:275
msgid "When importing a class from a class-containing module, it's usually okay to spell this::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:312
msgid "from myclass import MyClass\n"
"from foo.bar.yourclass import YourClass"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:281
msgid "If this spelling causes local name clashes, then spell them ::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:317
msgid "import myclass\n"
"import foo.bar.yourclass"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:286
msgid "and use \"myclass.MyClass\" and \"foo.bar.yourclass.YourClass\"."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:291
msgid "Whitespace in Expressions and Statements"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:295
msgid "Pet Peeves"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:297
msgid "Avoid extraneous whitespace in the following situations:"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:299
msgid "Immediately inside parentheses, brackets or braces. ::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:335
msgid "Yes: spam(ham[1], {eggs: 2})\n"
"No:  spam( ham[ 1 ], { eggs: 2 } )"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:304
msgid "Immediately before a comma, semicolon, or colon::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:340
msgid "Yes: if x == 4: print x, y; x, y = y, x\n"
"No:  if x == 4 : print x , y ; x , y = y , x"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:309
msgid "Immediately before the open parenthesis that starts the argument list of a function call::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:346
msgid "Yes: spam(1)\n"
"No:  spam (1)"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:315
msgid "Immediately before the open parenthesis that starts an indexing or slicing::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:352
msgid "Yes: dict['key'] = list[index]\n"
"No:  dict ['key'] = list [index]"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:321
msgid "More than one space around an assignment (or other) operator to align it with another."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:360
msgid "x = 1\n"
"y = 2\n"
"long_variable = 3"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:366
msgid "x             = 1\n"
"y             = 2\n"
"long_variable = 3"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:339
msgid "Other Recommendations"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:341
msgid "Always surround these binary operators with a single space on either side: assignment (``=``), augmented assignment (``+=``, ``-=`` etc.), comparisons (``==``, ``<``, ``>``, ``!=``, ``<>``, ``<=``, ``>=``, ``in``, ``not in``, ``is``, ``is not``), Booleans (``and``, ``or``, ``not``)."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:347
msgid "If operators with different priorities are used, consider adding whitespace around the operators with the lowest priority(ies). Use your own judgement; however, never use more than one space, and always have the same amount of whitespace on both sides of a binary operator."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:389
msgid "i = i + 1\n"
"submitted += 1\n"
"x = x*2 - 1\n"
"hypot2 = x*x + y*y\n"
"c = (a+b) * (a-b)"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:397
msgid "i=i+1\n"
"submitted +=1\n"
"x = x * 2 - 1\n"
"hypot2 = x * x + y * y\n"
"c = (a + b) * (a - b)"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:369
msgid "Don't use spaces around the ``=`` sign when used to indicate a keyword argument or a default parameter value."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:408
msgid "def complex(real, imag=0.0):\n"
"    return magic(r=real, i=imag)"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:413
msgid "def complex(real, imag = 0.0):\n"
"    return magic(r = real, i = imag)"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:382
msgid "Compound statements (multiple statements on the same line) are generally discouraged."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:421
msgid "if foo == 'blah':\n"
"    do_blah_thing()\n"
"do_one()\n"
"do_two()\n"
"do_three()"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:393
#: ../doc/dev_guide/python_style_guide.rst:402
msgid "Rather not::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:429
msgid "if foo == 'blah': do_blah_thing()\n"
"do_one(); do_two(); do_three()"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:398
msgid "While sometimes it's okay to put an if/for/while with a small body on the same line, never do this for multi-clause statements.  Also avoid folding such long lines!"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:438
msgid "if foo == 'blah': do_blah_thing()\n"
"for x in lst: total += x\n"
"while t < 10: t = delay()"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:408
msgid "Definitely not::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:444
msgid "if foo == 'blah': do_blah_thing()\n"
"else: do_non_blah_thing()\n"
"\n"
"try: something()\n"
"finally: cleanup()\n"
"\n"
"do_one(); do_two(); do_three(long, argument,\n"
"                             list, like, this)\n"
"\n"
"if foo == 'blah': one(); two(); three()"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:423
msgid "Comments"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:425
msgid "Comments that contradict the code are worse than no comments.  Always make a priority of keeping the comments up-to-date when the code changes!"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:429
msgid "Comments should be complete sentences.  If a comment is a phrase or sentence, its first word should be capitalized, unless it is an identifier that begins with a lower case letter (never alter the case of identifiers!)."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:434
msgid "If a comment is short, the period at the end can be omitted.  Block comments generally consist of one or more paragraphs built out of complete sentences, and each sentence should end in a period."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:438
msgid "You should use two spaces after a sentence-ending period."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:440
msgid "When writing English, Strunk and White apply."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:442
msgid "Python coders from non-English speaking countries: please write your comments in English, unless you are 120% sure that the code will never be read by people who don't speak your language."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:448
msgid "Block Comments"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:450
msgid "Block comments generally apply to some (or all) code that follows them, and are indented to the same level as that code.  Each line of a block comment starts with a ``#`` and a single space (unless it is indented text inside the comment)."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:455
msgid "Paragraphs inside a block comment are separated by a line containing a single ``#``."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:460
msgid "Inline Comments"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:462
msgid "Use inline comments sparingly."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:464
msgid "An inline comment is a comment on the same line as a statement. Inline comments should be separated by at least two spaces from the statement.  They should start with a # and a single space."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:468
msgid "Inline comments are unnecessary and in fact distracting if they state the obvious.  Don't do this::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:505
msgid "x = x + 1                 # Increment x"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:473
msgid "But sometimes, this is useful::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:509
msgid "x = x + 1                 # Compensate for border"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:479
msgid "Documentation Strings"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:481
msgid "Conventions for writing good documentation strings (a.k.a. \"docstrings\") are immortalized in PEP 257."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:484
msgid "Write docstrings for all public modules, functions, classes, and methods.  Docstrings are not necessary for non-public methods, but you should have a comment that describes what the method does.  This comment should appear after the ``def`` line."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:489
msgid "PEP 257 describes good docstring conventions.  Note that most importantly, the ``\"\"\"`` that ends a multiline docstring should be on a line by itself, and preferably preceded by a blank line, e.g.::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:527
msgid "\"\"\"Return a foobang\n"
"\n"
"Optional plotz says to frobnicate the bizbaz first.\n"
"\n"
"\"\"\""
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:499
msgid "For one liner docstrings, it's okay to keep the closing ``\"\"\"`` on the same line."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:505
msgid "Version Bookkeeping"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:507
msgid "If you have to have Subversion, CVS, or RCS crud in your source file, do it as follows. ::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:544
msgid "__version__ = \"$Revision$\"\n"
"# $Source$"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:513
msgid "These lines should be included after the module's docstring, before any other code, separated by a blank line above and below."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:519
msgid "Naming Conventions"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:521
msgid "The naming conventions of Python's library are a bit of a mess, so we'll never get this completely consistent -- nevertheless, here are the currently recommended naming standards.  New modules and packages (including third party frameworks) should be written to these standards, but where an existing library has a different style, internal consistency is preferred."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:530
msgid "Descriptive: Naming Styles"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:532
msgid "There are a lot of different naming styles.  It helps to be able to recognize what naming style is being used, independently from what they are used for."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:536
msgid "The following naming styles are commonly distinguished:"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:538
msgid "``b`` (single lowercase letter)"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:539
msgid "``B`` (single uppercase letter)"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:540
msgid "``lowercase``"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:541
msgid "``lower_case_with_underscores``"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:542
msgid "``UPPERCASE``"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:543
msgid "``UPPER_CASE_WITH_UNDERSCORES``"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:544
msgid "``CapitalizedWords`` (or CapWords, or CamelCase -- so named because of the bumpy look of its letters [3]_).  This is also sometimes known as StudlyCaps."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:548
msgid "Note: When using abbreviations in CapWords, capitalize all the letters of the abbreviation.  Thus HTTPServerError is better than HttpServerError."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:551
msgid "``mixedCase`` (differs from CapitalizedWords by initial lowercase character!)"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:553
msgid "``Capitalized_Words_With_Underscores`` (ugly!)"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:555
msgid "There's also the style of using a short unique prefix to group related names together.  This is not used much in Python, but it is mentioned for completeness.  For example, the ``os.stat()`` function returns a tuple whose items traditionally have names like ``st_mode``, ``st_size``, ``st_mtime`` and so on.  (This is done to emphasize the correspondence with the fields of the POSIX system call struct, which helps programmers familiar with that.)"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:563
msgid "The X11 library uses a leading X for all its public functions.  In Python, this style is generally deemed unnecessary because attribute and method names are prefixed with an object, and function names are prefixed with a module name."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:568
msgid "In addition, the following special forms using leading or trailing underscores are recognized (these can generally be combined with any case convention):"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:572
msgid "``_single_leading_underscore``: weak \"internal use\" indicator. E.g. ``from M import *`` does not import objects whose name starts with an underscore."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:576
msgid "``single_trailing_underscore_``: used by convention to avoid conflicts with Python keyword, e.g. ::"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:613
msgid "Tkinter.Toplevel(master, class_='ClassName')"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:581
msgid "``__double_leading_underscore``: when naming a class attribute, invokes name mangling (inside class FooBar, ``__boo`` becomes ``_FooBar__boo``; see below)."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:585
msgid "``__double_leading_and_trailing_underscore__``: \"magic\" objects or attributes that live in user-controlled namespaces. E.g. ``__init__``, ``__import__`` or ``__file__``.  Never invent such names; only use them as documented."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:592
msgid "Prescriptive: Naming Conventions"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:596
msgid "Names to Avoid"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:598
msgid "Never use the characters 'l' (lowercase letter el), 'O' (uppercase letter oh), or 'I' (uppercase letter eye) as single character variable names."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:602
msgid "In some fonts, these characters are indistinguishable from the numerals one and zero.  When tempted to use 'l', use 'L' instead."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:607
msgid "Package and Module Names"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:609
msgid "Modules should have short, all-lowercase names.  Underscores can be used in the module name if it improves readability.  Python packages should also have short, all-lowercase names, although the use of underscores is discouraged."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:614
msgid "Since module names are mapped to file names, and some file systems are case insensitive and truncate long names, it is important that module names be chosen to be fairly short -- this won't be a problem on Unix, but it may be a problem when the code is transported to older Mac or Windows versions, or DOS."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:620
msgid "When an extension module written in C or C++ has an accompanying Python module that provides a higher level (e.g. more object oriented) interface, the C/C++ module has a leading underscore (e.g. ``_socket``)."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:627
msgid "Class Names"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:629
msgid "Almost without exception, class names use the CapWords convention. Classes for internal use have a leading underscore in addition."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:634
msgid "Exception Names"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:636
msgid "Because exceptions should be classes, the class naming convention applies here.  However, you should use the suffix \"Error\" on your exception names (if the exception actually is an error)."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:642
msgid "Global Variable Names"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:644
msgid "(Let's hope that these variables are meant for use inside one module only.)  The conventions are about the same as those for functions."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:647
msgid "Modules that are designed for use via ``from M import *`` should use the ``__all__`` mechanism to prevent exporting globals, or use the older convention of prefixing such globals with an underscore (which you might want to do to indicate these globals are \"module non-public\")."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:655
msgid "Function Names"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:657
msgid "Function names should be lowercase, with words separated by underscores as necessary to improve readability."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:660
msgid "mixedCase is allowed only in contexts where that's already the prevailing style (e.g. threading.py), to retain backwards compatibility."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:666
msgid "Function and method arguments"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:668
msgid "Always use ``self`` for the first argument to instance methods."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:670
msgid "Always use ``cls`` for the first argument to class methods."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:672
msgid "If a function argument's name clashes with a reserved keyword, it is generally better to append a single trailing underscore rather than use an abbreviation or spelling corruption.  Thus ``class_`` is better than ``clss``.  (Perhaps better is to avoid such clashes by using a synonym.)"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:680
msgid "Method Names and Instance Variables"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:682
msgid "Use the function naming rules: lowercase with words separated by underscores as necessary to improve readability."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:685
msgid "Use one leading underscore only for non-public methods and instance variables."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:688
msgid "To avoid name clashes with subclasses, use two leading underscores to invoke Python's name mangling rules."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:691
msgid "Python mangles these names with the class name: if class Foo has an attribute named ``__a``, it cannot be accessed by ``Foo.__a``.  (An insistent user could still gain access by calling ``Foo._Foo__a``.) Generally, double leading underscores should be used only to avoid name conflicts with attributes in classes designed to be subclassed."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:697
msgid "Note: there is some controversy about the use of __names (see below)."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:701
msgid "Constants"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:703
msgid "Constants are usually defined on a module level and written in all capital letters with underscores separating words.  Examples include ``MAX_OVERFLOW`` and ``TOTAL``."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:709
msgid "Designing for inheritance"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:711
msgid "Always decide whether a class's methods and instance variables (collectively: \"attributes\") should be public or non-public.  If in doubt, choose non-public; it's easier to make it public later than to make a public attribute non-public."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:716
msgid "Public attributes are those that you expect unrelated clients of your class to use, with your commitment to avoid backward incompatible changes.  Non-public attributes are those that are not intended to be used by third parties; you make no guarantees that non-public attributes won't change or even be removed."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:722
msgid "We don't use the term \"private\" here, since no attribute is really private in Python (without a generally unnecessary amount of work)."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:725
msgid "Another category of attributes are those that are part of the \"subclass API\" (often called \"protected\" in other languages).  Some classes are designed to be inherited from, either to extend or modify aspects of the class's behavior.  When designing such a class, take care to make explicit decisions about which attributes are public, which are part of the subclass API, and which are truly only to be used by your base class."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:733
msgid "With this in mind, here are the Pythonic guidelines:"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:735
msgid "Public attributes should have no leading underscores."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:737
msgid "If your public attribute name collides with a reserved keyword, append a single trailing underscore to your attribute name.  This is preferable to an abbreviation or corrupted spelling.  (However, not withstanding this rule, 'cls' is the preferred spelling for any variable or argument which is known to be a class, especially the first argument to a class method.)"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:745
#: ../doc/dev_guide/python_style_guide.rst:756
#: ../doc/dev_guide/python_style_guide.rst:778
msgid "Note 1:"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:745
msgid "See the argument name recommendation above for class methods."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:747
msgid "For simple public data attributes, it is best to expose just the attribute name, without complicated accessor/mutator methods.  Keep in mind that Python provides an easy path to future enhancement, should you find that a simple data attribute needs to grow functional behavior.  In that case, use properties to hide functional implementation behind simple data attribute access syntax."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:756
msgid "Properties only work on new-style classes."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:760
#: ../doc/dev_guide/python_style_guide.rst:783
msgid "Note 2:"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:759
msgid "Try to keep the functional behavior side-effect free, although side-effects such as caching are generally fine."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:765
#: ../doc/dev_guide/python_style_guide.rst:788
msgid "Note 3:"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:763
msgid "Avoid using properties for computationally expensive operations; the attribute notation makes the caller believe that access is (relatively) cheap."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:767
msgid "If your class is intended to be subclassed, and you have attributes that you do not want subclasses to use, consider naming them with double leading underscores and no trailing underscores.  This invokes Python's name mangling algorithm, where the name of the class is mangled into the attribute name.  This helps avoid attribute name collisions should subclasses inadvertently contain attributes with the same name."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:776
msgid "Note that only the simple class name is used in the mangled name, so if a subclass chooses both the same class name and attribute name, you can still get name collisions."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:781
msgid "Name mangling can make certain uses, such as debugging and ``__getattr__()``, less convenient.  However the name mangling algorithm is well documented and easy to perform manually."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:786
msgid "Not everyone likes name mangling.  Try to balance the need to avoid accidental name clashes with potential use by advanced callers."
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:792
msgid "References"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:794
msgid "`PEP 7, Style Guide for C Code, van Rossum <https://www.python.org/dev/peps/pep-0007/>`_"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:795
msgid "`Barry's GNU Mailman style guide <http://barry.warsaw.us/software/STYLEGUIDE.txt>`_"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:796
msgid "`CamelCase Wikipedia page <http://www.wikipedia.com/wiki/CamelCase>`_"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:800
msgid "Copyright"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:802
msgid "Author:"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:804
msgid "Guido van Rossum <guido@python.org>"
msgstr ""

#: ../doc/dev_guide/python_style_guide.rst:805
msgid "Barry Warsaw <barry@python.org>"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:3
msgid "Module `box`"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:7
msgid "Opaque structure passed to a C stored procedure"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:13
msgid "Return a tuple from a C stored procedure."
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:15
msgid "The returned tuple is automatically reference-counted by Tarantool. An example program that uses ``box_return_tuple()`` is :ref:`write.c <f_c_tutorial-write>`."
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:19
msgid "an opaque structure passed to the C stored procedure by Tarantool"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:21
msgid "a tuple to return"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/box_index.rst:0
#: ../doc/dev_guide/reference_capi/coio.rst:0
#: ../doc/dev_guide/reference_capi/coio.rst:0
#: ../doc/dev_guide/reference_capi/coio.rst:0
#: ../doc/dev_guide/reference_capi/coio.rst:0
#: ../doc/dev_guide/reference_capi/coio.rst:0
#: ../doc/dev_guide/reference_capi/error.rst:0
#: ../doc/dev_guide/reference_capi/error.rst:0
#: ../doc/dev_guide/reference_capi/error.rst:0
#: ../doc/dev_guide/reference_capi/error.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/fiber.rst:0
#: ../doc/dev_guide/reference_capi/latch.rst:0
#: ../doc/dev_guide/reference_capi/latch.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/tuple.rst:0
#: ../doc/dev_guide/reference_capi/txn.rst:0
#: ../doc/dev_guide/reference_capi/txn.rst:0
#: ../doc/dev_guide/reference_capi/txn.rst:0
#: ../doc/dev_guide/reference_capi/txn.rst:0
#: ../doc/dev_guide/reference_capi/txn.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
msgid "Returns"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:23
msgid "-1 on error (perhaps, out of memory; check :ref:`box_error_last()<c_api-error-box_error_last>`)"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:25
#: ../doc/dev_guide/reference_capi/box.rst:73
#: ../doc/dev_guide/reference_capi/box.rst:90
#: ../doc/dev_guide/reference_capi/box.rst:106
#: ../doc/dev_guide/reference_capi/box.rst:127
#: ../doc/dev_guide/reference_capi/box.rst:148
#: ../doc/dev_guide/reference_capi/tuple.rst:65
#: ../doc/dev_guide/reference_capi/tuple.rst:78
msgid "0 otherwise"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:31
msgid "Find space id by name."
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:33
msgid "This function performs a SELECT request on the ``_vspace`` system space."
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:35
msgid "space name"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:36
#: ../doc/dev_guide/reference_capi/box.rst:52
msgid "length of ``name``"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:38
#: ../doc/dev_guide/reference_capi/box.rst:54
msgid ":c:macro:`BOX_ID_NIL` on error or if not found (check :ref:`box_error_last()<c_api-error-box_error_last>`)"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:40
#: ../doc/dev_guide/reference_capi/box.rst:56
msgid "space_id otherwise"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:42
msgid "See also: :c:type:`box_index_id_by_name`"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:46
msgid "Find index id by name."
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:48
msgid "This function performs a SELECT request on the ``_vindex`` system space."
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:50
#: ../doc/dev_guide/reference_capi/box.rst:66
#: ../doc/dev_guide/reference_capi/box.rst:83
#: ../doc/dev_guide/reference_capi/box.rst:98
#: ../doc/dev_guide/reference_capi/box.rst:114
#: ../doc/dev_guide/reference_capi/box.rst:135
#: ../doc/dev_guide/reference_capi/box.rst:156
#: ../doc/dev_guide/reference_capi/box_index.rst:85
#: ../doc/dev_guide/reference_capi/box_index.rst:129
#: ../doc/dev_guide/reference_capi/box_index.rst:139
#: ../doc/dev_guide/reference_capi/box_index.rst:149
#: ../doc/dev_guide/reference_capi/box_index.rst:168
#: ../doc/dev_guide/reference_capi/box_index.rst:184
#: ../doc/dev_guide/reference_capi/box_index.rst:200
#: ../doc/dev_guide/reference_capi/box_index.rst:216
#: ../doc/dev_guide/reference_capi/box_index.rst:234
msgid "space identifier"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:51
msgid "index name"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:58
msgid "See also: :c:type:`box_space_id_by_name`"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:64
msgid "Execute an INSERT/REPLACE request."
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:67
#: ../doc/dev_guide/reference_capi/box.rst:84
#: ../doc/dev_guide/reference_capi/box.rst:137
msgid "encoded tuple in MsgPack Array format ([ field1, field2, ...])"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:68
#: ../doc/dev_guide/reference_capi/box.rst:85
#: ../doc/dev_guide/reference_capi/box.rst:138
msgid "end of a ``tuple``"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:69
#: ../doc/dev_guide/reference_capi/box.rst:86
msgid "output argument. Resulting tuple. Can be set to NULL to discard result"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:72
#: ../doc/dev_guide/reference_capi/box.rst:89
#: ../doc/dev_guide/reference_capi/box.rst:105
#: ../doc/dev_guide/reference_capi/box.rst:126
msgid "-1 on error (check :ref:`box_error_last()<c_api-error-box_error_last>`)"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:75
msgid "See also :ref:`space_object.insert()<box_space-insert>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:81
msgid "Execute a REPLACE request."
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:92
msgid "See also :ref:`space_object.replace()<box_space-replace>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:96
msgid "Execute a DELETE request."
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:99
#: ../doc/dev_guide/reference_capi/box.rst:115
#: ../doc/dev_guide/reference_capi/box.rst:136
#: ../doc/dev_guide/reference_capi/box_index.rst:86
#: ../doc/dev_guide/reference_capi/box_index.rst:130
#: ../doc/dev_guide/reference_capi/box_index.rst:140
#: ../doc/dev_guide/reference_capi/box_index.rst:150
#: ../doc/dev_guide/reference_capi/box_index.rst:169
#: ../doc/dev_guide/reference_capi/box_index.rst:185
#: ../doc/dev_guide/reference_capi/box_index.rst:201
#: ../doc/dev_guide/reference_capi/box_index.rst:217
#: ../doc/dev_guide/reference_capi/box_index.rst:235
msgid "index identifier"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:100
#: ../doc/dev_guide/reference_capi/box.rst:116
msgid "encoded key in MsgPack Array format ([ field1, field2, ...])"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:101
#: ../doc/dev_guide/reference_capi/box.rst:117
msgid "end of a ``key``"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:102
#: ../doc/dev_guide/reference_capi/box.rst:123
#: ../doc/dev_guide/reference_capi/box.rst:144
msgid "output argument. An old tuple. Can be set to NULL to discard result"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:108
msgid "See also :ref:`space_object.delete()<box_space-delete>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:112
msgid "Execute an UPDATE request."
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:118
#: ../doc/dev_guide/reference_capi/box.rst:139
msgid "encoded operations in MsgPack Array format, e.g. ``[[ '=', field_id,  value ], ['!', 2, 'xxx']]``"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:120
msgid "end of an ``ops`` section"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:121
#: ../doc/dev_guide/reference_capi/box.rst:142
msgid "0 if field_ids are zero-based as in C, 1 if field ids are 1-based as in Lua"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:129
msgid "See also :ref:`space_object.update()<box_space-update>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:133
msgid "Execute an UPSERT request."
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:141
msgid "end of a ``ops``"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:147
msgid "-1 on error (check ::ref:`box_error_last()<c_api-error-box_error_last>`)"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:150
msgid "See also :ref:`space_object.upsert()<box_space-upsert>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/box.rst:154
msgid "Truncate a space."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:3
msgid "Module `index`"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:7
msgid "A space iterator"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:13
msgid "Controls how to iterate over tuples in an index. Different index types support different iterator types. For example, one can start iteration from a particular value (request key) and then retrieve all tuples where keys are greater or equal (= GE) to this key."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:18
msgid "If iterator type is not supported by the selected index type, iterator constructor must fail with ER_UNSUPPORTED. To be selectable for primary key, an index must support at least ITER_EQ and ITER_GE types."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:22
msgid "NULL value of request key corresponds to the first or last key in the index, depending on iteration direction. (first key for GE and GT types, and last key for LE and LT). Therefore, to iterate over all tuples in an index, one can use ITER_GE or ITER_LE iteration types with start key equal to NULL. For ITER_EQ, the key must not be NULL."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:30
msgid "key == x ASC order"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:34
msgid "key == x DESC order"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:38
msgid "all tuples"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:42
msgid "key < x"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:46
msgid "key <= x"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:50
msgid "key >= x"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:54
msgid "key > x"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:58
msgid "all bits from x are set in key"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:62
msgid "at least one x's bit is set"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:66
msgid "all bits are not set"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:70
msgid "key overlaps x"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:74
msgid "tuples in distance ascending order from specified point"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:80
msgid "Allocate and initialize iterator for space_id, index_id."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:82
msgid "The returned iterator must be destroyed by :ref:`box_iterator_free<c_api-box_index-box_iterator_free>`."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:87
#: ../doc/dev_guide/reference_capi/box_index.rst:218
msgid ":ref:`iterator_type<c_api-box_index-iterator_type>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:88
#: ../doc/dev_guide/reference_capi/box_index.rst:170
#: ../doc/dev_guide/reference_capi/box_index.rst:186
#: ../doc/dev_guide/reference_capi/box_index.rst:202
#: ../doc/dev_guide/reference_capi/box_index.rst:219
msgid "encode key in MsgPack Array format ([part1, part2, ...])"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:89
#: ../doc/dev_guide/reference_capi/box_index.rst:171
#: ../doc/dev_guide/reference_capi/box_index.rst:187
#: ../doc/dev_guide/reference_capi/box_index.rst:203
#: ../doc/dev_guide/reference_capi/box_index.rst:220
msgid "the end of encoded ``key``"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:91
msgid "NULL on error (check :ref:`box_error_last <c_api-error-box_error_last>`)"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:92
msgid "iterator otherwise"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:94
msgid "See also :ref:`box_iterator_next<c_api-box_index-box_iterator_next>`, :ref:`box_iterator_free<c_api-box_index-box_iterator_free>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:101
msgid "Retrieve the next item from the ``iterator``."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:103
#: ../doc/dev_guide/reference_capi/box_index.rst:117
msgid "an iterator returned by :ref:`box_index_iterator <c_api-box_index-box_index_iterator>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:105
msgid "output argument. result a tuple or NULL if there is no more data."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:108
#: ../doc/dev_guide/reference_capi/box_index.rst:132
#: ../doc/dev_guide/reference_capi/box_index.rst:142
#: ../doc/dev_guide/reference_capi/box_index.rst:175
msgid "-1 on error (check :ref:`box_error_last <c_api-error-box_error_last>`)"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:109
msgid "0 on success. The end of data is not an error."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:115
msgid "Destroy and deallocate iterator."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:122
msgid "Determine a direction of the given iterator type: -1 for REQ, LT, LE, and +1 for all others."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:127
msgid "Return the number of element in the index."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:133
#: ../doc/dev_guide/reference_capi/box_index.rst:143
msgid ">= 0 otherwise"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:137
msgid "Return the number of bytes used in memory by the index."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:147
msgid "Return a random tuple from the index (useful for statistical analysis)."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:151
msgid "random seed"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:152
#: ../doc/dev_guide/reference_capi/box_index.rst:172
#: ../doc/dev_guide/reference_capi/box_index.rst:188
#: ../doc/dev_guide/reference_capi/box_index.rst:204
msgid "output argument. result a tuple or NULL if there is no tuples in space"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:155
msgid "See also: :ref:`index_object.random<box_index-random>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:161
msgid "Get a tuple from index by the key."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:163
msgid "Please note that this function works much more faster than :ref:`index_object.select<box_index-select>` or :ref:`box_index_iterator<c_api-box_index-box_index_iterator>` + :ref:`box_iterator_next<c_api-box_index-box_iterator_next>`."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:176
#: ../doc/dev_guide/reference_capi/box_index.rst:192
#: ../doc/dev_guide/reference_capi/box_index.rst:208
#: ../doc/dev_guide/reference_capi/box_index.rst:223
#: ../doc/dev_guide/reference_capi/fiber.rst:172
#: ../doc/dev_guide/reference_capi/txn.rst:18
#: ../doc/dev_guide/reference_capi/txn.rst:27
#: ../doc/dev_guide/reference_capi/utils.rst:65
msgid "0 on success"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:178
msgid "See also: ``index_object.get()``"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:182
msgid "Return a first (minimal) tuple matched the provided key."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:191
#: ../doc/dev_guide/reference_capi/box_index.rst:207
#: ../doc/dev_guide/reference_capi/box_index.rst:222
msgid "-1 on error (check :ref:`box_error_last() <c_api-error-box_error_last>`)"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:194
msgid "See also: :ref:`index_object.min()<box_index-min>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:198
msgid "Return a last (maximal) tuple matched the provided key."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:210
msgid "See also: :ref:`index_object.max()<box_index-max>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:214
msgid "Count the number of tuple matched the provided key."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:225
msgid "See also: :ref:`index_object.count()<box_index-count>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:230
msgid "Return :ref:`key definition <capi-tuple_key_def>` for an index"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:232
msgid "Returned object is valid until the next yield."
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:237
#: ../doc/dev_guide/reference_capi/tuple.rst:169
msgid "key definition on success"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:238
#: ../doc/dev_guide/reference_capi/tuple.rst:170
#: ../doc/dev_guide/reference_capi/tuple.rst:188
msgid "NULL on error"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:240
msgid "See also: :ref:`box_tuple_compare() <capi-tuple_box_tuple_compare>`,"
msgstr ""

#: ../doc/dev_guide/reference_capi/box_index.rst:241
msgid ":ref:`box_tuple_format_new() <capi-tuple_box_tuple_format_new>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/clock.rst:3
msgid "Module `clock`"
msgstr ""

#: ../doc/dev_guide/reference_capi/coio.rst:5
msgid "Module `coio`"
msgstr ""

#: ../doc/dev_guide/reference_capi/coio.rst:11
msgid "READ event"
msgstr ""

#: ../doc/dev_guide/reference_capi/coio.rst:15
msgid "WRITE event"
msgstr ""

#: ../doc/dev_guide/reference_capi/coio.rst:21
msgid "Wait until READ or WRITE event on socket (``fd``). Yields."
msgstr ""

#: ../doc/dev_guide/reference_capi/coio.rst:23
#: ../doc/dev_guide/reference_capi/coio.rst:72
msgid "non-blocking socket file description"
msgstr ""

#: ../doc/dev_guide/reference_capi/coio.rst:24
msgid "requested events to wait. Combination of ``COIO_READ | COIO_WRITE`` bit flags."
msgstr ""

#: ../doc/dev_guide/reference_capi/coio.rst:26
msgid "timeout in seconds."
msgstr ""

#: ../doc/dev_guide/reference_capi/coio.rst:28
msgid "0 - timeout"
msgstr ""

#: ../doc/dev_guide/reference_capi/coio.rst:29
msgid ">0 - returned events. Combination of ``TNT_IO_READ | TNT_IO_WRITE`` bit flags."
msgstr ""

#: ../doc/dev_guide/reference_capi/coio.rst:35
msgid "Create new eio task with specified function and arguments. Yield and wait until the task is complete. This function may use the :ref:`worker_pool_threads <cfg_basic-worker_pool_threads>` configuration parameter."
msgstr ""

#: ../doc/dev_guide/reference_capi/coio.rst:40
msgid "To avoid double error checking, this function does not throw exceptions. In most cases it is also necessary to check the return value of the called function and perform necessary actions. If func sets errno, the errno is preserved across the call."
msgstr ""

#: ../doc/dev_guide/reference_capi/coio.rst:45
msgid "-1 and ``errno`` = ENOMEM if failed to create a task"
msgstr ""

#: ../doc/dev_guide/reference_capi/coio.rst:46
msgid "the function's return (``errno`` is preserved)."
msgstr ""

#: ../doc/dev_guide/reference_capi/coio.rst:50
msgid "static ssize_t openfile_cb(va_list ap)\n"
"{\n"
"        const char* filename = va_arg(ap);\n"
"        int flags = va_arg(ap);\n"
"        return open(filename, flags);\n"
"}\n"
"\n"
"if (coio_call(openfile_cb, \"/tmp/file\", 0) == -1)\n"
"    // handle errors.\n"
"..."
msgstr ""

#: ../doc/dev_guide/reference_capi/coio.rst:65
msgid "Fiber-friendly version of :manpage:`getaddrinfo(3)`."
msgstr ""

#: ../doc/dev_guide/reference_capi/coio.rst:69
msgid "Close the ``fd`` and wake any fiber blocked in :ref:`coio_wait() <c_api-coio-coio_wait>` call on this ``fd``."
msgstr ""

#: ../doc/dev_guide/reference_capi/coio.rst:74
msgid "the result of ``close(fd)``, see :manpage:`close(2)`"
msgstr ""

#: ../doc/dev_guide/reference_capi/error.rst:3
msgid "Module `error`"
msgstr ""

#: ../doc/dev_guide/reference_capi/error.rst:153
msgid "Error - contains information about error."
msgstr ""

#: ../doc/dev_guide/reference_capi/error.rst:157
msgid "Return the error type, e.g. \"ClientError\", \"SocketError\", etc."
msgstr ""

#: ../doc/dev_guide/reference_capi/error.rst:159
#: ../doc/dev_guide/reference_capi/error.rst:166
#: ../doc/dev_guide/reference_capi/error.rst:173
msgid "error"
msgstr ""

#: ../doc/dev_guide/reference_capi/error.rst:160
#: ../doc/dev_guide/reference_capi/error.rst:174
msgid "not-null string"
msgstr ""

#: ../doc/dev_guide/reference_capi/error.rst:164
msgid "Return IPROTO error code"
msgstr ""

#: ../doc/dev_guide/reference_capi/error.rst:167
msgid "enum :ref:`box_error_code <capi-box_error_code>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/error.rst:171
msgid "Return the error message"
msgstr ""

#: ../doc/dev_guide/reference_capi/error.rst:180
msgid "Get the information about the last API call error."
msgstr ""

#: ../doc/dev_guide/reference_capi/error.rst:182
msgid "The Tarantool error handling works most like libc's errno. All API calls return -1 or NULL in the event of error. An internal pointer to box_error_t type is set by API functions to indicate what went wrong. This value is only significant if API call failed (returned -1 or NULL)."
msgstr ""

#: ../doc/dev_guide/reference_capi/error.rst:187
msgid "Successful function can also touch the last error in some cases. You don't have to clear the last error before calling API functions. The returned object is valid only until next call to **any** API function."
msgstr ""

#: ../doc/dev_guide/reference_capi/error.rst:191
msgid "You must set the last error using box_error_set() in your stored C procedures if you want to return a custom error message. You can re-throw the last API error to IPROTO client by keeping the current value and returning -1 to Tarantool from your stored procedure."
msgstr ""

#: ../doc/dev_guide/reference_capi/error.rst:196
msgid "last error"
msgstr ""

#: ../doc/dev_guide/reference_capi/error.rst:200
msgid "Clear the last error."
msgstr ""

#: ../doc/dev_guide/reference_capi/error.rst:204
msgid "Set the last error."
msgstr ""

#: ../doc/dev_guide/reference_capi/error.rst:208
msgid "IPROTO :ref:`error code<capi-box_error_code>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/error.rst:210
#: ../doc/dev_guide/reference_capi/say.rst:33
#: ../doc/dev_guide/reference_capi/say.rst:48
msgid "format arguments"
msgstr ""

#: ../doc/dev_guide/reference_capi/error.rst:212
msgid "See also: IPROTO :ref:`error code<capi-box_error_code>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/error.rst:216
msgid "A backward-compatible API define."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:3
msgid "Module `fiber`"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:7
msgid "Fiber - contains information about a :ref:`fiber <atomic-threads_fibers_yields>`."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:11
msgid "Function to run inside a fiber."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:15
msgid "Create a new fiber."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:17
msgid "Takes a fiber from the fiber cache, if it's not empty. Can fail only if there is not enough memory for the fiber structure or fiber stack."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:20
msgid "The created fiber automatically returns itself to the fiber cache when its \"main\" function completes."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:23
#: ../doc/dev_guide/reference_capi/fiber.rst:39
msgid "string with fiber name"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:24
msgid "func for run inside fiber"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:26
#: ../doc/dev_guide/reference_capi/fiber.rst:43
msgid "See also: :ref:`fiber_start()<c_api-fiber-fiber_start>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:30
msgid "Create a new fiber with defined attributes."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:32
msgid "Can fail only if there is not enough memory for the fiber structure or fiber stack."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:35
msgid "The created fiber automatically returns itself to the fiber cache if has a default stack size when its \"main\" function completes."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:40
#: ../doc/dev_guide/reference_capi/fiber.rst:163
#: ../doc/dev_guide/reference_capi/fiber.rst:169
msgid "fiber attributes container"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:41
msgid "function to run inside the fiber"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:49
msgid "Start execution of created fiber."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:51
msgid "fiber to start"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:52
msgid "arguments to start the fiber with"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:56
msgid "Return control to another fiber and wait until it'll be woken."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:58
msgid "See also: :ref:`fiber_wakeup()<c_api-fiber-fiber_wakeup>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:64
msgid "Interrupt a synchronous wait of a fiber"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:66
#: ../doc/dev_guide/reference_capi/fiber.rst:104
msgid "fiber to be woken up"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:72
msgid "Cancel the subject fiber (set ``FIBER_IS_CANCELLED`` flag)"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:74
msgid "If target fiber's flag ``FIBER_IS_CANCELLABLE`` set, then it would be woken up (maybe prematurely). Then current fiber yields until the target fiber is dead (or is woken up by :ref:`fiber_wakeup()<c_api-fiber-fiber_wakeup>`)."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:78
msgid "fiber to be cancelled"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:82
msgid "Make it possible or not possible to wakeup the current fiber immediately when it's cancelled."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:85
#: ../doc/dev_guide/reference_capi/fiber.rst:96
msgid "fiber"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:86
#: ../doc/dev_guide/reference_capi/fiber.rst:97
msgid "status to set"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:88
msgid "previous state"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:94
msgid "Set fiber to be joinable (``false`` by default)."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:101
msgid "Wait until the fiber is dead and then move its execution status to the caller. The fiber must not be detached."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:106
msgid "Before: ``FIBER_IS_JOINABLE`` flag is set."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:108
msgid "See also: :ref:`fiber_set_joinable()<c_api-fiber-fiber_set_joinable>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:112
msgid "Put the current fiber to sleep for at least 's' seconds."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:114
msgid "time to sleep"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:116
msgid "Note: this is a cancellation point."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:118
msgid "See also: :ref:`fiber_is_cancelled()<c_api-fiber-fiber_is_cancelled>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:124
msgid "Check current fiber for cancellation (it must be checked manually)."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:128
msgid "Report loop begin time as double (cheap)."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:132
msgid "Report loop begin time as 64-bit int."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:136
msgid "Reschedule fiber to end of event loop cycle."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:142
msgid "Return ``slab_cache`` suitable to use with ``tarantool/small`` library"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:146
msgid "Return the current fiber."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:152
msgid "Create a new fiber attributes container and initialize it with default parameters."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:155
msgid "Can be used for creating many fibers: corresponding fibers will not take ownership."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:160
msgid "Delete the ``fiber_attr`` and free all allocated resources. This is safe when fibers created with this attribute still exist."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:167
msgid "Set the fiber's stack size in the fiber attributes container."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:170
msgid "stack size for new fibers (in bytes)"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:173
msgid "-1 on failure (if ``stack_size`` is smaller than the minimum allowable fiber stack size)"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:178
msgid "Get the fiber's stack size from the fiber attributes container."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:180
msgid "fiber attributes container, or NULL for default"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:183
msgid "stack size (in bytes)"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:189
msgid "A conditional variable: a synchronization primitive that allow fibers in Tarantool's :ref:`cooperative multitasking <atomic-cooperative_multitasking>` environment to yield until some predicate is satisfied."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:193
msgid "Fiber conditions have two basic operations -- \"wait\" and \"signal\", -- where \"wait\" suspends the execution of a fiber (i.e. yields) until \"signal\" is called."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:197
msgid "Unlike ``pthread_cond``, ``fiber_cond`` doesn't require mutex/latch wrapping."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:201
msgid "Create a new conditional variable."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:205
msgid "Delete the conditional variable."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:207
msgid "Note: behavior is undefined if there are fibers waiting for the conditional variable."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:210
msgid "conditional variable to delete"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:216
msgid "Wake up **one** (any) of the fibers waiting for the conditional variable."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:218
#: ../doc/dev_guide/reference_capi/fiber.rst:226
msgid "Does nothing if no one is waiting."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:220
#: ../doc/dev_guide/reference_capi/fiber.rst:228
#: ../doc/dev_guide/reference_capi/fiber.rst:244
msgid "conditional variable"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:224
msgid "Wake up **all** fibers waiting for the conditional variable."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:234
msgid "Suspend the execution of the current fiber (i.e. yield) until :ref:`fiber_cond_signal() <c_api-fiber_cond_signal>` is called."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:237
msgid "Like ``pthread_cond``, ``fiber_cond`` can issue spurious wake ups caused by explicit :ref:`fiber_wakeup()<c_api-fiber-fiber_wakeup>` or :ref:`fiber_cancel()<c_api-fiber-fiber_cancel>` calls. It is highly recommended to wrap calls to this function into a loop and check the actual predicate and :ref:`fiber_is_cancelled()<c_api-fiber-fiber_is_cancelled>` on every iteration."
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:245
msgid "timeout in seconds"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:247
msgid "0 on :ref:`fiber_cond_signal() <c_api-fiber_cond_signal>` call or a spurious wake up"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:249
msgid "-1 on timeout, and the error code is set to 'TimedOut'"
msgstr ""

#: ../doc/dev_guide/reference_capi/fiber.rst:253
msgid "Shortcut for :ref:`fiber_cond_wait_timeout() <c_api-fiber_cond_wait_timeout>`."
msgstr ""

#: ../doc/dev_guide/reference_capi/index.rst:5
msgid "C API reference"
msgstr ""

#: ../doc/dev_guide/reference_capi/index.rst:7
msgid "List of C API headers"
msgstr ""

#: ../doc/dev_guide/reference_capi/latch.rst:3
msgid "Module `latch`"
msgstr ""

#: ../doc/dev_guide/reference_capi/latch.rst:7
msgid "A lock for cooperative multitasking environment"
msgstr ""

#: ../doc/dev_guide/reference_capi/latch.rst:11
msgid "Allocate and initialize the new latch."
msgstr ""

#: ../doc/dev_guide/reference_capi/latch.rst:13
msgid "allocated latch object"
msgstr ""

#: ../doc/dev_guide/reference_capi/latch.rst:0
#: ../doc/dev_guide/reference_capi/latch.rst:0
msgid "Return type"
msgstr ""

#: ../doc/dev_guide/reference_capi/latch.rst:14
msgid "box_latch_t *"
msgstr ""

#: ../doc/dev_guide/reference_capi/latch.rst:18
msgid "Destroy and free the latch."
msgstr ""

#: ../doc/dev_guide/reference_capi/latch.rst:20
msgid "latch to destroy"
msgstr ""

#: ../doc/dev_guide/reference_capi/latch.rst:24
msgid "Lock a latch. Waits indefinitely until the current fiber can gain access to the latch."
msgstr ""

#: ../doc/dev_guide/reference_capi/latch.rst:0
msgid "param box_latch_t* latch"
msgstr ""

#: ../doc/dev_guide/reference_capi/latch.rst:27
#: ../doc/dev_guide/reference_capi/latch.rst:33
msgid "latch to lock"
msgstr ""

#: ../doc/dev_guide/reference_capi/latch.rst:31
msgid "Try to lock a latch. Return immediately if the latch is locked."
msgstr ""

#: ../doc/dev_guide/reference_capi/latch.rst:34
msgid "status of operation. 0 - success, 1 - latch is locked"
msgstr ""

#: ../doc/dev_guide/reference_capi/latch.rst:35
msgid "int"
msgstr ""

#: ../doc/dev_guide/reference_capi/latch.rst:39
msgid "Unlock a latch. The fiber calling this function must own the latch."
msgstr ""

#: ../doc/dev_guide/reference_capi/latch.rst:41
msgid "latch to unlock"
msgstr ""

#: ../doc/dev_guide/reference_capi/say.rst:3
msgid "Module `say` (logging)"
msgstr ""

#: ../doc/dev_guide/reference_capi/say.rst:11
msgid "do not use this value directly"
msgstr ""

#: ../doc/dev_guide/reference_capi/say.rst:29
#: ../doc/dev_guide/reference_capi/say.rst:45
msgid "Format and print a message to Tarantool log file."
msgstr ""

#: ../doc/dev_guide/reference_capi/say.rst:31
msgid ":ref:`log level <c_api-say-say_level>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/say.rst:32
#: ../doc/dev_guide/reference_capi/say.rst:47
msgid "``printf()``-like format string"
msgstr ""

#: ../doc/dev_guide/reference_capi/say.rst:35
#: ../doc/dev_guide/reference_capi/say.rst:50
msgid "See also :manpage:`printf(3)`, :ref:`say_level<c_api-say-say_level>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/say.rst:54
msgid "say_info(\"Some useful information: %s\", status);"
msgstr ""

#: ../doc/dev_guide/reference_capi/schema.rst:3
msgid "Module `schema`"
msgstr ""

#: ../doc/dev_guide/reference_capi/schema.rst:11
msgid "Start of the reserved range of system spaces."
msgstr ""

#: ../doc/dev_guide/reference_capi/schema.rst:15
msgid "Space id of _schema."
msgstr ""

#: ../doc/dev_guide/reference_capi/schema.rst:19
msgid "Space id of _space."
msgstr ""

#: ../doc/dev_guide/reference_capi/schema.rst:23
msgid "Space id of _vspace view."
msgstr ""

#: ../doc/dev_guide/reference_capi/schema.rst:27
msgid "Space id of _index."
msgstr ""

#: ../doc/dev_guide/reference_capi/schema.rst:31
msgid "Space id of _vindex view."
msgstr ""

#: ../doc/dev_guide/reference_capi/schema.rst:35
msgid "Space id of _func."
msgstr ""

#: ../doc/dev_guide/reference_capi/schema.rst:39
msgid "Space id of _vfunc view."
msgstr ""

#: ../doc/dev_guide/reference_capi/schema.rst:43
msgid "Space id of _user."
msgstr ""

#: ../doc/dev_guide/reference_capi/schema.rst:47
msgid "Space id of _vuser view."
msgstr ""

#: ../doc/dev_guide/reference_capi/schema.rst:51
msgid "Space id of _priv."
msgstr ""

#: ../doc/dev_guide/reference_capi/schema.rst:55
msgid "Space id of _vpriv view."
msgstr ""

#: ../doc/dev_guide/reference_capi/schema.rst:59
msgid "Space id of _cluster."
msgstr ""

#: ../doc/dev_guide/reference_capi/schema.rst:63
msgid "Space id of _truncate."
msgstr ""

#: ../doc/dev_guide/reference_capi/schema.rst:67
msgid "End of reserved range of system spaces."
msgstr ""

#: ../doc/dev_guide/reference_capi/schema.rst:71
msgid "NULL value, returned on error."
msgstr ""

#: ../doc/dev_guide/reference_capi/trivia.rst:3
msgid "Module `trivia/config`"
msgstr ""

#: ../doc/dev_guide/reference_capi/trivia.rst:7
msgid "Extern modifier for all public functions."
msgstr ""

#: ../doc/dev_guide/reference_capi/trivia.rst:11
msgid "Package major version - 1 for 1.9.2."
msgstr ""

#: ../doc/dev_guide/reference_capi/trivia.rst:15
msgid "Package minor version - 9 for 1.9.2."
msgstr ""

#: ../doc/dev_guide/reference_capi/trivia.rst:19
msgid "Package patch version - 2 for 1.9.2."
msgstr ""

#: ../doc/dev_guide/reference_capi/trivia.rst:23
msgid "A string with major-minor-patch-commit-id identifier of the release, e.g. 1.9.2-0-g113ade24e."
msgstr ""

#: ../doc/dev_guide/reference_capi/trivia.rst:28
msgid "System configuration dir (e.g ``/etc``)"
msgstr ""

#: ../doc/dev_guide/reference_capi/trivia.rst:32
msgid "Install prefix (e.g. ``/usr``)"
msgstr ""

#: ../doc/dev_guide/reference_capi/trivia.rst:36
msgid "Build type, e.g. Debug or Release"
msgstr ""

#: ../doc/dev_guide/reference_capi/trivia.rst:40
msgid "CMake build type signature, e.g. ``Linux-x86_64-Debug``"
msgstr ""

#: ../doc/dev_guide/reference_capi/trivia.rst:44
msgid "Command line used to run CMake."
msgstr ""

#: ../doc/dev_guide/reference_capi/trivia.rst:48
msgid "Pathes to C and CXX compilers."
msgstr ""

#: ../doc/dev_guide/reference_capi/trivia.rst:52
msgid "C compile flags used to build Tarantool."
msgstr ""

#: ../doc/dev_guide/reference_capi/trivia.rst:56
msgid "CXX compile flags used to build Tarantool."
msgstr ""

#: ../doc/dev_guide/reference_capi/trivia.rst:60
msgid "A path to install ``*.lua`` module files."
msgstr ""

#: ../doc/dev_guide/reference_capi/trivia.rst:64
msgid "A path to install ``*.so``/``*.dylib`` module files."
msgstr ""

#: ../doc/dev_guide/reference_capi/trivia.rst:68
msgid "A path to Lua includes (the same directory where this file is contained)"
msgstr ""

#: ../doc/dev_guide/reference_capi/trivia.rst:72
msgid "A constant added to ``package.path`` in Lua to find ``*.lua`` module files."
msgstr ""

#: ../doc/dev_guide/reference_capi/trivia.rst:76
msgid "A constant added to ``package.cpath`` in Lua to find ``*.so`` module files."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:3
msgid "Module `tuple`"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:11
msgid "Tuple format."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:13
msgid "Each Tuple has an associated format (class). Default format is used to create tuples which are not attached to any particular space."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:18
msgid "Tuple"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:24
msgid "Allocate and initialize a new tuple from raw MsgPack Array data."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:26
msgid "tuple format. Use :ref:`box_tuple_format_default()<c_api-tuple-box_tuple_format_default>` to create space-independent tuple."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:29
msgid "tuple data in MsgPack Array format ([field1, field2, ...])"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:30
msgid "the end of ``data``"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:32
#: ../doc/dev_guide/reference_capi/txn.rst:49
msgid "NULL on out of memory"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:33
msgid "tuple otherwise"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:35
msgid "See also: :ref:`box.tuple.new()<box_tuple-new>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:39
msgid "When working with tuples, it is the developer's responsibility to ensure that enough space is allocated, taking especial caution when writing to them with msgpuck functions such as ``mp_encode_array()``."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:48
msgid "Increase the reference counter of tuple."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:50
msgid "Tuples are reference counted. All functions that return tuples guarantee that the last returned tuple is reference counted internally until the next call to API function that yields or returns another tuple."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:54
msgid "You should increase the reference counter before taking tuples for long processing in your code. The Lua garbage collector will not destroy a tuple that has references, even if another fiber removes them from a space. After processing, decrement the reference counter using :ref:`box_tuple_unref()<c_api-tuple-box_tuple_unref>`, otherwise the tuple will leak."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:62
#: ../doc/dev_guide/reference_capi/tuple.rst:75
#: ../doc/dev_guide/reference_capi/tuple.rst:88
#: ../doc/dev_guide/reference_capi/tuple.rst:94
#: ../doc/dev_guide/reference_capi/tuple.rst:113
#: ../doc/dev_guide/reference_capi/tuple.rst:128
msgid "a tuple"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:64
#: ../doc/dev_guide/reference_capi/tuple.rst:77
#: ../doc/dev_guide/reference_capi/tuple.rst:106
msgid "-1 on error"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:67
msgid "See also: :ref:`box_tuple_unref()<c_api-tuple-box_tuple_unref>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:73
msgid "Decrease the reference counter of tuple."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:80
msgid "See also: :ref:`box_tuple_ref()<c_api-tuple-box_tuple_ref>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:86
msgid "Return the number of fields in a tuple (the size of MsgPack Array)."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:92
msgid "Return the number of bytes used to store internal tuple data (MsgPack Array)."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:98
msgid "Dump raw MsgPack data to the memory buffer ``buf`` of size ``size``."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:100
msgid "Store tuple fields in the memory buffer."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:102
msgid "Upon successful return, the function returns the number of bytes written. If buffer size is not enough then the return value is the number of bytes which would have been written if enough space had been available."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:107
msgid "number of bytes written on success."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:111
msgid "Return the associated format."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:115
msgid "tuple format"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:121
msgid "Return the raw tuple field in MsgPack format. The result is a pointer to raw MessagePack data which can be decoded with mp_decode functions, for an example see the tutorial program :ref:`read.c <f_c_tutorial-read>`."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:126
msgid "The buffer is valid until the next call to a ``box_tuple_*`` function."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:129
msgid "zero-based index in MsgPack array."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:131
msgid "NULL if i >= :ref:`box_tuple_field_count()<c_api-tuple-box_tuple_field_count>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:132
msgid "msgpack otherwise"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:147
msgid "Possible data types for tuple fields."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:149
msgid "One cannot use STRS/ENUM macros for types because there is a mismatch between enum name (STRING) and type name literal (\"STR\"). STR is already used as a type in Objective C."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:157
msgid "Key definition"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:161
msgid "Create a key definition with the key fields with passed types on passed positions."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:163
msgid "May be used for tuple format creation and/or tuple comparison."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:165
msgid "array with key field identifiers"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:166
msgid "array with key :ref:`field types <capi-tuple_field_type>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:167
msgid "the number of key fields"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:174
msgid "Delete a key definition"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:176
msgid "key definition to delete"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:182
msgid "Return new in-memory tuple format based on passed key definitions"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:184
msgid "array of keys defined for the format"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:185
msgid "count of keys"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:187
msgid "new tuple format on success"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:192
msgid "Increment tuple format reference count"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:194
msgid "tuple format to ref"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:198
msgid "Decrement tuple format reference count"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:200
msgid "tuple format to unref"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:206
msgid "Compare tuples using key definition"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:208
msgid "the first tuple"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:209
msgid "the second tuple"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:210
#: ../doc/dev_guide/reference_capi/tuple.rst:224
msgid "key definition"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:212
msgid "0  if ``key_fields(tuple_a)`` == ``key_fields(tuple_b)``"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:213
msgid "<0 if ``key_fields(tuple_a)`` < ``key_fields(tuple_b)``"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:214
msgid ">0 if ``key_fields(tuple_a)`` > ``key_fields(tuple_b)``"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:216
#: ../doc/dev_guide/reference_capi/tuple.rst:230
msgid "See also: enum :ref:`field_type <capi-tuple_field_type>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:220
msgid "Compare a tuple with a key using key definition"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:222
msgid "tuple"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:223
msgid "key with MessagePack array header"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:226
msgid "0  if ``key_fields(tuple)`` == ``parts(key)``"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:227
msgid "<0 if ``key_fields(tuple)`` < ``parts(key)``"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:228
msgid ">0 if ``key_fields(tuple)`` > ``parts(key)``"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:234
msgid "Tuple iterator"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:238
msgid "Allocate and initialize a new tuple iterator. The tuple iterator allows iterating over fields at the root level of a MsgPack array."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:243
msgid "box_tuple_iterator_t* it = box_tuple_iterator(tuple);\n"
"if (it == NULL) {\n"
"    // error handling using box_error_last()\n"
"}\n"
"const char* field;\n"
"while (field = box_tuple_next(it)) {\n"
"    // process raw MsgPack data\n"
"}\n"
"\n"
"// rewind the iterator to the first position\n"
"box_tuple_rewind(it)\n"
"assert(box_tuple_position(it) == 0);\n"
"\n"
"// rewind three fields\n"
"field = box_tuple_seek(it, 3);\n"
"assert(box_tuple_position(it) == 4);\n"
"\n"
"box_iterator_free(it);"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:266
msgid "Destroy and free tuple iterator"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:272
msgid "Return zero-based next position in iterator. That is, this function returnы the field id of the field that will be returned by the next call to :ref:`box_tuple_next()<c_api-tuple-box_tuple_next>`. Returned value is zero after initialization or rewind and :ref:`box_tuple_field_count()<c_api-tuple-box_tuple_field_count>` after the end of iteration."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:279
#: ../doc/dev_guide/reference_capi/tuple.rst:286
#: ../doc/dev_guide/reference_capi/tuple.rst:301
#: ../doc/dev_guide/reference_capi/tuple.rst:322
msgid "a tuple iterator"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:280
msgid "position"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:284
msgid "Rewind iterator to the initial position."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:288
msgid "After: ``box_tuple_position(it) == 0``"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:292
msgid "Seek the tuple iterator."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:294
msgid "The result is a pointer to raw MessagePack data which can be decoded with mp_decode functions, for an example see the tutorial program :ref:`read.c <f_c_tutorial-read>`. The returned buffer is valid until the next call to ``box_tuple_*`` API. The requested ``field_no`` is returned by the next call to ``box_tuple_next(it)``."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:302
msgid "field number - zero-based position in MsgPack array"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:305
msgid "After:"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:307
msgid "``box_tuple_position(it) == field_not`` if returned value is not NULL."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:308
msgid "``box_tuple_position(it) == box_tuple_field_count(tuple)`` if returned value is NULL."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:315
msgid "Return the next tuple field from tuple iterator."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:317
msgid "The result is a pointer to raw MessagePack data which can be decoded with mp_decode functions, for an example see the tutorial program :ref:`read.c <f_c_tutorial-read>`. The returned buffer is valid until next call to ``box_tuple_*`` API."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:323
msgid "NULL if there are no more fields"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:324
msgid "MsgPack otherwise"
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:326
msgid "Before: :ref:`box_tuple_position()<c_api-tuple-box_tuple_position>` is zero-based ID of returned field."
msgstr ""

#: ../doc/dev_guide/reference_capi/tuple.rst:329
msgid "After: ``box_tuple_position(it) == box_tuple_field_count(tuple)`` if returned value is NULL."
msgstr ""

#: ../doc/dev_guide/reference_capi/txn.rst:3
msgid "Module `txn`"
msgstr ""

#: ../doc/dev_guide/reference_capi/txn.rst:7
msgid "Return true if there is an active transaction."
msgstr ""

#: ../doc/dev_guide/reference_capi/txn.rst:13
msgid "Begin a transaction in the current fiber."
msgstr ""

#: ../doc/dev_guide/reference_capi/txn.rst:15
msgid "A transaction is attached to caller fiber, therefore one fiber can have only one active transaction. See also :ref:`box.begin()<box-begin>`."
msgstr ""

#: ../doc/dev_guide/reference_capi/txn.rst:19
msgid "-1 on error. Perhaps a transaction has already been started."
msgstr ""

#: ../doc/dev_guide/reference_capi/txn.rst:25
msgid "Commit the current transaction. See also :ref:`box.commit() <box-commit>`."
msgstr ""

#: ../doc/dev_guide/reference_capi/txn.rst:28
msgid "-1 on error. Perhaps a disk write failure"
msgstr ""

#: ../doc/dev_guide/reference_capi/txn.rst:32
msgid "Roll back the current transaction. See also :ref:`box.rollback() <box-rollback>`."
msgstr ""

#: ../doc/dev_guide/reference_capi/txn.rst:36
msgid "Return a descriptor of a savepoint."
msgstr ""

#: ../doc/dev_guide/reference_capi/txn.rst:40
msgid "Roll back the current transaction as far as the specified savepoint."
msgstr ""

#: ../doc/dev_guide/reference_capi/txn.rst:44
msgid "Allocate memory on txn memory pool."
msgstr ""

#: ../doc/dev_guide/reference_capi/txn.rst:46
msgid "The memory is automatically deallocated when the transaction is committed or rolled back."
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:3
msgid "Module `lua/utils`"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:9
msgid "Push cdata of given ``ctypeid`` onto the stack."
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:11
msgid "CTypeID must be used from FFI at least once. Allocated memory returned uninitialized. Only numbers and pointers are supported."
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:14
#: ../doc/dev_guide/reference_capi/utils.rst:27
#: ../doc/dev_guide/reference_capi/utils.rst:42
#: ../doc/dev_guide/reference_capi/utils.rst:49
#: ../doc/dev_guide/reference_capi/utils.rst:62
#: ../doc/dev_guide/reference_capi/utils.rst:74
#: ../doc/dev_guide/reference_capi/utils.rst:81
#: ../doc/dev_guide/reference_capi/utils.rst:116
#: ../doc/dev_guide/reference_capi/utils.rst:128
msgid "Lua State"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:15
msgid "FFI's CTypeID of this cdata"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:17
#: ../doc/dev_guide/reference_capi/utils.rst:31
msgid "memory associated with this cdata"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:19
msgid "See also: :ref:`luaL_checkcdata()<c_api-utils-luaL_checkcdata>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:25
msgid "Check whether the function argument ``idx`` is a cdata."
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:28
#: ../doc/dev_guide/reference_capi/utils.rst:43
msgid "stack index"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:29
msgid "output argument. FFI's CTypeID of returned cdata"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:33
msgid "See also: :ref:`luaL_pushcdata()<c_api-utils-luaL_pushcdata>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:37
msgid "Set finalizer function on a cdata object."
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:39
msgid "Equivalent to call `ffi.gc(obj, function)`. Finalizer function must be on the top of the stack."
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:47
msgid "Return CTypeID (FFI) of given СDATA type."
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:50
msgid "C type name as string (e.g. \"struct request\" or \"uint32_t\")"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:53
msgid "CTypeID"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:55
msgid "See also: :ref:`luaL_pushcdata()<c_api-utils-luaL_pushcdata>`, :ref:`luaL_checkcdata()<c_api-utils-luaL_checkcdata>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:60
msgid "Declare symbols for FFI."
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:63
msgid "C definitions (e.g. \"struct stat\")"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:66
msgid "``LUA_ERRRUN``, ``LUA_ERRMEM` or ``LUA_ERRERR`` otherwise."
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:68
msgid "See also: ``ffi.cdef(def)``"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:72
msgid "Push uint64_t onto the stack."
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:75
#: ../doc/dev_guide/reference_capi/utils.rst:82
msgid "value to push"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:79
msgid "Push int64_t onto the stack."
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:86
#: ../doc/dev_guide/reference_capi/utils.rst:100
msgid "Check whether the argument idx is a uint64 or a convertable string and returns this number."
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
#: ../doc/dev_guide/reference_capi/utils.rst:0
msgid "throws"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:89
#: ../doc/dev_guide/reference_capi/utils.rst:96
msgid "error if the argument can't be converted"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:93
#: ../doc/dev_guide/reference_capi/utils.rst:107
msgid "Check whether the argument idx is a int64 or a convertable string and returns this number."
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:103
#: ../doc/dev_guide/reference_capi/utils.rst:110
msgid "the converted number or 0 of argument can't be converted"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:114
msgid "Push a tuple onto the stack."
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:118
msgid "error on OOM"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:120
msgid "See also: :ref:`luaT_istuple <c_api-utils-luaT_istuple>`"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:126
msgid "Check whether ``idx`` is a tuple."
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:129
msgid "the stack index"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:131
msgid "non-NULL if ``idx`` is a tuple"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:132
msgid "NULL if ``idx`` is not a tuple"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:136
msgid "Re-throw the last Tarantool error as a Lua object."
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:138
msgid "See also: `lua_error() <https://www.lua.org/manual/5.1/manual.html#lua_error>`_,"
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:139
msgid ":ref:`box_error_last() <c_api-error-box_error_last>`."
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:143
msgid "Similar to `lua_cpcall() <https://www.lua.org/manual/5.1/manual.html#lua_cpcall>`_, but with the proper support of Tarantool errors."
msgstr ""

#: ../doc/dev_guide/reference_capi/utils.rst:148
msgid "Get the global Lua state used by Tarantool."
msgstr ""

#: ../doc/dev_guide/release_management.rst:5
msgid "Release management"
msgstr ""

#: ../doc/dev_guide/release_management.rst:11
msgid "Release policy"
msgstr ""

#: ../doc/dev_guide/release_management.rst:13
msgid "A Tarantool release is identified by three digits, for example, 1.7.7. We use these digits according to their definitions provided at http://semver.org:"
msgstr ""

#: ../doc/dev_guide/release_management.rst:16
msgid "The first digit stands for MAJOR release. A **major** release may contain *incompatible changes*."
msgstr ""

#: ../doc/dev_guide/release_management.rst:18
msgid "The second digit stands for MINOR release, it does not contain incompatible changes, and is used for introducing backward-compatible *features*."
msgstr ""

#: ../doc/dev_guide/release_management.rst:20
msgid "The third digit is for PATCH releases that contain only backward-compatible *bug fixes*."
msgstr ""

#: ../doc/dev_guide/release_management.rst:23
msgid "In MINOR digit, we reflect how stable a release is:"
msgstr ""

#: ../doc/dev_guide/release_management.rst:25
msgid "0 meaning alpha,"
msgstr ""

#: ../doc/dev_guide/release_management.rst:26
msgid "1 meaning beta,"
msgstr ""

#: ../doc/dev_guide/release_management.rst:27
msgid "anything between 1 and 10 meaning stable, and"
msgstr ""

#: ../doc/dev_guide/release_management.rst:28
msgid "10 meaning LTS."
msgstr ""

#: ../doc/dev_guide/release_management.rst:30
msgid "So, each MAJOR release series goes through a development-maturity life cycle of MINOR releases, as follows:"
msgstr ""

#: ../doc/dev_guide/release_management.rst:33
msgid "**Alpha**. Once in every few months we release a few alpha versions, e.g. 2.0.1, 2.0.2."
msgstr ""

#: ../doc/dev_guide/release_management.rst:36
msgid "Alpha versions may contain incompatible changes, crashes and other bugs."
msgstr ""

#: ../doc/dev_guide/release_management.rst:38
msgid "**Beta**. Once major changes necessary to introduce new flagship features are ready, we release a few beta versions, e.g. 2.1.3, 2.1.4."
msgstr ""

#: ../doc/dev_guide/release_management.rst:41
msgid "Beta versions may contain crashes, but do not have incompatible changes, so can be used to develop new applications."
msgstr ""

#: ../doc/dev_guide/release_management.rst:44
msgid "**Stable**. Finally, after we see our beta versions run successfully in production, usually in a few more months, during which we fix all incoming bugs and add some minor features, we declare this MAJOR release series stable."
msgstr ""

#: ../doc/dev_guide/release_management.rst:49
msgid "Like Ubuntu, we distinguish two kinds of stable releases:"
msgstr ""

#: ../doc/dev_guide/release_management.rst:51
msgid "**LTS (Long Term Support)** releases that are supported for 3 years (community) and up to 5 years (paying customers). **LTS** release is identified by MINOR version 10."
msgstr ""

#: ../doc/dev_guide/release_management.rst:54
msgid "**Standard stable releases** are only supported a few months after the next stable is out."
msgstr ""

#: ../doc/dev_guide/release_management.rst:57
msgid "\"Support\" means that we continue fixing bugs in a release."
msgstr ""

#: ../doc/dev_guide/release_management.rst:59
msgid "We add commits simultaneously to three MAJOR releases:"
msgstr ""

#: ../doc/dev_guide/release_management.rst:61
msgid "**LTS** is a stable release which does not receive new features, and only gets backward compatible fixes. Hence, following the rules of semver, LTS release never has its MAJOR or MINOR version increased, and only gets PATCH level releases."
msgstr ""

#: ../doc/dev_guide/release_management.rst:66
msgid "**STABLE** is our current stable release, which may receive new features. When the next STABLE version is published, MINOR version is incremented. Between MINOR releases, we may have intermediate PATCH level releases as well, which will contain only bug fixes. We maintain PATCH level releases for two STABLE releases, the current and the previous one, to preserve support continuity."
msgstr ""

#: ../doc/dev_guide/release_management.rst:73
msgid "**NEXT** is our next MAJOR release, and it follows the maturity cycle described in the beginning. While NEXT release is in alpha state, its MINOR is frozen at 0 and is only increased when the release reaches BETA status. Once the NEXT release becomes STABLE, we switch the vehicle for delivery of minor features, designating the previous stable release as LTS, and releasing it with MINOR set to 10."
msgstr ""

#: ../doc/dev_guide/release_management.rst:80
msgid "To sum up, once a quarter we release:"
msgstr ""

#: ../doc/dev_guide/release_management.rst:82
msgid "the next LTS release, e.g. 2.10.6, 2.10.7 or 2.10.8"
msgstr ""

#: ../doc/dev_guide/release_management.rst:83
msgid "the next STABLE release, e.g. 3.6, 3.7 or 3.8"
msgstr ""

#: ../doc/dev_guide/release_management.rst:84
msgid "(optionally) an alpha or beta version of the NEXT release, e.g. 4.0.1, 4.0.2 or 4.0.3"
msgstr ""

#: ../doc/dev_guide/release_management.rst:87
msgid "In all supported releases, we also release a PATCH release as soon as we find and fix an outstanding CVE/vulnerability."
msgstr ""

#: ../doc/dev_guide/release_management.rst:90
msgid "We also publish nightly builds, and use the fourth slot in the version identifier to designate the nightly build number."
msgstr ""

#: ../doc/dev_guide/release_management.rst:93
msgid "Example version identifier:"
msgstr ""

#: ../doc/dev_guide/release_management.rst:95
msgid "2.0.3 - third alpha of 2.0 release"
msgstr ""

#: ../doc/dev_guide/release_management.rst:96
msgid "2.1.3 - a beta of 2.0 release"
msgstr ""

#: ../doc/dev_guide/release_management.rst:97
msgid "2.2 - a stable version of 2.0 series, but not an LTS yet"
msgstr ""

#: ../doc/dev_guide/release_management.rst:98
msgid "2.10 - an LTS release"
msgstr ""

#: ../doc/dev_guide/release_management.rst:104
msgid "How to make a minor release"
msgstr ""

#: ../doc/dev_guide/release_management.rst:106
msgid "$ git tag -a 2.4 -m \"Next minor in 2.x series\"\n"
"$ vim CMakeLists.txt # edit CPACK_PACKAGE_VERSION_PATCH\n"
"$ git push --tags"
msgstr ""

#: ../doc/dev_guide/release_management.rst:112
msgid "A tag which is made on a git branch can be taken along with a merge, or left on the branch. The technique to \"keep the tag on the branch it was originally set on\" is to use ``--no-fast-forward`` when merging this branch."
msgstr ""

#: ../doc/dev_guide/release_management.rst:116
msgid "With ``--no-ff``, a merge changeset is created to represent the received changes, and only that merge changeset ends up in the destination branch. This technique can be useful when there are two active lines of development, e.g. \"stable\" and \"next\", and it's necessary to be able to tag both lines independently."
msgstr ""

#: ../doc/dev_guide/release_management.rst:122
msgid "To make sure that a tag doesn't end up in the destination branch, it is necessary to have the commit to which the tag is attached, \"stay on the original branch\". That's exactly what a merge with disabled \"fast-forward\" does -- creates a \"merge\" commit and adds it to both branches."
msgstr ""

#: ../doc/dev_guide/release_management.rst:127
msgid "Here's what it may look like:"
msgstr ""

#: ../doc/dev_guide/release_management.rst:129
msgid "kostja@shmita:~/work/tarantool$ git checkout master\n"
"Already on 'master'\n"
"kostja@shmita:~/work/tarantool$ git tag -a 2.4 -m \"Next development\"\n"
"kostja@shmita:~/work/tarantool$ git describe\n"
"2.4\n"
"kostja@shmita:~/work/tarantool$ git checkout master-stable\n"
"Switched to branch 'master-stable'\n"
"kostja@shmita:~/work/tarantool$ git tag -a 2.3 -m \"Next stable\"\n"
"kostja@shmita:~/work/tarantool$ git describe\n"
"2.3\n"
"kostja@shmita:~/work/tarantool$ git checkout master\n"
"Switched to branch 'master'\n"
"kostja@shmita:~/work/tarantool$ git describe\n"
"2.4\n"
"kostja@shmita:~/work/tarantool$ git merge --no-ff master-stable\n"
"Auto-merging CMakeLists.txt\n"
"Merge made by recursive.\n"
" CMakeLists.txt |    1 +\n"
" 1 files changed, 1 insertions(+), 0 deletions(-)\n"
"kostja@shmita:~/work/tarantool$ git describe\n"
"2.4.0-0-g0a98576"
msgstr ""

#: ../doc/dev_guide/release_management.rst:153
msgid "Also, don't forget this:"
msgstr ""

#: ../doc/dev_guide/release_management.rst:155
msgid "Update all issues. Upload the ChangeLog based on ``git log`` output."
msgstr ""

#: ../doc/dev_guide/release_management.rst:157
msgid "The ChangeLog must only include items which are mentioned as issues on GitHub. If anything significant is there, which is not mentioned, something went wrong in release planning and the release should be held up until this is cleared."
msgstr ""

#: ../doc/dev_guide/release_management.rst:162
msgid "Click 'Release milestone'. Create a milestone for the next minor release. Alert the driver to target bugs and blueprints to the new milestone."
msgstr ""

#: ../doc/dev_guide/release_management.rst:167
msgid "How to release a Docker container"
msgstr ""

#: ../doc/dev_guide/release_management.rst:169
msgid "To bump a new version of a Docker container:"
msgstr ""

#: ../doc/dev_guide/release_management.rst:171
msgid "On the ``master`` branch of `tarantool/docker <https://github.com/tarantool/docker>`_ repository, find the Dockerfile that corresponds to the commit's **major** version (e.g. https://github.com/tarantool/docker/blob/master/2.x/Dockerfile for Tarantool version 2.4) and specify the required commit in ``TARANTOOL_VERSION``, for example ``TARANTOOL_VERSION=2.4.0-11-gcd17b77f9``."
msgstr ""

#: ../doc/dev_guide/release_management.rst:179
msgid "Commit the Dockerfile back to ``master`` branch."
msgstr ""

#: ../doc/dev_guide/release_management.rst:181
msgid "In the same repository, create a branch named after the commit's ``<major>.<minor>`` versions, e.g. branch ``2.4`` for commit 2.4.0-11-gcd17b77f9."
msgstr ""

#: ../doc/dev_guide/release_management.rst:185
msgid "In Tarantool container build settings at ``hub.docker.com`` (https://hub.docker.com/r/tarantool/tarantool/~/settings/automated-builds/), add a new line:"
msgstr ""

#: ../doc/dev_guide/release_management.rst:189
msgid "Branch: x.y, /x, x.y"
msgstr ""

#: ../doc/dev_guide/release_management.rst:193
msgid "where ``x`` and ``y`` correspond to the commit's major and minor versions."
msgstr ""

#: ../doc/dev_guide/release_management.rst:195
msgid "Click **Save changes**."
msgstr ""

#: ../doc/dev_guide/release_management.rst:197
msgid "Shortly after, a new Docker container will be built."
msgstr ""

