# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 2.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-12 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/book/admin/daemon_supervision.rst:5
msgid "Daemon supervision"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:11
msgid "Server signals"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:13
msgid "Tarantool processes these signals during the event loop in the transaction processor thread:"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:22
msgid "Signal"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:22
msgid "Effect"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:24
msgid "SIGHUP"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:24
msgid "May cause log file rotation. See the :ref:`example <cfg_logging-logging_example>` in reference on Tarantool logging parameters."
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:28
msgid "SIGUSR1"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:28
msgid "May cause a database checkpoint. See :doc:`/reference/reference_lua/box_snapshot`."
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:31
msgid "SIGTERM"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:31
msgid "May cause graceful shutdown (information will be saved first)."
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:34
msgid "SIGINT (also known as keyboard interrupt)"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:34
msgid "May cause graceful shutdown."
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:38
msgid "SIGKILL"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:38
msgid "Causes an immediate shutdown."
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:41
msgid "Other signals will result in behavior defined by the operating system. Signals other than SIGKILL may be ignored, especially if Tarantool is executing a long-running procedure which prevents return to the event loop in the transaction processor thread."
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:50
msgid "Automatic instance restart"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:52
msgid "On ``systemd``-enabled platforms, ``systemd`` automatically restarts all Tarantool instances in case of failure. To demonstrate it, let’s try to destroy an instance:"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:56
msgid "$ systemctl status tarantool@my_app|grep PID\n"
"Main PID: 5885 (tarantool)\n"
"$ tt connect my_app\n"
"   • Connecting to the instance...\n"
"   • Connected to /var/run/tarantool/my_app.control\n"
"/var/run/tarantool/my_app.control> os.exit(-1)\n"
"   ⨯ Connection was closed. Probably instance process isn't running anymore"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:66
msgid "Now let’s make sure that ``systemd`` has restarted the instance:"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:68
msgid "$ systemctl status tarantool@my_app|grep PID\n"
"Main PID: 5914 (tarantool)"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:73
msgid "Additionally, you can find the information about the instance restart in the boot logs:"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:75
msgid "$ journalctl -u tarantool@my_app -n 8"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:83
msgid "Core dumps"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:85
msgid "Tarantool makes a core dump if it receives any of the following signals: SIGSEGV, SIGFPE, SIGABRT or SIGQUIT. This is automatic if Tarantool crashes."
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:88
msgid "On ``systemd``-enabled platforms, ``coredumpctl`` automatically saves core dumps and stack traces in case of a crash. Here is a general \"how to\" for how to enable core dumps on a Unix system:"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:92
msgid "Ensure session limits are configured to enable core dumps, i.e. say ``ulimit -c unlimited``. Check  \"man 5 core\" for other reasons why a core dump may not be produced."
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:96
msgid "Set a directory for writing core dumps to, and make sure that the directory is writable. On Linux, the directory path is set in a kernel parameter configurable via ``/proc/sys/kernel/core_pattern``."
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:100
msgid "Make sure that core dumps include stack trace information. If you use a binary Tarantool distribution, this is automatic. If you build Tarantool from source, you will not get detailed information if you pass ``-DCMAKE_BUILD_TYPE=Release`` to CMake."
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:105
msgid "To simulate a crash, you can execute an illegal command against a Tarantool instance:"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:108
msgid "$ # !!! please never do this on a production system !!!\n"
"$ tt connect my_app\n"
"   • Connecting to the instance...\n"
"   • Connected to /var/run/tarantool/my_app.control\n"
"/var/run/tarantool/my_app.control> require('ffi').cast('char *', 0)[0] = 48\n"
"   ⨯ Connection was closed. Probably instance process isn't running anymore"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:117
msgid "Alternatively, if you know the process ID of the instance (here we refer to it as $PID), you can abort a Tarantool instance by running ``gdb`` debugger:"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:120
msgid "$ gdb -batch -ex \"generate-core-file\" -p $PID"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:124
msgid "or manually sending a SIGABRT signal:"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:126
msgid "$ kill -SIGABRT $PID"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:132
msgid "To find out the process id of the instance ($PID), you can:"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:134
msgid "look it up in the instance's :ref:`box.info.pid <box_introspection-box_info>`,"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:136
msgid "find it with ``ps -A | grep tarantool``, or"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:138
msgid "say ``systemctl status tarantool@my_app|grep PID``."
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:140
msgid "On a ``systemd-enabled`` system, to see the latest crashes of the Tarantool daemon, say:"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:143
msgid "$ coredumpctl list /usr/bin/tarantool\n"
"MTIME                            PID   UID   GID SIG PRESENT EXE\n"
"Sat 2016-01-23 15:21:24 MSK   20681  1000  1000   6   /usr/bin/tarantool\n"
"Sat 2016-01-23 15:51:56 MSK   21035   995   992   6   /usr/bin/tarantool"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:150
msgid "To save a core dump into a file, say:"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:152
msgid "$ coredumpctl -o filename.core info <pid>"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:160
msgid "Stack traces"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:162
msgid "Since Tarantool stores tuples in memory, core files may be large. For investigation, you normally don't need the whole file, but only a \"stack trace\" or \"backtrace\"."
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:166
msgid "To save a stack trace into a file, say:"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:168
msgid "$ gdb -se \"tarantool\" -ex \"bt full\" -ex \"thread apply all bt\" --batch -c core> /tmp/tarantool_trace.txt"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:172
msgid "where:"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:174
msgid "\"tarantool\" is the path to the Tarantool executable,"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:175
msgid "\"core\" is the path to the core file, and"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:176
msgid "\"/tmp/tarantool_trace.txt\" is a sample path to a file for saving the stack trace."
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:180
msgid "Occasionally, you may find that the trace file contains output without debug symbols – the lines will contain ”??” instead of names. If this happens, check the instructions on these Tarantool wiki pages: `How to debug core dump of stripped tarantool <https://github.com/tarantool/tarantool/wiki/How-to-debug-core-dump-of-stripped-tarantool>`_ and `How to debug core from different OS <https://github.com/tarantool/tarantool/wiki/How-to-debug-core-from-different-OS>`_."
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:187
msgid "To see the stack trace and other useful information in console, say:"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:189
msgid "$ coredumpctl info 21035\n"
"          PID: 21035 (tarantool)\n"
"          UID: 995 (tarantool)\n"
"          GID: 992 (tarantool)\n"
"       Signal: 6 (ABRT)\n"
"    Timestamp: Sat 2016-01-23 15:51:42 MSK (4h 36min ago)\n"
" Command Line: tarantool my_app.lua <running>\n"
"   Executable: /usr/bin/tarantool\n"
"Control Group: /system.slice/system-tarantool.slice/tarantool@my_app.service\n"
"         Unit: tarantool@my_app.service\n"
"        Slice: system-tarantool.slice\n"
"      Boot ID: 7c686e2ef4dc4e3ea59122757e3067e2\n"
"   Machine ID: a4a878729c654c7093dc6693f6a8e5ee\n"
"     Hostname: localhost.localdomain\n"
"      Message: Process 21035 (tarantool) of user 995 dumped core.\n"
"\n"
"               Stack trace of thread 21035:\n"
"               #0  0x00007f84993aa618 raise (libc.so.6)\n"
"               #1  0x00007f84993ac21a abort (libc.so.6)\n"
"               #2  0x0000560d0a9e9233 _ZL12sig_fatal_cbi (tarantool)\n"
"               #3  0x00007f849a211220 __restore_rt (libpthread.so.0)\n"
"               #4  0x0000560d0aaa5d9d lj_cconv_ct_ct (tarantool)\n"
"               #5  0x0000560d0aaa687f lj_cconv_ct_tv (tarantool)\n"
"               #6  0x0000560d0aaabe33 lj_cf_ffi_meta___newindex (tarantool)\n"
"               #7  0x0000560d0aaae2f7 lj_BC_FUNCC (tarantool)\n"
"               #8  0x0000560d0aa9aabd lua_pcall (tarantool)\n"
"               #9  0x0000560d0aa71400 lbox_call (tarantool)\n"
"               #10 0x0000560d0aa6ce36 lua_fiber_run_f (tarantool)\n"
"               #11 0x0000560d0a9e8d0c _ZL16fiber_cxx_invokePFiP13__va_list_tagES0_ (tarantool)\n"
"               #12 0x0000560d0aa7b255 fiber_loop (tarantool)\n"
"               #13 0x0000560d0ab38ed1 coro_init (tarantool)\n"
"               ..."
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:228
msgid "Debugger"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:230
msgid "To start ``gdb`` debugger on the core dump, say:"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:232
msgid "$ coredumpctl gdb <pid>"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:236
msgid "It is highly recommended to install ``tarantool-debuginfo`` package to improve ``gdb`` experience, for example:"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:239
msgid "$ dnf debuginfo-install tarantool"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:243
msgid "``gdb`` also provides information about the debuginfo packages you need to install:"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:246
msgid "$ gdb -p <pid>\n"
"...\n"
"Missing separate debuginfos, use: dnf debuginfo-install\n"
"glibc-2.22.90-26.fc24.x86_64 krb5-libs-1.14-12.fc24.x86_64\n"
"libgcc-5.3.1-3.fc24.x86_64 libgomp-5.3.1-3.fc24.x86_64\n"
"libselinux-2.4-6.fc24.x86_64 libstdc++-5.3.1-3.fc24.x86_64\n"
"libyaml-0.1.6-7.fc23.x86_64 ncurses-libs-6.0-1.20150810.fc24.x86_64\n"
"openssl-libs-1.0.2e-3.fc24.x86_64"
msgstr ""

#: ../../doc/book/admin/daemon_supervision.rst:257
msgid "Symbolic names are present in stack traces even if you don’t have ``tarantool-debuginfo`` package installed."
msgstr ""
