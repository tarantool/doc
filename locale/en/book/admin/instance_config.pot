# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 2.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-12 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/book/admin/instance_config.rst:4
msgid "Instance configuration"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:6
msgid "For each Tarantool instance, you need two files:"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:8
msgid "[Optional] An :ref:`application file <app_server-launching_app>` with instance-specific logic. Put this file into the ``/usr/share/tarantool/`` directory."
msgstr ""

#: ../../doc/book/admin/instance_config.rst:12
msgid "For example, ``/usr/share/tarantool/my_app.lua`` (here we implement it as a :ref:`Lua module <app_server-modules>` that bootstraps the database and exports ``start()`` function for API calls):"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:16
msgid "local function start()\n"
"    box.schema.space.create(\"somedata\")\n"
"    box.space.somedata:create_index(\"primary\")\n"
"    <...>\n"
"end\n"
"\n"
"return {\n"
"  start = start;\n"
"}"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:28
msgid "An :ref:`instance file <admin-instance_file>` with instance-specific initialization logic and parameters. Put this file, or a symlink to it, into the **instance directory** (see ``instances_enabled`` parameter in :ref:`tt configuration file <tt-config_file>`)."
msgstr ""

#: ../../doc/book/admin/instance_config.rst:33
msgid "For example, ``/etc/tarantool/instances.enabled/my_app.lua`` (here we load ``my_app.lua`` module and make a call to ``start()`` function from that module):"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:37
msgid "#!/usr/bin/env tarantool\n"
"\n"
"box.cfg {\n"
"    listen = 3301;\n"
"}\n"
"\n"
"-- load my_app module and call start() function\n"
"-- with some app options controlled by sysadmins\n"
"local m = require('my_app').start({...})"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:52
msgid "Instance file"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:54
msgid "After this short introduction, you may wonder what an instance file is, what it is for, and how ``tt`` uses it. After all, Tarantool is an application server, so why not start the application stored in ``/usr/share/tarantool`` directly?"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:59
msgid "A typical Tarantool application is not a script, but a daemon running in background mode and processing requests, usually sent to it over a TCP/IP socket. This daemon needs to be started automatically when the operating system starts, and managed with the operating system standard tools for service management -- such as ``systemd`` or ``init.d``. To serve this very purpose, we created **instance files**."
msgstr ""

#: ../../doc/book/admin/instance_config.rst:66
msgid "You can have more than one instance file. For example, a single application in ``/usr/share/tarantool`` can run in multiple instances, each of them having its own instance file. Or you can have multiple applications in ``/usr/share/tarantool`` -- again, each of them having its own instance file."
msgstr ""

#: ../../doc/book/admin/instance_config.rst:71
msgid "An instance file is typically created by a system administrator. An application file is often provided by a developer, in a Lua rock or an rpm/deb package."
msgstr ""

#: ../../doc/book/admin/instance_config.rst:74
msgid "An instance file is designed to not differ in any way from a Lua application. It must, however, configure the database, i.e. contain a call to :doc:`box.cfg{} </reference/reference_lua/box_cfg>` somewhere in it, because itâ€™s the only way to turn a Tarantool script into a background process, and ``tt`` is a tool to manage background processes. Other than that, an instance file may contain arbitrary Lua code, and, in theory, even include the entire application business logic in it. We, however, do not recommend this, since it clutters the instance file and leads to unnecessary copy-paste when you need to run multiple instances of an application."
msgstr ""

#: ../../doc/book/admin/instance_config.rst:87
msgid "Preloading Lua scripts and modules"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:89
msgid "Tarantool supports loading and running chunks of Lua code before the loading instance file. To load or run Lua code immediately upon Tarantool startup, specify the ``TT_PRELOAD`` environment variable. Its value can be either a path to a Lua script or a Lua module name:"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:93
msgid "To run the Lua script ``script.lua`` from the ``preload/path/`` directory inside the working directory in Tarantool before ``main.lua``, set ``TT_PRELOAD`` as follows:"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:96
msgid "$ TT_PRELOAD=/preload/path/script.lua tarantool main.lua"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:100
msgid "Tarantool runs the ``script.lua`` code, waits for it to complete, and then starts running ``main.lua``."
msgstr ""

#: ../../doc/book/admin/instance_config.rst:103
msgid "To load the ``preload.module`` into the Tarantool Lua interpreter executing ``main.lua``, set ``TT_PRELOAD`` as follows:"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:106
msgid "$ TT_PRELOAD=preload.module tarantool main.lua"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:110
msgid "Tarantool loads the ``preload.module`` code into the interpreter and starts running ``main.lua`` as if its first statement was ``require('preload.module')``."
msgstr ""

#: ../../doc/book/admin/instance_config.rst:115
msgid "``TT_PRELOAD`` values that end with ``.lua`` are considered scripts, so avoid module names with this ending."
msgstr ""

#: ../../doc/book/admin/instance_config.rst:118
msgid "To load several scripts or modules, pass them in a single quoted string, separated by semicolons:"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:121
msgid "$ TT_PRELOAD=\"/preload/path/script.lua;preload.module\" tarantool main.lua"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:125
msgid "In the preload script, the three dots (``...``) value contains the module name if you're preloading a module or the path to the script if you're running a script."
msgstr ""

#: ../../doc/book/admin/instance_config.rst:128
msgid "The :ref:`arg <index-init_label>` value from the main script is visible in the preload script or module."
msgstr ""

#: ../../doc/book/admin/instance_config.rst:131
msgid "For example, when preloading this script:"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:133
msgid "-- preload.lua --\n"
"print(\"Preloading:\")\n"
"print(\"... arg is:\", ...)\n"
"print(\"Passed args:\", arg[1], arg[2])"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:140
msgid "You get the following output:"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:142
msgid "$ TT_PRELOAD=preload.lua tarantool main.lua arg1 arg2\n"
"Preloading:\n"
"... arg is: preload.lua\n"
"Passed args:        arg1    arg2\n"
"'strip_core' is set but unsupported\n"
"... main/103/main.lua I> Tarantool 2.11.0-0-g247a9a4 Darwin-x86_64-Release\n"
"... main/103/main.lua I> log level 5\n"
"... main/103/main.lua I> wal/engine cleanup is paused\n"
"< ... >"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:154
msgid "If an error happens during the execution of the preload script or module, Tarantool reports the problem and exits."
msgstr ""

#: ../../doc/book/admin/instance_config.rst:160
msgid "tt configuration file"
msgstr ""

#: ../../doc/book/admin/instance_config.rst:162
msgid "While instance files contain instance configuration, the :ref:`tt <tt-cli>` configuration file contains the configuration that ``tt`` uses to set up the application environment. This includes the path to instance files, various working directories, and other parameters that connect the application to the system."
msgstr ""

#: ../../doc/book/admin/instance_config.rst:167
msgid "To create a default ``tt`` configuration, run ``tt init``. This creates a ``tt.yaml`` configuration file. Its location depends on the :ref:`tt launch mode <tt-config_modes>` (system or local)."
msgstr ""

#: ../../doc/book/admin/instance_config.rst:171
msgid "Some ``tt`` configuration parameters are similar to those used by :doc:`box.cfg{} </reference/reference_lua/box_cfg>`, for example, ``memxt_dir`` or ``wal_dir``. Other parameters define the ``tt`` environment, for example, paths to installation files used by ``tt`` or to connected :ref:`external modules <tt-external_modules>`."
msgstr ""

#: ../../doc/book/admin/instance_config.rst:176
msgid "Find the detailed information about the ``tt`` configuration parameters and launch modes on the :ref:`tt configuration page <tt-config>`."
msgstr ""
