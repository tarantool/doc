# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-17 14:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/book/admin/upgrades/2.10.1.rst:4
msgid "Fix decimal values in vinyl spaces when upgrading to 2.10.1"
msgstr ""

#: ../../doc/book/admin/upgrades/2.10.1.rst:6
msgid "This is an upgrade guide for fixing one specific problem which could happen with decimal values in vinyl spaces. It's only relevant when you're upgrading from Tarantool version <= 2.10.0 to anything >= 2.10.1."
msgstr ""

#: ../../doc/book/admin/upgrades/2.10.1.rst:9
msgid "Before :tarantool-issue:`6377` was fixed, ``decimal`` and ``double`` values in a ``scalar`` or ``number`` index could end up in the wrong order after the update. If such an index has been built for a space that uses the ``vinyl`` storage engine, the index is persisted and is not rebuilt even after the upgrade. If this is the case, the user has to rebuild the affected indexes manually."
msgstr ""

#: ../../doc/book/admin/upgrades/2.10.1.rst:15
msgid "Here are the rules to determine whether your installation was affected. If all of the statements listed below are true, you have to rebuild indexes for the affected ``vinyl`` spaces manually."
msgstr ""

#: ../../doc/book/admin/upgrades/2.10.1.rst:18
msgid "You were running Tarantool version 2.10.0 and below."
msgstr ""

#: ../../doc/book/admin/upgrades/2.10.1.rst:19
msgid "You have spaces with the ``vinyl`` storage engine."
msgstr ""

#: ../../doc/book/admin/upgrades/2.10.1.rst:20
msgid "The ``vinyl`` spaces have ``number`` or ``scalar`` indexes."
msgstr ""

#: ../../doc/book/admin/upgrades/2.10.1.rst:21
msgid "The tuples in these spaces may contain both ``decimal`` and ``double`` ``Inf`` or ``NaN`` values."
msgstr ""

#: ../../doc/book/admin/upgrades/2.10.1.rst:23
msgid "If this is the case for you, you can run the following script, which will find all the affected indices:"
msgstr ""

#: ../../doc/book/admin/upgrades/2.10.1.rst:25
msgid "local fiber = require('fiber')\n"
"local decimal = require('decimal')\n"
"\n"
"local function isnan(val)\n"
"    return type(val) == 'number' and val ~= val\n"
"end\n"
"\n"
"local function isinf(val)\n"
"    return val == math.huge or val == -math.huge\n"
"end\n"
"\n"
"local function vinyl(id)\n"
"    return box.space[id].engine == 'vinyl'\n"
"end\n"
"\n"
"require_rebuild = {}\n"
"local iters = 0\n"
"for _, v in box.space._index:pairs({512, 0}, {iterator='GE'}) do\n"
"    local id = v[1]\n"
"    iters = iters + 1\n"
"    if iters % 1000 == 0 then\n"
"        fiber.yield()\n"
"    end\n"
"    if vinyl(id) then\n"
"        local format = v[6]\n"
"        local check_fields = {}\n"
"        for _, fmt in pairs(v[6]) do\n"
"            if fmt[2] == 'number' or fmt[2] == 'scalar' then\n"
"                table.insert(check_fields,  fmt[1] + 1)\n"
"            end\n"
"        end\n"
"        local have_decimal = {}\n"
"        local have_nan = {}\n"
"        if #check_fields > 0 then\n"
"            for k, tuple in box.space[id]:pairs() do\n"
"                for _, i in pairs(check_fields) do\n"
"                    iters = iters + 1\n"
"                    if iters % 1000 == 0 then\n"
"                        fiber.yield()\n"
"                    end\n"
"                    have_decimal[i] = have_decimal[i] or\n"
"                                    decimal.is_decimal(tuple[i])\n"
"                    have_nan[i] = have_nan[i] or isnan(tuple[i]) or\n"
"                                isinf(tuple[i])\n"
"                    if have_decimal[i] and have_nan[i] then\n"
"                        table.insert(require_rebuild, v)\n"
"                        goto out\n"
"                    end\n"
"                end\n"
"            end\n"
"        end\n"
"    end\n"
"    ::out::\n"
"end\n"
""
msgstr ""

#: ../../doc/book/admin/upgrades/2.10.1.rst:28
msgid "The indices requiring a rebuild will be stored in the ``require_rebuild`` table. If the table is empty, you're safe and can continue using Tarantool as before."
msgstr ""

#: ../../doc/book/admin/upgrades/2.10.1.rst:31
msgid "If the ``require_rebuild`` table contains some entries, you can rebuild the affected indices with the following script."
msgstr ""

#: ../../doc/book/admin/upgrades/2.10.1.rst:36
msgid "Please run the script below only on the master node and only after all the nodes are upgraded to the new Tarantool version."
msgstr ""

#: ../../doc/book/admin/upgrades/2.10.1.rst:39
msgid "local log = require('log')\n"
"\n"
"local function rebuild_index(idx)\n"
"    local index_name = idx[3]\n"
"    local space_name = box.space[idx[1]].name\n"
"    log.info(\"Rebuilding index %s on space %s\", index_name, space_name)\n"
"    if (idx[2] == 0) then\n"
"        log.error(\"Cannot rebuild primary index %s on space %s. Please, \"..\n"
"                \"recreate the space manually\", index_name, space_name)\n"
"        return\n"
"    end\n"
"    log.info(\"Deleting index %s on space %s\", index_name, space_name)\n"
"    local v = box.space._index:delete{idx[1], idx[2]}\n"
"    if v == nil then\n"
"        log.error(\"Couldn't find index %s on space %s\", index_name, space_name)\n"
"        return\n"
"    end\n"
"    log.info(\"Done\")\n"
"    log.info(\"Creating index %s on space %s\", index_name, space_name)\n"
"    box.space._index:insert(v)\n"
"end\n"
"\n"
"for _, idx in pairs(require_rebuild) do\n"
"    rebuild_index(idx)\n"
"end\n"
""
msgstr ""

#: ../../doc/book/admin/upgrades/2.10.1.rst:42
msgid "The script might fail on some of the indices with the following error: \"Cannot rebuild primary index index_name on space space_name. Please, recreate the space manually\". If this happens, automatic index rebuild is impossible, and you have to manually re-create the space to ensure data integrity:"
msgstr ""

#: ../../doc/book/admin/upgrades/2.10.1.rst:47
msgid "Create a new space with the same format as the existing one."
msgstr ""

#: ../../doc/book/admin/upgrades/2.10.1.rst:48
msgid "Define the same indices on the freshly created space."
msgstr ""

#: ../../doc/book/admin/upgrades/2.10.1.rst:49
msgid "Iterate over the old space's primary key and insert all the data into the new space."
msgstr ""

#: ../../doc/book/admin/upgrades/2.10.1.rst:50
msgid "Drop the old space."
msgstr ""
