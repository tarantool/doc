
msgid "Data model"
msgstr ""

msgid "This section describes how Tarantool stores values and what operations with data it supports."
msgstr ""

msgid "If you tried to create a database as suggested in our :ref:`\"Getting started\" exercises <getting_started_db>`, then your test database now looks like this:"
msgstr ""

msgid "Spaces"
msgstr ""

msgid "A **space** -- 'tester' in our example -- is a container."
msgstr ""

msgid "When Tarantool is being used to store data, there is always at least one space. Each space has a unique **name** specified by the user. Besides, each space has a unique **numeric identifier** which can be specified by the user, but usually is assigned automatically by Tarantool. Finally, a space always has an **engine**: *memtx* (default) -- in-memory engine, fast but limited in size, or *vinyl* -- on-disk engine for huge data sets."
msgstr ""

msgid "A space is a container for :ref:`tuples <index-box_tuple>`. To be functional, it needs to have a :ref:`primary index <index-box_index>`. It can also have secondary indexes."
msgstr ""

msgid "Tuples"
msgstr ""

msgid "A **tuple** plays the same role as a “row” or a “record”, and the components of a tuple (which we call “fields”) play the same role as a “row column” or “record field”, except that:"
msgstr ""

msgid "fields can be composite structures, such as arrays or maps, and"
msgstr ""

msgid "fields don't need to have names."
msgstr ""

msgid "Any given tuple may have any number of fields, and the fields may be of different :ref:`types <index-box_data-types>`. The identifier of a field is the field's number, base 1 (in Lua and other 1-based languages) or base 0 (in PHP or C/C++). For example, ``1`` or ``0`` can be used in some contexts to refer to the first field of a tuple."
msgstr ""

msgid "The number of tuples in a space is unlimited."
msgstr ""

msgid "Tuples in Tarantool are stored as `MsgPack <https://en.wikipedia.org/wiki/MessagePack>`_ arrays."
msgstr ""

msgid "When Tarantool returns a tuple value in the console, by default it uses :ref:`YAML <interactive_console>` format, for example: ``[3, 'Ace of Base', 1993]``."
msgstr ""

msgid "Indexes"
msgstr ""

msgid "An **index** is a group of key values and pointers."
msgstr ""

msgid "As with spaces, you should specify the index **name**, and let Tarantool come up with a unique **numeric identifier** (\"index id\")."
msgstr ""

msgid "An index always has a **type**. The default index type is 'TREE'. TREE indexes are provided by all Tarantool engines, can index unique and non-unique values, support partial key searches, comparisons and ordered results. Additionally, memtx engine supports HASH, RTREE and BITSET indexes."
msgstr ""

msgid "An index may be **multi-part**, that is, you can declare that an index key value is composed of two or more fields in the tuple, in any order. For example, for an ordinary TREE index, the maximum number of parts is 255."
msgstr ""

msgid "An index may be **unique**, that is, you can declare that it would be illegal to have the same key value twice."
msgstr ""

msgid "The first index defined on a space is called the **primary key index**, and it must be unique. All other indexes are called **secondary indexes**, and they may be non-unique."
msgstr ""

msgid "An index definition may include identifiers of tuple fields and their expected **types**. See allowed indexed field types :ref:`here <index-box_indexed-field-types>`."
msgstr ""

msgid "A recommended design pattern for a data model is to base primary keys on the first fields of a tuple, because this speeds up tuple comparison."
msgstr ""

msgid "In our example, we first defined the primary index (named 'primary') based on field #1 of each tuple:"
msgstr ""

msgid "tarantool> i = s:create_index('primary', {type = 'hash', parts = {{field = 1, type = 'unsigned'}}}"
msgstr ""

msgid "The effect is that, for all tuples in space 'tester', field #1 must exist and must contain an unsigned integer. The index type is 'hash', so values in field #1 must be unique, because keys in HASH indexes are unique."
msgstr ""

msgid "After that, we defined a secondary index (named 'secondary') based on field #2 of each tuple:"
msgstr ""

msgid "tarantool> i = s:create_index('secondary', {type = 'tree', parts = {field = 2, type = 'string'}})"
msgstr ""

msgid "The effect is that, for all tuples in space 'tester', field #2 must exist and must contain a string. The index type is 'tree', so values in field #2 must not be unique, because keys in TREE indexes may be non-unique."
msgstr ""

msgid "Space definitions and index definitions are stored permanently in Tarantool's system spaces :ref:`_space <box_space-space>` and :ref:`_index <box_space-index>` (for details, see reference on :ref:`box.space <box_space>` submodule)."
msgstr ""

msgid "You can add, drop, or alter the definitions at runtime, with some restrictions. See syntax details in reference on :ref:`box <box-module>` module."
msgstr ""

msgid "Read more about index operations :ref:`here <index-box_index-operations>`."
msgstr ""

msgid "Data types"
msgstr ""

msgid "Tarantool is both a database manager and an application server. Therefore a developer often deals with two type sets: the types of the programming language (such as Lua) and the types of the Tarantool storage format (MsgPack)."
msgstr ""

msgid "Lua versus MsgPack"
msgstr ""

msgid "Scalar / compound"
msgstr ""

msgid "MsgPack |nbsp| type"
msgstr ""

msgid "Lua type"
msgstr ""

msgid "Example value"
msgstr ""

msgid "scalar"
msgstr ""

msgid "nil"
msgstr ""

msgid "\"`nil`_\""
msgstr ""

msgid "``nil``"
msgstr ""

msgid "boolean"
msgstr ""

msgid "\"`boolean`_\""
msgstr ""

msgid "``true``"
msgstr ""

msgid "string"
msgstr ""

msgid "\"`string`_\""
msgstr ""

msgid "``'A B C'``"
msgstr ""

msgid "integer"
msgstr ""

msgid "\"`number`_\""
msgstr ""

msgid "``12345``"
msgstr ""

msgid "float 64 (double)"
msgstr ""

msgid "``1.2345``"
msgstr ""

msgid "\"`cdata`_\""
msgstr ""

msgid "binary"
msgstr ""

msgid "``[!!binary 3t7e]``"
msgstr ""

msgid "ext (for Tarantool decimal)"
msgstr ""

msgid "``1.2``"
msgstr ""

msgid "ext (for Tarantool uuid)"
msgstr ""

msgid "``12a34b5c-de67-8f90-`` |br| ``123g-h4567ab8901``"
msgstr ""

msgid "compound"
msgstr ""

msgid "map"
msgstr ""

msgid "\"`table`_\" (with string keys)"
msgstr ""

msgid "``{'a': 5, 'b': 6}``"
msgstr ""

msgid "array"
msgstr ""

msgid "\"`table`_\" (with integer keys)"
msgstr ""

msgid "``[1, 2, 3, 4, 5]``"
msgstr ""

msgid "tuple (\"`cdata`_\")"
msgstr ""

msgid "``[12345, 'A B C']``"
msgstr ""

msgid "MsgPack values have variable lengths. So, for example, the smallest number requires only one byte, but the largest number requires nine bytes."
msgstr ""

msgid "Field Type Details"
msgstr ""

msgid "**nil**. In Lua a nil type has only one possible value, also called *nil* (which Tarantool displays as ``null`` when using the default :ref:`YAML <interactive_console>` format). Nils may be compared to values of any types with == (is-equal) or ~= (is-not-equal), but other comparison operations will not work. Nils may not be used in Lua tables; the workaround is to use :ref:`box.NULL <box-null>` because ``nil == box.NULL`` is true. Example: ``nil``."
msgstr ""

msgid "**boolean**. A boolean is either ``true`` or ``false``. Example: ``true``."
msgstr ""

msgid "**integer**. The Tarantool integer type is for integers between -9223372036854775808 and 18446744073709551615, which is about 18 quintillion. This corresponds to number in Lua and to integer in MsgPack. Example: ``-2^63``."
msgstr ""

msgid "**unsigned**. The Tarantool unsigned type is for integers between 0 and 18446744073709551615,. So it is a subset of integer. Example: ``123456``."
msgstr ""

msgid "**double**. The double field type exists mainly so that there will be an equivalent to Tarantool/SQL's :ref:`DOUBLE data type <sql_data_type_double>`. In `msgpuck.h <https://github.com/rtsisyk/msgpuck>`_ (Tarantool's interface to MsgPack) the storage type is MP_DOUBLE and the size of the encoded value is always 9 bytes. In Lua, 'double' fields can only contain non-integer numeric values and cdata values with double floating-point numbers. Examples: ``1.234``, ``-44``, ``1.447e+44``. |br| To avoid using the wrong kind of values inadvertently, use ``ffi.cast()`` when searching or changing 'double' fields. For example, instead of :samp:`{space_object}:insert`:code:`{`:samp:`{value}`:code:`}` say ``ffi = require('ffi') ...`` :samp:`{space_object}:insert`:code:`({ffi.cast('double',`:samp:`{value}`:code:`)})`. Example:"
msgstr ""

msgid "s = box.schema.space.create('s', {format = {{'d', 'double'}}})\n"
"s:create_index('ii')\n"
"s:insert({1.1})\n"
"ffi = require('ffi')\n"
"s:insert({ffi.cast('double', 1)})\n"
"s:insert({ffi.cast('double', tonumber('123'))})\n"
"s:select(1.1)\n"
"s:select({ffi.cast('double', 1)})"
msgstr ""

msgid "Arithmetic with cdata 'double' will not work reliably, so for Lua it is better to use the 'number' type. This warning does not apply for Tarantool/SQL because Tarantool/SQL does :ref:`implicit casting <sql_data_type_conversion>`."
msgstr ""

msgid "**number**. In Lua a number is double-precision floating-point, but a Tarantool 'number' field may have both integer and floating-point values. Tarantool will try to store a Lua number as floating-point if the value contains a decimal point or is very large (greater than 100 trillion = 1e14), otherwise Tarantool will store it as an integer. To ensure that even very large numbers are stored as integers, use the :ref:`tonumber64 <other-tonumber64>` function, or the LL (Long Long) suffix, or the ULL (Unsigned Long Long) suffix. Here are examples of numbers using regular notation, exponential notation, the ULL suffix and the ``tonumber64`` function: ``-55``, ``-2.7e+20``, ``100000000000000ULL``, ``tonumber64('18446744073709551615')``."
msgstr ""

msgid "**decimal**. The Tarantool decimal type is stored as a MsgPack ext (Extension). Values with the decimal type are not floating-point values although they may contain decimal points. They are exact with up to 38 digits of precision. Example: a value returned by a function in the :ref:`decimal <decimal>` module."
msgstr ""

msgid "**string**. A string is a variable-length sequence of bytes, usually represented with alphanumeric characters inside single quotes. In both Lua and MsgPack, strings are treated as binary data, with no attempts to determine a string's character set or to perform any string conversion -- unless there is an optional :ref:`collation <index-collation>`. So, usually, string sorting and comparison are done byte-by-byte, without any special collation rules applied. (Example: numbers are ordered by their point on the number line, so 2345 is greater than 500; meanwhile, strings are ordered by the encoding of the first byte, then the encoding of the second byte, and so on, so ``'2345'`` is less than ``'500'``.) Example: ``'A, B, C'``."
msgstr ""

msgid "**bin**. A bin (binary) value is not directly supported by Lua but there is a Tarantool type ``varbinary`` which is encoded as MsgPack binary. For an (advanced) example showing how to insert varbinary into a database, see the Cookbook Recipe for :ref:`ffi_varbinary_insert <cookbook-ffi_varbinary_insert>`. Example: ``\"\\65 \\66 \\67\"``."
msgstr ""

msgid "**uuid**. The Tarantool uuid type is stored as a MsgPack ext (Extension). Values with the uuid type are :ref:`Universally unique identifiers <uuid-module>`. |br| Example: 64d22e4d-ac92-4a23-899a-e5934af5479."
msgstr ""

msgid "**array**. An array is represented in Lua with ``{...}`` (`braces`_). Examples: as lists of numbers representing points in a geometric figure: ``{10, 11}``, ``{3, 5, 9, 10}``."
msgstr ""

msgid "**table**. Lua tables with string keys are stored as MsgPack maps; Lua tables with integer keys starting with 1 are stored as MsgPack arrays. Nils may not be used in Lua tables; the workaround is to use :ref:`box.NULL <box-null>`. Example: a ``box.space.tester:select()`` request will return a Lua table."
msgstr ""

msgid "**tuple**. A tuple is a light reference to a MsgPack array stored in the database. It is a special type (cdata) to avoid conversion to a Lua table on retrieval. A few functions may return tables with multiple tuples. For tuple examples, see :ref:`box.tuple <box_tuple>`."
msgstr ""

msgid "**scalar**. Values in a scalar field can be boolean or integer or unsigned or double or number or decimal or string or varbinary -- but not array or map or tuple. Examples: ``true``, ``1``, ``'xxx'``."
msgstr ""

msgid "**any**. Values in an any field can be boolean or integer or unsigned or double or number or decimal or string or varbinary -- or array or map or tuple. Examples: ``true``, ``1``, ``'xxx'``, ``{box.NULL, 0}``."
msgstr ""

msgid "Examples of insert requests with different field types:"
msgstr ""

msgid "tarantool> box.space.K:insert{1,nil,true,'A B C',12345,1.2345}\n"
"---\n"
"- [1, null, true, 'A B C', 12345, 1.2345]\n"
"...\n"
"tarantool> box.space.K:insert{2,{['a']=5,['b']=6}}\n"
"---\n"
"- [2, {'a': 5, 'b': 6}]\n"
"...\n"
"tarantool> box.space.K:insert{3,{1,2,3,4,5}}\n"
"---\n"
"- [3, [1, 2, 3, 4, 5]]\n"
"..."
msgstr ""

msgid "Indexed field types"
msgstr ""

msgid "Indexes restrict values which Tarantool may store with MsgPack. This is why, for example, ``'unsigned'`` and ``'integer'`` are different field types although in MsgPack they are both stored as integer values -- an ``'unsigned'`` index contains only *non-negative* integer values while an ``‘integer’`` index contains *any* integer values."
msgstr ""

msgid "Here again are the field types described in :ref:`Field Type Details <index_box_field_type_details>`, and the index types they can fit in. The default field type is ``'unsigned'`` and the default index type is TREE. Although ``'nil'`` is not a legal indexed field type, indexes may contain `nil` :ref:`as a non-default option <box_space-is_nullable>`. Full information is in section :ref:`Details about index field types <details_about_index_field_types>`."
msgstr ""

msgid "Field type name string"
msgstr ""

msgid "Field type |br|"
msgstr ""

msgid "Index type"
msgstr ""

msgid "``'boolean'``"
msgstr ""

msgid ":ref:`boolean <index-box_boolean>`"
msgstr ""

msgid ":ref:`TREE or HASH <box_index-type>`"
msgstr ""

msgid "``'integer'`` (may also be called ‘int’)"
msgstr ""

msgid ":ref:`integer <index-box_integer>` which may include unsigned values"
msgstr ""

msgid "TREE or HASH"
msgstr ""

msgid "``'unsigned'`` (may also be called ‘uint’ or ‘num’, but ‘num’ is deprecated)"
msgstr ""

msgid ":ref:`unsigned <index-box_unsigned>`"
msgstr ""

msgid "TREE, BITSET or HASH"
msgstr ""

msgid "``'double'``"
msgstr ""

msgid ":ref:`double <index-box_double>`"
msgstr ""

msgid "``'number'``"
msgstr ""

msgid ":ref:`number <index-box_number>` which may include :ref:`integer <index-box_integer>` or :ref:`double <index-box_double>` values"
msgstr ""

msgid "``'decimal'``"
msgstr ""

msgid ":ref:`decimal <index-box_decimal>`"
msgstr ""

msgid "``'string'`` (may also be called ``‘str’``)"
msgstr ""

msgid ":ref:`string <index-box_string>`"
msgstr ""

msgid "``'varbinary'``"
msgstr ""

msgid ":ref:`varbinary <index-box_bin>`"
msgstr ""

msgid "``'uuid'``"
msgstr ""

msgid ":ref:`uuid <index-box_uuid>`"
msgstr ""

msgid "``'array'``"
msgstr ""

msgid ":ref:`array <index-box_array>`"
msgstr ""

msgid ":ref:`RTREE <box_index-rtree>`"
msgstr ""

msgid "``'scalar'``"
msgstr ""

msgid "may include :ref:`nil <index-box_nil>` or :ref:`boolean <index-box_boolean>` or :ref:`integer <index-box_integer>` or :ref:`unsigned <index-box_unsigned>` or :ref:`number <index-box_number>` or :ref:`decimal <index-box_decimal>` or :ref:`string <index-box_string>` or :ref:`varbinary <index-box_bin>` values"
msgstr ""

msgid "When a scalar field contains values of different underlying types, the key order is: nils, then booleans, then numbers, then strings, then varbinaries."
msgstr ""

msgid "Collations"
msgstr ""

msgid "By default, when Tarantool compares strings, it uses what we call a **\"binary\" collation**. The only consideration here is the numeric value of each byte in the string. Therefore, if the string is encoded with ASCII or UTF-8, then ``'A' < 'B' < 'a'``, because the encoding of ``'A'`` (what used to be called the \"ASCII value\") is 65, the encoding of ``'B'`` is 66, and the encoding of ``'a'`` is 98. Binary collation is best if you prefer fast deterministic simple maintenance and searching with Tarantool indexes."
msgstr ""

msgid "But if you want the ordering that you see in phone books and dictionaries, then you need Tarantool's optional collations, such as ``unicode`` and ``unicode_ci``, which allow for ``'a' < 'A' < 'B'`` and ``'a' = 'A' < 'B'`` respectively."
msgstr ""

msgid "**The unicode and unicode_ci optional collations** use the ordering according to the `Default Unicode Collation Element Table (DUCET) <http://unicode.org/reports/tr10/#Default_Unicode_Collation_Element_Table>`_ and the rules described in `Unicode® Technical Standard #10 Unicode Collation Algorithm (UTS #10 UCA) <http://unicode.org/reports/tr10>`_. The only difference between the two collations is about `weights <https://unicode.org/reports/tr10/#Weight_Level_Defn>`_:"
msgstr ""

msgid "``unicode`` collation observes L1 and L2 and L3 weights (strength = 'tertiary'),"
msgstr ""

msgid "``unicode_ci`` collation observes only L1 weights (strength = 'primary'), so for example 'a' = 'A' = 'á' = 'Á'."
msgstr ""

msgid "As an example, take some Russian words:"
msgstr ""

msgid "'ЕЛЕ'\n"
"'елейный'\n"
"'ёлка'\n"
"'еловый'\n"
"'елозить'\n"
"'Ёлочка'\n"
"'ёлочный'\n"
"'ЕЛь'\n"
"'ель'"
msgstr ""

msgid "...and show the difference in ordering and selecting by index:"
msgstr ""

msgid "with ``unicode`` collation:"
msgstr ""

msgid "tarantool> box.space.T:create_index('I', {parts = {{field = 1, type = 'str', collation='unicode'}}})\n"
"...\n"
"tarantool> box.space.T.index.I:select()\n"
"---\n"
"- - ['ЕЛЕ']\n"
"  - ['елейный']\n"
"  - ['ёлка']\n"
"  - ['еловый']\n"
"  - ['елозить']\n"
"  - ['Ёлочка']\n"
"  - ['ёлочный']\n"
"  - ['ель']\n"
"  - ['ЕЛь']\n"
"...\n"
"tarantool> box.space.T.index.I:select{'ЁлКа'}\n"
"---\n"
"- []\n"
"..."
msgstr ""

msgid "with ``unicode_ci`` collation:"
msgstr ""

msgid "tarantool> box.space.T:create_index('I', {parts = {{field = 1, type ='str', collation='unicode_ci'}}})\n"
"...\n"
"tarantool> box.space.S.index.I:select()\n"
"---\n"
"- - ['ЕЛЕ']\n"
"  - ['елейный']\n"
"  - ['ёлка']\n"
"  - ['еловый']\n"
"  - ['елозить']\n"
"  - ['Ёлочка']\n"
"  - ['ёлочный']\n"
"  - ['ЕЛь']\n"
"...\n"
"tarantool> box.space.S.index.I:select{'ЁлКа'}\n"
"---\n"
"- - ['ёлка']\n"
"..."
msgstr ""

msgid "In all, collation involves much more than these simple examples of upper case / lower case and accented / unaccented equivalence in alphabets. We also consider variations of the same character, non-alphabetic writing systems, and special rules that apply for combinations of characters."
msgstr ""

msgid "For English: use \"unicode\" and \"unicode_ci\". For Russian: use \"unicode\" and \"unicode_ci\" (although a few Russians might prefer the Kyrgyz collation which says Cyrillic letters 'Е' and 'Ё' are the same with level-1 weights). For Dutch, German (dictionary), French, Indonesian, Irish, Italian, Lingala, Malay, Portuguese, Southern Soho, Xhosa, or Zulu: \"unicode\" and \"unicode_ci\" will do."
msgstr ""

msgid "**The tailored optional collations**: For other languages, Tarantool supplies tailored collations for every modern language that has more than a million native speakers, and for specialized situations such as the difference between dictionary order and telephone book order. To see a complete list say ``box.space._collation:select()``. The tailored collation names have the form unicode_[language code]_[strength] where language code is a standard 2-character or 3-character language abbreviation, and strength is s1 for \"primary strength\" (level-1 weights), s2 for \"secondary\", s3 for \"tertiary\". Tarantool uses the same language codes as the ones in the \"list of tailorable locales\" on man pages of `Ubuntu <http://manpages.ubuntu.com/manpages/bionic/man3/Unicode::Collate::Locale.3perl.html>`_ and `Fedora <http://www.polarhome.com/service/man/?qf=Unicode%3A%3ACollate%3A%3ALocale&af=0&tf=2&of=Fedora>`_. Charts explaining the precise differences from DUCET order are in the `Common Language Data Repository <https://unicode.org/cldr/charts/30/collation>`_."
msgstr ""

msgid "Sequences"
msgstr ""

msgid "A **sequence** is a generator of ordered integer values."
msgstr ""

msgid "As with spaces and indexes, you should specify the sequence **name**, and let Tarantool come up with a unique **numeric identifier** (\"sequence id\")."
msgstr ""

msgid "As well, you can specify several options when creating a new sequence. The options determine what value will be generated whenever the sequence is used."
msgstr ""

msgid "Options for ``box.schema.sequence.create()``"
msgstr ""

msgid "Option name"
msgstr ""

msgid "Type and meaning"
msgstr ""

msgid "Default"
msgstr ""

msgid "Examples"
msgstr ""

msgid "**start**"
msgstr ""

msgid "Integer. The value to generate the first time a sequence is used"
msgstr ""

msgid "1"
msgstr ""

msgid "start=0"
msgstr ""

msgid "**min**"
msgstr ""

msgid "Integer. Values smaller than this cannot be generated"
msgstr ""

msgid "min=-1000"
msgstr ""

msgid "**max**"
msgstr ""

msgid "Integer. Values larger than this cannot be generated"
msgstr ""

msgid "9223372036854775807"
msgstr ""

msgid "max=0"
msgstr ""

msgid "**cycle**"
msgstr ""

msgid "Boolean. Whether to start again when values cannot be generated"
msgstr ""

msgid "false"
msgstr ""

msgid "cycle=true"
msgstr ""

msgid "**cache**"
msgstr ""

msgid "Integer. The number of values to store in a cache"
msgstr ""

msgid "0"
msgstr ""

msgid "cache=0"
msgstr ""

msgid "**step**"
msgstr ""

msgid "Integer. What to add to the previous generated value, when generating a new value"
msgstr ""

msgid "step=-1"
msgstr ""

msgid "**if_not_exists**"
msgstr ""

msgid "Boolean. If this is true and a sequence with this name exists already, ignore other options and use the existing values"
msgstr ""

msgid "if_not_exists=true"
msgstr ""

msgid "Once a sequence exists, it can be altered, dropped, reset, forced to generate the next value, or associated with an index."
msgstr ""

msgid "For an initial example, we generate a sequence named 'S'."
msgstr ""

msgid "tarantool> box.schema.sequence.create('S',{min=5, start=5})\n"
"---\n"
"- step: 1\n"
"  id: 5\n"
"  min: 5\n"
"  cache: 0\n"
"  uid: 1\n"
"  max: 9223372036854775807\n"
"  cycle: false\n"
"  name: S\n"
"  start: 5\n"
"..."
msgstr ""

msgid "The result shows that the new sequence has all default values, except for the two that were specified, ``min`` and ``start``."
msgstr ""

msgid "Then we get the next value, with the ``next()`` function."
msgstr ""

msgid "tarantool> box.sequence.S:next()\n"
"---\n"
"- 5\n"
"..."
msgstr ""

msgid "The result is the same as the start value. If we called ``next()`` again, we would get 6 (because the previous value plus the step value is 6), and so on."
msgstr ""

msgid "Then we create a new table, and say that its primary key may be generated from the sequence."
msgstr ""

msgid "tarantool> s=box.schema.space.create('T')\n"
"---\n"
"...\n"
"tarantool> s:create_index('I',{sequence='S'})\n"
"---\n"
"- parts:\n"
"  - type: unsigned\n"
"    is_nullable: false\n"
"    fieldno: 1\n"
"  sequence_id: 1\n"
"  id: 0\n"
"  space_id: 520\n"
"  unique: true\n"
"  type: TREE\n"
"  sequence_fieldno: 1\n"
"  name: I\n"
"...\n"
"---\n"
"..."
msgstr ""

msgid "Then we insert a tuple, without specifying a value for the primary key."
msgstr ""

msgid "tarantool> box.space.T:insert{nil,'other stuff'}\n"
"---\n"
"- [6, 'other stuff']\n"
"..."
msgstr ""

msgid "The result is a new tuple where the first field has a value of 6. This arrangement, where the system automatically generates the values for a primary key, is sometimes called \"auto-incrementing\" or \"identity\"."
msgstr ""

msgid "For syntax and implementation details, see the reference for :doc:`box.schema.sequence </reference/reference_lua/box_schema_sequence>`."
msgstr ""

msgid "Persistence"
msgstr ""

msgid "In Tarantool, updates to the database are recorded in the so-called :ref:`write ahead log (WAL) <internals-wal>` files. This ensures data persistence. When a power outage occurs or the Tarantool instance is killed incidentally, the in-memory database is lost. In this situation, WAL files are used to restore the data. Namely, Tarantool reads the WAL files and redoes the requests (this is called the \"recovery process\"). You can change the timing of the WAL writer, or turn it off, by setting :ref:`wal_mode <cfg_binary_logging_snapshots-wal_mode>`."
msgstr ""

msgid "Tarantool also maintains a set of :ref:`snapshot files <internals-snapshot>`. These files contain an on-disk copy of the entire data set for a given moment. Instead of reading every WAL file since the databases were created, the recovery process can load the latest snapshot file and then read only those WAL files that were produced after the snapshot file was made. After checkpointing, old WAL files can be removed to free up space."
msgstr ""

msgid "To force immediate creation of a snapshot file, you can use Tarantool's :doc:`box.snapshot() </reference/reference_lua/box_snapshot>` request. To enable automatic creation of snapshot files, you can use Tarantool's :ref:`checkpoint daemon <book_cfg_checkpoint_daemon>`. The checkpoint daemon sets intervals for forced checkpoints. It makes sure that the states of both memtx and vinyl storage engines are synchronized and saved to disk, and automatically removes old WAL files."
msgstr ""

msgid "Snapshot files can be created even if there is no WAL file."
msgstr ""

msgid "The memtx engine makes only regular checkpoints with the interval set in :ref:`checkpoint daemon <book_cfg_checkpoint_daemon>` configuration."
msgstr ""

msgid "The vinyl engine runs checkpointing in the background at all times."
msgstr ""

msgid "See the :ref:`Internals <internals-data_persistence>` section for more details about the WAL writer and the recovery process."
msgstr ""

msgid "Operations"
msgstr ""

msgid "Data operations"
msgstr ""

msgid "The basic data operations supported in Tarantool are:"
msgstr ""

msgid "five data-manipulation operations (INSERT, UPDATE, UPSERT, DELETE, REPLACE), and"
msgstr ""

msgid "one data-retrieval operation (SELECT)."
msgstr ""

msgid "All of them are implemented as functions in :ref:`box.space <box_space>` submodule."
msgstr ""

msgid "**Examples:**"
msgstr ""

msgid ":ref:`INSERT <box_space-insert>`: Add a new tuple to space 'tester'."
msgstr ""

msgid "The first field, field[1], will be 999 (MsgPack type is `integer`)."
msgstr ""

msgid "The second field, field[2], will be 'Taranto' (MsgPack type is `string`)."
msgstr ""

msgid "tarantool> box.space.tester:insert{999, 'Taranto'}"
msgstr ""

msgid ":ref:`UPDATE <box_space-update>`: Update the tuple, changing field field[2]."
msgstr ""

msgid "The clause \"{999}\", which has the value to look up in the index of the tuple's primary-key field, is mandatory, because ``update()`` requests must always have a clause that specifies a unique key, which in this case is field[1]."
msgstr ""

msgid "The clause \"{{'=', 2, 'Tarantino'}}\" specifies that assignment will happen to field[2] with the new value."
msgstr ""

msgid "tarantool> box.space.tester:update({999}, {{'=', 2, 'Tarantino'}})"
msgstr ""

msgid ":ref:`UPSERT <box_space-upsert>`: Upsert the tuple, changing field field[2] again."
msgstr ""

msgid "The syntax of ``upsert()`` is similar to the syntax of ``update()``. However, the execution logic of these two requests is different. UPSERT is either UPDATE or INSERT, depending on the database's state. Also, UPSERT execution is postponed until after transaction commit, so, unlike ``update()``, ``upsert()`` doesn't return data back."
msgstr ""

msgid "tarantool> box.space.tester:upsert({999, 'Taranted'}, {{'=', 2, 'Tarantism'}})"
msgstr ""

msgid ":ref:`REPLACE <box_space-replace>`: Replace the tuple, adding a new field."
msgstr ""

msgid "This is also possible with the ``update()`` request, but the ``update()`` request is usually more complicated."
msgstr ""

msgid "tarantool> box.space.tester:replace{999, 'Tarantella', 'Tarantula'}"
msgstr ""

msgid ":ref:`SELECT <box_space-select>`: Retrieve the tuple."
msgstr ""

msgid "The clause \"{999}\" is still mandatory, although it does not have to mention the primary key."
msgstr ""

msgid "tarantool> box.space.tester:select{999}"
msgstr ""

msgid ":ref:`DELETE <box_space-delete>`: Delete the tuple."
msgstr ""

msgid "In this example, we identify the primary-key field."
msgstr ""

msgid "tarantool> box.space.tester:delete{999}"
msgstr ""

msgid "Summarizing the examples:"
msgstr ""

msgid "Functions ``insert`` and ``replace`` accept a tuple (where a primary key comes as part of the tuple)."
msgstr ""

msgid "Function ``upsert`` accepts a tuple (where a primary key comes as part of the tuple), and also the update operations to execute."
msgstr ""

msgid "Function ``delete`` accepts a full key of any unique index (primary or secondary)."
msgstr ""

msgid "Function ``update`` accepts a full key of any unique index (primary or secondary), and also the operations to execute."
msgstr ""

msgid "Function ``select`` accepts any key: primary/secondary, unique/non-unique, full/partial."
msgstr ""

msgid "See reference on ``box.space`` for more :ref:`details on using data operations <box_space-operations-detailed-examples>`."
msgstr ""

msgid "Besides Lua, you can use :ref:`Perl, PHP, Python or other programming language connectors <index-box_connectors>`. The client server protocol is open and documented. See this :ref:`annotated BNF <box_protocol-iproto_protocol>`."
msgstr ""

msgid "Index operations"
msgstr ""

msgid "Index operations are automatic: if a data-manipulation request changes a tuple, then it also changes the index keys defined for the tuple."
msgstr ""

msgid "The simple index-creation operation that we've illustrated before is:"
msgstr ""

msgid ":samp:`box.space.{space-name}:create_index('{index-name}')`"
msgstr ""

msgid "This creates a unique TREE index on the first field of all tuples (often called \"Field#1\"), which is assumed to be numeric."
msgstr ""

msgid "The simple SELECT request that we've illustrated before is:"
msgstr ""

msgid ":extsamp:`box.space.{*{space-name}*}:select({*{value}*})`"
msgstr ""

msgid "This looks for a single tuple via the first index. Since the first index is always unique, the maximum number of returned tuples will be: one. You can call ``select()`` without arguments, causing all tuples to be returned."
msgstr ""

msgid "Let's continue working with the space 'tester' created in the :ref:`\"Getting started\" exercises <getting_started_db>` but first modify it:"
msgstr ""

msgid "tarantool> box.space.tester:format({\n"
"         > {name = 'id', type = 'unsigned'},\n"
"         > {name = 'band_name', type = 'string'},\n"
"         > {name = 'year', type = 'unsigned'},\n"
"         > {name = 'rate', type = 'unsigned', is_nullable=true}})\n"
"---\n"
"..."
msgstr ""

msgid "Add the rate to the tuple #1 and #2:"
msgstr ""

msgid "tarantool> box.space.tester:update(1, {{'=', 4, 5}})\n"
"---\n"
"- [1, 'Roxette', 1986, 5]\n"
"...\n"
"tarantool> box.space.tester:update(2, {{'=', 4, 4}})\n"
"---\n"
"- [2, 'Scorpions', 2015, 4]\n"
"..."
msgstr ""

msgid "And insert another tuple:"
msgstr ""

msgid "tarantool> box.space.tester:insert({4, 'Roxette', 2016, 3})\n"
"---\n"
"- [4, 'Roxette', 2016, 3]\n"
"..."
msgstr ""

msgid "**The existing SELECT variations:**"
msgstr ""

msgid "The search can use comparisons other than equality."
msgstr ""

msgid "tarantool> box.space.tester:select(1, {iterator = 'GT'})\n"
"---\n"
"- - [2, 'Scorpions', 2015, 4]\n"
"  - [3, 'Ace of Base', 1993]\n"
"  - [4, 'Roxette', 2016, 3]\n"
"..."
msgstr ""

msgid "The :ref:`comparison operators <box_index-iterator-types>` are LT, LE, EQ, REQ, GE, GT (for \"less than\", \"less than or equal\", \"equal\", \"reversed equal\", \"greater than or equal\", \"greater than\" respectively). Comparisons make sense if and only if the index type is ‘TREE'."
msgstr ""

msgid "This type of search may return more than one tuple; if so, the tuples will be in descending order by key when the comparison operator is LT or LE or REQ, otherwise in ascending order."
msgstr ""

msgid "The search can use a secondary index."
msgstr ""

msgid "For a primary-key search, it is optional to specify an index name. For a secondary-key search, it is mandatory."
msgstr ""

msgid "tarantool> box.space.tester:create_index('secondary', {parts = {{field=3, type='unsigned'}}})\n"
"---\n"
"- unique: true\n"
"  parts:\n"
"  - type: unsigned\n"
"    is_nullable: false\n"
"    fieldno: 3\n"
"  id: 2\n"
"  space_id: 512\n"
"  type: TREE\n"
"  name: secondary\n"
"...\n"
"tarantool> box.space.tester.index.secondary:select({1993})\n"
"---\n"
"- - [3, 'Ace of Base', 1993]\n"
"..."
msgstr ""

msgid "The search may be for some key parts starting with the prefix of the key. Notice that partial key searches are available only in TREE indexes."
msgstr ""

msgid "-- Create an index with three parts\n"
"tarantool> box.space.tester:create_index('tertiary', {parts = {{field = 2, type = 'string'}, {field=3, type='unsigned'}, {field=4, type='unsigned'}}})\n"
"---\n"
"- unique: true\n"
"  parts:\n"
"  - type: string\n"
"    is_nullable: false\n"
"    fieldno: 2\n"
"  - type: unsigned\n"
"    is_nullable: false\n"
"    fieldno: 3\n"
"  - type: unsigned\n"
"    is_nullable: true\n"
"    fieldno: 4\n"
"  id: 6\n"
"  space_id: 513\n"
"  type: TREE\n"
"  name: tertiary\n"
"...\n"
"-- Make a partial search\n"
"tarantool> box.space.tester.index.tertiary:select({'Scorpions', 2015})\n"
"---\n"
"- - [2, 'Scorpions', 2015, 4]\n"
"..."
msgstr ""

msgid "The search may be for all fields, using a table for the value:"
msgstr ""

msgid "tarantool> box.space.tester.index.tertiary:select({'Roxette', 2016, 3})\n"
"---\n"
"- - [4, 'Roxette', 2016, 3]\n"
"..."
msgstr ""

msgid "or the search can be for one field, using a table or a scalar:"
msgstr ""

msgid "tarantool> box.space.tester.index.tertiary:select({'Roxette'})\n"
"---\n"
"- - [1, 'Roxette', 1986, 5]\n"
"  - [4, 'Roxette', 2016, 3]\n"
"..."
msgstr ""

msgid "Working with BITSET and RTREE"
msgstr ""

msgid "**BITSET example:**"
msgstr ""

msgid "tarantool> box.schema.space.create('bitset_example')\n"
"tarantool> box.space.bitset_example:create_index('primary')\n"
"tarantool> box.space.bitset_example:create_index('bitset',{unique=false,type='BITSET', parts={2,'unsigned'}})\n"
"tarantool> box.space.bitset_example:insert{1,1}\n"
"tarantool> box.space.bitset_example:insert{2,4}\n"
"tarantool> box.space.bitset_example:insert{3,7}\n"
"tarantool> box.space.bitset_example:insert{4,3}\n"
"tarantool> box.space.bitset_example.index.bitset:select(2, {iterator='BITS_ANY_SET'})"
msgstr ""

msgid "The result will be:"
msgstr ""

msgid "---\n"
"- - [3, 7]\n"
"  - [4, 3]\n"
"..."
msgstr ""

msgid "because (7 AND 2) is not equal to 0, and (3 AND 2) is not equal to 0."
msgstr ""

msgid "**RTREE example:**"
msgstr ""

msgid "tarantool> box.schema.space.create('rtree_example')\n"
"tarantool> box.space.rtree_example:create_index('primary')\n"
"tarantool> box.space.rtree_example:create_index('rtree',{unique=false,type='RTREE', parts={2,'ARRAY'}})\n"
"tarantool> box.space.rtree_example:insert{1, {3, 5, 9, 10}}\n"
"tarantool> box.space.rtree_example:insert{2, {10, 11}}\n"
"tarantool> box.space.rtree_example.index.rtree:select({4, 7, 5, 9}, {iterator = 'GT'})"
msgstr ""

msgid "---\n"
"- - [1, [3, 5, 9, 10]]\n"
"..."
msgstr ""

msgid "because a rectangle whose corners are at coordinates ``4,7,5,9`` is entirely within a rectangle whose corners are at coordinates ``3,5,9,10``."
msgstr ""

msgid "Additionally, there exist :doc:`index iterator operations </reference/reference_lua/box_index/pairs>`. They can only be used with code in Lua and C/C++. Index iterators are for traversing indexes one key at a time, taking advantage of features that are specific to an index type, for example evaluating Boolean expressions when traversing BITSET indexes, or going in descending order when traversing TREE indexes."
msgstr ""

msgid "See also other index operations like :doc:`alter() </reference/reference_lua/box_index/alter>` (modify index) and :doc:`drop() </reference/reference_lua/box_index/drop>` (delete index) in reference for :doc:`/reference/reference_lua/box_index`."
msgstr ""

msgid "Complexity factors"
msgstr ""

msgid "In reference for :ref:`box.space <box_space>` and :doc:`/reference/reference_lua/box_index` submodules, there are notes about which complexity factors might affect the resource usage of each function."
msgstr ""

msgid "Complexity factor"
msgstr ""

msgid "Effect"
msgstr ""

msgid "Index size"
msgstr ""

msgid "The number of index keys is the same as the number of tuples in the data set. For a TREE index, if there are more keys, then the lookup time will be greater, although of course the effect is not linear. For a HASH index, if there are more keys, then there is more RAM used, but the number of low-level steps tends to remain constant."
msgstr ""

msgid "Typically, a HASH index is faster than a TREE index if the number of tuples in the space is greater than one."
msgstr ""

msgid "Number of indexes accessed"
msgstr ""

msgid "Ordinarily, only one index is accessed to retrieve one tuple. But to update the tuple, there must be N accesses if the space has N different indexes."
msgstr ""

msgid "Note re storage engine: Vinyl optimizes away such accesses if secondary index fields are unchanged by the update. So, this complexity factor applies only to memtx, since it always makes a full-tuple copy on every update."
msgstr ""

msgid "Number of tuples accessed"
msgstr ""

msgid "A few requests, for example SELECT, can retrieve multiple tuples. This factor is usually less important than the others."
msgstr ""

msgid "WAL settings"
msgstr ""

msgid "The important setting for the write-ahead log is :ref:`wal_mode <cfg_binary_logging_snapshots-wal_mode>`. If the setting causes no writing or delayed writing, this factor is unimportant. If the setting causes every data-change request to wait for writing to finish on a slow device, this factor is more important than all the others."
msgstr ""

