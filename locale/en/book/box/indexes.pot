
msgid "Indexes"
msgstr ""

msgid "An **index** is a special data structure that stores a group of key values and pointers. It is used for efficient manipulations with data and should be chosen depending on the task."
msgstr ""

msgid "As with spaces, you should specify the index **name**, and let Tarantool come up with a unique **numeric identifier** (\"index id\")."
msgstr ""

msgid "An index may be **multi-part**, that is, you can declare that an index key value is composed of two or more fields in the tuple, in any order. For example, for an ordinary TREE index, the maximum number of parts is 255."
msgstr ""

msgid "An index may be **unique**, that is, you can declare that it would be illegal to have the same key value twice."
msgstr ""

msgid "The first index defined on a space is called the **primary key index**, and it must be unique. All other indexes are called **secondary indexes**, and they may be non-unique."
msgstr ""

msgid "Indexes have certain limitations. See details on page :doc:`Limitations </book/box/limitations>`."
msgstr ""

msgid "Creating an index"
msgstr ""

msgid "An index definition may include identifiers of tuple fields and their expected **types**. See allowed indexed field types in section :ref:`Details about indexed field types <details_about_index_field_types>`."
msgstr ""

msgid "A recommended design pattern for a data model is to base primary keys on the first fields of a tuple, because this speeds up tuple comparison."
msgstr ""

msgid "Let's look at an example where we first define the primary index (named 'primary') based on field #1 of each tuple:"
msgstr ""

msgid "tarantool> i = s:create_index('primary', {type = 'hash', parts = {{field = 1, type = 'unsigned'}}}"
msgstr ""

msgid "The effect is that, for all tuples in space 'tester', field #1 must exist and must contain an unsigned integer. The index type is HASH, so values in field #1 must be unique, because keys in HASH indexes are unique."
msgstr ""

msgid "After that, let's define a secondary index (named 'secondary') based on field #2 of each tuple:"
msgstr ""

msgid "tarantool> i = s:create_index('secondary', {type = 'tree', parts = {field = 2, type = 'string'}})"
msgstr ""

msgid "The effect is that, for all tuples in space 'tester', field #2 must exist and must contain a string. The index type is TREE, so values in field #2 must not be unique, because keys in TREE indexes may be non-unique."
msgstr ""

msgid "Space definitions and index definitions are stored permanently in Tarantool's system spaces :ref:`_space <box_space-space>` and :ref:`_index <box_space-index>` (for details, see reference on :ref:`box.space <box_space>` submodule)."
msgstr ""

msgid "Tip"
msgstr ""

msgid "The full information about creating an index is in section :doc:`/reference/reference_lua/box_space/create_index`."
msgstr ""

msgid "Index types"
msgstr ""

msgid "An index always has a **type**. Different types are intended for different usage scenarios."
msgstr ""

msgid "We give an overview of index features in the following table:"
msgstr ""

msgid "Feature"
msgstr ""

msgid "TREE"
msgstr ""

msgid "HASH"
msgstr ""

msgid "RTREE"
msgstr ""

msgid "BITSET"
msgstr ""

msgid "unique"
msgstr ""

msgid "\\+"
msgstr ""

msgid "\\-"
msgstr ""

msgid "non-unique"
msgstr ""

msgid ":ref:`is_nullable <box_space-is_nullable>`"
msgstr ""

msgid "can be multi-part"
msgstr ""

msgid ":ref:`multikey <box_space-path_multikey>`"
msgstr ""

msgid ":ref:`partial-key search <partial_key_search>`"
msgstr ""

msgid "can be primary key"
msgstr ""

msgid "``exclude_null`` (version 2.8+)"
msgstr ""

msgid ":doc:`iterator types </reference/reference_lua/box_index/pairs>`"
msgstr ""

msgid "ALL, EQ, REQ, GT, GE, LT, LE"
msgstr ""

msgid "ALL, EQ, GT"
msgstr ""

msgid "ALL, EQ, GT, GE, LT, LE, OVERLAPS, NEIGHBOR"
msgstr ""

msgid "ALL, EQ, BITS_ALL_SET, BITS_ANY_SET, BITS_ALL_NOT_SET"
msgstr ""

msgid "TREE indexes"
msgstr ""

msgid "The default index type is 'TREE'. TREE indexes are provided by memtx and vinyl engines, can index unique and non-unique values, support partial key searches, comparisons and ordered results."
msgstr ""

msgid "This is a universal type of indexes, for most cases it will be the best choice."
msgstr ""

msgid "Additionally, memtx engine supports HASH, RTREE and BITSET indexes."
msgstr ""

msgid "HASH indexes"
msgstr ""

msgid "HASH indexes require unique fields and loses to TREE in almost all respects. So we do not recommend to use it in the applications. HASH is now present in Tarantool mainly because of backward compatibility."
msgstr ""

msgid "Here are some tips. Do not use HASH index:"
msgstr ""

msgid "just if you want to"
msgstr ""

msgid "if you think that HASH is faster with no performance metering"
msgstr ""

msgid "if you want to iterate over the data"
msgstr ""

msgid "for primary key"
msgstr ""

msgid "as an only index"
msgstr ""

msgid "Use HASH index:"
msgstr ""

msgid "if it is a secondary key"
msgstr ""

msgid "if you 100% won't need to make it non-unique"
msgstr ""

msgid "if you really need that 2-5% performance improvement"
msgstr ""

msgid "if you have taken measurements on your data and you see an increase in performance"
msgstr ""

msgid "if you save every byte on tuples (HASH is a little more compact)"
msgstr ""

msgid "RTREE indexes"
msgstr ""

msgid "RTREE is a multidimensional index supporting up to 20 dimensions. It is used especially for indexing spatial information, such as geographical objects. In :ref:`this example <box_index-rtree>` we demonstrate spatial searches via RTREE index."
msgstr ""

msgid "RTREE index could not be primary, and could not be unique. The option list of this type of index may contain ``dimension`` and ``distance`` options. The ``parts`` definition must contain the one and only part with type ``array``. RTREE index can accept two types of ``distance`` functions: ``euclid`` and ``manhattan``."
msgstr ""

msgid "**Example 1:**"
msgstr ""

msgid "s = box.schema.create_space(\"test\")\n"
"i = s:create_index('primary', { type = 'HASH', parts = {1, 'num'} })\n"
"r = s:create_index('spatial', { type = 'RTREE', unique = false, parts = {2, 'array'} })"
msgstr ""

msgid "Corresponding tuple field thus must be an array of 2 or 4 numbers. 2 numbers mean a point {x, y}; 4 numbers mean a rectangle {x1, y1, x2, y2}, where (x1, y1) and (x2, y2) - diagonal point of the rectangle."
msgstr ""

msgid "s:insert{1, {1, 1}}\n"
"s:insert{2, {2, 2, 3, 3}}"
msgstr ""

msgid "Selection results depend on a chosen iterator. The default EQ iterator searches for an exact rectangle, a point is treated as zero width and height rectangle:"
msgstr ""

msgid "tarantool> r:select{1, 1}\n"
"---\n"
"- - [1, [1, 1]]\n"
"...\n"
"\n"
"tarantool> r:select{1, 1, 1, 1}\n"
"---\n"
"- - [1, [1, 1]]\n"
"...\n"
"\n"
"tarantool> r:select{2, 2}\n"
"---\n"
"- []\n"
"...\n"
"\n"
"tarantool> r:select{2, 2, 3, 3}\n"
"---\n"
"- - [2, [2, 2, 3, 3]]\n"
"..."
msgstr ""

msgid "Iterator ALL, which is the default when no key is specified, selects all tuples in arbitrary order:"
msgstr ""

msgid "tarantool> r:select{}\n"
"---\n"
"- - [1, [1, 1]]\n"
"  - [2, [2, 2, 3, 3]]\n"
"..."
msgstr ""

msgid "Iterator LE (less or equal) searches for tuples with their rectangles within a specified rectangle:"
msgstr ""

msgid "tarantool> r:select({1, 1, 2, 2}, {iterator='le'})\n"
"---\n"
"- - [1, [1, 1]]\n"
"..."
msgstr ""

msgid "Iterator LT (less than, or strictly less) searches for tuples with their rectangles strictly within a specified rectangle:"
msgstr ""

msgid "tarantool> r:select({0, 0, 3, 3}, {iterator='lt'})\n"
"---\n"
"- - [1, [1, 1]]\n"
"..."
msgstr ""

msgid "Iterator GE searches for tuples with a specified rectangle within their rectangles:"
msgstr ""

msgid "tarantool> r:select({1, 1}, {iterator='ge'})\n"
"---\n"
"- - [1, [1, 1]]\n"
"..."
msgstr ""

msgid "Iterator GT searches for tuples with a specified rectangle strictly within their rectangles:"
msgstr ""

msgid "tarantool> r:select({2.1, 2.1, 2.9, 2.9}, {itearator='gt'})\n"
"---\n"
"- []\n"
"..."
msgstr ""

msgid "Iterator OVERLAPS searches for tuples with their rectangles overlapping specified rectangle:"
msgstr ""

msgid "tarantool> r:select({0, 0, 10, 2}, {iterator='overlaps'})\n"
"---\n"
"- - [1, [1, 1]]\n"
"  - [2, [2, 2, 3, 3]]\n"
"..."
msgstr ""

msgid "Iterator NEIGHBOR searches for all tuples and orders them by distance to the specified point:"
msgstr ""

msgid "tarantool> for i=1,10 do\n"
"         >    for j=1,10 do\n"
"         >        s:insert{i*10+j, {i, j, i+1, j+1}}\n"
"         >    end\n"
"         > end\n"
"---\n"
"...\n"
"\n"
"tarantool> r:select({1, 1}, {iterator='neighbor', limit=5})\n"
"---\n"
"- - [11, [1, 1, 2, 2]]\n"
"  - [12, [1, 2, 2, 3]]\n"
"  - [21, [2, 1, 3, 2]]\n"
"  - [22, [2, 2, 3, 3]]\n"
"  - [31, [3, 1, 4, 2]]\n"
"..."
msgstr ""

msgid "**Example 2:**"
msgstr ""

msgid "3D, 4D and more dimensional RTREE indexes work in the same way as 2D except that user must specify more coordinates in requests. Here's short example of using 4D tree:"
msgstr ""

msgid "tarantool> s = box.schema.create_space('test')\n"
"---\n"
"...\n"
"\n"
"tarantool> i = s:create_index('primary', { type = 'HASH', parts = {1, 'num'} })\n"
"---\n"
"...\n"
"\n"
"tarantool> r = s:create_index('spatial', { type = 'RTREE', unique = false, dimension = 4, parts = {2, 'array'} })\n"
"---\n"
"...\n"
"\n"
"tarantool> s:insert{1, {1, 2, 3, 4}} -- insert 4D point\n"
"---\n"
"- [1, [1, 2, 3, 4]]\n"
"...\n"
"\n"
"tarantool> s:insert{2, {1, 1, 1, 1, 2, 2, 2, 2}} -- insert 4D box\n"
"---\n"
"- [2, [1, 1, 1, 1, 2, 2, 2, 2]]\n"
"...\n"
"\n"
"tarantool> r:select{1, 2, 3, 4} -- find exact point\n"
"---\n"
"- - [1, [1, 2, 3, 4]]\n"
"...\n"
"\n"
"tarantool> r:select({0, 0, 0, 0, 3, 3, 3, 3}, {iterator = 'LE'}) -- select from 4D box\n"
"---\n"
"- - [2, [1, 1, 1, 1, 2, 2, 2, 2]]\n"
"...\n"
"\n"
"tarantool> r:select({0, 0, 0, 0}, {iterator = 'neighbor'}) -- select neighbours\n"
"---\n"
"- - [2, [1, 1, 1, 1, 2, 2, 2, 2]]\n"
"  - [1, [1, 2, 3, 4]]\n"
"..."
msgstr ""

msgid "Don't forget that select NEIGHBOR iterator without limit extract entire space in order of increasing distance and that could be tons of data with corresponding performance."
msgstr ""

msgid "And another frequent mistake is to specify iterator type without quotes, in such way: ``r:select(rect, {iterator = LE})``. This leads to silent EQ select, because ``LE`` is undefined variable and treated as nil, so iterator is unset and default used."
msgstr ""

msgid "BITSET indexes"
msgstr ""

msgid "Bitset is a bit mask. You should use it when you need to search by bit masks. This can be, for example, storing a vector of attributes and searching by these attributes."
msgstr ""

msgid "The following script shows creating and searching with a BITSET index. Notice that BITSET cannot be unique, so first a primary-key index is created, and bit values are entered as hexadecimal literals for easier reading."
msgstr ""

msgid "tarantool> s = box.schema.space.create('space_with_bitset')\n"
"tarantool> s:create_index('primary_index', {\n"
"         >   parts = {1, 'string'},\n"
"         >   unique = true,\n"
"         >   type = 'TREE'\n"
"         > })\n"
"tarantool> s:create_index('bitset_index', {\n"
"         >   parts = {2, 'unsigned'},\n"
"         >   unique = false,\n"
"         >   type = 'BITSET'\n"
"         > })\n"
"tarantool> s:insert{'Tuple with bit value = 01', 0x01}\n"
"tarantool> s:insert{'Tuple with bit value = 10', 0x02}\n"
"tarantool> s:insert{'Tuple with bit value = 11', 0x03}\n"
"tarantool> s.index.bitset_index:select(0x02, {\n"
"         >   iterator = box.index.EQ\n"
"         > })\n"
"---\n"
"- - ['Tuple with bit value = 10', 2]\n"
"...\n"
"tarantool> s.index.bitset_index:select(0x02, {\n"
"         >   iterator = box.index.BITS_ANY_SET\n"
"         > })\n"
"---\n"
"- - ['Tuple with bit value = 10', 2]\n"
"  - ['Tuple with bit value = 11', 3]\n"
"...\n"
"tarantool> s.index.bitset_index:select(0x02, {\n"
"         >   iterator = box.index.BITS_ALL_SET\n"
"         > })\n"
"---\n"
"- - ['Tuple with bit value = 10', 2]\n"
"  - ['Tuple with bit value = 11', 3]\n"
"...\n"
"tarantool> s.index.bitset_index:select(0x02, {\n"
"         >   iterator = box.index.BITS_ALL_NOT_SET\n"
"         > })\n"
"---\n"
"- - ['Tuple with bit value = 01', 1]\n"
"..."
msgstr ""

msgid "tarantool> box.schema.space.create('bitset_example')\n"
"tarantool> box.space.bitset_example:create_index('primary')\n"
"tarantool> box.space.bitset_example:create_index('bitset',{unique=false,type='BITSET', parts={2,'unsigned'}})\n"
"tarantool> box.space.bitset_example:insert{1,1}\n"
"tarantool> box.space.bitset_example:insert{2,4}\n"
"tarantool> box.space.bitset_example:insert{3,7}\n"
"tarantool> box.space.bitset_example:insert{4,3}\n"
"tarantool> box.space.bitset_example.index.bitset:select(2, {iterator='BITS_ANY_SET'})"
msgstr ""

msgid "The result will be:"
msgstr ""

msgid "---\n"
"- - [3, 7]\n"
"  - [4, 3]\n"
"..."
msgstr ""

msgid "because (7 AND 2) is not equal to 0, and (3 AND 2) is not equal to 0."
msgstr ""

msgid "Additionally, there exist :doc:`index iterator operations </reference/reference_lua/box_index/pairs>`. They can only be used with code in Lua and C/C++. Index iterators are for traversing indexes one key at a time, taking advantage of features that are specific to an index type. For example, they can be used for evaluating Boolean expressions when traversing BITSET indexes, or for going in descending order when traversing TREE indexes."
msgstr ""

msgid "Index operations"
msgstr ""

msgid "Index operations are automatic: if a data-manipulation request changes a tuple, then it also changes the index keys defined for the tuple."
msgstr ""

msgid "The simple :doc:`index-creation </reference/reference_lua/box_space/create_index>` operation that we've illustrated before is:"
msgstr ""

msgid ":samp:`box.space.{space-name}:create_index('{index-name}')`"
msgstr ""

msgid "This creates a unique TREE index on the first field of all tuples (often called \"Field#1\"), which is assumed to be numeric."
msgstr ""

msgid "The simple :doc:`SELECT </reference/reference_lua/box_index/select>` request that we've illustrated before is:"
msgstr ""

msgid ":extsamp:`box.space.{*{space-name}*}:select({*{value}*})`"
msgstr ""

msgid "This looks for a single tuple via the first index. Since the first index is always unique, the maximum number of returned tuples will be 1. You can call ``select()`` without arguments, and it will return all tuples."
msgstr ""

msgid "Let's continue working with the space 'tester' created in the :ref:`\"Getting started\" exercises <getting_started_db>` but first modify it via :doc:`format() </reference/reference_lua/box_space/format>`:"
msgstr ""

msgid "tarantool> box.space.tester:format({\n"
"         > {name = 'id', type = 'unsigned'},\n"
"         > {name = 'band_name', type = 'string'},\n"
"         > {name = 'year', type = 'unsigned'},\n"
"         > {name = 'rate', type = 'unsigned', is_nullable=true}})\n"
"---\n"
"..."
msgstr ""

msgid "Add the rate to the tuple #1 and #2 via :doc:`update function </reference/reference_lua/box_index/update>`:"
msgstr ""

msgid "tarantool> box.space.tester:update(1, {{'=', 4, 5}})\n"
"---\n"
"- [1, 'Roxette', 1986, 5]\n"
"...\n"
"tarantool> box.space.tester:update(2, {{'=', 4, 4}})\n"
"---\n"
"- [2, 'Scorpions', 2015, 4]\n"
"..."
msgstr ""

msgid "And :doc:`insert </reference/reference_lua/box_space/insert>` another tuple:"
msgstr ""

msgid "tarantool> box.space.tester:insert({4, 'Roxette', 2016, 3})\n"
"---\n"
"- [4, 'Roxette', 2016, 3]\n"
"..."
msgstr ""

msgid "**The existing SELECT variations:**"
msgstr ""

msgid "The search can use comparisons other than equality."
msgstr ""

msgid "tarantool> box.space.tester:select(1, {iterator = 'GT'})\n"
"---\n"
"- - [2, 'Scorpions', 2015, 4]\n"
"  - [3, 'Ace of Base', 1993]\n"
"  - [4, 'Roxette', 2016, 3]\n"
"..."
msgstr ""

msgid "The :ref:`comparison operators <box_index-iterator-types>` are LT, LE, EQ, REQ, GE, GT (for \"less than\", \"less than or equal\", \"equal\", \"reversed equal\", \"greater than or equal\", \"greater than\" respectively). Comparisons make sense if and only if the index type is TREE."
msgstr ""

msgid "This type of search may return more than one tuple; if so, the tuples will be in descending order by key when the comparison operator is LT or LE or REQ, otherwise in ascending order."
msgstr ""

msgid "The search can use a secondary index."
msgstr ""

msgid "For a primary-key search, it is optional to specify an index name. For a secondary-key search, it is mandatory."
msgstr ""

msgid "tarantool> box.space.tester:create_index('secondary', {parts = {{field=3, type='unsigned'}}})\n"
"---\n"
"- unique: true\n"
"  parts:\n"
"  - type: unsigned\n"
"    is_nullable: false\n"
"    fieldno: 3\n"
"  id: 2\n"
"  space_id: 512\n"
"  type: TREE\n"
"  name: secondary\n"
"...\n"
"tarantool> box.space.tester.index.secondary:select({1993})\n"
"---\n"
"- - [3, 'Ace of Base', 1993]\n"
"..."
msgstr ""

msgid "The search may be for some key parts starting with the prefix of the key. Notice that partial key searches are available only in TREE indexes."
msgstr ""

msgid "-- Create an index with three parts\n"
"tarantool> box.space.tester:create_index('tertiary', {parts = {{field = 2, type = 'string'}, {field=3, type='unsigned'}, {field=4, type='unsigned'}}})\n"
"---\n"
"- unique: true\n"
"  parts:\n"
"  - type: string\n"
"    is_nullable: false\n"
"    fieldno: 2\n"
"  - type: unsigned\n"
"    is_nullable: false\n"
"    fieldno: 3\n"
"  - type: unsigned\n"
"    is_nullable: true\n"
"    fieldno: 4\n"
"  id: 6\n"
"  space_id: 513\n"
"  type: TREE\n"
"  name: tertiary\n"
"...\n"
"-- Make a partial search\n"
"tarantool> box.space.tester.index.tertiary:select({'Scorpions', 2015})\n"
"---\n"
"- - [2, 'Scorpions', 2015, 4]\n"
"..."
msgstr ""

msgid "The search may be for all fields, using a table for the value:"
msgstr ""

msgid "tarantool> box.space.tester.index.tertiary:select({'Roxette', 2016, 3})\n"
"---\n"
"- - [4, 'Roxette', 2016, 3]\n"
"..."
msgstr ""

msgid "or the search can be for one field, using a table or a scalar:"
msgstr ""

msgid "tarantool> box.space.tester.index.tertiary:select({'Roxette'})\n"
"---\n"
"- - [1, 'Roxette', 1986, 5]\n"
"  - [4, 'Roxette', 2016, 3]\n"
"..."
msgstr ""

msgid "You can add, drop, or alter the definitions at runtime, with some restrictions. Read more in section :ref:`index operations <index-box_index-operations>` and in reference for :doc:`box.index submodule </reference/reference_lua/box_index>`."
msgstr ""

