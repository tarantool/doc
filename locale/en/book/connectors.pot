# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-17 14:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/book/connectors.rst:4
msgid "Connectors"
msgstr ""

#: ../../doc/book/connectors.rst:6
msgid "Connectors are APIs that allow using Tarantool with various programming languages."
msgstr ""

#: ../../doc/book/connectors.rst:8
msgid "Connectors can be divided into two groups -- those maintained by the Tarantool team and those supported by the community. The Tarantool team maintains the :ref:`high-level C API <index_connector_c>`, the :ref:`Go <index_connector_go>` and :ref:`Java <index_connector_java>` connectors, and a synchronous :ref:`Python <index_connector_py>` connector. All other connectors are :ref:`community-supported <connectors-community-supported>`, which means that support for new Tarantool features may be delayed. Besides, the Tarantool support team cannot prioritize issues that arise while working through these connectors."
msgstr ""

#: ../../doc/book/connectors.rst:15
msgid "This chapter documents APIs for various programming languages:"
msgstr ""

#: ../../doc/book/connectors.rst:27
msgid "Protocol"
msgstr ""

#: ../../doc/book/connectors.rst:29
msgid "Tarantool's binary protocol was designed with a focus on asynchronous I/O and easy integration with proxies. Each client request starts with a variable-length binary header, containing request id, request type, instance id, log sequence number, and so on."
msgstr ""

#: ../../doc/book/connectors.rst:34
msgid "The mandatory length, present in request header simplifies client or proxy I/O. A response to a request is sent to the client as soon as it is ready. It always carries in its header the same type and id as in the request. The id makes it possible to match a request to a response, even if the latter arrived out of order."
msgstr ""

#: ../../doc/book/connectors.rst:40
msgid "Unless implementing a client driver, you needn't concern yourself with the complications of the binary protocol. Language-specific drivers provide a friendly way to store domain language data structures in Tarantool. A complete description of the binary protocol is maintained in annotated Backus-Naur form in the source tree. For detailed examples and diagrams of all binary-protocol requests and responses, see :ref:`Tarantool's binary protocol <box_protocol-iproto_protocol>`."
msgstr ""

#: ../../doc/book/connectors.rst:50
msgid "Packet example"
msgstr ""

#: ../../doc/book/connectors.rst:52
msgid "The Tarantool API exists so that a client program can send a request packet to a server instance, and receive a response. Here is an example of a what the client would send for ``box.space[513]:insert{'A', 'BB'}``. The BNF description of the components is on the page about :ref:`Tarantool's binary protocol <box_protocol-iproto_protocol>`."
msgstr ""

#: ../../doc/book/connectors.rst:68
msgid "Component"
msgstr ""

#: ../../doc/book/connectors.rst:68
msgid "Byte #0"
msgstr ""

#: ../../doc/book/connectors.rst:68
msgid "Byte #1"
msgstr ""

#: ../../doc/book/connectors.rst:68
msgid "Byte #2"
msgstr ""

#: ../../doc/book/connectors.rst:68
msgid "Byte #3"
msgstr ""

#: ../../doc/book/connectors.rst:70
msgid "code for insert"
msgstr ""

#: ../../doc/book/connectors.rst:70
#: ../../doc/book/connectors.rst:74
msgid "02"
msgstr ""

#: ../../doc/book/connectors.rst:72
msgid "rest of header"
msgstr ""

#: ../../doc/book/connectors.rst:72
#: ../../doc/book/connectors.rst:72
#: ../../doc/book/connectors.rst:72
#: ../../doc/book/connectors.rst:72
msgid "..."
msgstr ""

#: ../../doc/book/connectors.rst:74
msgid "2-digit number: space id"
msgstr ""

#: ../../doc/book/connectors.rst:74
msgid "cd"
msgstr ""

#: ../../doc/book/connectors.rst:74
msgid "01"
msgstr ""

#: ../../doc/book/connectors.rst:76
msgid "code for tuple"
msgstr ""

#: ../../doc/book/connectors.rst:76
msgid "21"
msgstr ""

#: ../../doc/book/connectors.rst:78
msgid "1-digit number: field count = 2"
msgstr ""

#: ../../doc/book/connectors.rst:78
msgid "92"
msgstr ""

#: ../../doc/book/connectors.rst:80
msgid "1-character string: field[1]"
msgstr ""

#: ../../doc/book/connectors.rst:80
msgid "a1"
msgstr ""

#: ../../doc/book/connectors.rst:80
msgid "41"
msgstr ""

#: ../../doc/book/connectors.rst:82
msgid "2-character string: field[2]"
msgstr ""

#: ../../doc/book/connectors.rst:82
msgid "a2"
msgstr ""

#: ../../doc/book/connectors.rst:82
#: ../../doc/book/connectors.rst:82
msgid "42"
msgstr ""

#: ../../doc/book/connectors.rst:85
msgid "Now, you could send that packet to the Tarantool instance, and interpret the response (the page about :ref:`Tarantool's binary protocol <box_protocol-iproto_protocol>` has a description of the packet format for responses as well as requests). But it would be easier, and less error-prone, if you could invoke a routine that formats the packet according to typed parameters. Something like ``response = tarantool_routine(\"insert\", 513, \"A\", \"B\");``. And that is why APIs exist for drivers for Perl, Python, PHP, and so on."
msgstr ""

#: ../../doc/book/connectors.rst:97
msgid "Setting up the server for connector examples"
msgstr ""

#: ../../doc/book/connectors.rst:99
msgid "This chapter has examples that show how to connect to a Tarantool instance via the Perl, PHP, Python, node.js, and C connectors. The examples contain hard code that will work if and only if the following conditions are met:"
msgstr ""

#: ../../doc/book/connectors.rst:103
msgid "the Tarantool instance (tarantool) is running on localhost (127.0.0.1) and is listening on port 3301 (``box.cfg.listen = '3301'``),"
msgstr ""

#: ../../doc/book/connectors.rst:106
msgid "space ``examples`` has id = 999 (``box.space.examples.id = 999``) and has a primary-key index for a numeric field (``box.space[999].index[0].parts[1].type = \"unsigned\"``),"
msgstr ""

#: ../../doc/book/connectors.rst:110
msgid "user 'guest' has privileges for reading and writing."
msgstr ""

#: ../../doc/book/connectors.rst:112
msgid "It is easy to meet all the conditions by starting the instance and executing this script:"
msgstr ""

#: ../../doc/book/connectors.rst:115
msgid "box.cfg{listen=3301}\n"
"box.schema.space.create('examples',{id=999})\n"
"box.space.examples:create_index('primary', {type = 'hash', parts = {1, 'unsigned'}})\n"
"box.schema.user.grant('guest','read,write','space','examples')\n"
"box.schema.user.grant('guest','read','space','_space')"
msgstr ""

#: ../../doc/book/connectors.rst:125
msgid "Interpreting function return values"
msgstr ""

#: ../../doc/book/connectors.rst:127
msgid "For all connectors, calling a function via Tarantool causes a return in the MsgPack format. If the function is called using the connector's API, some conversions may occur. All scalar values are returned as tuples (with a MsgPack type-identifier followed by a value); all non-scalar values are returned as a group of tuples (with a MsgPack array-identifier followed by the scalar values). If the function is called via the binary protocol command layer -- \"eval\" -- rather than via the connector's API, no conversions occur."
msgstr ""

#: ../../doc/book/connectors.rst:135
msgid "In the following example, a Lua function will be created. Since it will be accessed externally by a :ref:`'guest' user<box_space-user>`, a :doc:`grant </reference/reference_lua/box_schema/user_grant>` of an execute privilege will be necessary. The function returns an empty array, a scalar string, two booleans, and a short integer. The values are the ones described in the table :ref:`Common Types and MsgPack Encodings <msgpack-common_types_and_msgpack_encodings>`."
msgstr ""

#: ../../doc/book/connectors.rst:142
msgid "tarantool> box.cfg{listen=3301}\n"
"2016-03-03 18:45:52.802 [27381] main/101/interactive I> ready to accept requests\n"
"---\n"
"...\n"
"tarantool> function f() return {},'a',false,true,127; end\n"
"---\n"
"...\n"
"tarantool> box.schema.func.create('f')\n"
"---\n"
"...\n"
"tarantool> box.schema.user.grant('guest','execute','function','f')\n"
"---\n"
"..."
msgstr ""

#: ../../doc/book/connectors.rst:158
msgid "Here is a C program which calls the function. Although C is being used for the example, the result would be precisely the same if the calling program was written in Perl, PHP, Python, Go, or Java."
msgstr ""

#: ../../doc/book/connectors.rst:162
msgid "#include <stdio.h>\n"
"#include <stdlib.h>\n"
"#include <tarantool/tarantool.h>\n"
"#include <tarantool/tnt_net.h>\n"
"#include <tarantool/tnt_opt.h>\n"
"void main() {\n"
"  struct tnt_stream *tnt = tnt_net(NULL);              /* SETUP */\n"
"  tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");\n"
"   if (tnt_connect(tnt) < 0) {                         /* CONNECT */\n"
"       printf(\"Connection refused\\n\");\n"
"       exit(-1);\n"
"   }\n"
"   struct tnt_stream *arg; arg = tnt_object(NULL);     /* MAKE REQUEST */\n"
"   tnt_object_add_array(arg, 0);\n"
"   struct tnt_request *req1 = tnt_request_call(NULL);  /* CALL function f() */\n"
"   tnt_request_set_funcz(req1, \"f\");\n"
"   uint64_t sync1 = tnt_request_compile(tnt, req1);\n"
"   tnt_flush(tnt);                                     /* SEND REQUEST */\n"
"   struct tnt_reply reply;  tnt_reply_init(&reply);    /* GET REPLY */\n"
"   tnt->read_reply(tnt, &reply);\n"
"   if (reply.code != 0) {\n"
"     printf(\"Call failed %lu.\\n\", reply.code);\n"
"     exit(-1);\n"
"   }\n"
"   const unsigned char *p= (unsigned char*)reply.data; /* PRINT REPLY */\n"
"   while (p < (unsigned char *) reply.data_end)\n"
"   {\n"
"     printf(\"%x \", *p);\n"
"     ++p;\n"
"   }\n"
"   printf(\"\\n\");\n"
"   tnt_close(tnt);                                     /* TEARDOWN */\n"
"   tnt_stream_free(arg);\n"
"   tnt_stream_free(tnt);\n"
"}"
msgstr ""

#: ../../doc/book/connectors.rst:200
msgid "When this program is executed, it will print:"
msgstr ""

#: ../../doc/book/connectors.rst:202
msgid "dd 0 0 0 5 90 91 a1 61 91 c2 91 c3 91 7f"
msgstr ""

#: ../../doc/book/connectors.rst:206
msgid "The first five bytes -- ``dd 0 0 0 5`` -- are the MsgPack encoding for \"32-bit array header with value 5\" (see `MsgPack specification <http://github.com/msgpack/msgpack/blob/master/spec.md>`__). The rest are as described in the table :ref:`Common Types and MsgPack Encodings <msgpack-common_types_and_msgpack_encodings>`."
msgstr ""
