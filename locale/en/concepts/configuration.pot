# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-23 09:50+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/concepts/configuration.rst:4
msgid "Configuration"
msgstr ""

#: ../../doc/concepts/configuration.rst:6
msgid "Tarantool provides the ability to configure the full topology of a cluster and set parameters specific for concrete instances, such as connection settings, memory used to store data, logging, and snapshot settings. Each instance uses this configuration during :ref:`startup <configuration_run_instance>` to organize the cluster."
msgstr ""

#: ../../doc/concepts/configuration.rst:9
msgid "There are two approaches to configuring Tarantool:"
msgstr ""

#: ../../doc/concepts/configuration.rst:11
msgid "*Since version 3.0*: In the YAML format."
msgstr ""

#: ../../doc/concepts/configuration.rst:13
msgid "YAML configuration allows you to provide the full cluster topology and specify all configuration options. You can use local configuration in a YAML file for each instance or store configuration data in one reliable place using :ref:`etcd <configuration_etcd_overview>`."
msgstr ""

#: ../../doc/concepts/configuration.rst:16
msgid "*In version 2.11 and earlier*: :ref:`In code <configuration_code>` using the ``box.cfg`` API."
msgstr ""

#: ../../doc/concepts/configuration.rst:18
msgid "In this case, configuration is provided in a Lua initialization script."
msgstr ""

#: ../../doc/concepts/configuration.rst:22
msgid "Starting with the 3.0 version, configuring Tarantool in code is considered a legacy approach."
msgstr ""

#: ../../doc/concepts/configuration.rst:28
msgid "Configuration overview"
msgstr ""

#: ../../doc/concepts/configuration.rst:30
msgid "YAML configuration describes the full topology of a Tarantool cluster. A cluster's topology includes the following elements, starting from the lower level:"
msgstr ""

#: ../../doc/concepts/configuration.rst:33
msgid "groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        instances:\n"
"          instance001:\n"
"            # ...\n"
"          instance002:\n"
"            # ..."
msgstr ""

#: ../../doc/concepts/configuration.rst:46
msgid "``instances``"
msgstr ""

#: ../../doc/concepts/configuration.rst:48
msgid "An *instance* represents a single running Tarantool instance. It stores data or might act as a router for handling CRUD requests in a :ref:`sharded <sharding>` cluster."
msgstr ""

#: ../../doc/concepts/configuration.rst:50
msgid "``replicasets``"
msgstr ""

#: ../../doc/concepts/configuration.rst:52
msgid "A *replica set* is a pack of instances that operate on same data sets. :ref:`Replication <replication>` provides redundancy and increases data availability."
msgstr ""

#: ../../doc/concepts/configuration.rst:54
msgid "``groups``"
msgstr ""

#: ../../doc/concepts/configuration.rst:56
msgid "A *group* provides the ability to organize replica sets. For example, in a sharded cluster, one group can contain :ref:`storage <vshard-architecture-storage>` instances and another group can contain :ref:`routers <vshard-architecture-router>` used to handle CRUD requests."
msgstr ""

#: ../../doc/concepts/configuration.rst:59
msgid "You can flexibly configure a cluster's settings on different levels: from global settings applied to all groups to parameters specific for concrete instances."
msgstr ""

#: ../../doc/concepts/configuration.rst:65
msgid "Configuration in a file"
msgstr ""

#: ../../doc/concepts/configuration.rst:67
msgid "This section provides an overview on how to configure Tarantool in a YAML file."
msgstr ""

#: ../../doc/concepts/configuration.rst:72
msgid "Basic instance configuration"
msgstr ""

#: ../../doc/concepts/configuration.rst:74
msgid "The example below shows a sample configuration of a single Tarantool instance:"
msgstr ""

#: ../../doc/concepts/configuration.rst:76
#: ../../doc/concepts/configuration.rst:100
msgid "groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        instances:\n"
"          instance001:\n"
"            iproto:\n"
"              listen: \"3301\""
msgstr ""

#: ../../doc/concepts/configuration.rst:80
msgid "The ``instances`` section includes only one instance named *instance001*. The ``iproto.listen`` option sets a port used to listen for incoming requests."
msgstr ""

#: ../../doc/concepts/configuration.rst:82
msgid "The ``replicasets`` section contains one replica set named *replicaset001*."
msgstr ""

#: ../../doc/concepts/configuration.rst:83
msgid "The ``groups`` section contains one group named *group001*."
msgstr ""

#: ../../doc/concepts/configuration.rst:89
msgid "Configuration scopes"
msgstr ""

#: ../../doc/concepts/configuration.rst:91
msgid "This section shows how to control a scope the specified configuration option is applied to. Most of the configuration options can be applied to a specific instance, replica set, group, or to all instances globally."
msgstr ""

#: ../../doc/concepts/configuration.rst:94
msgid "*Instance*"
msgstr ""

#: ../../doc/concepts/configuration.rst:96
msgid "To apply specific configuration options to a concrete instance, specify such options for this instance only. In the example below, ``iproto.listen`` is applied to *instance001* only."
msgstr ""

#: ../../doc/concepts/configuration.rst:105
msgid "*Replica set*"
msgstr ""

#: ../../doc/concepts/configuration.rst:107
msgid "In this example, ``iproto.listen`` is in effect for all instances in *replicaset001*."
msgstr ""

#: ../../doc/concepts/configuration.rst:109
msgid "groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        iproto:\n"
"          listen: \"3301\"\n"
"        instances:\n"
"          instance001: {}"
msgstr ""

#: ../../doc/concepts/configuration.rst:114
msgid "*Group*"
msgstr ""

#: ../../doc/concepts/configuration.rst:116
msgid "In this example, ``iproto.listen`` is in effect for all instances in *group001*."
msgstr ""

#: ../../doc/concepts/configuration.rst:118
msgid "groups:\n"
"  group001:\n"
"    iproto:\n"
"      listen: \"3301\"\n"
"    replicasets:\n"
"      replicaset001:\n"
"        instances:\n"
"          instance001: {}"
msgstr ""

#: ../../doc/concepts/configuration.rst:123
msgid "*Global*"
msgstr ""

#: ../../doc/concepts/configuration.rst:125
msgid "In this example, ``iproto.listen`` is applied to all instances of the cluster."
msgstr ""

#: ../../doc/concepts/configuration.rst:127
msgid "iproto:\n"
"  listen: \"3301\"\n"
"\n"
"groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        instances:\n"
"          instance001: {}"
msgstr ""

#: ../../doc/concepts/configuration.rst:135
msgid "The :ref:`Configuration reference <configuration_reference>` contains information about scopes to which each configuration option can be applied."
msgstr ""

#: ../../doc/concepts/configuration.rst:141
msgid "Configuration scopes: Replica set example"
msgstr ""

#: ../../doc/concepts/configuration.rst:143
msgid "The example below shows how specific configuration options work in different configuration scopes for a replica set with a manual failover. You can learn more about configuring replication from :ref:`Replication tutorials <how-to-replication>`."
msgstr ""

#: ../../doc/concepts/configuration.rst:146
msgid "credentials:\n"
"  users:\n"
"    replicator:\n"
"      password: 'topsecret'\n"
"      roles: [replication]\n"
"\n"
"iproto:\n"
"  advertise:\n"
"    peer: replicator@\n"
"\n"
"replication:\n"
"  failover: manual\n"
"\n"
"groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        leader: instance001\n"
"        instances:\n"
"          instance001:\n"
"            iproto:\n"
"              listen: 127.0.0.1:3301\n"
"          instance002:\n"
"            iproto:\n"
"              listen: 127.0.0.1:3302\n"
"          instance003:\n"
"            iproto:\n"
"              listen: 127.0.0.1:3303\n"
"\n"
""
msgstr ""

#: ../../doc/concepts/configuration.rst:151
msgid "``credentials`` (*global*)"
msgstr ""

#: ../../doc/concepts/configuration.rst:153
msgid "This section is used to create the *replicator* user and assign it the specified role. These options are applied globally to all instances."
msgstr ""

#: ../../doc/concepts/configuration.rst:156
msgid "``iproto`` (*global*, *instance*)"
msgstr ""

#: ../../doc/concepts/configuration.rst:158
msgid "The ``iproto`` section is specified on both global and instance levels. The ``iproto.advertise.peer`` option specifies a URI used by an instance to connect to another instance as a replica. In the example above, the URI includes a user name only. A host value is taken from ``iproto.listen`` that is set on the instance level."
msgstr ""

#: ../../doc/concepts/configuration.rst:163
msgid "``replication``: (*global*)"
msgstr ""

#: ../../doc/concepts/configuration.rst:165
msgid "The ``replication.failover`` global option sets a manual failover for all replica sets."
msgstr ""

#: ../../doc/concepts/configuration.rst:167
msgid "``leader``: (*replica set*)"
msgstr ""

#: ../../doc/concepts/configuration.rst:169
msgid "The ``<replicaset-name>.leader`` option sets a :ref:`master <replication-roles>` instance for *replicaset001*."
msgstr ""

#: ../../doc/concepts/configuration.rst:176
msgid "Loading an application"
msgstr ""

#: ../../doc/concepts/configuration.rst:178
msgid "Using Tarantool as an application server, you can run your own Lua applications. In the ``app`` section, you can load the application and provide a custom application configuration in the ``cfg`` section."
msgstr ""

#: ../../doc/concepts/configuration.rst:181
msgid "In the example below, the application is loaded from the ``myapp.lua`` file placed next to the YAML configuration file:"
msgstr ""

#: ../../doc/concepts/configuration.rst:183
msgid "app:\n"
"  file: 'myapp.lua'\n"
"  cfg:\n"
"    greeting: 'Hello'\n"
"\n"
"groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        instances:\n"
"          instance001:\n"
"            iproto:\n"
"              listen: \"3301\""
msgstr ""

#: ../../doc/concepts/configuration.rst:187
msgid "To get a value of the custom ``greeting`` property in the application code, use the ``config:get()`` function provided by the :ref:`config <config-module>` module."
msgstr ""

#: ../../doc/concepts/configuration.rst:190
msgid "-- myapp.lua --\n"
"local log = require('log').new(\"myapp\")\n"
"local config = require('config')\n"
"log.info(\"%s from app, %s!\", config:get('app.cfg.greeting'), box.info.name)\n"
""
msgstr ""

#: ../../doc/concepts/configuration.rst:194
msgid "As a result of :ref:`starting <configuration_run_instance>` the *instance001*, a log should contain the following line:"
msgstr ""

#: ../../doc/concepts/configuration.rst:196
msgid "main/103/interactive/myapp I> Hello from app, instance001!"
msgstr ""

#: ../../doc/concepts/configuration.rst:200
msgid "The ``app`` section can be placed in any :ref:`configuration scope <configuration_scopes>`. As an example use case, you can provide different applications for storages and routers in a sharded cluster:"
msgstr ""

#: ../../doc/concepts/configuration.rst:203
msgid "groups:\n"
"  storages:\n"
"    app:\n"
"      module: storage\n"
"      # ...\n"
"  routers:\n"
"    app:\n"
"      module: router\n"
"      # ..."
msgstr ""

#: ../../doc/concepts/configuration.rst:215
msgid "Learn more about using Tarantool as the application server from :ref:`Developing applications with Tarantool <how-to-app-server>`."
msgstr ""

#: ../../doc/concepts/configuration.rst:222
msgid "Predefined variables"
msgstr ""

#: ../../doc/concepts/configuration.rst:224
msgid "In a configuration file, you can use the following predefined variables that are replaced with actual values at runtime:"
msgstr ""

#: ../../doc/concepts/configuration.rst:226
msgid "``instance_name``"
msgstr ""

#: ../../doc/concepts/configuration.rst:227
msgid "``replicaset_name``"
msgstr ""

#: ../../doc/concepts/configuration.rst:228
msgid "``group_name``"
msgstr ""

#: ../../doc/concepts/configuration.rst:230
msgid "To reference these variables in a configuration file, enclose them in double curly braces with whitespaces. In the example below, ``{{ instance_name }}`` is replaced with *instance001*."
msgstr ""

#: ../../doc/concepts/configuration.rst:233
msgid "groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        instances:\n"
"          instance001:\n"
"            snapshot:\n"
"              dir: ./var/{{ instance_name }}/snapshots\n"
"            wal:\n"
"              dir: ./var/{{ instance_name }}/wals"
msgstr ""

#: ../../doc/concepts/configuration.rst:237
msgid "As a result, the :ref:`paths to snapshots and write-ahead logs <configuration_options_directories>` differ for different instances."
msgstr ""

#: ../../doc/concepts/configuration.rst:244
msgid "Environment variables"
msgstr ""

#: ../../doc/concepts/configuration.rst:246
msgid "For each configuration parameter, Tarantool provides two sets of predefined environment variables:"
msgstr ""

#: ../../doc/concepts/configuration.rst:248
msgid "``TT_<CONFIG_PARAMETER>``. These variables are used to substitute parameters specified in a configuration file. This means that these variables have a higher :ref:`priority <configuration_precedence>` than the options specified in a configuration file."
msgstr ""

#: ../../doc/concepts/configuration.rst:251
msgid "``TT_<CONFIG_PARAMETER>_DEFAULT``. These variables are used to specify default values for parameters missing in a configuration file. These variables have a lower :ref:`priority <configuration_precedence>` than the options specified in a configuration file."
msgstr ""

#: ../../doc/concepts/configuration.rst:254
msgid "For example, ``TT_IPROTO_LISTEN`` and ``TT_IPROTO_LISTEN_DEFAULT`` correspond to the ``iproto.listen`` option. ``TT_SNAPSHOT_DIR`` and ``TT_SNAPSHOT_DIR_DEFAULT`` correspond to the ``snapshot.dir`` option. To see all the supported environment variables, execute the ``tarantool`` command with the ``--help-env-list`` :ref:`option <configuration_command_options>`."
msgstr ""

#: ../../doc/concepts/configuration.rst:258
msgid "$ tarantool --help-env-list"
msgstr ""

#: ../../doc/concepts/configuration.rst:262
msgid "Below are a few examples that show how to set environment variables of different types, like *string*, *number*, *array*, or *map*:"
msgstr ""

#: ../../doc/concepts/configuration.rst:264
msgid "String. In the example below, ``TT_IPROTO_LISTEN`` is used to specify a :ref:`listening host and port <configuration_options_connection>` values:"
msgstr ""

#: ../../doc/concepts/configuration.rst:266
msgid "$ export TT_IPROTO_LISTEN='127.0.0.1:3311'"
msgstr ""

#: ../../doc/concepts/configuration.rst:270
msgid "To specify several listening addresses, separate them by a comma without space:"
msgstr ""

#: ../../doc/concepts/configuration.rst:272
msgid "$ export TT_IPROTO_LISTEN='127.0.0.1:3311,127.0.0.1:3312'"
msgstr ""

#: ../../doc/concepts/configuration.rst:276
msgid "Number. In this example, ``TT_LOG_LEVEL`` is used to set a logging level to 3 (``CRITICAL``):"
msgstr ""

#: ../../doc/concepts/configuration.rst:278
msgid "$ export TT_LOG_LEVEL=3"
msgstr ""

#: ../../doc/concepts/configuration.rst:282
msgid "Array. The examples below show how to set the ``TT_SHARDING_ROLES`` variable that accepts an array value. Arrays can be passed in two ways: using a *simple* ..."
msgstr ""

#: ../../doc/concepts/configuration.rst:285
msgid "$ export TT_SHARDING_ROLES=router,storage"
msgstr ""

#: ../../doc/concepts/configuration.rst:289
msgid "... or *JSON* format:"
msgstr ""

#: ../../doc/concepts/configuration.rst:291
msgid "$ export TT_SHARDING_ROLES='[\"router\", \"storage\"]'"
msgstr ""

#: ../../doc/concepts/configuration.rst:295
msgid "The *simple* format is applicable only to arrays containing scalar values."
msgstr ""

#: ../../doc/concepts/configuration.rst:297
msgid "Map. To assign map values to environment variables, you can also use *simple* or *JSON* formats. In the example below, ``TT_LOG_MODULES`` sets different logging levels for different modules using a *simple* format:"
msgstr ""

#: ../../doc/concepts/configuration.rst:300
msgid "$ export TT_LOG_MODULES=module1=info,module2=error"
msgstr ""

#: ../../doc/concepts/configuration.rst:304
msgid "In the next example, ``TT_APP_CFG`` is used to specify the value of a custom configuration property for a :ref:`loaded application <configuration_application>` using a *JSON* format:"
msgstr ""

#: ../../doc/concepts/configuration.rst:306
msgid "$ export TT_APP_CFG='{\"greeting\":\"Hi\"}'"
msgstr ""

#: ../../doc/concepts/configuration.rst:310
msgid "The *simple* format is applicable only to maps containing scalar values."
msgstr ""

#: ../../doc/concepts/configuration.rst:315
msgid "There are also special ``TT_INSTANCE_NAME`` and ``TT_CONFIG`` environment variables that can be used to :ref:`start <configuration_run_instance_tarantool>` the specified Tarantool instance with configuration from the given file."
msgstr ""

#: ../../doc/concepts/configuration.rst:325
msgid "Configuration in etcd"
msgstr ""

#: ../../doc/concepts/configuration/configuration_etcd.rst:3
msgid "Enterprise Edition"
msgstr ""

#: ../../doc/concepts/configuration/configuration_etcd.rst:6
msgid "Storing configuration in etcd is supported by the `Enterprise Edition <https://www.tarantool.io/compare/>`_ only."
msgstr ""

#: ../../doc/concepts/configuration.rst:331
msgid "Tarantool enables you to store configuration data in one reliable place using `etcd <https://etcd.io/>`_. To achieve this, you need to:"
msgstr ""

#: ../../doc/concepts/configuration.rst:334
msgid "Provide a local YAML configuration with an etcd endpoint address and key prefix in the ``config`` section:"
msgstr ""

#: ../../doc/concepts/configuration.rst:336
msgid "config:\n"
"  etcd:\n"
"    endpoints:\n"
"      - http://localhost:2379\n"
"    prefix: /example"
msgstr ""

#: ../../doc/concepts/configuration.rst:340
msgid "Publish a cluster's configuration to an etcd server."
msgstr ""

#: ../../doc/concepts/configuration.rst:342
msgid "Learn more from the following guide: :ref:`Storing configuration in etcd <configuration_etcd>`."
msgstr ""

#: ../../doc/concepts/configuration.rst:348
msgid "Configuration precedence"
msgstr ""

#: ../../doc/concepts/configuration.rst:350
msgid "Tarantool configuration options are applied from multiple sources with the following precedence, from highest to lowest:"
msgstr ""

#: ../../doc/concepts/configuration.rst:352
msgid "`TT_*` :ref:`environment variables <configuration_environment_variable>`."
msgstr ""

#: ../../doc/concepts/configuration.rst:353
msgid "Configuration from a :ref:`local YAML file <configuration_file>`."
msgstr ""

#: ../../doc/concepts/configuration.rst:354
msgid ":ref:`Centralized configuration <configuration_etcd_overview>` stored in etcd."
msgstr ""

#: ../../doc/concepts/configuration.rst:355
msgid "`TT_*_DEFAULT` :ref:`environment variables <configuration_environment_variable>`."
msgstr ""

#: ../../doc/concepts/configuration.rst:357
msgid "If the same option is defined in two or more locations, the option with the highest precedence is applied."
msgstr ""

#: ../../doc/concepts/configuration.rst:364
msgid "Configuration options overview"
msgstr ""

#: ../../doc/concepts/configuration.rst:366
msgid "This section gives an overview of some useful configuration options. All the available options are documented in the :ref:`Configuration reference <configuration_reference>`."
msgstr ""

#: ../../doc/concepts/configuration.rst:372
msgid "Connection settings"
msgstr ""

#: ../../doc/concepts/configuration.rst:374
msgid "To configure an address used to listen for incoming requests, use the ``iproto.listen`` option. Below are a few examples on how to do this:"
msgstr ""

#: ../../doc/concepts/configuration.rst:377
msgid "Set a listening port to ``3301``:"
msgstr ""

#: ../../doc/concepts/configuration.rst:379
msgid "iproto:\n"
"  listen: \"3301\""
msgstr ""

#: ../../doc/concepts/configuration.rst:384
msgid "Set a listening address to ``127.0.0.1:3301``:"
msgstr ""

#: ../../doc/concepts/configuration.rst:386
msgid "iproto:\n"
"  listen: \"127.0.0.1:3301\""
msgstr ""

#: ../../doc/concepts/configuration.rst:392
msgid "Configure several listening addresses:"
msgstr ""

#: ../../doc/concepts/configuration.rst:394
msgid "iproto:\n"
"  listen: \"127.0.0.1:3301,127.0.0.1:3303\""
msgstr ""

#: ../../doc/concepts/configuration.rst:399
msgid "Enables :ref:`traffic encryption <enterprise-iproto-encryption>` for a connection using corresponding URI parameters:"
msgstr ""

#: ../../doc/concepts/configuration.rst:401
msgid "iproto:\n"
"  listen: \"127.0.0.1:3301?transport=ssl&ssl_key_file=localhost.key&ssl_cert_file=localhost.crt&ssl_ca_file=ca.crt\""
msgstr ""

#: ../../doc/concepts/configuration.rst:406
msgid "Note that traffic encryption is supported by the `Enterprise Edition <https://www.tarantool.io/compare/>`_ only."
msgstr ""

#: ../../doc/concepts/configuration.rst:409
msgid "Use a Unix domain socket:"
msgstr ""

#: ../../doc/concepts/configuration.rst:411
msgid "iproto:\n"
"  listen: \"unix/:./var/run/{{ instance_name }}/tarantool.iproto\""
msgstr ""

#: ../../doc/concepts/configuration.rst:420
msgid "Access control"
msgstr ""

#: ../../doc/concepts/configuration.rst:422
msgid "The ``credentials`` section allows you to create users and grant them the specified privileges. In the example below, there are two users:"
msgstr ""

#: ../../doc/concepts/configuration.rst:425
msgid "The *replicator* user is used for replication and has a corresponding role."
msgstr ""

#: ../../doc/concepts/configuration.rst:426
msgid "The *storage* user has the ``super`` role and can perform any action on Tarantool instances."
msgstr ""

#: ../../doc/concepts/configuration.rst:428
msgid "credentials:\n"
"  users:\n"
"    replicator:\n"
"      password: 'topsecret'\n"
"      roles: [replication]\n"
"    storage:\n"
"      password: 'secret'\n"
"      roles: [super]\n"
""
msgstr ""

#: ../../doc/concepts/configuration.rst:434
msgid "To learn more, see the :ref:`Access control <authentication>` section."
msgstr ""

#: ../../doc/concepts/configuration.rst:440
msgid "Memory"
msgstr ""

#: ../../doc/concepts/configuration.rst:442
msgid "The ``memtx.memory`` option specifies how much :ref:`memory <engines-memtx>` Tarantool allocates to actually store data."
msgstr ""

#: ../../doc/concepts/configuration.rst:444
msgid "memtx:\n"
"  memory: 100000000"
msgstr ""

#: ../../doc/concepts/configuration.rst:449
msgid "When the limit is reached, ``INSERT`` or ``UPDATE`` requests fail with :ref:`ER_MEMORY_ISSUE <admin-troubleshoot-memory-issues>`."
msgstr ""

#: ../../doc/concepts/configuration.rst:455
msgid "Snapshots and write-ahead logs"
msgstr ""

#: ../../doc/concepts/configuration.rst:457
msgid "The ``snapshot.dir`` and ``wal.dir`` options can be used to configure directories for storing snapshots and write-ahead logs. For example, you can place snapshots and write-ahead logs on different hard drives for better reliability."
msgstr ""

#: ../../doc/concepts/configuration.rst:460
msgid "instance001:\n"
"  snapshot:\n"
"    dir: '/media/drive1/snapshots'\n"
"  wal:\n"
"    dir: '/media/drive2/wals'"
msgstr ""

#: ../../doc/concepts/configuration.rst:468
msgid "To learn more about the persistence mechanism in Tarantool, see the :ref:`Persistence <concepts-data_model-persistence>` section."
msgstr ""

#: ../../doc/concepts/configuration.rst:474
msgid "Starting Tarantool instances"
msgstr ""

#: ../../doc/concepts/configuration.rst:479
msgid "Starting instances using the tt utility"
msgstr ""

#: ../../doc/concepts/configuration.rst:481
msgid "The :ref:`tt <tt-cli>` utility is the recommended way to start Tarantool instances."
msgstr ""

#: ../../doc/concepts/configuration.rst:483
msgid "Instance files or directories are organized into applications in the ``instances_enabled`` directory. The example below shows how a :ref:`layout <admin-start_stop_instance-multi-instance-layout>` of the application called ``app`` might look:"
msgstr ""

#: ../../doc/concepts/configuration.rst:486
msgid "├── tt.yaml\n"
"└── instances.enabled\n"
"    └── app\n"
"        ├── config.yaml\n"
"        ├── myapp.lua\n"
"        └── instances.yml"
msgstr ""

#: ../../doc/concepts/configuration.rst:495
msgid "``config.yaml`` is a :ref:`configuration file <configuration_file>`."
msgstr ""

#: ../../doc/concepts/configuration.rst:496
msgid "``myapp.lua`` is a Lua script containing an :ref:`application to load <configuration_application>`."
msgstr ""

#: ../../doc/concepts/configuration.rst:497
msgid "``instances.yml`` specifies :ref:`instances <admin-start_stop_instance-multi-instance>` to run in the current environment. This file might look as follows:"
msgstr ""

#: ../../doc/concepts/configuration.rst:500
msgid "instance001:\n"
"instance002:\n"
"instance003:"
msgstr ""

#: ../../doc/concepts/configuration.rst:504
msgid "To start all instances, use the ``tt start app`` command:"
msgstr ""

#: ../../doc/concepts/configuration.rst:506
msgid "$ tt start app\n"
"    • Starting an instance [app:instance001]...\n"
"    • Starting an instance [app:instance002]...\n"
"    • Starting an instance [app:instance003]..."
msgstr ""

#: ../../doc/concepts/configuration.rst:513
msgid "Then, you can connect to Tarantool instances by its names using the ``tt connect`` command. You can learn more from the :ref:`Starting and stopping instances <admin-start_stop_instance>` section."
msgstr ""

#: ../../doc/concepts/configuration.rst:521
msgid "Starting an instance using the tarantool command"
msgstr ""

#: ../../doc/concepts/configuration.rst:523
msgid "The ``tarantool`` command provides additional :ref:`options <configuration_command_options>` that might be helpful for development purposes. Below is the syntax for starting a Tarantool instance configured in a file:"
msgstr ""

#: ../../doc/concepts/configuration.rst:526
msgid "$ tarantool [OPTION ...] --name INSTANCE_NAME --config CONFIG_FILE_PATH"
msgstr ""

#: ../../doc/concepts/configuration.rst:530
msgid "The command below starts ``instance001`` configured in the ``config.yaml`` file:"
msgstr ""

#: ../../doc/concepts/configuration.rst:532
msgid "$ tarantool --name instance001 --config config.yaml"
msgstr ""

#: ../../doc/concepts/configuration.rst:540
msgid "Command-line options"
msgstr ""

#: ../../doc/concepts/configuration.rst:542
msgid "Options that can be passed when :ref:`starting a Tarantool instance <configuration_run_instance_tarantool>`:"
msgstr ""

#: ../../doc/concepts/configuration.rst:546
msgid "Print an annotated list of all available options and exit."
msgstr ""

#: ../../doc/concepts/configuration.rst:550
#: ../../doc/concepts/configuration.rst:580
#: ../../doc/concepts/configuration.rst:589
msgid "**Since:** :doc:`3.0.0 </release/3.0.0>`."
msgstr ""

#: ../../doc/concepts/configuration.rst:552
msgid "Show a list of :ref:`environment variables <configuration_environment_variable>` that can be used to configure Tarantool."
msgstr ""

#: ../../doc/concepts/configuration.rst:558
msgid "Print the product name and version."
msgstr ""

#: ../../doc/concepts/configuration.rst:560
#: ../../doc/concepts/configuration.rst:601
#: ../../doc/concepts/configuration.rst:612
#: ../../doc/concepts/configuration.rst:623
#: ../../doc/concepts/configuration.rst:633
#: ../../doc/concepts/configuration.rst:643
#: ../../doc/concepts/configuration.rst:653
msgid "**Example**"
msgstr ""

#: ../../doc/concepts/configuration.rst:562
msgid "% tarantool --version\n"
"Tarantool 3.0.0-entrypoint-746-g36ef3fb43\n"
"Target: Darwin-arm64-Release\n"
"..."
msgstr ""

#: ../../doc/concepts/configuration.rst:569
msgid "In this example:"
msgstr ""

#: ../../doc/concepts/configuration.rst:571
msgid "``3.0.0`` is a Tarantool version. Tarantool follows semantic versioning, which is described in the :ref:`Tarantool release policy <release-policy>` section."
msgstr ""

#: ../../doc/concepts/configuration.rst:574
msgid "``Target`` is the platform Tarantool is built on. Platform-specific details may follow this line."
msgstr ""

#: ../../doc/concepts/configuration.rst:582
msgid "Set a path to a :ref:`YAML configuration file <configuration_file>`. You can also configure this value using the ``TT_CONFIG`` environment variable."
msgstr ""

#: ../../doc/concepts/configuration.rst:585
#: ../../doc/concepts/configuration.rst:594
msgid "See also: :ref:`Starting an instance using the tarantool command <configuration_run_instance_tarantool>`"
msgstr ""

#: ../../doc/concepts/configuration.rst:591
msgid "Set the name of an instance to run. You can also configure this value using the ``TT_INSTANCE_NAME`` environment variable."
msgstr ""

#: ../../doc/concepts/configuration.rst:599
msgid "Enter an :ref:`interactive mode <interactive_console>`."
msgstr ""

#: ../../doc/concepts/configuration.rst:603
msgid "% tarantool -i"
msgstr ""

#: ../../doc/concepts/configuration.rst:610
msgid "Execute the 'EXPR' string. See also: `lua man page <https://www.lua.org/manual/5.3/lua.html>`_."
msgstr ""

#: ../../doc/concepts/configuration.rst:614
msgid "% tarantool -e \"print('Hello, world!')\"\n"
"Hello, world!"
msgstr ""

#: ../../doc/concepts/configuration.rst:621
msgid "Require the 'NAME' library. See also: `lua man page <https://www.lua.org/manual/5.3/lua.html>`_."
msgstr ""

#: ../../doc/concepts/configuration.rst:625
msgid "% tarantool -l luatest.coverage script.lua"
msgstr ""

#: ../../doc/concepts/configuration.rst:631
msgid "Perform a LuaJIT control command. See also: `Command Line Options <https://luajit.org/running.html>`_."
msgstr ""

#: ../../doc/concepts/configuration.rst:635
msgid "% tarantool -j off app.lua"
msgstr ""

#: ../../doc/concepts/configuration.rst:641
msgid "Save or list bytecode. See also: `Command Line Options <https://luajit.org/running.html>`_."
msgstr ""

#: ../../doc/concepts/configuration.rst:645
msgid "% tarantool -b test.lua test.out"
msgstr ""

#: ../../doc/concepts/configuration.rst:651
msgid "Activate a debugging session for 'SCRIPT'. See also: `luadebug.lua <https://github.com/tarantool/tarantool/blob/master/third_party/lua/README-luadebug.md>`_."
msgstr ""

#: ../../doc/concepts/configuration.rst:655
msgid "% tarantool -d app.lua"
msgstr ""

#: ../../doc/concepts/configuration.rst:662
msgid "Stop handling options. See also: `lua man page <https://www.lua.org/manual/5.3/lua.html>`_."
msgstr ""

#: ../../doc/concepts/configuration.rst:667
msgid "Stop handling options and execute the standard input as a file. See also: `lua man page <https://www.lua.org/manual/5.3/lua.html>`_."
msgstr ""
