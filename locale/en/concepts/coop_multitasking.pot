# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 2.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-12 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/concepts/coop_multitasking.rst:4
msgid "Fibers, yields, and cooperative multitasking"
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:6
msgid "Creating a fiber is the Tarantool way of making application logic work in the background at all times. A **fiber** is a set of instructions that are executed with :ref:`cooperative multitasking <app-cooperative_multitasking>`: the instructions contain :ref:`yield <app-yields>` signals, upon which control is passed to another fiber."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:13
msgid "Fibers"
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:15
msgid "Fibers are similar to threads of execution in computing. The key difference is that threads use preemptive multitasking, while fibers use cooperative multitasking (see :ref:`below <app-cooperative_multitasking>`). This gives fibers the following two advantages over threads:"
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:20
msgid "Better controllability. Threads often depend on the kernel's thread scheduler to preempt a busy thread and resume another thread, so preemption may occur unpredictably. Fibers :ref:`yield <app-yields>` themselves to run another fiber while executing, so yields are controlled by application logic."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:24
msgid "Higher performance. Threads require more resources to preempt as they need to address the system kernel. Fibers are lighter and faster as they don't need to address the kernel to yield."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:28
msgid "Yet fibers have some limitations as compared with threads, the main limitation being no multi-core mode. All fibers in an application belong to a single thread, so they all use the same CPU core as the parent thread. Meanwhile, this limitation is not really serious for Tarantool applications, because a typical bottleneck for Tarantool is the HDD, not the CPU."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:34
msgid "A fiber has all the features of a Lua `coroutine <http://www.lua.org/pil/contents.html#9>`_ and all programming concepts that apply for Lua coroutines will apply for fibers as well. However, Tarantool has made some enhancements for fibers and has used fibers internally. So, although the use of coroutines is possible and supported, the use of fibers is recommended."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:41
msgid "Any live fiber can be in one of three states: ``running``, ``suspended``, and ``ready``. After a fiber dies, the ``dead`` status returns."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:44
msgid "To learn more about fibers, go to the :ref:`fiber <fiber-module>` module documentation."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:49
msgid "Yields"
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:51
msgid "Yield is an action that occurs in a :ref:`cooperative <app-cooperative_multitasking>` environment that transfers control of the thread from the current fiber to another fiber that is ready to execute."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:54
msgid "Any live fiber can be in one of three states: ``running``, ``suspended``, and ``ready``. After a fiber dies, the ``dead`` status is returned. By observing fibers from the outside, you can only see ``running`` (for the current fiber) and ``suspended`` for any other fiber waiting for an event from the event loop (``ev``) for execution."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:64
msgid "After a yield has occurred, the next ``ready`` fiber is taken from the queue and executed. When there are no more ``ready`` fibers, execution is transferred to the event loop."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:67
msgid "After a fiber has yielded and regained control, it immediately issues :ref:`testcancel <fiber-testcancel>`."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:69
msgid "Yields can be :ref:`explicit <app-explicit-yields>` or :ref:`implicit <app-implicit-yields>`."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:74
msgid "Explicit yields"
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:76
msgid "**Explicit yields** are clearly visible from the invoking code. There are only two explicit yields: :ref:`fiber.yield() <fiber-yield>` and :ref:`fiber.sleep(t) <fiber-sleep>`."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:79
msgid ":ref:`fiber.yield() <fiber-yield>` yields execution to another ``ready`` fiber while putting itself in the ``ready`` state, meaning that it will be executed again as soon as possible while being polite to other fibers waiting for execution."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:81
msgid ":ref:`fiber.sleep(t) <fiber-sleep>` yields execution to another ``ready`` fiber and puts itself in the ``suspended`` state for time ``t`` until time passes and the event loop wakes up this fiber to the ``ready`` state."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:83
msgid "In general, it is good behavior for long-running cpu-intensive tasks to yield periodically to be :ref:`cooperative <app-cooperative_multitasking>` to other waiting fibers."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:89
msgid "Implicit yields"
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:91
msgid "On the other hand, there are many operations, such as operations with sockets, file system, and disk I/O, which imply some waiting for the current fiber while others can be executed. When such an operation occurs, a possible blocking operation would be passed into the event loop and the fiber would be suspended until the resource is ready to continue fiber execution."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:97
msgid "Here is the list of implicitly yielding operations:"
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:99
msgid "Connection establishment (:ref:`socket <socket-module>`)."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:101
msgid "Socket read and write (:ref:`socket <socket-module>`)."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:103
msgid "Filesystem operations (from :ref:`fio <fio-section>`)."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:105
msgid "Channel data transfer (:ref:`fiber.channel <fiber-channel>`)."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:107
msgid "File input/output (from :ref:`fio <fio-section>`)."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:109
msgid "Console operations (since console is a socket)."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:111
msgid "HTTP requests (since HTTP is a socket operation)."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:113
msgid "Database modifications (if they imply a disk write)."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:115
msgid "Database reading for the :ref:`vinyl <engines-chapter>` engine."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:117
msgid "Invocation of another process (:ref:`popen <popen-module>`)."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:121
msgid "Please note that all operations of the ``os`` module are non-cooperative and exclusively block the whole tx thread."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:124
msgid "For :ref:`memtx <engines-chapter>`, since all data is in memory, there is no yielding for a read request (like ``:select``, ``:pairs``, ``:get``)."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:127
msgid "For :ref:`vinyl <engines-chapter>`, since some data may not be in memory, there may be disk I/O for a read (to fetch data from disk) or write (because a stall may occur while waiting for memory to be freed)."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:130
msgid "For both :ref:`memtx <engines-chapter>` and :ref:`vinyl <engines-chapter>`, since data change requests must be recorded in the :ref:`WAL <internals-wal>`, there is normally a :doc:`/reference/reference_lua/box_txn_management/commit`."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:133
msgid "With the default ``autocommit`` mode the following operations are yielding:"
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:135
msgid ":ref:`space:alter <box_space-alter>`."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:137
msgid ":ref:`space:drop <box_space-drop>`."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:139
msgid ":ref:`space:create_index <box_space-create_index>`."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:141
msgid ":ref:`space:truncate <box_space-truncate>`."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:143
msgid ":ref:`space:insert <box_space-insert>`."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:145
msgid ":ref:`space:replace <box_space-replace>`."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:147
msgid ":ref:`space:update <box_space-update>`."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:149
msgid ":ref:`space:upserts <box_space-upsert>`."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:151
msgid ":ref:`space:delete <box_space-delete>`."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:153
msgid ":ref:`index:update <box_index-update>`."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:155
msgid ":ref:`index:delete <box_index-delete>`."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:157
msgid ":ref:`index:alter <box_index-alter>`."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:159
msgid ":ref:`index:drop <box_index-drop>`."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:161
msgid ":ref:`index:rename <box_index-rename>`."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:163
msgid ":ref:`box.commit <box-commit>` (*if there were some modifications within the transaction*)."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:165
msgid "To provide atomicity for transactions in transaction mode, some changes are applied to the modification operations for the :ref:`memtx <engines-chapter>` engine. After executing :ref:`box.begin <box-begin>` or within a :ref:`box.atomic <box-atomic>` call, any modification operation will not yield, and yield will occur only on :ref:`box.commit <box-commit>` or upon return from :ref:`box.atomic <box-atomic>`. Meanwhile, :ref:`box.rollback <box-rollback>` does not yield."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:171
msgid "That is why executing separate commands like ``select()``, ``insert()``, ``update()`` in the console inside a transaction without MVCC will cause it to an abort. This is due to implicit yield after each chunk of code is executed in the console."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:176
msgid "Example #1"
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:178
#: ../../doc/concepts/coop_multitasking.rst:189
msgid "Engine = memtx."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:180
#: ../../doc/concepts/coop_multitasking.rst:205
msgid "space:get()\n"
"space:insert()"
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:186
msgid "The sequence has one yield, at the end of the insert, caused by implicit commit; ``get()`` has nothing to write to the :ref:`WAL <internals-wal>` and so does not yield."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:191
#: ../../doc/concepts/coop_multitasking.rst:217
msgid "box.begin()\n"
"space1:get()\n"
"space1:insert()\n"
"space2:get()\n"
"space2:insert()\n"
"box.commit()"
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:201
msgid "The sequence has one yield, at the end of the ``box.commit``, none of the inserts are yielding."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:203
#: ../../doc/concepts/coop_multitasking.rst:215
msgid "Engine = vinyl."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:211
msgid "The sequence has one to three yields, since ``get()`` may yield if the data is not in the cache, ``insert()`` may yield if it waits for available memory, and there is an implicit yield at commit."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:227
msgid "The sequence may yield from 1 to 5 times."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:231
msgid "Example #2"
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:233
msgid "Assume that there are tuples in the :ref:`memtx <engines-chapter>` space ``tester`` where the third field represents a positive dollar amount."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:237
msgid "Let's start a transaction, withdraw from tuple#1, deposit in tuple#2, and end the transaction, making its effects permanent."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:240
msgid "tarantool> function txn_example(from, to, amount_of_money)\n"
"         >   box.atomic(function()\n"
"         >     box.space.tester:update(from, {{'-', 3, amount_of_money}})\n"
"         >     box.space.tester:update(to,   {{'+', 3, amount_of_money}})\n"
"         >   end)\n"
"         >   return \"ok\"\n"
"         > end\n"
"\n"
"Result:\n"
"---\n"
"...\n"
"tarantool> txn_example({999}, {1000}, 1.00)\n"
"---\n"
"- \"ok\"\n"
"..."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:258
msgid "If :ref:`wal_mode <cfg_binary_logging_snapshots-wal_mode>` = ``none``, then there is no implicit yielding at the commit time because there are no writes to the :ref:`WAL <internals-wal>`."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:262
msgid "If a request if performed via network connector such as :ref:`net.box <net_box-module>` and implies sending requests to the server and receiving responses, then it involves network I/O and thus implicit yielding. Even if the request that is sent to the server has no implicit yield. Therefore, the following sequence causes yields three times sequentially when sending requests to the network and awaiting the results."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:311
msgid "conn.space.test:get{1}\n"
"conn.space.test:get{2}\n"
"conn.space.test:get{3}"
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:279
msgid "Cooperative multitasking"
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:281
msgid "Cooperative multitasking means that unless a running fiber deliberately :ref:`yields <app-yields>` control, it is not preempted by some other fiber. But a running fiber will deliberately yield when it encounters a \"yield point\": a transaction commit, an operating system call, or an explicit \"yield\" request. Any system call which can block will be performed asynchronously, and any running fiber which must wait for a system call will be preempted, so that another ready-to-run fiber takes its place and becomes the new running fiber."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:289
msgid "This model makes all programmatic locks unnecessary: cooperative multitasking ensures that there will be no concurrency around a resource, no race conditions, and no memory consistency issues. The way to achieve this is simple: Use no yields, explicit or implicit in critical sections, and no one can interfere with code execution."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:295
msgid "For small requests, such as simple UPDATE or INSERT or DELETE or SELECT, fiber scheduling is fair: it takes little time to process the request, schedule a disk write, and yield to a fiber serving the next client."
msgstr ""

#: ../../doc/concepts/coop_multitasking.rst:299
msgid "However, a function may perform complex calculations or be written in such a way that yields take a long time to occur. This can lead to unfair scheduling when a single client throttles the rest of the system, or to apparent stalls in processing requests. It is the responsibility of the function author to avoid this situation. As a protective mechanism, a :ref:`fiber slice <fibers_limit_execution_time>` can be used."
msgstr ""
