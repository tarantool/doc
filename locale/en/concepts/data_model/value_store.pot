# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-17 14:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/concepts/data_model/value_store.rst:2
msgid "Data storage"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:7
msgid "Tuples"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:9
msgid "Tarantool operates data in the form of tuples."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:12
#: ../../doc/concepts/data_model/value_store.rst:391
msgid "tuple"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:14
msgid "A tuple is a group of data values in Tarantool's memory. Think of it as a \"database record\" or a \"row\". The data values in the tuple are called :term:`fields <field>`."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:18
msgid "When Tarantool returns a tuple value in the console, by default, it uses :ref:`YAML <interactive_console>` format, for example: ``[3, 'Ace of Base', 1993]``."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:22
msgid "Internally, Tarantool stores tuples as `MsgPack <https://en.wikipedia.org/wiki/MessagePack>`_ arrays."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:24
msgid "field"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:26
msgid "Fields are distinct data values, contained in a tuple. They play the same role as \"row columns\" or \"record fields\" in relational databases, with a few improvements:"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:30
msgid "fields can be composite structures, such as arrays or maps,"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:31
msgid "fields don't need to have names."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:33
msgid "A given tuple may have any number of fields, and the fields may be of different :ref:`types <index-box_data-types>`."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:36
msgid "The field's number is the identifier of the field. Numbers are counted from base 1 in Lua and other 1-based languages, or from base 0 in languages like PHP or C/C++. So, ``1`` or ``0`` can be used in some contexts to refer to the first field of a tuple."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:45
msgid "Spaces"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:47
msgid "Tarantool stores tuples in containers called spaces."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:50
msgid "space"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:52
msgid "In Tarantool, a space is a primary container that stores data. It is analogous to tables in relational databases. Spaces contain :term:`tuples <tuple>` -- the Tarantool name for database records. The number of tuples in a space is unlimited."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:58
msgid "At least one space is required to store data with Tarantool. Each space has the following attributes:"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:61
msgid "a unique **name** specified by the user,"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:62
msgid "a unique **numeric identifier** which can be specified by the user, but usually is assigned automatically by Tarantool,"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:64
msgid "an **engine**: *memtx* (default) --- in-memory engine, fast but limited in size, or *vinyl* --- on-disk engine for huge data sets."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:67
msgid "To be functional, a space also needs to have a :ref:`primary index <index-box_index>`. It can also have secondary indexes."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:73
msgid "Data types"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:75
msgid "Tarantool is both a database manager and an application server. Therefore a developer often deals with two type sets: the types of the programming language (such as Lua) and the types of the Tarantool storage format (MsgPack)."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:83
msgid "Lua versus MsgPack"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:91
msgid "Scalar / compound"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:92
msgid "MsgPack type"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:93
msgid "Lua type"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:94
msgid "Example value"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:95
#: ../../doc/concepts/data_model/value_store.rst:99
#: ../../doc/concepts/data_model/value_store.rst:103
#: ../../doc/concepts/data_model/value_store.rst:107
#: ../../doc/concepts/data_model/value_store.rst:111
#: ../../doc/concepts/data_model/value_store.rst:115
#: ../../doc/concepts/data_model/value_store.rst:119
#: ../../doc/concepts/data_model/value_store.rst:123
#: ../../doc/concepts/data_model/value_store.rst:127
#: ../../doc/concepts/data_model/value_store.rst:131
#: ../../doc/concepts/data_model/value_store.rst:135
#: ../../doc/concepts/data_model/value_store.rst:139
#: ../../doc/concepts/data_model/value_store.rst:401
msgid "scalar"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:96
#: ../../doc/concepts/data_model/value_store.rst:181
msgid "nil"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:97
#: ../../doc/concepts/data_model/value_store.rst:113
#: ../../doc/concepts/data_model/value_store.rst:121
#: ../../doc/concepts/data_model/value_store.rst:125
#: ../../doc/concepts/data_model/value_store.rst:129
#: ../../doc/concepts/data_model/value_store.rst:133
#: ../../doc/concepts/data_model/value_store.rst:137
#: ../../doc/concepts/data_model/value_store.rst:141
msgid "`cdata`_"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:98
msgid ":ref:`box.NULL <box-null>`"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:100
#: ../../doc/concepts/data_model/value_store.rst:195
msgid "boolean"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:101
msgid "`boolean`_"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:102
msgid "``true``"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:104
#: ../../doc/concepts/data_model/value_store.rst:327
msgid "string"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:105
msgid "`string`_"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:106
msgid "``'A B C'``"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:108
#: ../../doc/concepts/data_model/value_store.rst:112
#: ../../doc/concepts/data_model/value_store.rst:204
msgid "integer"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:109
#: ../../doc/concepts/data_model/value_store.rst:117
msgid "`number`_"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:110
#: ../../doc/concepts/data_model/value_store.rst:114
msgid "``12345``"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:116
#: ../../doc/concepts/data_model/value_store.rst:120
msgid "float64 (double)"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:118
#: ../../doc/concepts/data_model/value_store.rst:122
msgid "``1.2345``"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:124
msgid "binary"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:126
msgid "``[!!binary 3t7e]``"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:128
msgid "ext (for Tarantool ``decimal``)"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:130
msgid "``1.2``"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:132
msgid "ext (for Tarantool ``datetime``)"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:134
msgid "``'2021-08-20T16:21:25.122999906 Europe/Berlin'``"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:136
msgid "ext (for Tarantool ``interval``)"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:138
msgid "``+1 months, 1 days``"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:140
msgid "ext (for Tarantool ``uuid``)"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:142
msgid "``12a34b5c-de67-8f90-123g-h4567ab8901``"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:143
#: ../../doc/concepts/data_model/value_store.rst:147
#: ../../doc/concepts/data_model/value_store.rst:151
msgid "compound"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:144
msgid "map"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:145
msgid "`table`_ (with string keys)"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:146
msgid "``{'a': 5, 'b': 6}``"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:148
#: ../../doc/concepts/data_model/value_store.rst:152
#: ../../doc/concepts/data_model/value_store.rst:369
msgid "array"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:149
msgid "`table`_ (with integer keys)"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:150
msgid "``[1, 2, 3, 4, 5]``"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:153
msgid "tuple (`cdata`_)"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:154
msgid "``[12345, 'A B C']``"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:164
msgid "MsgPack values have variable lengths. So, for example, the smallest number requires only one byte, but the largest number requires nine bytes."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:170
msgid "The Lua `nil <http://www.lua.org/pil/2.1.html>`_ type is encoded as MsgPack ``nil`` but decoded as :ref:`msgpack.NULL <box-null>`."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:176
msgid "Field type details"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:183
msgid "In Lua, the nil type has only one possible value, also called ``nil``. Tarantool displays it as ``null`` when using the default :ref:`YAML <interactive_console>` format. Nil may be compared to values of any types with == (is-equal) or ~= (is-not-equal), but other comparison operations will not work. Nil may not be used in Lua tables; the workaround is to use :ref:`box.NULL <box-null>` because ``nil == box.NULL`` is true. **Example:** ``nil``."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:197
msgid "A boolean is either ``true`` or ``false``."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:199
msgid "**Example:** ``true``."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:206
msgid "The Tarantool integer type is for integers between -9223372036854775808 and 18446744073709551615, which is about 18 quintillion. This type corresponds to the number type in Lua and to the integer type in MsgPack."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:210
msgid "**Example:** ``-2^63``."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:215
msgid "unsigned"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:217
msgid "The Tarantool unsigned type is for integers between 0 and 18446744073709551615. So it is a subset of integer."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:220
msgid "**Example:** ``123456``."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:225
msgid "double"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:227
msgid "The double field type exists mainly to be equivalent to Tarantool/SQL's :ref:`DOUBLE data type <sql_data_type_double>`. In `msgpuck.h <https://github.com/rtsisyk/msgpuck>`_ (Tarantool's interface to MsgPack), the storage type is ``MP_DOUBLE`` and the size of the encoded value is always 9 bytes. In Lua, fields of the double type can only contain non-integer numeric values and cdata values with double floating-point numbers."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:235
msgid "**Examples:** ``1.234``, ``-44``, ``1.447e+44``."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:237
msgid "To avoid using the wrong kind of values inadvertently, use ``ffi.cast()`` when searching or changing ``double`` fields. For example, instead of :samp:`{space_object}:insert`:code:`{`:samp:`{value}`:code:`}` use ``ffi = require('ffi') ...`` :samp:`{space_object}:insert`:code:`({ffi.cast('double',`:samp:`{value}`:code:`)})`."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:245
msgid "**Example:**"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:247
msgid "s = box.schema.space.create('s', {format = {{'d', 'double'}}})\n"
"s:create_index('ii')\n"
"s:insert({1.1})\n"
"ffi = require('ffi')\n"
"s:insert({ffi.cast('double', 1)})\n"
"s:insert({ffi.cast('double', tonumber('123'))})\n"
"s:select(1.1)\n"
"s:select({ffi.cast('double', 1)})"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:258
msgid "Arithmetic with cdata ``double`` will not work reliably, so for Lua, it is better to use the ``number`` type. This warning does not apply for Tarantool/SQL because Tarantool/SQL does :ref:`implicit casting <sql_data_type_conversion>`."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:267
msgid "number"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:269
msgid "The Tarantool number field may have both integer and floating-point values, although in Lua a ``number`` is a double-precision floating-point."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:273
msgid "Tarantool will try to store a Lua number as floating-point if the value contains a decimal point or is very large (greater than 100 trillion = 1e14), otherwise Tarantool will store it as an integer. To ensure that even very large numbers are stored as integers, use the :ref:`tonumber64 <other-tonumber64>` function, or the LL (Long Long) suffix, or the ULL (Unsigned Long Long) suffix. Here are examples of numbers using regular notation, exponential notation, the ULL suffix and the ``tonumber64`` function: ``-55``, ``-2.7e+20``, ``100000000000000ULL``, ``tonumber64('18446744073709551615')``."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:283
msgid "You can also use the ``ffi`` module to specify a C type to cast the number to. In this case, the number will be stored as `cdata`_."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:289
msgid "decimal"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:291
msgid "The Tarantool decimal type is stored as a :ref:`MsgPack ext <msgpack_ext-decimal>` (Extension). Values with the decimal type are not floating-point values although they may contain decimal points. They are exact with up to 38 digits of precision."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:296
msgid "**Example:** a value returned by a function in the :ref:`decimal <decimal>` module."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:301
msgid "datetime"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:303
msgid "Introduced in :tarantool-release:`2.10.0`. The Tarantool ``datetime`` type facilitates operations with date and time, accounting for leap years or the varying number of days in a month. It is stored as a :ref:`MsgPack ext <msgpack_ext-datetime>` (Extension). Operations with this data type use code from `c-dt <https://github.com/tarantool/c-dt>`_, a third-party library."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:309
msgid "For more information, see :doc:`Module datetime </reference/reference_lua/datetime>`."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:314
msgid "interval"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:316
msgid "**Since:** :tarantool-release:`2.10.0`"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:318
msgid "The Tarantool ``interval`` type represents periods of time. They can be added to or subtracted from ``datetime`` values or each other. Operations with this data type use code from `c-dt <https://github.com/tarantool/c-dt>`_, a third-party library. The type is stored as a :ref:`MsgPack ext <msgpack_ext-interval>` (Extension). For more information, see :doc:`Module datetime </reference/reference_lua/datetime>`."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:329
msgid "A string is a variable-length sequence of bytes, usually represented with alphanumeric characters inside single quotes. In both Lua and MsgPack, strings are treated as binary data, with no attempts to determine a string's character set or to perform any string conversion -- unless there is an optional :ref:`collation <index-collation>`. So, usually, string sorting and comparison are done byte-by-byte, without any special collation rules applied. For example, numbers are ordered by their point on the number line, so 2345 is greater than 500; meanwhile, strings are ordered by the encoding of the first byte, then the encoding of the second byte, and so on, so ``'2345'`` is less than ``'500'``."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:340
msgid "**Example:** ``'A, B, C'``."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:345
msgid "bin"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:347
msgid "A bin (binary) value is not directly supported by Lua but there is a Tarantool type ``varbinary`` which is encoded as MsgPack binary. For an (advanced) example showing how to insert varbinary into a database, see the Cookbook Recipe for :ref:`ffi_varbinary_insert <cookbook-ffi_varbinary_insert>`."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:352
msgid "**Example:** ``\"\\65 \\66 \\67\"``."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:357
msgid "uuid"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:359
msgid "The Tarantool uuid type is used for :ref:`Universally Unique Identifiers <uuid-module>`. Since version :doc:`2.4.1 </release/2.4.1>` Tarantool stores ``uuid`` values as a :ref:`MsgPack ext <msgpack_ext-uuid>` (Extension)."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:364
msgid "**Example:** ``64d22e4d-ac92-4a23-899a-e5934af5479``."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:371
msgid "An array is represented in Lua with ``{...}`` (`braces <https://www.lua.org/pil/11.1.html>`_)."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:373
msgid "**Examples:** lists of numbers representing points in geometric figures: ``{10, 11}``, ``{3, 5, 9, 10}``."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:379
msgid "table"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:381
msgid "Lua tables with string keys are stored as MsgPack maps; Lua tables with integer keys starting with 1 are stored as MsgPack arrays. Nils may not be used in Lua tables; the workaround is to use :ref:`box.NULL <box-null>`."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:386
msgid "**Example:** a ``box.space.tester:select()`` request will return a Lua table."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:393
msgid "A tuple is a light reference to a MsgPack array stored in the database. It is a special type (cdata) to avoid conversion to a Lua table on retrieval. A few functions may return tables with multiple tuples. For tuple examples, see :ref:`box.tuple <box_tuple>`."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:403
msgid "Values in a scalar field can be boolean, integer, unsigned, double, number, decimal, string, uuid, or varbinary; but not array, map, or tuple."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:406
msgid "**Examples:** ``true``, ``1``, ``'xxx'``."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:411
msgid "any"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:413
msgid "Values in a field of this type can be boolean, integer, unsigned, double, number, decimal, string, uuid, varbinary, array, map, or tuple."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:416
msgid "**Examples:** ``true``, ``1``, ``'xxx'``, ``{box.NULL, 0}``."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:422
msgid "Examples"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:424
msgid "Examples of insert requests with different field types:"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:426
msgid "tarantool> box.space.K:insert{1,nil,true,'A B C',12345,1.2345}\n"
"---\n"
"- [1, null, true, 'A B C', 12345, 1.2345]\n"
"...\n"
"tarantool> box.space.K:insert{2,{['a']=5,['b']=6}}\n"
"---\n"
"- [2, {'a': 5, 'b': 6}]\n"
"...\n"
"tarantool> box.space.K:insert{3,{1,2,3,4,5}}\n"
"---\n"
"- [3, [1, 2, 3, 4, 5]]\n"
"..."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:442
msgid "Indexed field types"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:444
msgid "To learn more about what values can be stored in indexed fields, read the :ref:`Indexes <index-box_indexed-field-types>` section."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:450
msgid "Collations"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:452
msgid "By default, when Tarantool compares strings, it uses the so-called **binary collation**. It only considers the numeric value of each byte in a string. For example, the encoding of ``'A'`` (what used to be called the \"ASCII value\") is 65, the encoding of ``'B'`` is 66, and the encoding of ``'a'`` is 98. Therefore, if the string is encoded with ASCII or UTF-8, then ``'A' < 'B' < 'a'``."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:459
msgid "Binary collation is the best choice for fast deterministic simple maintenance and searching with Tarantool indexes."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:462
msgid "But if you want the ordering that you see in phone books and dictionaries, then you need Tarantool's optional collations, such as ``unicode`` and ``unicode_ci``, which allow for ``'a' < 'A' < 'B'`` and ``'a' == 'A' < 'B'`` respectively."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:467
msgid "**The unicode and unicode_ci optional collations** use the ordering according to the `Default Unicode Collation Element Table (DUCET) <http://unicode.org/reports/tr10/#Default_Unicode_Collation_Element_Table>`_ and the rules described in `Unicode® Technical Standard #10 Unicode Collation Algorithm (UTS #10 UCA) <http://unicode.org/reports/tr10>`_. The only difference between the two collations is about `weights <https://unicode.org/reports/tr10/#Weight_Level_Defn>`_:"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:474
msgid "``unicode`` collation observes L1, L2, and L3 weights (strength = 'tertiary');"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:475
msgid "``unicode_ci`` collation observes only L1 weights (strength = 'primary'), so for example ``'a' == 'A' == 'á' == 'Á'``."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:477
msgid "As an example, take some Russian words:"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:479
msgid "'ЕЛЕ'\n"
"'елейный'\n"
"'ёлка'\n"
"'еловый'\n"
"'елозить'\n"
"'Ёлочка'\n"
"'ёлочный'\n"
"'ЕЛь'\n"
"'ель'"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:491
msgid "...and show the difference in ordering and selecting by index:"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:493
msgid "with ``unicode`` collation:"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:495
msgid "tarantool> box.space.T:create_index('I', {parts = {{field = 1, type = 'str', collation='unicode'}}})\n"
"...\n"
"tarantool> box.space.T.index.I:select()\n"
"---\n"
"- - ['ЕЛЕ']\n"
"  - ['елейный']\n"
"  - ['ёлка']\n"
"  - ['еловый']\n"
"  - ['елозить']\n"
"  - ['Ёлочка']\n"
"  - ['ёлочный']\n"
"  - ['ель']\n"
"  - ['ЕЛь']\n"
"...\n"
"tarantool> box.space.T.index.I:select{'ЁлКа'}\n"
"---\n"
"- []\n"
"..."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:516
msgid "with ``unicode_ci`` collation:"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:518
msgid "tarantool> box.space.T:create_index('I', {parts = {{field = 1, type ='str', collation='unicode_ci'}}})\n"
"...\n"
"tarantool> box.space.T.index.I:select()\n"
"---\n"
"- - ['ЕЛЕ']\n"
"  - ['елейный']\n"
"  - ['ёлка']\n"
"  - ['еловый']\n"
"  - ['елозить']\n"
"  - ['Ёлочка']\n"
"  - ['ёлочный']\n"
"  - ['ЕЛь']\n"
"...\n"
"tarantool> box.space.T.index.I:select{'ЁлКа'}\n"
"---\n"
"- - ['ёлка']\n"
"..."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:539
msgid "In all, collation involves much more than these simple examples of upper case / lower case and accented / unaccented equivalence in alphabets. We also consider variations of the same character, non-alphabetic writing systems, and special rules that apply for combinations of characters."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:544
msgid "For English, Russian, and most other languages and use cases, use the \"unicode\" and \"unicode_ci\" collations. If you need Cyrillic letters 'Е' and 'Ё' to have the same level-1 weights, try the Kyrgyz collation."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:548
msgid "**The tailored optional collations**: for other languages, Tarantool supplies tailored collations for every modern language that has more than a million native speakers, and for specialized situations such as the difference between dictionary order and telephone book order. Run ``box.space._collation:select()`` to see the complete list."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:554
msgid "The tailored collation names have the form ``unicode_[language code]_[strength]``, where language code is a standard 2-character or 3-character language abbreviation, and strength is ``s1`` for \"primary strength\" (level-1 weights), ``s2`` for \"secondary\", ``s3`` for \"tertiary\". Tarantool uses the same language codes as the ones in the \"list of tailorable locales\" on man pages of `Ubuntu <http://manpages.ubuntu.com/manpages/bionic/man3/Unicode::Collate::Locale.3perl.html>`_ and `Fedora <http://www.polarhome.com/service/man/?qf=Unicode%3A%3ACollate%3A%3ALocale&af=0&tf=2&of=Fedora>`_. Charts explaining the precise differences from DUCET order are in the `Common Language Data Repository <https://unicode.org/cldr/charts/30/collation>`_."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:568
msgid "Constraints"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:570
msgid "For better control over stored data, Tarantool supports **constraints** – user-defined limitations on the values of certain fields or entire tuples. Together with data types, constraints allow limiting the ranges of available field values both syntactically and semantically."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:574
msgid "For example, the field ``age`` typically has the ``number`` type, so it cannot store strings or boolean values. However, it can still have values that don't make sense, such as negative numbers. This is where constraints come to help."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:581
msgid "Constraint types"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:583
msgid "There are two types of constraints in Tarantool:"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:585
msgid "*Field constraints* check that the value being assigned to a field satisfies a given condition. For example, ``age`` must be non-negative."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:588
msgid "*Tuple constraints* check complex conditions that can involve all fields of a tuple. For example, a tuple contains a date in three fields: ``year``, ``month``, and ``day``. You can validate ``day`` values based on the ``month`` value (and even ``year`` if you consider leap years)."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:593
msgid "Field constraints work faster, while tuple constraints allow implementing a wider range of limitations."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:599
msgid "Constraint functions"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:601
msgid "Constraints use stored Lua functions or :ref:`SQL expressions <sql_expressions>`, which must return ``true`` when the constraint is satisfied. Other return values (including ``nil``) and exceptions make the check fail and prevent tuple insertion or modification."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:605
msgid "To create a constraint function, call :ref:`box.schema.func.create() <box_schema-func_create>` with the function definition specified in the ``body`` attribute."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:607
msgid "Constraint functions take two parameters:"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:609
msgid "The tuple and the constraint name for tuple constraints."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:611
msgid "-- Define a tuple constraint function --\n"
"box.schema.func.create('check_person', {\n"
"    language = 'LUA',\n"
"    is_deterministic = true,\n"
"    body = 'function(t, c) return (t.age >= 0 and #(t.name) > 3) end'\n"
"})\n"
""
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:618
msgid "Tarantool doesn't check field names used in tuple constraint functions. If a field referenced in a tuple constraint gets renamed, this constraint will break and prevent further insertions and modifications in the space."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:622
msgid "The field value and the constraint name for field constraints."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:624
msgid "-- Define a field constraint function --\n"
"box.schema.func.create('check_age', {\n"
"    language = 'LUA',\n"
"    is_deterministic = true,\n"
"    body = 'function(f, c) return (f >= 0 and f < 150) end'\n"
"})\n"
""
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:632
msgid "Creating constraints"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:634
msgid "To create a constraint in a space, specify the corresponding function's name in the ``constraint`` parameter:"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:637
msgid "Tuple constraints: when creating or altering a space."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:639
msgid "-- Create a space with a tuple constraint --\n"
"customers = box.schema.space.create('customers', {constraint = 'check_person'})\n"
""
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:644
msgid "Field constraints: when setting up the space format."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:646
msgid "-- Specify format with a field constraint --\n"
"box.space.customers:format({\n"
"    {name = 'id', type = 'number'},\n"
"    {name = 'name', type = 'string'},\n"
"    {name = 'age',  type = 'number', constraint = 'check_age'},\n"
"})\n"
""
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:651
msgid "In both cases, ``constraint`` can contain multiple function names passed as a tuple. Each constraint can have an optional name:"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:654
msgid "-- Create one more tuple constraint --\n"
"box.schema.func.create('another_constraint',\n"
"    {language = 'LUA', is_deterministic = true, body = 'function(t, c) return true end'})\n"
"\n"
"-- Set two constraints with optional names --\n"
"box.space.customers:alter{\n"
"    constraint = { check1 = 'check_person', check2 = 'another_constraint'}\n"
"}\n"
""
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:661
msgid "When adding a constraint to an existing space with data, Tarantool checks it against the stored data. If there are fields or tuples that don't satisfy the constraint, it won't be applied to the space."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:669
msgid "Foreign keys"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:671
msgid "**Foreign keys** provide links between related fields, therefore maintaining the `referential integrity <https://en.wikipedia.org/wiki/Referential_integrity>`_ of the database."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:675
msgid "Fields can contain values that exist only in other fields. For example, a shop order always belongs to a customer. Hence, all values of the ``customer`` field of the ``orders`` space must also exist in the ``id`` field of the ``customers`` space. In this case, ``customers`` is a **parent space** for ``orders`` (its **child space**). When two spaces are linked with a foreign key, each time a tuple is inserted or modified in the child space, Tarantool checks that a corresponding value is present in the parent space."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:688
msgid "A foreign key can link a field to another field in the same space. In this case, the child field must be nullable. Otherwise, it is impossible to insert the first tuple in such a space because there is no parent tuple to which it can link."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:694
msgid "Foreign key types"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:696
msgid "There are two types of foreign keys in Tarantool:"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:698
msgid "*Field foreign keys* check that the value being assigned to a field is present in a particular field of another space. For example, the ``customer`` value in a tuple from the ``orders`` space must match an ``id`` stored in the ``customers`` space."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:702
msgid "*Tuple foreign keys* check that multiple fields of a tuple have a match in another space. For example, if the ``orders`` space has fields ``customer_id`` and ``customer_name``, a tuple foreign key can check that the ``customers`` space contains a tuple with both these values in the corresponding fields."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:707
msgid "Field foreign keys work faster while tuple foreign keys allow implementing more strict references."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:711
msgid "Creating foreign keys"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:716
msgid "For each foreign key, there must exist a parent space index that includes all its fields."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:719
msgid "To create a foreign key in a space, specify the parent space and linked fields in the ``foreign_key`` parameter. Parent spaces can be referenced by name or by id. When linking to the same space, the space can be omitted. Fields can be referenced by name or by number:"
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:723
msgid "Field foreign keys: when setting up the space format."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:725
msgid "-- Create a space with a field foreign key --\n"
"box.schema.space.create('orders')\n"
"\n"
"box.space.orders:format({\n"
"    {name = 'id',   type = 'number'},\n"
"    {name = 'customer_id', foreign_key = {space = 'customers', field = 'id'}},\n"
"    {name = 'price_total', type = 'number'},\n"
"})\n"
""
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:730
msgid "Tuple foreign keys: when creating or altering a space. Note that for foreign keys with multiple fields there must exist an index that includes all these fields."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:733
msgid "-- Create a space with a tuple foreign key --\n"
"box.schema.space.create(\"orders\", {\n"
"    foreign_key = {\n"
"        space = 'customers',\n"
"        field = {customer_id = 'id', customer_name = 'name'}\n"
"    }\n"
"})\n"
"\n"
"box.space.orders:format({\n"
"    {name = \"id\", type = \"number\"},\n"
"    {name = \"customer_id\" },\n"
"    {name = \"customer_name\"},\n"
"    {name = \"price_total\", type = \"number\"},\n"
"})\n"
""
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:740
msgid "Type can be omitted for foreign key fields because it's defined in the parent space."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:743
msgid "Foreign keys can have an optional name."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:745
msgid "-- Set a foreign key with an optional name --\n"
"box.space.orders:alter{\n"
"    foreign_key = {\n"
"        customer = {\n"
"            space = 'customers',\n"
"            field = { customer_id = 'id', customer_name = 'name'}\n"
"        }\n"
"    }\n"
"}\n"
""
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:750
msgid "A space can have multiple tuple foreign keys. In this case, they all must have names."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:752
msgid "-- Set two foreign keys: names are mandatory --\n"
"box.space.orders:alter{\n"
"    foreign_key = {\n"
"        customer = {\n"
"            space = 'customers',\n"
"            field = {customer_id = 'id', customer_name = 'name'}\n"
"        },\n"
"        item = {\n"
"            space = 'items',\n"
"            field = {item_id = 'id'}\n"
"        }\n"
"    }\n"
"}\n"
""
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:757
msgid "Tarantool performs integrity checks upon data modifications in parent spaces. If you try to remove a tuple referenced by a foreign key or an entire parent space, you will get an error."
msgstr ""

#: ../../doc/concepts/data_model/value_store.rst:763
msgid "Renaming parent spaces or referenced fields may break the corresponding foreign keys and prevent further insertions or modifications in the child spaces."
msgstr ""
