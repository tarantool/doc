# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 2.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-12 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/concepts/modules.rst:4
msgid "Modules"
msgstr ""

#: ../../doc/concepts/modules.rst:6
msgid "Any logic that is used in Tarantool can be packaged as an application (like a :ref:`Cartridge application <tarantool-cartridge>`) or a reusable **module**. A module is an optional library that enhances Tarantool functionality. It can be used by Tarantool applications or other modules. Modules allow for easier code management and hot code reload without restarting the Tarantool instance. Like applications, modules in Tarantool can be written in Lua, C, or C++. Lua modules are also referred to as \"rocks\"."
msgstr ""

#: ../../doc/concepts/modules.rst:14
msgid "For example, here is a Lua module named ``mymodule.lua`` that exports one function named ``myfun``:"
msgstr ""

#: ../../doc/concepts/modules.rst:17
msgid "local exports = {}\n"
"exports.myfun = function(input_string)\n"
"   print('Hello', input_string)\n"
"end\n"
"return exports"
msgstr ""

#: ../../doc/concepts/modules.rst:25
msgid "To launch the function ``myfun()`` -- from another module, from a Lua application, or from Tarantool itself, -- save this module as a file, then load this module with the ``require()`` directive and call the exported function."
msgstr ""

#: ../../doc/concepts/modules.rst:29
msgid "For example, here's a Lua application that uses ``myfun()`` from ``mymodule.lua``:"
msgstr ""

#: ../../doc/concepts/modules.rst:32
msgid "-- loading the module\n"
"local mymodule = require('mymodule')\n"
"\n"
"-- calling myfun() from within test()\n"
"local test = function()\n"
"  mymodule.myfun()\n"
"end"
msgstr ""

#: ../../doc/concepts/modules.rst:42
msgid "Tarantool provides an `extensive library <https://www.tarantool.io/en/download/rocks>`_ of compatible modules. Install them using Tarantool's CLI utility :ref:`tt <tt-cli>`. Some modules are also included in the Tarantool repository and can be installed via your operating system's package manager."
msgstr ""

#: ../../doc/concepts/modules.rst:47
msgid "Learn how to:"
msgstr ""

#: ../../doc/concepts/modules.rst:49
msgid ":ref:`install a module <app_server-installing_module>`"
msgstr ""

#: ../../doc/concepts/modules.rst:50
msgid ":ref:`contribute a module <app_server-contributing_module>`"
msgstr ""
