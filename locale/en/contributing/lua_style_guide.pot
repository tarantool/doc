# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-17 14:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/dev_guide/lua_style_guide.rst:4
msgid "Lua style guide"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:6
msgid "Inspiration:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:8
msgid "https://github.com/Olivine-Labs/lua-style-guide"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:9
msgid "http://dev.minetest.net/Lua_code_style_guidelines"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:10
msgid "http://sputnik.freewisdom.org/en/Coding_Standard"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:12
msgid "Programming style is art. There is some arbitrariness to the rules, but there are sound rationales for them. It is useful not only to provide sound advice on style but to understand the underlying rationale behind the style recommendations:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:17
msgid "http://mindprod.com/jgloss/unmain.html"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:18
msgid "http://www.oreilly.com/catalog/perlbp/"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:19
msgid "http://books.google.com/books?id=QnghAQAAIAAJ"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:21
msgid "The Zen of Python is good. Understand it and use wisely:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "Beautiful is better than ugly."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "Explicit is better than implicit."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "Simple is better than complex."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "Complex is better than complicated."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "Flat is better than nested."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "Sparse is better than dense."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "Readability counts."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "Special cases aren't special enough to break the rules."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "Although practicality beats purity."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "Errors should never pass silently."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "Unless explicitly silenced."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "In the face of ambiguity, refuse the temptation to guess."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "There should be one -- and preferably only one -- obvious way to do it."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "Although that way may not be obvious at first unless you're Dutch."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "Now is better than never."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "Although never is often better than *right* now."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "If the implementation is hard to explain, it's a bad idea."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "If the implementation is easy to explain, it may be a good idea."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "Namespaces are one honking great idea -- let's do more of those!"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:0
msgid "https://www.python.org/dev/peps/pep-0020/"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:47
msgid "Indentation and formatting"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:49
msgid "4 spaces instead of tabs. PIL suggests using two spaces, but a programmer looks at code from 4 to 8 hours a day, so it's simpler to distinguish indentation with 4 spaces. Why spaces? Similar representation everywhere."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:53
msgid "You can use vim modelines:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:55
msgid "-- vim:ts=4 ss=4 sw=4 expandtab"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:59
msgid "A file should ends w/ one newline symbol, but shouldn't ends w/ blank line (two newline symbols)."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:62
msgid "Every do/while/for/if/function should indent 4 spaces."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:64
msgid "Related ``or``/``and`` in ``if`` must be enclosed in the round brackets (). Example:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:66
msgid "-- Good\n"
"if (a == true and b == false) or (a == false and b == true) then\n"
"    <...>\n"
"end\n"
"\n"
"-- Bad\n"
"if a == true and b == false or a == false and b == true then\n"
"    <...>\n"
"end\n"
"\n"
"-- Good but not explicit\n"
"if a ^ b == true then\n"
"end"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:82
msgid "Type conversion"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:84
msgid "Do not use concatenation to convert to string or addition to convert to number (use ``tostring``/``tonumber`` instead):"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:87
msgid "-- Bad\n"
"local a = 123\n"
"a = a .. ''\n"
"\n"
"-- Good\n"
"local a = 123\n"
"a = tostring(a)\n"
"\n"
"-- Bad\n"
"local a = '123'\n"
"a = a + 5 -- 128\n"
"\n"
"-- Good\n"
"local a = '123'\n"
"a = tonumber(a) + 5 -- 128"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:105
msgid "Try to avoid multiple nested ``if``'s with common body:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:107
msgid "-- Good\n"
"if (a == true and b == false) or (a == false and b == true) then\n"
"    do_something()\n"
"end\n"
"\n"
"-- Bad\n"
"if a == true then\n"
"    if b == false then\n"
"        do_something()\n"
"    end\n"
"if b == true then\n"
"    if a == false then\n"
"        do_something()\n"
"    end\n"
"end"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:125
msgid "Avoid multiple concatenations in one statement, use ``string.format`` instead:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:127
msgid "-- Bad\n"
"function say_greeting(period, name)\n"
"    local a = \"good  \" .. period .. \", \" .. name\n"
"end\n"
"\n"
"-- Good\n"
"function say_greeting(period, name)\n"
"    local a = string.format(\"good %s, %s\", period, name)\n"
"end\n"
"\n"
"-- Best\n"
"local say_greeting_fmt = \"good %s, %s\"\n"
"function say_greeting(period, name)\n"
"    local a = say_greeting_fmt:format(period, name)\n"
"end"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:145
msgid "Use ``and``/``or`` for default variable values"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:147
msgid "-- Good\n"
"function(input)\n"
"    input = input or 'default_value'\n"
"end\n"
"\n"
"-- Ok but excessive\n"
"function(input)\n"
"    if input == nil then\n"
"        input = 'default_value'\n"
"    end\n"
"end"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:161
msgid "``if``'s and return statements:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:163
msgid "-- Good\n"
"if a == true then\n"
"    return do_something()\n"
"end\n"
"do_other_thing()\n"
"\n"
"-- Bad\n"
"if a == true then\n"
"    return do_something()\n"
"else\n"
"    do_other_thing()\n"
"end"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:178
msgid "Using spaces:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:180
msgid "Don't use spaces between function name and opening round bracket. Split arguments with one whitespace character:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:183
msgid "-- Bad\n"
"function name (arg1,arg2,...)\n"
"end\n"
"\n"
"-- Good\n"
"function name(arg1, arg2, ...)\n"
"end"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:193
msgid "Add a space after comment markers:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:195
msgid "while true do -- Inline comment\n"
"    -- Comment\n"
"    do_something()\n"
"end\n"
"--[[\n"
"Multiline\n"
"comment\n"
"]]--"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:206
msgid "Surrounding operators:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:208
msgid "-- Bad\n"
"local thing=1\n"
"thing = thing-1\n"
"thing = thing*1\n"
"thing = 'string'..'s'\n"
"\n"
"-- Good\n"
"local thing = 1\n"
"thing = thing - 1\n"
"thing = thing * 1\n"
"thing = 'string' .. 's'"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:222
msgid "Add a space after commas in tables:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:224
msgid "-- Bad\n"
"local thing = {1,2,3}\n"
"thing = {1 , 2 , 3}\n"
"thing = {1 ,2 ,3}\n"
"\n"
"-- Good\n"
"local thing = {1, 2, 3}"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:234
msgid "Add a space in map definitions after equals signs and commas:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:236
msgid "-- Bad\n"
"return {1,2,3,4}\n"
"return {\n"
"    key1 = val1,key2=val2\n"
"}\n"
"\n"
"-- Good\n"
"return {1, 2, 3, 4}\n"
"return {\n"
"    key1 = val1, key2 = val2,\n"
"    key3 = val3\n"
"}"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:251
msgid "You can also use alignment:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:253
msgid "return {\n"
"    long_key  = 'vaaaaalue',\n"
"    key       = 'val',\n"
"    something = 'even better'\n"
"}"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:262
msgid "Extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between several related one-liners (for example, a set of dummy implementations)."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:266
msgid "Use blank lines in functions (sparingly) to indicate logical sections:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:268
msgid "-- Bad\n"
"if thing ~= nil then\n"
"    -- ... stuff ...\n"
"end\n"
"function derp()\n"
"    -- ... stuff ...\n"
"end\n"
"local wat = 7\n"
"\n"
"-- Good\n"
"if thing ~= nil then\n"
"    -- ... stuff ...\n"
"end\n"
"\n"
"function derp()\n"
"    -- ... stuff ...\n"
"end\n"
"\n"
"local wat = 7"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:290
msgid "Delete whitespace at EOL (strongly forbidden. Use ``:s/\\s\\+$//gc`` in vim to delete them)."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:295
msgid "Avoid global variables"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:297
msgid "Avoid using global variables. In exceptional cases, start the name of such a variable with ``_G``, add a prefix, or add a table instead of a prefix:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:300
msgid "-- Very bad\n"
"function bad_global_example()\n"
"end\n"
"\n"
"function good_local_example()\n"
"end\n"
"-- Good\n"
"_G.modulename_good_local_example = good_local_example\n"
"\n"
"-- Better\n"
"_G.modulename = {}\n"
"_G.modulename.good_local_example = good_local_example"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:315
msgid "Always use a prefix to avoid name conflicts."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:318
msgid "Naming"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:320
msgid "Names of variables/\"objects\" and \"methods\"/functions: snake_case."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:321
msgid "Names of \"classes\": CamelCase."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:322
msgid "Private variables/methods (future properties) of objects start with underscores ``<object>._<name>``. Avoid syntax like ``local function private_methods(self) end``."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:325
msgid "Boolean: naming ``is_<...>``, ``isnt_<...>``, ``has_``, ``hasnt_`` is good style."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:326
msgid "For \"very local\" variables:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:328
msgid "``t`` is for tables"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:329
msgid "``i``, ``j`` are for indexing"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:330
msgid "``n`` is for counting"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:331
msgid "``k``, ``v`` is what you get out of ``pairs()`` (are acceptable, ``_`` if unused)"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:332
msgid "``i``, ``v`` is what you get out of ``ipairs()`` (are acceptable, ``_`` if unused)"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:333
msgid "``k``/``key`` is for table keys"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:334
msgid "``v``/``val``/``value`` is for values that are passed around"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:335
msgid "``x``/``y``/``z`` is for generic math quantities"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:336
msgid "``s``/``str``/``string`` is for strings"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:337
msgid "``c`` is for 1-char strings"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:338
msgid "``f``/``func``/``cb`` are for functions"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:339
msgid "``status, <rv>..`` or ``ok, <rv>..`` is what you get out of pcall/xpcall"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:340
msgid "``buf, sz`` is a (buffer, size) pair"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:341
msgid "``<name>_p`` is for pointers"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:342
msgid "``t0``.. is for timestamps"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:343
msgid "``err`` is for errors"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:345
msgid "Abbreviations are acceptable if they're very common or if they're unambiguous and you've documented them."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:346
msgid "Global variables are spelled in ALL_CAPS. If it's a system variable, it starts with an underscore (``_G``/``_VERSION``/..)."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:348
msgid "Modules are named in snake_case (avoid underscores and dashes): for example, 'luasql', not 'Lua-SQL'."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:350
msgid "``*_mt`` and ``*_methods`` defines metatable and methods table."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:353
msgid "Idioms and patterns"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:355
msgid "Always use round brackets in call of functions except multiple cases (common lua style idioms):"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:358
msgid "``*.cfg{ }`` functions (``box.cfg``/``memcached.cfg``/..)"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:359
msgid "``ffi.cdef[[ ]]`` function"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:361
msgid "Avoid the following constructions:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:363
msgid "<func>'<name>'. Strongly avoid require'..'."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:364
msgid "``function object:method() end``. Use ``function object.method(self) end`` instead."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:365
msgid "Semicolons as table separators. Only use commas."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:366
msgid "Semicolons at the end of line. Use semicolons only to split multiple statements on one line."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:367
msgid "Unnecessary function creation (closures/..)."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:369
msgid "Avoid implicit casting to boolean in ``if`` conditions like ``if x then`` or ``if not x then``. Such expressions will likely result in troubles with :doc:`box.NULL </reference/reference_lua/box_null/>`. Instead of those conditions, use ``if x ~= nil then`` and ``if x == nil then``."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:374
msgid "Modules"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:376
msgid "Don't start modules with license/authors/descriptions, you can write it in LICENSE/AUTHORS/README files. To write modules, use one of the two patterns (don't use ``modules()``):"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:380
msgid "local M = {}\n"
"\n"
"function M.foo()\n"
"    ...\n"
"end\n"
"\n"
"function M.bar()\n"
"    ...\n"
"end\n"
"\n"
"return M"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:394
msgid "or"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:396
msgid "local function foo()\n"
"    ...\n"
"end\n"
"\n"
"local function bar()\n"
"    ...\n"
"end\n"
"\n"
"return {\n"
"    foo = foo,\n"
"    bar = bar,\n"
"}"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:412
msgid "Commenting"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:414
msgid "Don't forget to comment your Lua code. You shouldn't comment Lua syntax (assume that the reader already knows the Lua language). Instead, tell about functions/variable names/etc."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:417
msgid "Start a sentence with a capital letter and end with a period."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:419
msgid "Multiline comments: use matching (``--[[ ]]--``) instead of simple (``--[[ ]]``)."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:422
msgid "Public function comments:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:424
msgid "--- Copy any table (shallow and deep version).\n"
"-- * deepcopy: copies all levels\n"
"-- * shallowcopy: copies only first level\n"
"-- Supports __copy metamethod for copying custom tables with metatables.\n"
"-- @function gsplit\n"
"-- @table         inp  original table\n"
"-- @shallow[opt]  sep  flag for shallow copy\n"
"-- @returns            table (copy)"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:436
msgid "Testing"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:438
msgid "Use the ``tap`` module for writing efficient tests. Example of a test file:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:440
msgid "#!/usr/bin/env tarantool\n"
"\n"
"local test = require('tap').test('table')\n"
"test:plan(31)\n"
"\n"
"do\n"
"    -- Check basic table.copy (deepcopy).\n"
"    local example_table = {\n"
"        { 1, 2, 3 },\n"
"        { \"help, I'm very nested\", { { { } } } }\n"
"    }\n"
"\n"
"    local copy_table = table.copy(example_table)\n"
"\n"
"    test:is_deeply(\n"
"            example_table,\n"
"            copy_table,\n"
"            \"checking, that deepcopy behaves ok\"\n"
"    )\n"
"    test:isnt(\n"
"            example_table,\n"
"            copy_table,\n"
"            \"checking, that tables are different\"\n"
"    )\n"
"    test:isnt(\n"
"            example_table[1],\n"
"            copy_table[1],\n"
"            \"checking, that tables are different\"\n"
"    )\n"
"    test:isnt(\n"
"            example_table[2],\n"
"            copy_table[2],\n"
"            \"checking, that tables are different\"\n"
"    )\n"
"    test:isnt(\n"
"            example_table[2][2],\n"
"            copy_table[2][2],\n"
"            \"checking, that tables are different\"\n"
"    )\n"
"    test:isnt(\n"
"            example_table[2][2][1],\n"
"            copy_table[2][2][1],\n"
"            \"checking, that tables are different\"\n"
"    )\n"
"end\n"
"\n"
"<...>\n"
"\n"
"os.exit(test:check() and 0 or 1)"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:492
msgid "When you test your code, the output will be something like this:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:494
msgid "TAP version 13\n"
"1..31\n"
"ok - checking, that deepcopy behaves ok\n"
"ok - checking, that tables are different\n"
"ok - checking, that tables are different\n"
"ok - checking, that tables are different\n"
"ok - checking, that tables are different\n"
"ok - checking, that tables are different\n"
"..."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:508
msgid "Error handling"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:510
msgid "Be generous in what you accept and strict in what you return."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:512
msgid "With error handling, this means that you must provide an error object as the second multi-return value in case of error. The error object can be a string, a Lua table, cdata, or userdata. In the latter three cases, it must have a ``__tostring`` metamethod defined."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:517
msgid "In case of error, use ``nil`` for the first return value. This makes the error hard to ignore."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:520
msgid "When checking function return values, check the first argument first. If it's ``nil``, look for error in the second argument:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:523
msgid "local data, err = foo()\n"
"if data == nil then\n"
"    return nil, err\n"
"end\n"
"return bar(data)"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:531
msgid "Unless the performance of your code is paramount, try to avoid using more than two return values."
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:534
msgid "In rare cases, you may want to return ``nil`` as a legal return value. In this case, it's OK to check for error first and then for return:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:537
msgid "local data, err = foo()\n"
"if err == nil then\n"
"    return data\n"
"end\n"
"return nil, err"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:546
msgid "luacheck"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:548
msgid "To check the code style, Tarantool uses ``luacheck``. It analyses different aspects of code, such as unused variables, and sometimes it checks more aspects than needed. So there is an agreement to ignore some warnings generated by ``luacheck``:"
msgstr ""

#: ../../doc/dev_guide/lua_style_guide.rst:552
msgid "\"212/self\",   -- Unused argument <self>.\n"
"\"411\",        -- Redefining a local variable.\n"
"\"421\",        -- Shadowing a local variable.\n"
"\"431\",        -- Shadowing an upvalue.\n"
"\"432\",        -- Shadowing an upvalue argument."
msgstr ""
