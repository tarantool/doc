
msgid "Building from source"
msgstr ""

msgid "For downloading Tarantool source and building it, the platforms can differ and the preferences can differ. But strategically the steps are always the same."
msgstr ""

msgid "Get tools and libraries that will be necessary for building and testing."
msgstr ""

msgid "The absolutely necessary ones are:"
msgstr ""

msgid "A program for downloading source repositories. |br| For all platforms, this is ``git``. It allows downloading the latest complete set of source files from the Tarantool repository on GitHub."
msgstr ""

msgid "A C/C++ compiler. |br| Ordinarily, this is ``gcc`` and ``g++`` version 4.6 or later. On Mac OS X, this is ``Clang`` version 3.2+."
msgstr ""

msgid "A program for managing the build process. |br| For all platforms, this is ``CMake`` version 2.8+."
msgstr ""

msgid "A build automation tool. |br| For all platforms this is ``GNU Make``."
msgstr ""

msgid "`ReadLine <http://www.gnu.org/software/readline/>`_ library, any version"
msgstr ""

msgid "`ncurses <https://www.gnu.org/software/ncurses/>`_ library, any version"
msgstr ""

msgid "`OpenSSL <https://www.openssl.org>`_ library, version 1.0.1+"
msgstr ""

msgid "`ICU <http://site.icu-project.org/download>`_ library, recent version"
msgstr ""

msgid "`Autoconf <https://www.gnu.org/software/autoconf/>`_ library, any version"
msgstr ""

msgid "`Automake <https://www.gnu.org/software/automake/>`_ library, any version"
msgstr ""

msgid "`Libtool <https://www.gnu.org/software/libtool/>`_ library, any version"
msgstr ""

msgid "`Zlib-devel <https://www.zlib.net/>`_ library, any version"
msgstr ""

msgid "Python and modules. |br| Python interpreter is not necessary for building Tarantool itself, unless you intend to use the \"Run the test suite\" option in step 5. For all platforms, this is ``python`` version 2.7+ (but not 3.x). You need the following Python modules:"
msgstr ""

msgid "`pyyaml <https://pypi.python.org/pypi/PyYAML>`_ version 3.10"
msgstr ""

msgid "`argparse <https://pypi.python.org/pypi/argparse>`_ version 1.1"
msgstr ""

msgid "`msgpack-python <https://pypi.python.org/pypi/msgpack-python>`_ version 0.4.6"
msgstr ""

msgid "`gevent <https://pypi.python.org/pypi/gevent>`_ version 1.1.2"
msgstr ""

msgid "`six <https://pypi.python.org/pypi/six>`_ version 1.8.0"
msgstr ""

msgid "To install all required dependencies, follow the instructions for your OS:"
msgstr ""

msgid "For Debian/Ubuntu, say:"
msgstr ""

msgid "$ apt install -y build-essential cmake make coreutils sed \\\n"
"      autoconf automake libtool zlib1g-dev \\\n"
"      libreadline-dev libncurses5-dev libssl-dev \\\n"
"      libunwind-dev libicu-dev \\\n"
"      python python-pip python-setuptools python-dev \\\n"
"      python-msgpack python-yaml python-argparse python-six python-gevent"
msgstr ""

msgid "For RHEL/CentOS (versions under 8)/Fedora, say:"
msgstr ""

msgid "$ yum install -y gcc gcc-c++ cmake make coreutils sed \\\n"
"      autoconf automake libtool zlib-devel \\\n"
"      readline-devel ncurses-devel openssl-devel \\\n"
"      libunwind-devel libicu-devel \\\n"
"      python python-pip python-setuptools python-devel \\\n"
"      python-msgpack python-yaml python-argparse python-six python-gevent"
msgstr ""

msgid "For CentOS 8, say:"
msgstr ""

msgid "$ yum install epel-release\n"
"$ curl -s https://packagecloud.io/install/repositories/packpack/backports/script.rpm.sh | sudo bash\n"
"$ yum install -y gcc gcc-c++ cmake make coreutils sed \\\n"
"      autoconf automake libtool zlib-devel \\\n"
"      readline-devel ncurses-devel openssl-devel \\\n"
"      libunwind-devel libicu-devel \\\n"
"      python2 python2-pip python2-setuptools python2-devel \\\n"
"      python2-yaml python2-six"
msgstr ""

msgid "For Mac OS X (instructions below are for OS X El Capitan):"
msgstr ""

msgid "If you're using Homebrew as your package manager, say:"
msgstr ""

msgid "$ brew install cmake make autoconf binutils zlib \\\n"
"       autoconf automake libtool \\\n"
"       readline ncurses openssl libunwind-headers icu4c \\\n"
"       && pip install python-daemon \\\n"
"       msgpack-python pyyaml configargparse six gevent"
msgstr ""

msgid "You can not install `zlib-devel <https://www.zlib.net/>`_  package this way."
msgstr ""

msgid "Alternatively, download Apple's default Xcode toolset:"
msgstr ""

msgid "$ xcode-select --install\n"
"$ xcode-select -switch /Applications/Xcode.app/Contents/Developer"
msgstr ""

msgid "For FreeBSD (instructions below are for FreeBSD 10.1+ release), say:"
msgstr ""

msgid "$ pkg install -y sudo git cmake gmake gcc coreutils \\\n"
"      autoconf automake libtool \\\n"
"      readline ncurses openssl libunwind icu \\\n"
"      python27 py27-pip py27-setuptools py27-daemon \\\n"
"      py27-msgpack py27-yaml py27-argparse py27-six py27-gevent"
msgstr ""

msgid "If some Python modules are not available in a repository, it is best to set up the modules by getting a tarball and doing the setup with ``python setup.py`` like this:"
msgstr ""

msgid "$ # On some machines, this initial command may be necessary:\n"
"$ wget https://bootstrap.pypa.io/ez_setup.py -O - | sudo python\n"
"\n"
"$ # Python module for parsing YAML (pyYAML), for test suite:\n"
"$ # (If wget fails, check at http://pyyaml.org/wiki/PyYAML\n"
"$ # what the current version is.)\n"
"$ cd ~\n"
"$ wget http://pyyaml.org/download/pyyaml/PyYAML-3.10.tar.gz\n"
"$ tar -xzf PyYAML-3.10.tar.gz\n"
"$ cd PyYAML-3.10\n"
"$ sudo python setup.py install"
msgstr ""

msgid "Finally, use Python ``pip`` to bring in Python packages that may not be up-to-date in the distro repositories. (On CentOS 7, it will be necessary to install ``pip`` first, with :code:`sudo yum install epel-release` followed by :code:`sudo yum install python-pip`.)"
msgstr ""

msgid "$ pip install -r \\\n"
"      https://raw.githubusercontent.com/tarantool/test-run/master/requirements.txt \\\n"
"      --user"
msgstr ""

msgid "This step is only necessary once, the first time you do a download."
msgstr ""

msgid "Use ``git`` to download the latest Tarantool source code from the GitHub repository ``tarantool/tarantool``, branch 1.10, to a local directory named ``~/tarantool``, for example:"
msgstr ""

msgid "$ git clone --recursive https://github.com/tarantool/tarantool.git -b 1.10 ~/tarantool"
msgstr ""

msgid "On rare occasions, the submodules need to be updated again with the command:"
msgstr ""

msgid "cd ~/tarantool\n"
"$ git submodule update --init --recursive"
msgstr ""

msgid "Use CMake to initiate the build."
msgstr ""

msgid "$ cd ~/tarantool\n"
"$ make clean         # unnecessary, added for good luck\n"
"$ rm CMakeCache.txt  # unnecessary, added for good luck\n"
"$ cmake .            # start initiating with build type=Debug"
msgstr ""

msgid "On some platforms, it may be necessary to specify the C and C++ versions, for example:"
msgstr ""

msgid "$ CC=gcc-4.8 CXX=g++-4.8 cmake ."
msgstr ""

msgid "The CMake option for specifying build type is :samp:`-DCMAKE_BUILD_TYPE={type}`, where :samp:`{type}` can be:"
msgstr ""

msgid "``Debug`` -- used by project maintainers"
msgstr ""

msgid "``Release`` -- used only if the highest performance is required"
msgstr ""

msgid "``RelWithDebInfo`` -- used for production, also provides debugging capabilities"
msgstr ""

msgid "The CMake option for hinting that the result will be distributed is :code:`-DENABLE_DIST=ON`. If this option is on, then later ``make install`` will install ``tarantoolctl`` files in addition to ``tarantool`` files."
msgstr ""

msgid "Use ``make`` to complete the build."
msgstr ""

msgid "$ make"
msgstr ""

msgid "For FreeBSD, use ``gmake`` instead."
msgstr ""

msgid "This creates the 'tarantool' executable in the ``src/`` directory."
msgstr ""

msgid "If you encounter a ``curl`` or ``OpenSSL`` errors on this step try installing ``openssl111`` package of the specific ``1.1.1d`` version."
msgstr ""

msgid "Next, it's highly recommended to say ``make install`` to install Tarantool to the ``/usr/local`` directory and keep your system clean. However, it is possible to run the Tarantool executable without installation."
msgstr ""

msgid "Run the test suite."
msgstr ""

msgid "This step is optional. Tarantool's developers always run the test suite before they publish new versions. You should run the test suite too, if you make any changes in the code. Assuming you downloaded to ``~/tarantool``, the principal steps are:"
msgstr ""

msgid "$ # make a subdirectory named `bin`\n"
"$ mkdir ~/tarantool/bin\n"
"\n"
"$ # link Python to bin (this may require superuser privileges)\n"
"$ ln /usr/bin/python ~/tarantool/bin/python\n"
"\n"
"$ # get to the test subdirectory\n"
"$ cd ~/tarantool/test\n"
"\n"
"$ # run tests using Python\n"
"$ PATH=~/tarantool/bin:$PATH ./test-run.py"
msgstr ""

msgid "The output should contain reassuring reports, for example:"
msgstr ""

msgid "======================================================================\n"
"TEST                                            RESULT\n"
"------------------------------------------------------------\n"
"box/bad_trigger.test.py                         [ pass ]\n"
"box/call.test.py                                [ pass ]\n"
"box/iproto.test.py                              [ pass ]\n"
"box/xlog.test.py                                [ pass ]\n"
"box/admin.test.lua                              [ pass ]\n"
"box/auth_access.test.lua                        [ pass ]\n"
"... etc."
msgstr ""

msgid "To prevent later confusion, clean up what's in the ``bin`` subdirectory:"
msgstr ""

msgid "$ rm ~/tarantool/bin/python\n"
"$ rmdir ~/tarantool/bin"
msgstr ""

msgid "Make RPM and Debian packages."
msgstr ""

msgid "This step is optional. It's only for people who want to redistribute Tarantool. We highly recommend to use official packages from the `tarantool.org <https://tarantool.org/download.html>`_ web-site. However, you can build RPM and Debian packages using `PackPack <https://github.com/packpack/packpack>`_ or using the ``dpkg-buildpackage`` or ``rpmbuild`` tools. Please consult ``dpkg`` or ``rpmbuild`` documentation for details."
msgstr ""

msgid "Verify your Tarantool installation."
msgstr ""

msgid "$ # if you installed tarantool locally after build\n"
"$ tarantool\n"
"$ # - OR -\n"
"$ # if you didn't install tarantool locally after build\n"
"$ ./src/tarantool"
msgstr ""

msgid "This starts Tarantool in the interactive mode."
msgstr ""

msgid "See also:"
msgstr ""

msgid "`Tarantool README.md <https://github.com/tarantool/tarantool/blob/1.10/README.md>`_"
msgstr ""

