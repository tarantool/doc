
msgid "Developer guidelines"
msgstr ""

msgid "How to work on a bug"
msgstr ""

msgid "Any defect, even minor, if it changes the user-visible server behavior, needs a bug report. Report a bug at http://github.com/tarantool/tarantool/issues."
msgstr ""

msgid "When reporting a bug, try to come up with a test case right away. Set the current maintenance milestone for the bug fix, and specify the series. Assign the bug to yourself. Put the status to 'In progress' Once the patch is ready, put the bug the bug to 'In review' and solicit a review for the fix."
msgstr ""

msgid "Once there is a positive code review, push the patch and set the status to 'Closed'"
msgstr ""

msgid "Patches for bugs should contain a reference to the respective Launchpad bug page or at least bug id. Each patch should have a test, unless coming up with one is difficult in the current framework, in which case QA should be alerted."
msgstr ""

msgid "There are two things you need to do when your patch makes it into the master:"
msgstr ""

msgid "put the bug to 'fix committed',"
msgstr ""

msgid "delete the remote branch."
msgstr ""

msgid "How to write a commit message"
msgstr ""

msgid "Any commit needs a helpful message. Mind the following guidelines when committing to any of Tarantool repositories at GitHub."
msgstr ""

msgid "Separate subject from body with a blank line."
msgstr ""

msgid "Try to limit the subject line to **50 characters** or so."
msgstr ""

msgid "Start the subject line with a capital letter unless it prefixed with a subsystem name and semicolon:"
msgstr ""

msgid "memtx:"
msgstr ""

msgid "vinyl:"
msgstr ""

msgid "xlog:"
msgstr ""

msgid "replication:"
msgstr ""

msgid "recovery:"
msgstr ""

msgid "iproto:"
msgstr ""

msgid "net.box:"
msgstr ""

msgid "lua:"
msgstr ""

msgid "sql:"
msgstr ""

msgid "Do not end the subject line with a period."
msgstr ""

msgid "Do not put \"gh-xx\", \"closes #xxx\" to the subject line."
msgstr ""

msgid "Use the imperative mood in the subject line. A properly formed Git commit subject line should always be able to complete the following sentence: \"If applied, this commit will */your subject line here/*\"."
msgstr ""

msgid "Wrap the body to **72 characters** or so."
msgstr ""

msgid "Use the body to explain **what and why** vs. how."
msgstr ""

msgid "Link GitHub issues on the lasts lines (`see how <https://help.github.com/articles/closing-issues-via-commit-messages>`_)."
msgstr ""

msgid "Use your real name and real email address. For Tarantool team members, **@tarantool.org** email is preferred, but not mandatory."
msgstr ""

msgid "A template:"
msgstr ""

msgid "Summarize changes in 50 characters or less\n"
"\n"
"More detailed explanatory text, if necessary.\n"
"Wrap it to 72 characters or so.\n"
"In some contexts, the first line is treated as the subject of the\n"
"commit, and the rest of the text as the body.\n"
"The blank line separating the summary from the body is critical\n"
"(unless you omit the body entirely); various tools like `log`,\n"
"`shortlog` and `rebase` can get confused if you run the two together.\n"
"\n"
"Explain the problem that this commit is solving. Focus on why you\n"
"are making this change as opposed to how (the code explains that).\n"
"Are there side effects or other unintuitive consequences of this\n"
"change? Here's the place to explain them.\n"
"\n"
"Further paragraphs come after blank lines.\n"
"\n"
"- Bullet points are okay, too.\n"
"\n"
"- Typically a hyphen or asterisk is used for the bullet, preceded\n"
"  by a single space, with blank lines in between, but conventions\n"
"  vary here.\n"
"\n"
"Fixes: #123\n"
"Closes: #456\n"
"Needed for: #859\n"
"See also: #343, #789"
msgstr ""

msgid "Some real-world examples:"
msgstr ""

msgid "`tarantool/tarantool@2993a75 <https://github.com/tarantool/tarantool/commit/2993a75858352f101deb4a15cefd497ae6a78cf7>`_"
msgstr ""

msgid "`tarantool/tarantool@ccacba2 <https://github.com/tarantool/tarantool/commit/ccacba28f813fb99fd9eaf07fb41bf604dd341bc>`_"
msgstr ""

msgid "`tarantool/tarantool@386df3d <https://github.com/tarantool/tarantool/commit/386df3d3eb9c5239fc83fd4dd3292d1b49446b89>`_"
msgstr ""

msgid "`tarantool/tarantool@076a842 <https://github.com/tarantool/tarantool/commit/076a842011e09c84c25fb5e68f1b23c9917a3750>`_"
msgstr ""

msgid "Based on [1_] and [2_]."
msgstr ""

msgid "How to submit a patch for review"
msgstr ""

msgid "We don't accept GitHub pull requests. Instead, all patches should be sent as plain-text messages to tarantool-patches@dev.tarantool.org. Please subscribe to our mailing list at https://lists.tarantool.org/mailman/listinfo/tarantool-patches to ensure that your messages are added to the archive."
msgstr ""

msgid "**Preparing a patch**"
msgstr ""

msgid "Once you have committed a patch to your local git repository, you can submit it for review."
msgstr ""

msgid "To prepare an email, use ``git format-patch`` command:"
msgstr ""

msgid "$ git format-patch -1"
msgstr ""

msgid "It will format the commit at the top of your local git repository as a plain-text email and write it to a file in the current directory. The file name will look like ``0001-your-commit-subject-line.patch``. To specify a different directory, use ``-o`` option:"
msgstr ""

msgid "$ git format-patch -1 -o ~/patches-to-send"
msgstr ""

msgid "Once the patch has been formatted, you can view and edit it with your favorite text editor (after all, it is a plain-text file!). We strongly recommend adding:"
msgstr ""

msgid "a hyperlink to the branch where this patch can be found at GitHub, and"
msgstr ""

msgid "a hyperlink to the GitHub issue your patch is supposed to fix, if any."
msgstr ""

msgid "If there is just one patch, the change log should go right after ``---`` in the message body (it will be ignored by ``git am`` then)."
msgstr ""

msgid "If there are multiple patches you want to submit in one go (e.g. this is a big feature which requires some preparatory patches to be committed first), you should send each patch in a separate email in reply to a cover letter. To format a patch series accordingly, pass the following options to ``git format-patch``:"
msgstr ""

msgid "$ git format-patch --cover-letter --thread=shallow HEAD~2"
msgstr ""

msgid "where:"
msgstr ""

msgid "``--cover-letter`` will make ``git format-patch`` generate a cover letter;"
msgstr ""

msgid "``--thread=shallow`` will mark each formatted patch email to be sent in reply to the cover letter;"
msgstr ""

msgid "``HEAD~2`` (we now use it instead of ``-1``) will make ``git format-patch`` format the first two patches at the top of your local git branch instead of just one. To format three patches, use ``HEAD~3``, and so forth."
msgstr ""

msgid "After the command has been successfully executed, you will find all your patches formatted as separate emails in your current directory (or in the directory specified via ``-o`` option):"
msgstr ""

msgid "0000-cover-letter.patch\n"
"0001-first-commit.patch\n"
"0002-second-commit.patch\n"
"..."
msgstr ""

msgid "The cover letter will have BLURB in its subject and body. You'll have to edit it before submitting (again, it is a plain text file). Please write:"
msgstr ""

msgid "a short series description in the subject line;"
msgstr ""

msgid "a few words about each patch of the series in the body."
msgstr ""

msgid "And don't forget to add hyperlinks to the GitHub issue and branch where your series can be found. In this case you don't need to put links or any additional information to each individual email -- the cover letter will cover everything."
msgstr ""

msgid "To omit ``--cover-letter`` and ``--thread=shallow`` options, you can add the following lines to your gitconfig:"
msgstr ""

msgid "[format]\n"
"    thread = shallow\n"
"    coverLetter = auto"
msgstr ""

msgid "**Sending a patch**"
msgstr ""

msgid "Once you have formatted your patches, they are ready to be sent via email. Of course, you can send them with your favorite mail agent, but it is much easier to use ``git send-email`` for this. Before using this command, you need to configure it."
msgstr ""

msgid "If you use a GMail account, add the following code to your ``.gitconfig``:"
msgstr ""

msgid "[sendemail]\n"
"    smtpencryption = tls\n"
"    smtpserver = smtp.gmail.com\n"
"    smtpserverport = 587\n"
"    smtpuser = your.name@gmail.com\n"
"    smtppass = topsecret"
msgstr ""

msgid "For mail.ru users, the configuration will be slightly different:"
msgstr ""

msgid "[sendemail]\n"
"    smtpencryption = ssl\n"
"    smtpserver = smtp.mail.ru\n"
"    smtpserverport = 465\n"
"    smtpuser = your.name@mail.ru\n"
"    smtppass = topsecret"
msgstr ""

msgid "If your email account is hosted by another service, consult your service provider about your SMTP settings."
msgstr ""

msgid "Once configured, use the following command to send your patches:"
msgstr ""

msgid "$ git send-email --to tarantool-patches@dev.tarantool.org 00*"
msgstr ""

msgid "(``00*`` wildcard will be expanded by your shell to the list of patches generated at the previous step.)"
msgstr ""

msgid "If you want someone in particular to review your patch, add them to the list of recipients by passing ``--to`` or ``--cc`` once per each recipient."
msgstr ""

msgid "It is useful to check that ``git send-email`` will work as expected without sending anything to the world. Use ``--dry-run`` option for that."
msgstr ""

msgid "**Review process**"
msgstr ""

msgid "After having sent your patches, you just wait for a review. The reviewer will send their comments back to you in reply to the email that contains the patch that in their opinion needs to be fixed."
msgstr ""

msgid "Upon receiving an email with review remarks, you carefully read it and reply about whether you agree or disagree with. Please note that we use the interleaved reply style (aka \"inline reply\") for communications over email."
msgstr ""

msgid "Upon reaching an agreement, you send a fixed patch in reply to the email that ended the discussion. To send a patch, you can either attach a plain diff (created by ``git diff`` or ``git format-patch``) to email and send it with your favorite mail agent, or use ``--in-reply-to`` option of ``git send-email`` command."
msgstr ""

msgid "If you feel that the accumulated change set is large enough to send the whole series anew and restart the review process in a different thread, you generate the patch email(s) again with ``git format-patch``, this time adding v2 (then v3, v4, and so forth) to the subject and a change log to the message body. To modify the subject line accordingly, use the ``--subject-prefix`` option to ``git format-patch`` command:"
msgstr ""

msgid "$ git format-patch -1 --subject-prefix='PATCH v2'"
msgstr ""

msgid "To add a change log, open the generated email with you favorite text editor and edit the message body. If there is just one patch, the change log should go right after ``---`` in the message body (it will be ignored by ``git am`` then). If there is more than one patch, the change log should be added to the cover letter. Here is an example of a good change log:"
msgstr ""

msgid "Changes in v3:\n"
"  - Fixed comments as per review by Alex\n"
"  - Added more tests\n"
"Changes in v2:\n"
"  - Fixed a crash if the user passes invalid options\n"
"  - Fixed a memory leak at exit"
msgstr ""

msgid "It is also a good practice to add a reference to the previous version of your patch set (via a hyperlink or message id)."
msgstr ""

msgid "Do not disagree with the reviewer without providing a good argument supporting your point of view."
msgstr ""

msgid "Do not take every word the reviewer says for granted. Reviewers are humans too, hence fallible."
msgstr ""

msgid "Do not expect that the reviewer will tell you how to do your thing. It is not their job. The reviewer might suggest alternative ways to tackle the problem, but in general it is your responsibility."
msgstr ""

msgid "Do not forget to update your remote git branch every time you send a new version of your patch."
msgstr ""

msgid "Do follow the guidelines above. If you do not comply, your patches are likely to be silently ignored."
msgstr ""

