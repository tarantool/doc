
msgid "Lua Style Guide"
msgstr ""

msgid "Inspiration:"
msgstr ""

msgid "https://github.com/Olivine-Labs/lua-style-guide"
msgstr ""

msgid "http://dev.minetest.net/Lua_code_style_guidelines"
msgstr ""

msgid "http://sputnik.freewisdom.org/en/Coding_Standard"
msgstr ""

msgid "Programming style is an art. There is some arbitrariness to the rules, but there are sound rationales for them. It is useful not only to provide sound advice on style but to understand the underlying rationale and human aspect of why the style recommendations are formed:"
msgstr ""

msgid "http://mindprod.com/jgloss/unmain.html"
msgstr ""

msgid "http://www.oreilly.com/catalog/perlbp/"
msgstr ""

msgid "http://books.google.com/books?id=QnghAQAAIAAJ"
msgstr ""

msgid "Zen of Python is good; understand it and use wisely:"
msgstr ""

msgid "Beautiful is better than ugly."
msgstr ""

msgid "Explicit is better than implicit."
msgstr ""

msgid "Simple is better than complex."
msgstr ""

msgid "Complex is better than complicated."
msgstr ""

msgid "Flat is better than nested."
msgstr ""

msgid "Sparse is better than dense."
msgstr ""

msgid "Readability counts."
msgstr ""

msgid "Special cases aren't special enough to break the rules."
msgstr ""

msgid "Although practicality beats purity."
msgstr ""

msgid "Errors should never pass silently."
msgstr ""

msgid "Unless explicitly silenced."
msgstr ""

msgid "In the face of ambiguity, refuse the temptation to guess."
msgstr ""

msgid "There should be one -- and preferably only one -- obvious way to do it."
msgstr ""

msgid "Although that way may not be obvious at first unless you're Dutch."
msgstr ""

msgid "Now is better than never."
msgstr ""

msgid "Although never is often better than *right* now."
msgstr ""

msgid "If the implementation is hard to explain, it's a bad idea."
msgstr ""

msgid "If the implementation is easy to explain, it may be a good idea."
msgstr ""

msgid "Namespaces are one honking great idea -- let's do more of those!"
msgstr ""

msgid "https://www.python.org/dev/peps/pep-0020/"
msgstr ""

msgid "Indentation and Formatting"
msgstr ""

msgid "4 spaces instead tabs. PIL suggests using of two spaces, but programmer looks at code 4 up to 8 hours a day, so it's simplier to distinguish indentation with 4 spaces. Why spaces? Similar representation everywhere."
msgstr ""

msgid "You can use vim modelines:"
msgstr ""

msgid "-- vim:ts=4 ss=4 sw=4 expandtab"
msgstr ""

msgid "A file should ends w/ one newline symbol, but shouldn't ends w/ blank line (two newline symbols)."
msgstr ""

msgid "Every do/while/for/if/function should indent 4 spaces."
msgstr ""

msgid "related ``or``/``and`` in ``if`` must be enclosed in the round brackets (). Example:"
msgstr ""

msgid "if (a == true and b == false) or (a == false and b == true) then\n"
"    <...>\n"
"end -- good\n"
"\n"
"if a == true and b == false or a == false and b == true then\n"
"    <...>\n"
"end -- bad\n"
"\n"
"if a ^ b == true then\n"
"end -- good, but not explicit"
msgstr ""

msgid "Type conversion"
msgstr ""

msgid "Do not use concatenation to convert to string or addition to convert to number (use ``tostring``/``tonumber`` instead):"
msgstr ""

msgid "local a = 123\n"
"a = a .. ''\n"
"-- bad\n"
"\n"
"local a = 123\n"
"a = tostring(a)\n"
"-- good\n"
"\n"
"local a = '123'\n"
"a = a + 5 -- 128\n"
"-- bad\n"
"\n"
"local a = '123'\n"
"a = tonumber(a) + 5 -- 128\n"
"-- good"
msgstr ""

msgid "Try to avoid multiple nested ``if``'s with common body:"
msgstr ""

msgid "if (a == true and b == false) or (a == false and b == true) then\n"
"    do_something()\n"
"end\n"
"-- good\n"
"\n"
"if a == true then\n"
"    if b == false then\n"
"        do_something()\n"
"    end\n"
"if b == true then\n"
"    if a == false then\n"
"        do_something()\n"
"    end\n"
"end\n"
"-- bad"
msgstr ""

msgid "Avoid multiple concatenations in one statement, use ``string.format`` instead:"
msgstr ""

msgid "function say_greeting(period, name)\n"
"    local a = \"good  \" .. period .. \", \" .. name\n"
"end\n"
"-- bad\n"
"\n"
"function say_greeting(period, name)\n"
"    local a = string.format(\"good %s, %s\", period, name)\n"
"end\n"
"-- good\n"
"\n"
"local say_greeting_fmt = \"good %s, %s\"\n"
"function say_greeting(period, name)\n"
"    local a = say_greeting_fmt:format(period, name)\n"
"end\n"
"-- best"
msgstr ""

msgid "Use ``and``/``or`` for default variable values"
msgstr ""

msgid "function(input)\n"
"    input = input or 'default_value'\n"
"end -- good\n"
"\n"
"function(input)\n"
"    if input == nil then\n"
"        input = 'default_value'\n"
"    end\n"
"end -- ok, but excessive"
msgstr ""

msgid "``if``'s and return statements:"
msgstr ""

msgid "if a == true then\n"
"    return do_something()\n"
"end\n"
"do_other_thing() -- good\n"
"\n"
"if a == true then\n"
"    return do_something()\n"
"else\n"
"    do_other_thing()\n"
"end -- bad"
msgstr ""

msgid "Using spaces:"
msgstr ""

msgid "one shouldn't use spaces between function name and opening round bracket, but arguments must be splitted with one whitespace charachter"
msgstr ""

msgid "function name (arg1,arg2,...)\n"
"end -- bad\n"
"\n"
"function name(arg1, arg2, ...)\n"
"end -- good"
msgstr ""

msgid "use space after comment marker"
msgstr ""

msgid "while true do -- inline comment\n"
"-- comment\n"
"do_something()\n"
"end\n"
"--[[\n"
"  multiline\n"
"  comment\n"
"]]--"
msgstr ""

msgid "surrounding operators"
msgstr ""

msgid "local thing=1\n"
"thing = thing-1\n"
"thing = thing*1\n"
"thing = 'string'..'s'\n"
"-- bad\n"
"\n"
"local thing = 1\n"
"thing = thing - 1\n"
"thing = thing * 1\n"
"thing = 'string' .. 's'\n"
"-- good"
msgstr ""

msgid "use space after commas in tables"
msgstr ""

msgid "local thing = {1,2,3}\n"
"thing = {1 , 2 , 3}\n"
"thing = {1 ,2 ,3}\n"
"-- bad\n"
"\n"
"local thing = {1, 2, 3}\n"
"-- good"
msgstr ""

msgid "use space in map definitions around equality sign and commas"
msgstr ""

msgid "return {1,2,3,4} -- bad\n"
"return {\n"
"    key1 = val1,key2=val2\n"
"} -- bad\n"
"\n"
"return {\n"
"    1, 2, 3, 4\n"
"    key1 = val1, key2 = val2,\n"
"    key3 = vallll\n"
"} -- good"
msgstr ""

msgid "also, you may use alignment:"
msgstr ""

msgid "return {\n"
"    long_key  = 'vaaaaalue',\n"
"    key       = 'val',\n"
"    something = 'even better'\n"
"}"
msgstr ""

msgid "extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations)"
msgstr ""

msgid "use blank lines in function, sparingly, to indicate logical sections"
msgstr ""

msgid "if thing then\n"
"    -- ...stuff...\n"
"end\n"
"function derp()\n"
"    -- ...stuff...\n"
"end\n"
"local wat = 7\n"
"-- bad\n"
"\n"
"if thing then\n"
"    -- ...stuff...\n"
"end\n"
"\n"
"function derp()\n"
"    -- ...stuff...\n"
"end\n"
"\n"
"local wat = 7\n"
"-- good"
msgstr ""

msgid "Delete whitespace at EOL (strongly forbidden. Use ``:s/\\s\\+$//gc`` in vim to delete them)"
msgstr ""

msgid "Avoid global variable"
msgstr ""

msgid "You must avoid global variables. If you have an exceptional case, use ``_G`` variable to set it, add prefix or add table instead of prefix:"
msgstr ""

msgid "function bad_global_example()\n"
"end -- very, very bad\n"
"\n"
"function good_local_example()\n"
"end\n"
"_G.modulename_good_local_example = good_local_example -- good\n"
"_G.modulename = {}\n"
"_G.modulename.good_local_example = good_local_example -- better"
msgstr ""

msgid "Always use prefix to avoid name clash"
msgstr ""

msgid "Naming"
msgstr ""

msgid "names of variables/\"objects\" and \"methods\"/functions: snake_case"
msgstr ""

msgid "names of \"classes\": CamelCase"
msgstr ""

msgid "private variables/methods (properties in the future) of object starts with underscores ``<object>._<name>``. Avoid using of ``local function private_methods(self) end``"
msgstr ""

msgid "boolean - naming ``is_<...>``, ``isnt_<...>``, ``has_``, ``hasnt_`` is a good style."
msgstr ""

msgid "for \"very local\" variables: - ``t`` is for tables - ``i``, ``j`` are for indexing - ``n`` is for counting - ``k``, ``v`` is what you get out of ``pairs()`` (are acceptable, ``_`` if unused) - ``i``, ``v`` is what you get out of ``ipairs()`` (are acceptable, ``_`` if unused) - ``k``/``key`` is for table keys - ``v``/``val``/``value`` is for values that are passed around - ``x``/``y``/``z`` is for generic math quantities - ``s``/``str``/``string`` is for strings - ``c`` is for 1-char strings - ``f``/``func``/``cb`` are for functions - ``status, <rv>..`` or ``ok, <rv>..`` is what you get out of pcall/xpcall - ``buf, sz`` is a (buffer, size) pair - ``<name>_p`` is for pointers - ``t0``.. is for timestamps - ``err`` is for errors"
msgstr ""

msgid "abbrevations are acceptable if they're unambigous and if you'll document (or they're too common) them."
msgstr ""

msgid "global variables are written with ALL_CAPS. If it's some system variable, then they're using underscore to define it (``_G``/``_VERSION``/..)"
msgstr ""

msgid "module naming snake_case (avoid underscores and dashes) - 'luasql', instead of 'Lua-SQL'"
msgstr ""

msgid "``*_mt`` and ``*_methods`` defines metatable and methods table"
msgstr ""

msgid "Idioms and patterns"
msgstr ""

msgid "Always use round brackets in call of functions except multiple cases (common lua style idioms):"
msgstr ""

msgid "``*.cfg{ }`` functions (``box.cfg``/``memcached.cfg``/..)"
msgstr ""

msgid "``ffi.cdef[[ ]]`` function"
msgstr ""

msgid "Avoid these kind of constructions:"
msgstr ""

msgid "<func>'<name>' (strongly avoid require'..')"
msgstr ""

msgid "``function object:method() end`` (use ``functon object.method(self) end`` instead)"
msgstr ""

msgid "do not use semicolon as table separator (only comma)"
msgstr ""

msgid "semicolons at the end of line (only to split multiple statements on one line)"
msgstr ""

msgid "try to avoid unnecessary function creation (closures/..)"
msgstr ""

msgid "Modules"
msgstr ""

msgid "Don't start modules with license/authors/descriptions, you can write it in LICENSE/AUTHORS/README files. For writing modules use one of the two patterns (dont use ``modules()``):"
msgstr ""

msgid "local M = {}\n"
"\n"
"function M.foo()\n"
"...\n"
"end\n"
"\n"
"function M.bar()\n"
"...\n"
"end\n"
"\n"
"return M"
msgstr ""

msgid "or"
msgstr ""

msgid "local function foo()\n"
"...\n"
"end\n"
"\n"
"local function bar()\n"
"...\n"
"end\n"
"\n"
"return {\n"
"foo = foo,\n"
"bar = bar,\n"
"}"
msgstr ""

msgid "Commenting"
msgstr ""

msgid "You should write code the way it shouldn't be described, but don't forget about commenting it. You shouldn't comment Lua syntax (assume that reader already knows Lua language). Try to tell about functions/variable names/etc."
msgstr ""

msgid "Multiline comments: use matching (``--[[ ]]--``) instead of simple (``--[[ ]]``)."
msgstr ""

msgid "Public function comments (??):"
msgstr ""

msgid "--- Copy any table (shallow and deep version)\n"
"-- * deepcopy: copies all levels\n"
"-- * shallowcopy: copies only first level\n"
"-- Supports __copy metamethod for copying custom tables with metatables\n"
"-- @function gsplit\n"
"-- @table         inp  original table\n"
"-- @shallow[opt]  sep  flag for shallow copy\n"
"-- @returns            table (copy)"
msgstr ""

msgid "Testing"
msgstr ""

msgid "Use ``tap`` module for writing efficient tests. Example of test file:"
msgstr ""

msgid "#!/usr/bin/env tarantool\n"
"\n"
"local test = require('tap').test('table')\n"
"test:plan(31)\n"
"\n"
"do -- check basic table.copy (deepcopy)\n"
"    local example_table = {\n"
"        {1, 2, 3},\n"
"        {\"help, I'm very nested\", {{{ }}} }\n"
"    }\n"
"\n"
"    local copy_table = table.copy(example_table)\n"
"\n"
"    test:is_deeply(\n"
"        example_table,\n"
"        copy_table,\n"
"        \"checking, that deepcopy behaves ok\"\n"
"    )\n"
"    test:isnt(\n"
"        example_table,\n"
"        copy_table,\n"
"        \"checking, that tables are different\"\n"
"    )\n"
"    test:isnt(\n"
"        example_table[1],\n"
"        copy_table[1],\n"
"        \"checking, that tables are different\"\n"
"    )\n"
"    test:isnt(\n"
"        example_table[2],\n"
"        copy_table[2],\n"
"        \"checking, that tables are different\"\n"
"    )\n"
"    test:isnt(\n"
"        example_table[2][2],\n"
"        copy_table[2][2],\n"
"        \"checking, that tables are different\"\n"
"    )\n"
"    test:isnt(\n"
"        example_table[2][2][1],\n"
"        copy_table[2][2][1],\n"
"        \"checking, that tables are different\"\n"
"    )\n"
"end\n"
"\n"
"<...>\n"
"\n"
"os.exit(test:check() and 0 or 1)"
msgstr ""

msgid "When you'll test your code output will be something like this:"
msgstr ""

msgid "TAP version 13\n"
"1..31\n"
"ok - checking, that deepcopy behaves ok\n"
"ok - checking, that tables are different\n"
"ok - checking, that tables are different\n"
"ok - checking, that tables are different\n"
"ok - checking, that tables are different\n"
"ok - checking, that tables are different\n"
"..."
msgstr ""

msgid "Error Handling"
msgstr ""

msgid "Be generous in what you accept and strict in what you return."
msgstr ""

msgid "With error handling this means that you must provide an error object as second multi-return value in case of error. The error object can be a string, a Lua table or cdata, in the latter cases it must have ``__tostring`` metamethod defined."
msgstr ""

msgid "In case of error, use ``nil`` for the first return value. This makes the error hard to ignore."
msgstr ""

msgid "When checking function return values, check the first argument first. If it's ``nil``, look for error in the second argument:"
msgstr ""

msgid "local data, err = foo()\n"
"if not data then\n"
"    return nil, err\n"
"end\n"
"return bar(data)"
msgstr ""

msgid "Unless performance of your code is paramount, try to avoid using more than two return values."
msgstr ""

msgid "In rare cases you may want to return ``nil`` as a legal return value. In this case it's OK to check for error first, and return second:"
msgstr ""

msgid "local data, err = foo()\n"
"if not err then\n"
"    return data\n"
"end\n"
"return nil, err"
msgstr ""

