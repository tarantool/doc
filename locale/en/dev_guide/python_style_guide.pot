# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-17 14:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/dev_guide/python_style_guide.rst:3
msgid "Python Style Guide"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:7
msgid "Introduction"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:9
msgid "This document gives coding conventions for the Python code comprising the standard library in the main Python distribution.  Please see the companion informational PEP describing style guidelines for the C code in the C implementation of Python [1]_."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:14
msgid "This document and PEP 257 (Docstring Conventions) were adapted from Guido's original Python Style Guide essay, with some additions from Barry's style guide [2]_."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:21
msgid "A Foolish Consistency is the Hobgoblin of Little Minds"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:23
msgid "One of Guido's key insights is that code is read much more often than it is written.  The guidelines provided here are intended to improve the readability of code and make it consistent across the wide spectrum of Python code.  As PEP 20 says, \"Readability counts\"."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:28
msgid "A style guide is about consistency.  Consistency with this style guide is important.  Consistency within a project is more important. Consistency within one module or function is the most important."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:32
msgid "But most importantly: know when to be inconsistent -- sometimes the style guide just doesn't apply.  When in doubt, use your best judgment.  Look at other examples and decide what looks best.  And don't hesitate to ask!"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:37
msgid "Two good reasons to break a particular rule:"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:39
msgid "When applying the rule would make the code less readable, even for someone who is used to reading code that follows the rules."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:42
msgid "To be consistent with surrounding code that also breaks it (maybe for historic reasons) -- although this is also an opportunity to clean up someone else's mess (in true XP style)."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:49
msgid "Code lay-out"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:53
msgid "Indentation"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:55
msgid "Use 4 spaces per indentation level."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:57
msgid "For really old code that you don't want to mess up, you can continue to use 8-space tabs."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:60
msgid "Continuation lines should align wrapped elements either vertically using Python's implicit line joining inside parentheses, brackets and braces, or using a hanging indent.  When using a hanging indent the following considerations should be applied; there should be no arguments on the first line and further indentation should be used to clearly distinguish itself as a continuation line."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:67
#: ../../doc/dev_guide/python_style_guide.rst:324
#: ../../doc/dev_guide/python_style_guide.rst:353
#: ../../doc/dev_guide/python_style_guide.rst:372
#: ../../doc/dev_guide/python_style_guide.rst:385
msgid "Yes::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:69
msgid "# Aligned with opening delimiter\n"
"foo = long_function_name(var_one, var_two,\n"
"                         var_three, var_four)\n"
"\n"
"# More indentation included to distinguish this from the rest.\n"
"def long_function_name(\n"
"        var_one, var_two, var_three,\n"
"        var_four):\n"
"    print(var_one)"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:79
#: ../../doc/dev_guide/python_style_guide.rst:330
#: ../../doc/dev_guide/python_style_guide.rst:361
#: ../../doc/dev_guide/python_style_guide.rst:377
msgid "No::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:81
msgid "# Arguments on first line forbidden when not using vertical alignment\n"
"foo = long_function_name(var_one, var_two,\n"
"    var_three, var_four)\n"
"\n"
"# Further indentation required as indentation is not distinguishable\n"
"def long_function_name(\n"
"    var_one, var_two, var_three,\n"
"    var_four):\n"
"    print(var_one)"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:91
msgid "Optional::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:93
msgid "# Extra indentation is not necessary.\n"
"foo = long_function_name(\n"
"  var_one, var_two,\n"
"  var_three, var_four)"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:98
msgid "The closing brace/bracket/parenthesis on multi-line constructs may either line up under the first non-whitespace character of the last line of list, as in::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:102
msgid "my_list = [\n"
"    1, 2, 3,\n"
"    4, 5, 6,\n"
"    ]\n"
"result = some_function_that_takes_arguments(\n"
"    'a', 'b', 'c',\n"
"    'd', 'e', 'f',\n"
"    )"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:111
msgid "or it may be lined up under the first character of the line that starts the multi-line construct, as in::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:114
msgid "my_list = [\n"
"    1, 2, 3,\n"
"    4, 5, 6,\n"
"]\n"
"result = some_function_that_takes_arguments(\n"
"    'a', 'b', 'c',\n"
"    'd', 'e', 'f',\n"
")"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:126
msgid "Tabs or Spaces?"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:128
msgid "Never mix tabs and spaces."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:130
msgid "The most popular way of indenting Python is with spaces only.  The second-most popular way is with tabs only.  Code indented with a mixture of tabs and spaces should be converted to using spaces exclusively.  When invoking the Python command line interpreter with the ``-t`` option, it issues warnings about code that illegally mixes tabs and spaces.  When using ``-tt`` these warnings become errors. These options are highly recommended!"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:138
msgid "For new projects, spaces-only are strongly recommended over tabs. Most editors have features that make this easy to do."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:143
msgid "Maximum Line Length"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:145
msgid "Limit all lines to a maximum of 79 characters."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:147
msgid "There are still many devices around that are limited to 80 character lines; plus, limiting windows to 80 characters makes it possible to have several windows side-by-side.  The default wrapping on such devices disrupts the visual structure of the code, making it more difficult to understand.  Therefore, please limit all lines to a maximum of 79 characters.  For flowing long blocks of text (docstrings or comments), limiting the length to 72 characters is recommended."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:155
msgid "The preferred way of wrapping long lines is by using Python's implied line continuation inside parentheses, brackets and braces.  Long lines can be broken over multiple lines by wrapping expressions in parentheses. These should be used in preference to using a backslash for line continuation."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:161
msgid "Backslashes may still be appropriate at times.  For example, long, multiple ``with``-statements cannot use implicit continuation, so backslashes are acceptable::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:165
msgid "with open('/path/to/some/file/you/want/to/read') as file_1, \\\n"
"        open('/path/to/some/file/being/written', 'w') as file_2:\n"
"    file_2.write(file_1.read())"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:169
msgid "Another such case is with ``assert`` statements."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:171
msgid "Make sure to indent the continued line appropriately.  The preferred place to break around a binary operator is *after* the operator, not before it.  Some examples::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:175
msgid "class Rectangle(Blob):\n"
"\n"
"    def __init__(self, width, height,\n"
"                 color='black', emphasis=None, highlight=0):\n"
"        if (width == 0 and height == 0 and\n"
"            color == 'red' and emphasis == 'strong' or\n"
"            highlight > 100):\n"
"            raise ValueError(\"sorry, you lose\")\n"
"        if width == 0 and height == 0 and (color == 'red' or\n"
"                                           emphasis is None):\n"
"            raise ValueError(\"I don't think so -- values are %s, %s\" %\n"
"                             (width, height))\n"
"        Blob.__init__(self, width, height,\n"
"                      color, emphasis, highlight)"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:192
msgid "Blank Lines"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:194
msgid "Separate top-level function and class definitions with two blank lines."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:197
msgid "Method definitions inside a class are separated by a single blank line."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:200
msgid "Extra blank lines may be used (sparingly) to separate groups of related functions.  Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations)."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:204
msgid "Use blank lines in functions, sparingly, to indicate logical sections."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:206
msgid "Python accepts the control-L (i.e. ^L) form feed character as whitespace; Many tools treat these characters as page separators, so you may use them to separate pages of related sections of your file. Note, some editors and web-based code viewers may not recognize control-L as a form feed and will show another glyph in its place."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:214
msgid "Encodings (PEP 263)"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:216
msgid "Code in the core Python distribution should always use the ASCII or Latin-1 encoding (a.k.a. ISO-8859-1).  For Python 3.0 and beyond, UTF-8 is preferred over Latin-1, see PEP 3120."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:220
msgid "Files using ASCII should not have a coding cookie.  Latin-1 (or UTF-8) should only be used when a comment or docstring needs to mention an author name that requires Latin-1; otherwise, using ``\\x``, ``\\u`` or ``\\U`` escapes is the preferred way to include non-ASCII data in string literals."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:226
msgid "For Python 3.0 and beyond, the following policy is prescribed for the standard library (see PEP 3131): All identifiers in the Python standard library MUST use ASCII-only identifiers, and SHOULD use English words wherever feasible (in many cases, abbreviations and technical terms are used which aren't English). In addition, string literals and comments must also be in ASCII. The only exceptions are (a) test cases testing the non-ASCII features, and (b) names of authors. Authors whose names are not based on the latin alphabet MUST provide a latin transliteration of their names."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:237
msgid "Open source projects with a global audience are encouraged to adopt a similar policy."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:243
msgid "Imports"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:245
msgid "Imports should usually be on separate lines, e.g.::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:247
msgid "Yes: import os\n"
"     import sys\n"
"\n"
"No:  import sys, os"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:252
msgid "It's okay to say this though::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:254
msgid "from subprocess import Popen, PIPE"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:256
msgid "Imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:259
msgid "Imports should be grouped in the following order:"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:261
msgid "standard library imports"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:262
msgid "related third party imports"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:263
msgid "local application/library specific imports"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:265
msgid "You should put a blank line between each group of imports."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:267
msgid "Put any relevant ``__all__`` specification after the imports."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:269
msgid "Relative imports for intra-package imports are highly discouraged. Always use the absolute package path for all imports.  Even now that PEP 328 is fully implemented in Python 2.5, its style of explicit relative imports is actively discouraged; absolute imports are more portable and usually more readable."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:275
msgid "When importing a class from a class-containing module, it's usually okay to spell this::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:278
msgid "from myclass import MyClass\n"
"from foo.bar.yourclass import YourClass"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:281
msgid "If this spelling causes local name clashes, then spell them ::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:283
msgid "import myclass\n"
"import foo.bar.yourclass"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:286
msgid "and use \"myclass.MyClass\" and \"foo.bar.yourclass.YourClass\"."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:291
msgid "Whitespace in Expressions and Statements"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:295
msgid "Pet Peeves"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:297
msgid "Avoid extraneous whitespace in the following situations:"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:299
msgid "Immediately inside parentheses, brackets or braces. ::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:301
msgid "Yes: spam(ham[1], {eggs: 2})\n"
"No:  spam( ham[ 1 ], { eggs: 2 } )"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:304
msgid "Immediately before a comma, semicolon, or colon::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:306
msgid "Yes: if x == 4: print x, y; x, y = y, x\n"
"No:  if x == 4 : print x , y ; x , y = y , x"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:309
msgid "Immediately before the open parenthesis that starts the argument list of a function call::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:312
msgid "Yes: spam(1)\n"
"No:  spam (1)"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:315
msgid "Immediately before the open parenthesis that starts an indexing or slicing::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:318
msgid "Yes: dict['key'] = list[index]\n"
"No:  dict ['key'] = list [index]"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:321
msgid "More than one space around an assignment (or other) operator to align it with another."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:326
msgid "x = 1\n"
"y = 2\n"
"long_variable = 3"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:332
msgid "x             = 1\n"
"y             = 2\n"
"long_variable = 3"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:339
msgid "Other Recommendations"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:341
msgid "Always surround these binary operators with a single space on either side: assignment (``=``), augmented assignment (``+=``, ``-=`` etc.), comparisons (``==``, ``<``, ``>``, ``!=``, ``<>``, ``<=``, ``>=``, ``in``, ``not in``, ``is``, ``is not``), Booleans (``and``, ``or``, ``not``)."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:347
msgid "If operators with different priorities are used, consider adding whitespace around the operators with the lowest priority(ies). Use your own judgement; however, never use more than one space, and always have the same amount of whitespace on both sides of a binary operator."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:355
msgid "i = i + 1\n"
"submitted += 1\n"
"x = x*2 - 1\n"
"hypot2 = x*x + y*y\n"
"c = (a+b) * (a-b)"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:363
msgid "i=i+1\n"
"submitted +=1\n"
"x = x * 2 - 1\n"
"hypot2 = x * x + y * y\n"
"c = (a + b) * (a - b)"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:369
msgid "Don't use spaces around the ``=`` sign when used to indicate a keyword argument or a default parameter value."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:374
msgid "def complex(real, imag=0.0):\n"
"    return magic(r=real, i=imag)"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:379
msgid "def complex(real, imag = 0.0):\n"
"    return magic(r = real, i = imag)"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:382
msgid "Compound statements (multiple statements on the same line) are generally discouraged."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:387
msgid "if foo == 'blah':\n"
"    do_blah_thing()\n"
"do_one()\n"
"do_two()\n"
"do_three()"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:393
#: ../../doc/dev_guide/python_style_guide.rst:402
msgid "Rather not::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:395
msgid "if foo == 'blah': do_blah_thing()\n"
"do_one(); do_two(); do_three()"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:398
msgid "While sometimes it's okay to put an if/for/while with a small body on the same line, never do this for multi-clause statements.  Also avoid folding such long lines!"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:404
msgid "if foo == 'blah': do_blah_thing()\n"
"for x in lst: total += x\n"
"while t < 10: t = delay()"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:408
msgid "Definitely not::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:410
msgid "if foo == 'blah': do_blah_thing()\n"
"else: do_non_blah_thing()\n"
"\n"
"try: something()\n"
"finally: cleanup()\n"
"\n"
"do_one(); do_two(); do_three(long, argument,\n"
"                             list, like, this)\n"
"\n"
"if foo == 'blah': one(); two(); three()"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:423
msgid "Comments"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:425
msgid "Comments that contradict the code are worse than no comments.  Always make a priority of keeping the comments up-to-date when the code changes!"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:429
msgid "Comments should be complete sentences.  If a comment is a phrase or sentence, its first word should be capitalized, unless it is an identifier that begins with a lower case letter (never alter the case of identifiers!)."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:434
msgid "If a comment is short, the period at the end can be omitted.  Block comments generally consist of one or more paragraphs built out of complete sentences, and each sentence should end in a period."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:438
msgid "You should use two spaces after a sentence-ending period."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:440
msgid "When writing English, Strunk and White apply."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:442
msgid "Python coders from non-English speaking countries: please write your comments in English, unless you are 120% sure that the code will never be read by people who don't speak your language."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:448
msgid "Block Comments"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:450
msgid "Block comments generally apply to some (or all) code that follows them, and are indented to the same level as that code.  Each line of a block comment starts with a ``#`` and a single space (unless it is indented text inside the comment)."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:455
msgid "Paragraphs inside a block comment are separated by a line containing a single ``#``."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:460
msgid "Inline Comments"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:462
msgid "Use inline comments sparingly."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:464
msgid "An inline comment is a comment on the same line as a statement. Inline comments should be separated by at least two spaces from the statement.  They should start with a # and a single space."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:468
msgid "Inline comments are unnecessary and in fact distracting if they state the obvious.  Don't do this::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:471
msgid "x = x + 1                 # Increment x"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:473
msgid "But sometimes, this is useful::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:475
msgid "x = x + 1                 # Compensate for border"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:479
msgid "Documentation Strings"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:481
msgid "Conventions for writing good documentation strings (a.k.a. \"docstrings\") are immortalized in PEP 257."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:484
msgid "Write docstrings for all public modules, functions, classes, and methods.  Docstrings are not necessary for non-public methods, but you should have a comment that describes what the method does.  This comment should appear after the ``def`` line."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:489
msgid "PEP 257 describes good docstring conventions.  Note that most importantly, the ``\"\"\"`` that ends a multiline docstring should be on a line by itself, and preferably preceded by a blank line, e.g.::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:493
msgid "\"\"\"Return a foobang\n"
"\n"
"Optional plotz says to frobnicate the bizbaz first.\n"
"\n"
"\"\"\""
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:499
msgid "For one liner docstrings, it's okay to keep the closing ``\"\"\"`` on the same line."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:505
msgid "Version Bookkeeping"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:507
msgid "If you have to have Subversion, CVS, or RCS crud in your source file, do it as follows. ::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:510
msgid "__version__ = \"$Revision$\"\n"
"# $Source$"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:513
msgid "These lines should be included after the module's docstring, before any other code, separated by a blank line above and below."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:519
msgid "Naming Conventions"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:521
msgid "The naming conventions of Python's library are a bit of a mess, so we'll never get this completely consistent -- nevertheless, here are the currently recommended naming standards.  New modules and packages (including third party frameworks) should be written to these standards, but where an existing library has a different style, internal consistency is preferred."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:530
msgid "Descriptive: Naming Styles"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:532
msgid "There are a lot of different naming styles.  It helps to be able to recognize what naming style is being used, independently from what they are used for."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:536
msgid "The following naming styles are commonly distinguished:"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:538
msgid "``b`` (single lowercase letter)"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:539
msgid "``B`` (single uppercase letter)"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:540
msgid "``lowercase``"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:541
msgid "``lower_case_with_underscores``"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:542
msgid "``UPPERCASE``"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:543
msgid "``UPPER_CASE_WITH_UNDERSCORES``"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:544
msgid "``CapitalizedWords`` (or CapWords, or CamelCase -- so named because of the bumpy look of its letters [3]_).  This is also sometimes known as StudlyCaps."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:548
msgid "Note: When using abbreviations in CapWords, capitalize all the letters of the abbreviation.  Thus HTTPServerError is better than HttpServerError."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:551
msgid "``mixedCase`` (differs from CapitalizedWords by initial lowercase character!)"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:553
msgid "``Capitalized_Words_With_Underscores`` (ugly!)"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:555
msgid "There's also the style of using a short unique prefix to group related names together.  This is not used much in Python, but it is mentioned for completeness.  For example, the ``os.stat()`` function returns a tuple whose items traditionally have names like ``st_mode``, ``st_size``, ``st_mtime`` and so on.  (This is done to emphasize the correspondence with the fields of the POSIX system call struct, which helps programmers familiar with that.)"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:563
msgid "The X11 library uses a leading X for all its public functions.  In Python, this style is generally deemed unnecessary because attribute and method names are prefixed with an object, and function names are prefixed with a module name."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:568
msgid "In addition, the following special forms using leading or trailing underscores are recognized (these can generally be combined with any case convention):"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:572
msgid "``_single_leading_underscore``: weak \"internal use\" indicator. E.g. ``from M import *`` does not import objects whose name starts with an underscore."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:576
msgid "``single_trailing_underscore_``: used by convention to avoid conflicts with Python keyword, e.g. ::"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:579
msgid "Tkinter.Toplevel(master, class_='ClassName')"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:581
msgid "``__double_leading_underscore``: when naming a class attribute, invokes name mangling (inside class FooBar, ``__boo`` becomes ``_FooBar__boo``; see below)."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:585
msgid "``__double_leading_and_trailing_underscore__``: \"magic\" objects or attributes that live in user-controlled namespaces. E.g. ``__init__``, ``__import__`` or ``__file__``.  Never invent such names; only use them as documented."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:592
msgid "Prescriptive: Naming Conventions"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:596
msgid "Names to Avoid"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:598
msgid "Never use the characters 'l' (lowercase letter el), 'O' (uppercase letter oh), or 'I' (uppercase letter eye) as single character variable names."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:602
msgid "In some fonts, these characters are indistinguishable from the numerals one and zero.  When tempted to use 'l', use 'L' instead."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:607
msgid "Package and Module Names"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:609
msgid "Modules should have short, all-lowercase names.  Underscores can be used in the module name if it improves readability.  Python packages should also have short, all-lowercase names, although the use of underscores is discouraged."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:614
msgid "Since module names are mapped to file names, and some file systems are case insensitive and truncate long names, it is important that module names be chosen to be fairly short -- this won't be a problem on Unix, but it may be a problem when the code is transported to older Mac or Windows versions, or DOS."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:620
msgid "When an extension module written in C or C++ has an accompanying Python module that provides a higher level (e.g. more object oriented) interface, the C/C++ module has a leading underscore (e.g. ``_socket``)."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:627
msgid "Class Names"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:629
msgid "Almost without exception, class names use the CapWords convention. Classes for internal use have a leading underscore in addition."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:634
msgid "Exception Names"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:636
msgid "Because exceptions should be classes, the class naming convention applies here.  However, you should use the suffix \"Error\" on your exception names (if the exception actually is an error)."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:642
msgid "Global Variable Names"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:644
msgid "(Let's hope that these variables are meant for use inside one module only.)  The conventions are about the same as those for functions."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:647
msgid "Modules that are designed for use via ``from M import *`` should use the ``__all__`` mechanism to prevent exporting globals, or use the older convention of prefixing such globals with an underscore (which you might want to do to indicate these globals are \"module non-public\")."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:655
msgid "Function Names"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:657
msgid "Function names should be lowercase, with words separated by underscores as necessary to improve readability."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:660
msgid "mixedCase is allowed only in contexts where that's already the prevailing style (e.g. threading.py), to retain backwards compatibility."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:666
msgid "Function and method arguments"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:668
msgid "Always use ``self`` for the first argument to instance methods."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:670
msgid "Always use ``cls`` for the first argument to class methods."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:672
msgid "If a function argument's name clashes with a reserved keyword, it is generally better to append a single trailing underscore rather than use an abbreviation or spelling corruption.  Thus ``class_`` is better than ``clss``.  (Perhaps better is to avoid such clashes by using a synonym.)"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:680
msgid "Method Names and Instance Variables"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:682
msgid "Use the function naming rules: lowercase with words separated by underscores as necessary to improve readability."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:685
msgid "Use one leading underscore only for non-public methods and instance variables."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:688
msgid "To avoid name clashes with subclasses, use two leading underscores to invoke Python's name mangling rules."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:691
msgid "Python mangles these names with the class name: if class Foo has an attribute named ``__a``, it cannot be accessed by ``Foo.__a``.  (An insistent user could still gain access by calling ``Foo._Foo__a``.) Generally, double leading underscores should be used only to avoid name conflicts with attributes in classes designed to be subclassed."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:697
msgid "Note: there is some controversy about the use of __names (see below)."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:701
msgid "Constants"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:703
msgid "Constants are usually defined on a module level and written in all capital letters with underscores separating words.  Examples include ``MAX_OVERFLOW`` and ``TOTAL``."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:709
msgid "Designing for inheritance"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:711
msgid "Always decide whether a class's methods and instance variables (collectively: \"attributes\") should be public or non-public.  If in doubt, choose non-public; it's easier to make it public later than to make a public attribute non-public."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:716
msgid "Public attributes are those that you expect unrelated clients of your class to use, with your commitment to avoid backward incompatible changes.  Non-public attributes are those that are not intended to be used by third parties; you make no guarantees that non-public attributes won't change or even be removed."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:722
msgid "We don't use the term \"private\" here, since no attribute is really private in Python (without a generally unnecessary amount of work)."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:725
msgid "Another category of attributes are those that are part of the \"subclass API\" (often called \"protected\" in other languages).  Some classes are designed to be inherited from, either to extend or modify aspects of the class's behavior.  When designing such a class, take care to make explicit decisions about which attributes are public, which are part of the subclass API, and which are truly only to be used by your base class."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:733
msgid "With this in mind, here are the Pythonic guidelines:"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:735
msgid "Public attributes should have no leading underscores."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:737
msgid "If your public attribute name collides with a reserved keyword, append a single trailing underscore to your attribute name.  This is preferable to an abbreviation or corrupted spelling.  (However, not withstanding this rule, 'cls' is the preferred spelling for any variable or argument which is known to be a class, especially the first argument to a class method.)"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:745
#: ../../doc/dev_guide/python_style_guide.rst:756
#: ../../doc/dev_guide/python_style_guide.rst:778
msgid "Note 1:"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:745
msgid "See the argument name recommendation above for class methods."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:747
msgid "For simple public data attributes, it is best to expose just the attribute name, without complicated accessor/mutator methods.  Keep in mind that Python provides an easy path to future enhancement, should you find that a simple data attribute needs to grow functional behavior.  In that case, use properties to hide functional implementation behind simple data attribute access syntax."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:756
msgid "Properties only work on new-style classes."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:760
#: ../../doc/dev_guide/python_style_guide.rst:783
msgid "Note 2:"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:759
msgid "Try to keep the functional behavior side-effect free, although side-effects such as caching are generally fine."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:765
#: ../../doc/dev_guide/python_style_guide.rst:788
msgid "Note 3:"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:763
msgid "Avoid using properties for computationally expensive operations; the attribute notation makes the caller believe that access is (relatively) cheap."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:767
msgid "If your class is intended to be subclassed, and you have attributes that you do not want subclasses to use, consider naming them with double leading underscores and no trailing underscores.  This invokes Python's name mangling algorithm, where the name of the class is mangled into the attribute name.  This helps avoid attribute name collisions should subclasses inadvertently contain attributes with the same name."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:776
msgid "Note that only the simple class name is used in the mangled name, so if a subclass chooses both the same class name and attribute name, you can still get name collisions."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:781
msgid "Name mangling can make certain uses, such as debugging and ``__getattr__()``, less convenient.  However the name mangling algorithm is well documented and easy to perform manually."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:786
msgid "Not everyone likes name mangling.  Try to balance the need to avoid accidental name clashes with potential use by advanced callers."
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:792
msgid "References"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:794
msgid "`PEP 7, Style Guide for C Code, van Rossum <https://www.python.org/dev/peps/pep-0007/>`_"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:795
msgid "`Barry's GNU Mailman style guide <http://barry.warsaw.us/software/STYLEGUIDE.txt>`_"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:796
msgid "`CamelCase Wikipedia page <http://www.wikipedia.com/wiki/CamelCase>`_"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:800
msgid "Copyright"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:802
msgid "Author:"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:804
msgid "Guido van Rossum <guido@python.org>"
msgstr ""

#: ../../doc/dev_guide/python_style_guide.rst:805
msgid "Barry Warsaw <barry@python.org>"
msgstr ""
