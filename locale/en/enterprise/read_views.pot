# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-17 14:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/enterprise/read_views.rst:4
msgid "Read views"
msgstr ""

#: ../../doc/enterprise/read_views.rst:6
msgid "A read view is an in-memory snapshot of the entire database that isn't affected by future :ref:`data modifications <index-box_operations>`. Read views provide access to database spaces and their indexes and enable you to retrieve data using the same ``select`` and ``pairs`` operations."
msgstr ""

#: ../../doc/enterprise/read_views.rst:11
msgid "Read views can be used to make complex analytical queries. This reduces the load on the main database and improves RPS for a single Tarantool instance."
msgstr ""

#: ../../doc/enterprise/read_views.rst:14
msgid "To improve memory consumption and performance, Tarantool creates read views using the copy-on-write technique. In this case, duplication of the entire data set is not required: Tarantool duplicates only blocks modified after a read view is created."
msgstr ""

#: ../../doc/enterprise/read_views.rst:21
msgid "Tarantool Enterprise Edition supports read views starting from v2.11.0 and enables the ability to work with them using both :ref:`Lua <read_views_lua_api>` and :ref:`C API <read_views_c_api>`."
msgstr ""

#: ../../doc/enterprise/read_views.rst:31
msgid "Limitations"
msgstr ""

#: ../../doc/enterprise/read_views.rst:33
msgid "Read views have the following limitations:"
msgstr ""

#: ../../doc/enterprise/read_views.rst:35
msgid "Only the :ref:`memtx <engines-memtx>` engine is supported."
msgstr ""

#: ../../doc/enterprise/read_views.rst:36
msgid "Only TREE and HASH :ref:`indexes <index-types>` are supported."
msgstr ""

#: ../../doc/enterprise/read_views.rst:37
msgid "Pagination is not supported (the :ref:`after <box_index-select>` option)."
msgstr ""

#: ../../doc/enterprise/read_views.rst:44
msgid "Working with read views"
msgstr ""

#: ../../doc/enterprise/read_views.rst:49
msgid "Creating a read view"
msgstr ""

#: ../../doc/enterprise/read_views.rst:51
msgid "To create a read view, call the :ref:`box.read_view.open() <box-read_view-open>` function. The snippet below shows how to create a read view with the ``read_view1`` name."
msgstr ""

#: ../../doc/enterprise/read_views.rst:54
msgid "tarantool> read_view1 = box.read_view.open({name = 'read_view1'})"
msgstr ""

#: ../../doc/enterprise/read_views.rst:58
msgid "After creating a read view, you can see the information about it by calling :ref:`read_view_object:info() <read_view_object-info>`."
msgstr ""

#: ../../doc/enterprise/read_views.rst:61
msgid "tarantool> read_view1:info()\n"
"---\n"
"- timestamp: 66.606817935\n"
"  signature: 24\n"
"  is_system: false\n"
"  status: open\n"
"  vclock: {1: 24}\n"
"  name: read_view1\n"
"  id: 1\n"
"..."
msgstr ""

#: ../../doc/enterprise/read_views.rst:74
msgid "To list all the created read views, call the :ref:`box.read_view.list() <reference_lua-box_read_view_list>` function."
msgstr ""

#: ../../doc/enterprise/read_views.rst:81
msgid "Querying data"
msgstr ""

#: ../../doc/enterprise/read_views.rst:83
msgid "After creating a read view, you can access database spaces using the :ref:`read_view_object.space <read_view_object-space>` field. This field provides access to a space object that exposes the :ref:`select <box_space-select>`, :ref:`get <box_space-get>`, and :ref:`pairs <box_space-pairs>` methods with the same behavior as corresponding ``box.space`` methods."
msgstr ""

#: ../../doc/enterprise/read_views.rst:90
msgid "The example below shows how to select 4 records from the ``bands`` space:"
msgstr ""

#: ../../doc/enterprise/read_views.rst:92
msgid "tarantool> read_view1.space.bands:select({}, {limit = 4})\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"  - [2, 'Scorpions', 1965]\n"
"  - [3, 'Ace of Base', 1987]\n"
"  - [4, 'The Beatles', 1960]\n"
"..."
msgstr ""

#: ../../doc/enterprise/read_views.rst:102
msgid "Similarly, you can retrieve data by the specific index."
msgstr ""

#: ../../doc/enterprise/read_views.rst:104
msgid "tarantool> read_view1.space.bands.index.year:select({}, {limit = 4})\n"
"---\n"
"- - [4, 'The Beatles', 1960]\n"
"  - [2, 'Scorpions', 1965]\n"
"  - [1, 'Roxette', 1986]\n"
"  - [3, 'Ace of Base', 1987]\n"
"..."
msgstr ""

#: ../../doc/enterprise/read_views.rst:119
msgid "Closing a read view"
msgstr ""

#: ../../doc/enterprise/read_views.rst:121
msgid "When a read view is no longer needed, close it using the :ref:`read_view_object:close() <read_view_object-close>` method because a read view may consume a substantial amount of memory."
msgstr ""

#: ../../doc/enterprise/read_views.rst:125
#: ../../doc/enterprise/read_views.rst:198
msgid "tarantool> read_view1:close()\n"
"---\n"
"..."
msgstr ""

#: ../../doc/enterprise/read_views.rst:131
msgid "Otherwise, a read view is closed implicitly when the read view object is collected by the Lua garbage collector."
msgstr ""

#: ../../doc/enterprise/read_views.rst:133
msgid "After the read view is closed, its :ref:`status <read_view_object-status>` is set to ``closed``. On an attempt to use it, an error is raised."
msgstr ""

#: ../../doc/enterprise/read_views.rst:141
msgid "Example"
msgstr ""

#: ../../doc/enterprise/read_views.rst:144
msgid "A Tarantool session below demonstrates how to open a read view, get data from this view, and close it. To repeat these steps, you need to bootstrap a Tarantool instance as described in :ref:`Using data operations <box_space-operations-detailed-examples>` (you can skip creating secondary indexes)."
msgstr ""

#: ../../doc/enterprise/read_views.rst:150
msgid "Insert test data."
msgstr ""

#: ../../doc/enterprise/read_views.rst:152
msgid "tarantool> bands:insert{1, 'Roxette', 1986}\n"
"           bands:insert{2, 'Scorpions', 1965}\n"
"           bands:insert{3, 'Ace of Base', 1987}\n"
"           bands:insert{4, 'The Beatles', 1960}"
msgstr ""

#: ../../doc/enterprise/read_views.rst:159
msgid "Create a read view by calling the ``open`` function. Then, make sure that the read view status is ``open``."
msgstr ""

#: ../../doc/enterprise/read_views.rst:162
msgid "tarantool> read_view1 = box.read_view.open({name = 'read_view1'})\n"
"\n"
"tarantool> read_view1.status\n"
"---\n"
"- open\n"
"..."
msgstr ""

#: ../../doc/enterprise/read_views.rst:171
msgid "Change data in a database using the ``delete`` and ``update`` operations."
msgstr ""

#: ../../doc/enterprise/read_views.rst:173
msgid "tarantool> bands:delete(4)\n"
"---\n"
"- [4, 'The Beatles', 1960]\n"
"...\n"
"tarantool> bands:update({2}, {{'=', 2, 'Pink Floyd'}})\n"
"---\n"
"- [2, 'Pink Floyd', 1965]\n"
"..."
msgstr ""

#: ../../doc/enterprise/read_views.rst:184
msgid "Query a read view to make sure it contains a snapshot of data before a database is updated."
msgstr ""

#: ../../doc/enterprise/read_views.rst:186
msgid "tarantool> read_view1.space.bands:select()\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"  - [2, 'Scorpions', 1965]\n"
"  - [3, 'Ace of Base', 1987]\n"
"  - [4, 'The Beatles', 1960]\n"
"..."
msgstr ""

#: ../../doc/enterprise/read_views.rst:196
msgid "Close a read view."
msgstr ""
