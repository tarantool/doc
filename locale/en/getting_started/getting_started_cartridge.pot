
msgid "Creating your first Tarantool Cartridge application"
msgstr ""

msgid "Here we'll walk you through developing a simple cluster application."
msgstr ""

msgid "First, `set up the development environment <https://github.com/tarantool/cartridge-cli#installation>`_."
msgstr ""

msgid "Next, create an application named ``myapp``. Say:"
msgstr ""

msgid "$ cartridge create --name myapp"
msgstr ""

msgid "This will create a Tarantool Cartridge application in the ``./myapp`` directory, with a handful of :ref:`template files and directories <creating-an-application-from-template>` inside."
msgstr ""

msgid "Go inside and make a dry run:"
msgstr ""

msgid "$ cd ./myapp\n"
"$ cartridge build\n"
"$ cartridge start"
msgstr ""

msgid "This will build the application locally, start 5 instances of Tarantool, and run the application as it is, with no business logic yet."
msgstr ""

msgid "Why 5 instances? See the ``instances.yml`` file in your application directory. It contains the :ref:`configuration <cartridge-deployment>` of all instances that you can use in the cluster. By default, it defines configuration for 5 Tarantool instances."
msgstr ""

msgid "myapp.router:\n"
"  workdir: ./tmp/db_dev/3301\n"
"  advertise_uri: localhost:3301\n"
"  http_port: 8081\n"
"\n"
"myapp.s1-master:\n"
"  workdir: ./tmp/db_dev/3302\n"
"  advertise_uri: localhost:3302\n"
"  http_port: 8082\n"
"\n"
"myapp.s1-replica:\n"
"  workdir: ./tmp/db_dev/3303\n"
"  advertise_uri: localhost:3303\n"
"  http_port: 8083\n"
"\n"
"myapp.s2-master:\n"
"  workdir: ./tmp/db_dev/3304\n"
"  advertise_uri: localhost:3304\n"
"  http_port: 8084\n"
"\n"
"myapp.s2-replica:\n"
"  workdir: ./tmp/db_dev/3305\n"
"  advertise_uri: localhost:3305\n"
"  http_port: 8085"
msgstr ""

msgid "You can already see these instances in the cluster management web interface at http://localhost:8081 (here 8081 is the HTTP port of the first instance specified in ``instances.yml``)."
msgstr ""

msgid "Okay, press ``Ctrl + C`` to stop the cluster for a while."
msgstr ""

msgid "Now itâ€™s time to add some business logic to your application. This will be an evergreen \"Hello world!\"\" -- just to keep things simple."
msgstr ""

msgid "Rename the template file ``app/roles/custom.lua`` to ``hello-world.lua``."
msgstr ""

msgid "$ mv app/roles/custom.lua app/roles/hello-world.lua"
msgstr ""

msgid "This will be your *role*. In Tarantool Cartridge, a role is a Lua module that implements some instance-specific functions and/or logic. Further on we'll show how to add code to a role, build it, enable and test."
msgstr ""

msgid "There is already some code in the role's ``init()`` function."
msgstr ""

msgid " local function init(opts) -- luacheck: no unused args\n"
"     -- if opts.is_master then\n"
"     -- end\n"
"\n"
"     local httpd = cartridge.service_get('httpd')\n"
"     httpd:route({method = 'GET', path = '/hello'}, function()\n"
"         return {body = 'Hello world!'}\n"
"     end)\n"
"\n"
"     return true\n"
" end"
msgstr ""

msgid "This exports an HTTP endpoint ``/hello``. For example, http://localhost:8081/hello if you address the first instance from the ``instances.yml`` file. If you open it in a browser after enabling the role (we'll do it here a bit later), you'll see \"Hello world!\" on the page."
msgstr ""

msgid "Let's add some more code there."
msgstr ""

msgid " local function init(opts) -- luacheck: no unused args\n"
"     -- if opts.is_master then\n"
"     -- end\n"
"\n"
"     local httpd = cartridge.service_get('httpd')\n"
"     httpd:route({method = 'GET', path = '/hello'}, function()\n"
"         return {body = 'Hello world!'}\n"
"     end)\n"
"\n"
"     local log = require('log')\n"
"     log.info('Hello world!')\n"
"\n"
"     return true\n"
" end"
msgstr ""

msgid "This writes \"Hello, world!\" to the console when the role gets enabled, so you'll have a chance to spot this. No rocket science."
msgstr ""

msgid "Next, amend ``role_name`` in the \"return\" section of the ``hello-world.lua`` file. This text will be displayed as a label for your role in the cluster management web interface."
msgstr ""

msgid " return {\n"
"     role_name = 'Hello world!',\n"
"     init = init,\n"
"     stop = stop,\n"
"     validate_config = validate_config,\n"
"     apply_config = apply_config,\n"
" }"
msgstr ""

msgid "The final thing to do before you can run the application is to add your role to the list of available cluster roles in the ``init.lua`` file."
msgstr ""

msgid " local ok, err = cartridge.cfg({\n"
"     workdir = 'tmp/db',\n"
"     roles = {\n"
"         'cartridge.roles.vshard-storage',\n"
"         'cartridge.roles.vshard-router',\n"
"         'app.roles.hello-world'\n"
"     },\n"
"     cluster_cookie = 'myapp-cluster-cookie',\n"
" })"
msgstr ""

msgid "Now the cluster will be aware of your role."
msgstr ""

msgid "Why ``app.roles.hello-world``? By default, the role name here should match the path from the application root (``./myapp``) to the role file (``app/roles/hello-world.lua``)."
msgstr ""

msgid "Fine! Your role is ready. Re-build the application and re-start the cluster now:"
msgstr ""

msgid "$ cartridge build\n"
"$ cartridge start"
msgstr ""

msgid "Now all instances are up, but idle, waiting for you to enable roles for them."
msgstr ""

msgid "Instances (replicas) in a Tarantool Cartridge cluster are organized into *replica sets*. Roles are enabled per replica set, so all instances in a replica set have the same roles enabled."
msgstr ""

msgid "Let's create a replica set containing just one instance and enable your role:"
msgstr ""

msgid "Open the cluster management web interface at http://localhost:8081."
msgstr ""

msgid "Click **Configure**."
msgstr ""

msgid "Check the role ``Hello world!`` to enable it. Notice that the role name here matches the label text that you specified in the ``role_name`` parameter in the ``hello-world.lua`` file."
msgstr ""

msgid "(Optionally) Specify the replica set name, for example \"hello-world-replica-set\"."
msgstr ""

msgid "Click **Create replica set** and see the newly-created replica set in the web interface."
msgstr ""

msgid "Your custom role got enabled. Find the \"Hello world!\" message in console, like this:"
msgstr ""

msgid "Finally, open the HTTP endpoint of this instance at http://localhost:8081/hello and see the reply to your GET request."
msgstr ""

msgid "Everything is up and running! What's next?"
msgstr ""

msgid "Follow :ref:`this guide <cartridge-deployment>` to set up the rest of the cluster and try some cool cluster management features."
msgstr ""

msgid "Get inspired with `these examples <https://github.com/tarantool/examples/>`_ and implement more sophisticated business logic for your role."
msgstr ""

msgid ":ref:`Pack <packing-an-application>` your application for easy distribution. Choose what you like: a DEB or RPM package, a TGZ archive, or a Docker image."
msgstr ""

