
msgid "Connecting from Go"
msgstr ""

msgid "Pre-requisites"
msgstr ""

msgid "Before we proceed:"
msgstr ""

msgid "`Install <https://github.com/tarantool/go-tarantool#installation>`_ the ``go-tarantool`` library."
msgstr ""

msgid ":ref:`Start <getting_started_db>` Tarantool (locally or in Docker) and make sure that you have created and populated a database as we suggested :ref:`earlier <creating-db-locally>`."
msgstr ""

msgid "Please do not close the terminal window where Tarantool is running -- you'll need it soon."
msgstr ""

msgid "In order to connect to Tarantool as an administrator, reset the password for the ``admin`` user:"
msgstr ""

msgid "box.schema.user.passwd('pass')"
msgstr ""

msgid "Connecting to Tarantool"
msgstr ""

msgid "To get connected to the Tarantool server, write a simple Go program:"
msgstr ""

msgid "package main\n"
"\n"
"import (\n"
"    \"fmt\"\n"
"\n"
"    \"github.com/tarantool/go-tarantool\"\n"
")\n"
"\n"
"func main() {\n"
"    conn, err := tarantool.Connect(\"127.0.0.1:3301\", tarantool.Opts{})\n"
"\n"
"    if err != nil {\n"
"        fmt.Println(\"Connection refused\")\n"
"    }\n"
"\n"
"    defer conn.Close()\n"
"\n"
"    // Your logic for interacting with the database\n"
"}"
msgstr ""

msgid "You can also specify the user name and password, if needed:"
msgstr ""

msgid "opts := tarantool.Opts{User: \"username\", Pass: \"password\"}\n"
"conn, err := tarantool.Connect(\"127.0.0.1:3301\", opts)\n"
"..."
msgstr ""

msgid "The default user is ``guest``."
msgstr ""

msgid "Manipulating the data"
msgstr ""

msgid "Inserting data"
msgstr ""

msgid "To insert a tuple into a space, use ``insert``:"
msgstr ""

msgid "resp, err = conn.Insert(\"tester\", []interface{}{4, \"ABBA\", 1972})"
msgstr ""

msgid "This inserts the tuple ``(4, \"ABBA\", 1972)`` into a space named ``tester``."
msgstr ""

msgid "The response code and data are available in the ``tarantool.Response`` structure:"
msgstr ""

msgid "code := resp.Code\n"
"data := resp.Data"
msgstr ""

msgid "Querying data"
msgstr ""

msgid "To select a tuple from a space, use ``Select``:"
msgstr ""

msgid "resp, err = conn.Select(\"tester\", \"primary\", 0, 1, tarantool.IterEq, []interface{}{4})"
msgstr ""

msgid "This selects a tuple by the primary key with ``offset`` = 0 and ``limit`` = 1 from a space named ``tester`` (in our example, this is the index named ``primary``, based on the ``id`` field of each tuple)."
msgstr ""

msgid "Next, select tuples by a secondary key."
msgstr ""

msgid "resp, err = conn.Select(\"tester\", \"secondary\", 0, 1, tarantool.IterEq, []interface{}{\"ABBA\"})"
msgstr ""

msgid "Finally, select all the tuples in a space:"
msgstr ""

msgid "resp, err = conn.Select(\"tester\", \"primary\", 0, tarantool.KeyLimit, tarantool.IterAll, []interface{}{})"
msgstr ""

msgid "Updating data"
msgstr ""

msgid "Update a field value using ``Update``:"
msgstr ""

msgid "resp, err = conn.Update(\"tester\", \"primary\", []interface{}{4}, []interface{}{[]interface{}{\"+\", 2, 3}})"
msgstr ""

msgid "This increases by 3 the value of field ``2`` in the tuple with ``id`` = 4. If a tuple with this ``id`` doesn't exist, Tarantool will return an error."
msgstr ""

msgid "Now use ``Replace`` to totally replace the tuple that matches the primary key. If a tuple with this primary key doesn't exist, Tarantool will do nothing."
msgstr ""

msgid "resp, err = conn.Replace(\"tester\", []interface{}{4, \"New band\", 2011})"
msgstr ""

msgid "You can also update the data using ``Upsert`` that works similarly to ``Update``, but creates a new tuple if the old one was not found."
msgstr ""

msgid "resp, err = conn.Upsert(\"tester\", []interface{}{4, \"Another band\", 2000}, []interface{}{[]interface{}{\"+\", 2, 5}})"
msgstr ""

msgid "This increases by 5 the value of the third field in the tuple with ``id`` = 4, -- or inserts the tuple ``(4, \"Another band\", 2000)`` if a tuple with this ``id`` doesn't exist."
msgstr ""

msgid "Deleting data"
msgstr ""

msgid "To delete a tuple, use ``—Åonnection.Delete``:"
msgstr ""

msgid "resp, err = conn.Delete(\"tester\", \"primary\", []interface{}{4})"
msgstr ""

msgid "To delete all tuples in a space (or to delete an entire space), use ``Call``. We'll focus on this function in more detail in the :ref:`next <getting_started-go-stored-procs>` section."
msgstr ""

msgid "To delete all tuples in a space, call ``space:truncate``:"
msgstr ""

msgid "resp, err = conn.Call(\"box.space.tester:truncate\", []interface{}{})"
msgstr ""

msgid "To delete an entire space, call ``space:drop``. This requires connecting to Tarantool as the ``admin`` user:"
msgstr ""

msgid "resp, err = conn.Call(\"box.space.tester:drop\", []interface{}{})"
msgstr ""

msgid "Executing stored procedures"
msgstr ""

msgid "Switch to the terminal window where Tarantool is running."
msgstr ""

msgid "If you don't have a terminal window with remote connection to Tarantool, check out these guides:"
msgstr ""

msgid ":ref:`connecting to a local Tarantool instance <connecting-remotely>`"
msgstr ""

msgid ":ref:`attaching to a Tarantool instance that runs in a Docker container <getting_started-docker-attaching>`"
msgstr ""

msgid "Define a simple Lua function:"
msgstr ""

msgid "function sum(a, b)\n"
"    return a + b\n"
"end"
msgstr ""

msgid "Now we have a Lua function defined in Tarantool. To invoke this function from ``go``, use ``Call``:"
msgstr ""

msgid "resp, err = conn.Call(\"sum\", []interface{}{2, 3})"
msgstr ""

msgid "To send bare Lua code for execution, use ``Eval``:"
msgstr ""

msgid "resp, err = connection.Eval(\"return 4 + 5\", []interface{}{})"
msgstr ""

