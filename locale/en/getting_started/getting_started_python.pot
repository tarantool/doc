
msgid "Connecting from Python"
msgstr ""

msgid "Pre-requisites"
msgstr ""

msgid "Before we proceed:"
msgstr ""

msgid "`Install <https://github.com/tarantool/tarantool-python#download-and-install>`_ the ``tarantool-python`` library. We recommend using ``python3`` and ``pip3``."
msgstr ""

msgid ":ref:`Start <getting_started_db>` Tarantool (locally or in Docker) and make sure that you have created and populated a database as we suggested :ref:`earlier <creating-db-locally>`."
msgstr ""

msgid "Please do not close the terminal window where Tarantool is running -- you'll need it soon."
msgstr ""

msgid "In order to connect to Tarantool as an administrator, reset the password for the ``admin`` user:"
msgstr ""

msgid "box.schema.user.passwd('pass')"
msgstr ""

msgid "Connecting to Tarantool"
msgstr ""

msgid "To get connected to the Tarantool server, say this:"
msgstr ""

msgid ">>> import tarantool\n"
">>> connection = tarantool.connect(\"localhost\", 3301)"
msgstr ""

msgid "You can also specify the user name and password, if needed:"
msgstr ""

msgid ">>> tarantool.connect(\"localhost\", 3301, user=username, password=password)"
msgstr ""

msgid "The default user is ``guest``."
msgstr ""

msgid "Manipulating the data"
msgstr ""

msgid "A **space** is a container for **tuples**. To access a space as a named object, use ``connection.space``:"
msgstr ""

msgid ">>> tester = connection.space('tester')"
msgstr ""

msgid "Inserting data"
msgstr ""

msgid "To insert a tuple into a space, use ``insert``:"
msgstr ""

msgid ">>> tester.insert((4, 'ABBA', 1972))\n"
"[4, 'ABBA', 1972]"
msgstr ""

msgid "Querying data"
msgstr ""

msgid "Let's start with selecting a tuple by the primary key (in our example, this is the index named ``primary``, based on the ``id`` field of each tuple). Use ``select``:"
msgstr ""

msgid ">>> tester.select(4)\n"
"[4, 'ABBA', 1972]"
msgstr ""

msgid "Next, select tuples by a secondary key. For this purpose, you need to specify the number *or* name of the index."
msgstr ""

msgid "First off, select tuples using the index number:"
msgstr ""

msgid ">>> tester.select('Scorpions', index=1)\n"
"[2, 'Scorpions', 2015]"
msgstr ""

msgid "Now make a similar query by the index name and make sure that the result is the same:"
msgstr ""

msgid ">>> tester.select('Scorpions', index='secondary')\n"
"[2, 'Scorpions', 2015]"
msgstr ""

msgid "Finally, select all the tuples in a space via a ``select`` with no arguments:"
msgstr ""

msgid ">>> tester.select()"
msgstr ""

msgid "Updating data"
msgstr ""

msgid "Update a field value using ``update``:"
msgstr ""

msgid ">>> tester.update(4, [('=', 1, 'New group'), ('+', 2, 2)])"
msgstr ""

msgid "This updates the value of field ``1`` and increases the value of field ``2`` in the tuple with ``id`` = 4. If a tuple with this ``id`` doesn't exist, Tarantool will return an error."
msgstr ""

msgid "Now use ``replace`` to totally replace the tuple that matches the primary key. If a tuple with this primary key doesn't exist, Tarantool will do nothing."
msgstr ""

msgid ">>> tester.replace((4, 'New band', 2015))"
msgstr ""

msgid "You can also update the data using ``upsert`` that works similarly to ``update``, but creates a new tuple if the old one was not found."
msgstr ""

msgid ">>> tester.upsert((4, 'Another band', 2000), [('+', 2, 5)])"
msgstr ""

msgid "This increases by 5 the value of field ``2`` in the tuple with ``id`` = 4, -- or inserts the tuple ``(4, \"Another band\", 2000)`` if a tuple with this ``id`` doesn't exist."
msgstr ""

msgid "Deleting data"
msgstr ""

msgid "To delete a tuple, use ``delete(primary_key)``:"
msgstr ""

msgid ">>> tester.delete(4)\n"
"[4, 'New group', 2012]"
msgstr ""

msgid "To delete all tuples in a space (or to delete an entire space), use ``call``. We'll focus on this function in more detail in the :ref:`next <getting_started-python-stored-procs>` section."
msgstr ""

msgid "To delete all tuples in a space, call ``space:truncate``:"
msgstr ""

msgid ">>> connection.call('box.space.tester:truncate', ())"
msgstr ""

msgid "To delete an entire space, call ``space:drop``. This requires connecting to Tarantool as the ``admin`` user:"
msgstr ""

msgid ">>> connection.call('box.space.tester:drop', ())"
msgstr ""

msgid "Executing stored procedures"
msgstr ""

msgid "Switch to the terminal window where Tarantool is running."
msgstr ""

msgid "If you don't have a terminal window with remote connection to Tarantool, check out these guides:"
msgstr ""

msgid ":ref:`connecting to a local Tarantool instance <connecting-remotely>`"
msgstr ""

msgid ":ref:`attaching to a Tarantool instance that runs in a Docker container <getting_started-docker-attaching>`"
msgstr ""

msgid "Define a simple Lua function:"
msgstr ""

msgid "function sum(a, b)\n"
"    return a + b\n"
"end"
msgstr ""

msgid "Now we have a Lua function defined in Tarantool. To invoke this function from ``python``, use ``call``:"
msgstr ""

msgid ">>> connection.call('sum', (3, 2))\n"
"5"
msgstr ""

msgid "To send bare Lua code for execution, use ``eval``:"
msgstr ""

msgid ">>> connection.eval('return 4 + 5')\n"
"9"
msgstr ""

