# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-17 14:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/how-to/app/launching_app.rst:5
msgid "Launching an application"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:7
msgid "Using Tarantool as an application server, you can write your own applications. Tarantool’s native language for writing applications is `Lua <http://www.lua.org/about.html>`_, so a typical application would be a file that contains your Lua script. But you can also write applications in C or C++."
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:15
msgid "If you're new to Lua, we recommend going over the interactive Tarantool tutorial before proceeding with this chapter. To launch the tutorial, say ``tutorial()`` in Tarantool console:"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:19
msgid "tarantool> tutorial()\n"
"---\n"
"- |\n"
" Tutorial -- Screen #1 -- Hello, Moon\n"
" ====================================\n"
"\n"
" Welcome to the Tarantool tutorial.\n"
" It will introduce you to Tarantool’s Lua application server\n"
" and database server, which is what’s running what you’re seeing.\n"
" This is INTERACTIVE -- you’re expected to enter requests\n"
" based on the suggestions or examples in the screen’s text.\n"
" <...>"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:34
msgid "Let's create and launch our first Lua application for Tarantool. Here's a simplest Lua application, the good old \"Hello, world!\":"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:37
msgid "#!/usr/bin/env tarantool\n"
"print('Hello, world!')"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:42
msgid "We save it in a file. Let it be ``myapp.lua`` in the current directory."
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:44
msgid "Now let's discuss how we can launch our application with Tarantool."
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:50
msgid "Launching in Docker"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:52
msgid "If we run Tarantool in a :ref:`Docker container <getting_started-using_docker>`, the following command will start Tarantool without any application:"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:55
msgid "$ # create a temporary container and run it in interactive mode\n"
"$ docker run --rm -t -i tarantool/tarantool:latest"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:60
msgid "To run Tarantool with our application, we can say:"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:62
msgid "$ # create a temporary container and\n"
"$ # launch Tarantool with our application\n"
"$ docker run --rm -t -i \\\n"
"             -v `pwd`/myapp.lua:/opt/tarantool/myapp.lua \\\n"
"             -v /data/dir/on/host:/var/lib/tarantool \\\n"
"             tarantool/tarantool:latest tarantool /opt/tarantool/myapp.lua"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:71
msgid "Here two resources on the host get mounted in the container:"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:73
msgid "our application file (myapp.lua) and"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:74
msgid "Tarantool data directory (``/data/dir/on/host``)."
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:76
msgid "By convention, the directory for Tarantool application code inside a container is ``/opt/tarantool``, and the directory for data is ``/var/lib/tarantool``."
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:83
msgid "Launching a binary program"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:85
msgid "If we run Tarantool from a :ref:`package <getting_started-using_package_manager>` or from a :ref:`source build <building_from_source>`, we can launch our application:"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:89
msgid "in the script mode,"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:90
msgid "as a server application, or"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:91
msgid "as a daemon service."
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:93
msgid "The simplest way is to pass the filename to Tarantool at start:"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:95
#: ../../doc/how-to/app/launching_app.rst:186
msgid "$ tarantool myapp.lua\n"
"Hello, world!\n"
"$"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:101
msgid "Tarantool starts, executes our script in the **script mode** and exits."
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:103
msgid "Now let’s turn this script into a **server application**. We use :doc:`box.cfg </reference/reference_lua/box_cfg>` from Tarantool’s built-in Lua module to:"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:107
msgid "launch the database (a database has a persistent on-disk state, which needs to be restored after we start an application) and"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:109
msgid "configure Tarantool as a server that accepts requests over a TCP port."
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:111
msgid "We also add some simple database logic, using :doc:`space.create() </reference/reference_lua/box_schema/space_create>` and :ref:`create_index() <box_space-create_index>` to create a space with a primary index. We use the function :doc:`box.once() </reference/reference_lua/box_once>` to make sure that our logic will be executed only once when the database is initialized for the first time, so we don't try to create an existing space or index on each invocation of the script:"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:119
msgid "#!/usr/bin/env tarantool\n"
"-- Configure database\n"
"box.cfg {\n"
"   listen = 3301\n"
"}\n"
"box.once(\"bootstrap\", function()\n"
"   box.schema.space.create('tweedledum')\n"
"   box.space.tweedledum:create_index('primary',\n"
"       { type = 'TREE', parts = {1, 'unsigned'}})\n"
"end)"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:132
msgid "Now we launch our application in the same manner as before:"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:134
msgid "$ tarantool myapp.lua\n"
"Hello, world!\n"
"2017-08-11 16:07:14.250 [41436] main/101/myapp.lua C> version 2.1.0-429-g4e5231702\n"
"2017-08-11 16:07:14.250 [41436] main/101/myapp.lua C> log level 5\n"
"2017-08-11 16:07:14.251 [41436] main/101/myapp.lua I> mapping 1073741824 bytes for tuple arena...\n"
"2017-08-11 16:07:14.255 [41436] main/101/myapp.lua I> recovery start\n"
"2017-08-11 16:07:14.255 [41436] main/101/myapp.lua I> recovering from `./00000000000000000000.snap'\n"
"2017-08-11 16:07:14.271 [41436] main/101/myapp.lua I> recover from `./00000000000000000000.xlog'\n"
"2017-08-11 16:07:14.271 [41436] main/101/myapp.lua I> done `./00000000000000000000.xlog'\n"
"2017-08-11 16:07:14.272 [41436] main/102/hot_standby I> recover from `./00000000000000000000.xlog'\n"
"2017-08-11 16:07:14.274 [41436] iproto/102/iproto I> binary: started\n"
"2017-08-11 16:07:14.275 [41436] iproto/102/iproto I> binary: bound to [::]:3301\n"
"2017-08-11 16:07:14.275 [41436] main/101/myapp.lua I> done `./00000000000000000000.xlog'\n"
"2017-08-11 16:07:14.278 [41436] main/101/myapp.lua I> ready to accept requests"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:151
msgid "This time, Tarantool executes our script and keeps working as a server, accepting TCP requests on port 3301. We can see Tarantool in the current session’s process list:"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:155
msgid "$ ps | grep \"tarantool\"\n"
"  PID TTY           TIME CMD\n"
"41608 ttys001       0:00.47 tarantool myapp.lua <running>"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:161
msgid "But the Tarantool instance will stop if we close the current terminal window. To detach Tarantool and our application from the terminal window, we can launch it in the **daemon mode**. To do so, we add some parameters to ``box.cfg{}``:"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:165
msgid ":ref:`background <cfg_basic-background>` = ``true`` that actually tells Tarantool to work as a daemon service,"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:167
msgid ":ref:`log <cfg_logging-log>` = ``'dir-name'`` that tells the Tarantool daemon where to store its log file (other log settings are available in Tarantool :ref:`log <log-module>` module), and"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:170
msgid ":ref:`pid_file <cfg_basic-pid_file>` = ``'file-name'`` that tells the Tarantool daemon where to store its pid file."
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:173
msgid "For example:"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:175
msgid "box.cfg {\n"
"   listen = 3301,\n"
"   background = true,\n"
"   log = '1.log',\n"
"   pid_file = '1.pid'\n"
"}"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:184
msgid "We launch our application in the same manner as before:"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:192
msgid "Tarantool executes our script, gets detached from the current shell session (you won't see it with ``ps | grep \"tarantool\"``) and continues working in the background as a daemon attached to the global session (with SID = 0):"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:196
msgid "$ ps -ef | grep \"tarantool\"\n"
"  PID SID     TIME  CMD\n"
"42178   0  0:00.72 tarantool myapp.lua <running>"
msgstr ""

#: ../../doc/how-to/app/launching_app.rst:202
msgid "Now that we have discussed how to create and launch a Lua application for Tarantool, let's dive deeper into programming practices."
msgstr ""
