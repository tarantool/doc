# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-17 14:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/how-to/other/iproto.rst:5
msgid "Understanding the binary protocol"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:8
msgid "Overview"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:10
msgid "To communicate with each other, Tarantool instances use a binary protocol called iproto. To learn more, see the :ref:`Binary protocol <box_protocol>` section."
msgstr ""

#: ../../doc/how-to/other/iproto.rst:13
msgid "In this set of examples, the user will be looking at binary code transferred via iproto. The code is intercepted with ``tcpdump``, a monitoring utility."
msgstr ""

#: ../../doc/how-to/other/iproto.rst:17
msgid "Examples"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:19
msgid "To follow the examples in this section, get a single Linux computer and start three command-line shells (\"terminals\")."
msgstr ""

#: ../../doc/how-to/other/iproto.rst:22
msgid "-- On terminal #1, Start monitoring port 3302 with `tcpdump <https://www.tcpdump.org/manpages/tcpdump.1.html>`_: |br|"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:24
msgid "sudo tcpdump -i lo 'port 3302' -X"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:28
msgid "On terminal #2, start a server with:"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:30
msgid "box.cfg{listen=3302}\n"
"box.schema.space.create('tspace')\n"
"box.space.tspace:create_index('I')\n"
"box.space.tspace:insert{280}\n"
"box.schema.user.grant('guest','read,write,execute,create,drop','universe')"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:38
msgid "On terminal #3, start another server, which will act as a client, with:"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:40
msgid "box.cfg{}\n"
"net_box = require('net.box')\n"
"conn = net_box.connect('localhost:3302')"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:47
msgid "IPROTO_SELECT"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:49
msgid "On terminal #3, run the following:"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:51
msgid "conn.space.tspace:select(280)"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:55
msgid "Now look at what tcpdump shows for the job connecting to 3302 -- the \"request\". After the words \"length 32\" is a packet that ends with these 32 bytes (we have added indented comments):"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:59
msgid "ce 00 00 00 1b   MP_UINT = decimal 27 = number of bytes after this\n"
"82               MP_MAP, size 2 (we'll call this \"Main-Map\")\n"
"01                 IPROTO_SYNC (Main-Map Item#1)\n"
"04                 MP_INT = 4 = number that gets incremented with each request\n"
"00                 IPROTO_REQUEST_TYPE (Main-Map Item#2)\n"
"01                 IPROTO_SELECT\n"
"86                 MP_MAP, size 6 (we'll call this \"Select-Map\")\n"
"10                   IPROTO_SPACE_ID (Select-Map Item#1)\n"
"cd 02 00             MP_UINT = decimal 512 = id of tspace (could be larger)\n"
"11                   IPROTO_INDEX_ID (Select-Map Item#2)\n"
"00                   MP_INT = 0 = id of index within tspace\n"
"14                   IPROTO_ITERATOR (Select-Map Item#3)\n"
"00                   MP_INT = 0 = Tarantool iterator_type.h constant ITER_EQ\n"
"13                   IPROTO_OFFSET (Select-Map Item#4)\n"
"00                   MP_INT = 0 = amount to offset\n"
"12                   IPROTO_LIMIT (Select-Map Item#5)\n"
"ce ff ff ff ff       MP_UINT = 4294967295 = biggest possible limit\n"
"20                   IPROTO_KEY (Select-Map Item#6)\n"
"91                   MP_ARRAY, size 1 (we'll call this \"Key-Array\")\n"
"cd 01 18               MP_UINT = 280 (Select-Map Item#6, Key-Array Item#1)\n"
"                       -- 280 is the key value that we are searching for"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:83
msgid "Now read the source code file `net_box.c <https://github.com/tarantool/tarantool/blob/master/src/box/lua/net_box.c>`_ and skip to the line ``netbox_encode_select(lua_State *L)``. From the comments and from simple function calls like ``mpstream_encode_uint(&stream, IPROTO_SPACE_ID);`` you will be able to see how net_box put together the packet contents that you have just observed with tcpdump."
msgstr ""

#: ../../doc/how-to/other/iproto.rst:91
msgid "There are libraries for reading and writing MessagePack objects. C programmers sometimes include `msgpuck.h <https://github.com/rtsisyk/msgpuck>`_."
msgstr ""

#: ../../doc/how-to/other/iproto.rst:94
msgid "Now you know how Tarantool itself makes requests with the binary protocol. When in doubt about a detail, consult ``net_box.c`` -- it has routines for each request. Some :ref:`connectors <index-box_connectors>` have similar code."
msgstr ""

#: ../../doc/how-to/other/iproto.rst:99
msgid "IPROTO_UPDATE"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:101
msgid "For an IPROTO_UPDATE example, suppose a user changes field #2 in tuple #2 in space #256 to ``'BBBB'``. The body will look like this: (notice that in this case there is an extra map item IPROTO_INDEX_BASE, to emphasize that field numbers start with 1, which is optional and can be omitted):"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:107
msgid "04               IPROTO_UPDATE\n"
"85               IPROTO_MAP, size 5\n"
"10                 IPROTO_SPACE_ID, Map Item#1\n"
"cd 02 00           MP_UINT 256\n"
"11                 IPROTO_INDEX_ID, Map Item#2\n"
"00                 MP_INT 0 = primary-key index number\n"
"15                 IPROTO_INDEX_BASE, Map Item#3\n"
"01                 MP_INT = 1 i.e. field numbers start at 1\n"
"21                 IPROTO_TUPLE, Map Item#4\n"
"91                 MP_ARRAY, size 1, for array of operations\n"
"93                   MP_ARRAY, size 3\n"
"a1 3d                   MP_STR = OPERATOR = '='\n"
"02                      MP_INT = FIELD_NO = 2\n"
"a5 42 42 42 42 42       MP_STR = VALUE = 'BBBB'\n"
"20                 IPROTO_KEY, Map Item#5\n"
"91                 MP_ARRAY, size 1, for array of key values\n"
"02                   MP_UINT = primary-key value = 2"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:128
msgid "IPROTO_EXECUTE"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:130
msgid "Byte codes for the :ref:`IPROTO_EXECUTE <box_protocol-execute>` example:"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:132
msgid "0b               IPROTO_EXECUTE\n"
"83               MP_MAP, size 3\n"
"43                 IPROTO_STMT_ID Map Item#1\n"
"ce d7 aa 74 1b     MP_UINT value of n.stmt_id\n"
"41                 IPROTO_SQL_BIND Map Item#2\n"
"92                 MP_ARRAY, size 2\n"
"01                   MP_INT = 1 = value for first parameter\n"
"a1 61                MP_STR = 'a' = value for second parameter\n"
"2b                 IPROTO_OPTIONS Map Item#3\n"
"90                 MP_ARRAY, size 0 (there are no options)"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:146
msgid "IPROTO_INSERT"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:148
msgid "Byte codes for the response to the :codenormal:`box.space.`:codeitalic:`space-name`:codenormal:`:insert{6}` example:"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:151
msgid "ce 00 00 00 20                MP_UINT = HEADER AND BODY SIZE\n"
"83                            MP_MAP, size 3\n"
"00                              IPROTO_REQUEST_TYPE\n"
"ce 00 00 00 00                  MP_UINT = IPROTO_OK\n"
"01                              IPROTO_SYNC\n"
"cf 00 00 00 00 00 00 00 53      MP_UINT = sync value\n"
"05                              IPROTO_SCHEMA_VERSION\n"
"ce 00 00 00 68                  MP_UINT = schema version\n"
"81                            MP_MAP, size 1\n"
"30                              IPROTO_DATA\n"
"dd 00 00 00 01                  MP_ARRAY, size 1 (row count)\n"
"91                              MP_ARRAY, size 1 (field count)\n"
"06                              MP_INT = 6 = the value that was inserted"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:168
msgid "IPROTO_EVAL"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:170
msgid "Byte codes for the response to the ``conn:eval([[box.schema.space.create('_space');]])`` example:"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:173
msgid "ce 00 00 00 3b                  MP_UINT = HEADER AND BODY SIZE\n"
"83                              MP_MAP, size 3 (i.e. 3 items in header)\n"
"   00                              IPROTO_REQUEST_TYPE\n"
"   ce 00 00 80 0a                  MP_UINT = hexadecimal 800a\n"
"   01                              IPROTO_SYNC\n"
"   cf 00 00 00 00 00 00 00 26      MP_UINT = sync value\n"
"   05                              IPROTO_SCHEMA_VERSION\n"
"   ce 00 00 00 78                  MP_UINT = schema version value\n"
"   81                              MP_MAP, size 1\n"
"     31                              IPROTO_ERROR_24\n"
"     db 00 00 00 1d 53 70 61 63 etc. MP_STR = \"Space '_space' already exists\""
msgstr ""

#: ../../doc/how-to/other/iproto.rst:188
msgid "Creating a table with IPROTO_EXECUTE"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:190
msgid "Byte codes, if we use the same net.box connection that we used in the beginning and we say |br| ``conn:execute([[CREATE TABLE t1 (dd INT PRIMARY KEY AUTOINCREMENT, дд STRING COLLATE \"unicode\");]])`` |br| ``conn:execute([[INSERT INTO t1 VALUES (NULL, 'a'), (NULL, 'b');]])`` |br| and we watch what tcpdump displays, we will see two noticeable things: (1) the CREATE statement caused a schema change so the response has a new IPROTO_SCHEMA_VERSION value and the body includes the new contents of some system tables (caused by requests from net.box which users will not see); (2) the final bytes of the response to the INSERT will be:"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:201
msgid "81   MP_MAP, size 1\n"
"42     IPROTO_SQL_INFO\n"
"82     MP_MAP, size 2\n"
"00       Tarantool constant (not in iproto_constants.h) = SQL_INFO_ROW_COUNT\n"
"02       1 = row count\n"
"01       Tarantool constant (not in iproto_constants.h) = SQL_INFO_AUTOINCREMENT_ID\n"
"92       MP_ARRAY, size 2\n"
"01         first autoincrement number\n"
"02         second autoincrement number"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:214
msgid "SELECT with SQL"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:216
msgid "Byte codes for the SQL SELECT example, if we ask for full metadata by saying |br| :code:`conn.space._session_settings:update('sql_full_metadata', {{'=', 'value', true}})` |br| and we select the two rows from the table that we just created |br| :code:`conn:execute([[SELECT dd, дд AS д FROM t1;]])` |br| then tcpdump will show this response, after the header:"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:223
msgid "82                       MP_MAP, size 2 (i.e. metadata and rows)\n"
"32                         IPROTO_METADATA\n"
"92                         MP_ARRAY, size 2 (i.e. 2 columns)\n"
"85                           MP_MAP, size 5 (i.e. 5 items for column#1)\n"
"00 a2 44 44                    IPROTO_FIELD_NAME and 'DD'\n"
"01 a7 69 6e 74 65 67 65 72     IPROTO_FIELD_TYPE and 'integer'\n"
"03 c2                          IPROTO_FIELD_IS_NULLABLE and false\n"
"04 c3                          IPROTO_FIELD_IS_AUTOINCREMENT and true\n"
"05 c0                          PROTO_FIELD_SPAN and nil\n"
"85                           MP_MAP, size 5 (i.e. 5 items for column#2)\n"
"00 a2 d0 94                    IPROTO_FIELD_NAME and 'Д' upper case\n"
"01 a6 73 74 72 69 6e 67        IPROTO_FIELD_TYPE and 'string'\n"
"02 a7 75 6e 69 63 6f 64 65     IPROTO_FIELD_COLL and 'unicode'\n"
"03 c3                          IPROTO_FIELD_IS_NULLABLE and true\n"
"05 a4 d0 b4 d0 b4              IPROTO_FIELD_SPAN and 'дд' lower case\n"
"30                         IPROTO_DATA\n"
"92                         MP_ARRAY, size 2\n"
"92                           MP_ARRAY, size 2\n"
"01                             MP_INT = 1 i.e. contents of row#1 column#1\n"
"a1 61                          MP_STR = 'a' i.e. contents of row#1 column#2\n"
"92                           MP_ARRAY, size 2\n"
"02                             MP_INT = 2 i.e. contents of row#2 column#1\n"
"a1 62                          MP_STR = 'b' i.e. contents of row#2 column#2"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:250
msgid "IPROTO_PREPARE"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:252
msgid "Byte code for the SQL PREPARE example. If we said |br| :code:`conn:prepare([[SELECT dd, дд AS д FROM t1;]])` |br| then tcpdump would show almost the same response, but there would be no IPROTO_DATA. Instead, additional items will appear:"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:257
msgid "34                       IPROTO_BIND_COUNT\n"
"00                       MP_UINT = 0\n"
"\n"
"33                       IPROTO_BIND_METADATA\n"
"90                       MP_ARRAY, size 0"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:265
msgid "``MP_UINT = 0`` and ``MP_ARRAY`` has size 0 because there are no parameters to bind. Full output:"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:268
msgid "84                       MP_MAP, size 4\n"
"43                         IPROTO_STMT_ID\n"
"ce c2 3c 2c 1e             MP_UINT = statement id\n"
"34                         IPROTO_BIND_COUNT\n"
"00                         MP_INT = 0 = number of parameters to bind\n"
"33                         IPROTO_BIND_METADATA\n"
"90                         MP_ARRAY, size 0 = there are no parameters to bind\n"
"32                         IPROTO_METADATA\n"
"92                         MP_ARRAY, size 2 (i.e. 2 columns)\n"
"85                           MP_MAP, size 5 (i.e. 5 items for column#1)\n"
"00 a2 44 44                    IPROTO_FIELD_NAME and 'DD'\n"
"01 a7 69 6e 74 65 67 65 72     IPROTO_FIELD_TYPE and 'integer'\n"
"03 c2                          IPROTO_FIELD_IS_NULLABLE and false\n"
"04 c3                          IPROTO_FIELD_IS_AUTOINCREMENT and true\n"
"05 c0                          PROTO_FIELD_SPAN and nil\n"
"85                           MP_MAP, size 5 (i.e. 5 items for column#2)\n"
"00 a2 d0 94                    IPROTO_FIELD_NAME and 'Д' upper case\n"
"01 a6 73 74 72 69 6e 67        IPROTO_FIELD_TYPE and 'string'\n"
"02 a7 75 6e 69 63 6f 64 65     IPROTO_FIELD_COLL and 'unicode'\n"
"03 c3                          IPROTO_FIELD_IS_NULLABLE and true\n"
"05 a4 d0 b4 d0 b4              IPROTO_FIELD_SPAN and 'дд' lower case"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:293
msgid "Heartbeat"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:295
msgid "Byte code for the :ref:`heartbeat <box_protocol-heartbeat>` example. The master might send this body:"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:297
msgid "83                      MP_MAP, size 3\n"
"00                        Main-Map Item #1 IPROTO_REQUEST_TYPE\n"
"00                          MP_UINT = 0\n"
"02                        Main-Map Item #2 IPROTO_REPLICA_ID\n"
"02                          MP_UINT = 2 = id\n"
"04                        Main-Map Item #3 IPROTO_TIMESTAMP\n"
"cb                          MP_DOUBLE (MessagePack \"Float 64\")\n"
"41 d7 ba 06 7b 3a 03 21     8-byte timestamp\n"
"81                      MP_MAP (body), size 1\n"
"5a                      Body Map Item #1 IPROTO_VCLOCK_SYNC\n"
"14                        MP_UINT = 20 (vclock sync value)"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:311
msgid "Byte code for the :ref:`heartbeat <box_protocol-heartbeat>` example. The replica might send back this body:"
msgstr ""

#: ../../doc/how-to/other/iproto.rst:313
msgid "81                       MP_MAP, size 1\n"
"00                         Main-Map Item #1 IPROTO_REQUEST_TYPE\n"
"00                         MP_UINT = 0 = IPROTO_OK\n"
"83                         MP_MAP (body), size 3\n"
"26                           Body Map Item #1 IPROTO_VCLOCK\n"
"81                             MP_MAP, size 1 (vclock of 1 component)\n"
"01                               MP_UINT = 1 = id (part 1 of vclock)\n"
"06                               MP_UINT = 6 = lsn (part 2 of vclock)\n"
"5a                           Body Map Item #2 IPROTO_VCLOCK_SYNC\n"
"14                             MP_UINT = 20 (vclock sync value)\n"
"53                           Body Map Item #3 IPROTO_TERM\n"
"31                             MP_UINT = 49 (term value)"
msgstr ""
