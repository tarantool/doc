# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 2.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-12 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/how-to/replication/repl_leader_elect.rst:4
msgid "Managing leader elections"
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:6
msgid "Starting from version :doc:`2.6.1 </release/2.6.1>`, Tarantool has the built-in functionality managing automated leader election in a replica set. Learn more about the :ref:`concept of leader election <repl_leader_elect>`."
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:14
msgid "Configuration"
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:16
msgid "box.cfg({\n"
"    election_mode = <string>,\n"
"    election_fencing_mode = <string>,\n"
"    election_timeout = <seconds>,\n"
"    replication_timeout = <seconds>,\n"
"    replication_synchro_quorum = <count>\n"
"})"
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:26
msgid "``election_mode`` -- specifies the role of a node in the leader election process. For the details, refer to the :ref:`option description <cfg_replication-election_mode>` in the configuration reference."
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:29
msgid "``election_fencing_mode`` -- specifies the :ref:`leader fencing mode <repl_leader_elect_fencing>`. For the details, refer to the :ref:`option description <cfg_replication-election_fencing_mode>` in the configuration reference."
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:31
msgid "``election_timeout`` -- specifies the timeout between election rounds if the previous round ended up with a split vote. For the details, refer to the :ref:`option description <cfg_replication-election_timeout>` in the configuration reference."
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:35
msgid "``replication_timeout`` -- reuse of the :ref:`replication_timeout <cfg_replication-replication_timeout>` configuration option for the purpose of the leader election process. Heartbeats sent by an active leader have a timeout after which a new election starts. Heartbeats are sent once per <replication_timeout> seconds. The default value is ``1``. The leader is considered dead if it hasn't sent any heartbeats for the period of ``replication_timeout * 4``."
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:41
msgid "``replication_synchro_quorum`` -- reuse of the :ref:`replication_synchro_quorum <cfg_replication-replication_synchro_quorum>` option for the purpose of configuring the election quorum. The default value is ``1``, meaning that each node becomes a leader immediately after voting for itself. It is best to set up this option value to the ``(<cluster size> / 2) + 1``. Otherwise, there is no guarantee that there is only one leader at a time."
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:47
msgid "It is important to know that being a leader is not the only requirement for a node to be writable. The leader should also satisfy the following requirements:"
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:50
msgid "The :ref:`read_only <cfg_basic-read_only>` option is set to ``false``."
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:52
msgid "The leader shouldn't be in the orphan state."
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:54
msgid "Nothing prevents you from setting the ``read_only`` option to ``true``, but the leader just won't be writable then. The option doesn't affect the election process itself, so a read-only instance can still vote and become a leader."
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:62
msgid "Monitoring"
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:64
msgid "To monitor the current state of a node regarding the leader election, you can use the ``box.info.election`` function. For details, refer to the :doc:`function description </reference/reference_lua/box_info/election>`."
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:69
msgid "**Example:**"
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:71
msgid "tarantool> box.info.election\n"
"---\n"
"- state: follower\n"
"  vote: 0\n"
"  leader: 0\n"
"  term: 1\n"
"..."
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:81
msgid "The Raft-based election implementation logs all its actions with the ``RAFT:`` prefix. The actions are new Raft message handling, node state changing, voting, and term bumping."
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:88
msgid "Important notes"
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:90
msgid "Leader election doesn't work correctly if the election quorum is set to less or equal than ``<cluster size> / 2`` because in that case, a split vote can lead to a state when two leaders are elected at once."
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:94
msgid "For example, suppose there are five nodes. When the quorum is set to ``2``, ``node1`` and ``node2`` can both vote for ``node1``. ``node3`` and ``node4`` can both vote for ``node5``. In this case, ``node1`` and ``node5`` both win the election. When the quorum is set to the cluster majority, that is ``(<cluster size> / 2) + 1`` or greater, the split vote is impossible."
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:100
msgid "That should be considered when adding new nodes. If the majority value is changing, it's better to update the quorum on all the existing nodes before adding a new one."
msgstr ""

#: ../../doc/how-to/replication/repl_leader_elect.rst:104
msgid "Also, the automated leader election doesn't bring many benefits in terms of data safety when used *without* :ref:`synchronous replication <repl_sync>`. If the replication is asynchronous and a new leader gets elected, the old leader is still active and considers itself the leader. In such case, nothing stops it from accepting requests from clients and making transactions. Non-synchronous transactions are successfully committed because they are not checked against the quorum of replicas. Synchronous transactions fail because they are not able to collect the quorum -- most of the replicas reject these old leader's transactions since it is not a leader anymore."
msgstr ""
