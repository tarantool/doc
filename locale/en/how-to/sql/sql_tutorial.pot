# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-21 21:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/how-to/sql/sql_tutorial.rst:4
msgid "SQL tutorial"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:6
msgid "This tutorial is a demonstration of the support for SQL in Tarantool. It includes the functionality that you'd encounter in an \"SQL-101\" course."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:12
msgid "Prerequisites"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:14
msgid "Before starting this tutorial:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:16
msgid "Install the :ref:`tt CLI <tt-installation>` utility."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:18
msgid "Create a tt environment in the current directory using the :ref:`tt init <tt-init>` command."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:20
msgid "Inside the ``instances.enabled`` directory of the created tt environment, create the ``sql_tutorial`` directory."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:22
msgid "Inside ``instances.enabled/sql_tutorial``, create the ``instances.yml`` and ``config.yaml`` files:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:24
msgid "``instances.yml`` specifies instances to run in the current environment:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:26
msgid "instance001:\n"
""
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:30
msgid "``config.yaml`` contains basic :ref:`configuration <configuration_file>`:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:32
msgid "groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        instances:\n"
"          instance001:\n"
"            iproto:\n"
"              listen:\n"
"              - uri: '127.0.0.1:3301'"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:36
msgid "Read more: :ref:`Starting instances using the tt utility <configuration_run_instance_tt>`."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:41
msgid "Create a table and execute SQL statements"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:44
msgid "Start Tarantool"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:46
msgid "After configuration, start a Tarantool instance from the tt environment directory using the following command:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:48
msgid "$ tt start sql_tutorial"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:52
msgid "After that, connect to the instance:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:54
msgid "$ tt connect sql_tutorial:instance001"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:58
msgid "This command opens an interactive Tarantool console. Now you can start working with the database."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:62
msgid "Switch to the SQL language"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:64
msgid "A feature of the client console program is that you can switch languages and specify the end-of-statement delimiter."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:67
msgid "Run the following commands to set the :ref:`console input <interactive_console_input_output>` language to SQL and use semicolon as a delimiter:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:70
msgid "sql_tutorial:instance001> \\set language sql\n"
"sql_tutorial:instance001> \\set delimiter ;"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:77
msgid "CREATE, INSERT, UPDATE, SELECT"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:79
msgid "To get started, enter these SQL statements:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:81
msgid "CREATE TABLE table1 (column1 INTEGER PRIMARY KEY, column2 VARCHAR(100));\n"
"INSERT INTO table1 VALUES (1, 'A');\n"
"UPDATE table1 SET column2 = 'B';\n"
"SELECT * FROM table1 WHERE column1 = 1;"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:88
msgid "The result of the ``SELECT`` statement looks like this:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:90
msgid "sql_tutorial:instance001> SELECT * FROM table1 WHERE column1 = 1;\n"
"---\n"
"- metadata:\n"
"  - name: COLUMN1\n"
"    type: integer\n"
"  - name: COLUMN2\n"
"    type: string\n"
"  rows:\n"
"  - [1, 'B']\n"
"..."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:103
msgid "The result includes:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:105
msgid "metadata: the names and data types of each column"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:106
msgid "result rows"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:108
msgid "For conciseness, metadata is skipped in query results in this tutorial. Only the result rows are shown."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:112
msgid "CREATE TABLE"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:114
msgid "Here is ``CREATE TABLE`` with more details:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:116
msgid "There are multiple columns, with different data types."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:117
msgid "There is a ``PRIMARY KEY`` (unique and not-null) for two of the columns."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:119
msgid "Create another table:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:121
msgid "CREATE TABLE table2 (column1 INTEGER,\n"
"                     column2 VARCHAR(100),\n"
"                     column3 SCALAR,\n"
"                     column4 DOUBLE,\n"
"                     PRIMARY KEY (column1, column2));"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:129
msgid "The result is: ``row_count: 1``."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:132
msgid "INSERT"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:134
msgid "Put four rows in the table (``table2``):"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:136
msgid "The INTEGER and DOUBLE columns get numbers"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:137
msgid "The VARCHAR and SCALAR columns get strings (the SCALAR strings are expressed as hexadecimals)"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:140
msgid "INSERT INTO table2 VALUES (1, 'AB', X'4142', 5.5);\n"
"INSERT INTO table2 VALUES (1, 'CD', X'2020', 1E4);\n"
"INSERT INTO table2 VALUES (2, 'AB', X'2020', 12.34567);\n"
"INSERT INTO table2 VALUES (-1000, '', X'', 0.0);"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:147
msgid "Then try to put another row:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:149
msgid "INSERT INTO table2 VALUES (1, 'AB', X'A5', -5.5);"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:153
msgid "This ``INSERT`` fails because of a primary-key violation: the row with the primary key ``1, 'AB'`` already exists."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:157
msgid "The SEQSCAN keyword"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:159
msgid "Sequential scan is the scan through all the table rows instead of using indexes. In Tarantool, ``SELECT`` SQL queries that perform sequential scans are prohibited by default. For example, this query leads to the error ``Scanning is not allowed for 'table2'``:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:163
msgid "SELECT * FROM table2;"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:167
msgid "To execute a scan query, put the ``SEQSCAN`` keyword before the table name:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:169
msgid "SELECT * FROM SEQSCAN table2;"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:173
msgid "Try to execute these queries that use indexed ``column1`` in filters:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:175
msgid "SELECT * FROM table2 WHERE column1 = 1;\n"
"SELECT * FROM table2 WHERE column1 + 1 = 2;"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:180
#: ../../doc/how-to/sql/sql_tutorial.rst:218
#: ../../doc/how-to/sql/sql_tutorial.rst:276
#: ../../doc/how-to/sql/sql_tutorial.rst:343
#: ../../doc/how-to/sql/sql_tutorial.rst:388
#: ../../doc/how-to/sql/sql_tutorial.rst:477
#: ../../doc/how-to/sql/sql_tutorial.rst:555
#: ../../doc/how-to/sql/sql_tutorial.rst:578
#: ../../doc/how-to/sql/sql_tutorial.rst:610
#: ../../doc/how-to/sql/sql_tutorial.rst:633
#: ../../doc/how-to/sql/sql_tutorial.rst:702
#: ../../doc/how-to/sql/sql_tutorial.rst:731
#: ../../doc/how-to/sql/sql_tutorial.rst:796
msgid "The result is:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:182
msgid "The first query returns rows:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:184
msgid "- [1, 'AB', 'AB', 10.5]\n"
"- [1, 'CD', '  ', 10005]"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:189
msgid "The second query fails with the error ``Scanning is not allowed for 'TABLE2'``. Although ``column1`` is indexed, the expression ``column1 + 1`` is not calculated from the index, which makes this ``SELECT`` a scan query."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:195
msgid "To enable SQL scan queries without ``SEQSCAN`` for the current session, run this command:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:198
msgid "SET SESSION \"sql_seq_scan\" = true;"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:203
msgid "Learn more about using ``SEQSCAN`` in the :ref:`SQL FROM clause description <sql_from>`."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:206
msgid "SELECT with ORDER BY clause"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:208
msgid "Retrieve the 4 rows in the table, in descending order by ``column2``, then (where the ``column2`` values are the same) in ascending order by ``column4``."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:211
msgid "``*`` is short for \"all columns\"."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:213
msgid "SELECT * FROM SEQSCAN table2 ORDER BY column2 DESC, column4 ASC;"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:220
msgid "- - [1, 'CD', '  ', 10000]\n"
"  - [1, 'AB', 'AB', 5.5]\n"
"  - [2, 'AB', '  ', 12.34567]\n"
"  - [-1000, '', '', 0]"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:228
msgid "SELECT with WHERE clauses"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:230
msgid "Retrieve some of what you inserted:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:232
msgid "The first statement uses the ``LIKE`` comparison operator which is asking for \"first character must be 'A', the next characters can be anything.\""
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:235
msgid "The second statement uses logical operators and parentheses, so the ``AND`` expressions must be true, or the ``OR`` expression must be true. Notice the columns don't have to be indexed."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:238
msgid "SELECT column1, column2, column1 * column4 FROM SEQSCAN table2 WHERE column2\n"
"LIKE 'A%';\n"
"SELECT column1, column2, column3, column4 FROM SEQSCAN table2\n"
"    WHERE (column1 < 2 AND column4 < 10)\n"
"    OR column3 = X'2020';"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:246
msgid "The first result is:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:248
msgid "- - [1, 'AB', 5.5]\n"
"  - [2, 'AB', 24.69134]"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:253
msgid "The second result is:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:255
msgid "- - [-1000, '', '', 0]\n"
"  - [1, 'AB', 'AB', 5.5]\n"
"  - [1, 'CD', '  ', 10000]\n"
"  - [2, 'AB', '  ', 12.34567]"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:263
msgid "SELECT with GROUP BY and aggregate functions"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:265
msgid "Retrieve with grouping."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:267
msgid "The rows that have the same values for ``column2`` are grouped and are aggregated -- summed, counted, averaged -- for ``column4``."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:270
msgid "SELECT column2, SUM(column4), COUNT(column4), AVG(column4)\n"
"FROM SEQSCAN table2\n"
"GROUP BY column2;"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:278
msgid "- - ['', 0, 1, 0]\n"
"  - ['AB', 17.84567, 2, 8.922835]\n"
"  - ['CD', 10000, 1, 10000]"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:287
msgid "Complications and complex SELECTs"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:290
msgid "NULLs"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:292
msgid "Insert rows that contain ``NULL`` values."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:294
msgid "``NULL`` is not the same as Lua ``nil``; it commonly is used in SQL for unknown or not-applicable."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:297
msgid "INSERT INTO table2 VALUES (1, NULL, X'4142', 5.5);\n"
"INSERT INTO table2 VALUES (0, '!!@', NULL, NULL);\n"
"INSERT INTO table2 VALUES (0, '!!!', X'00', NULL);"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:303
msgid "The results are:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:305
msgid "The first ``INSERT`` fails because ``NULL`` is not permitted for a column that was defined with a ``PRIMARY KEY`` clause."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:309
msgid "The other ``INSERT`` statements succeed."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:312
msgid "Indexes"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:314
msgid "Create a new index on ``column4``."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:316
msgid "There already is an index for the primary key. Indexes are useful for making queries faster. In this case, the index also acts as a constraint, because it prevents two rows from having the same values in ``column4``. However, it is not an error that ``column4`` has multiple occurrences of NULLs."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:321
msgid "CREATE UNIQUE INDEX i ON table2 (column4);"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:325
msgid "The result is: ``rowcount: 1``."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:328
msgid "Create a subset table"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:330
msgid "Create a table ``table3``, which contains a subset of the ``table2`` columns and a subset of the ``table2`` rows."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:333
msgid "You can do this by combining ``INSERT`` with ``SELECT``. Then select everything from the result table."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:336
msgid "CREATE TABLE table3 (column1 INTEGER, column2 VARCHAR(100), PRIMARY KEY\n"
"(column2));\n"
"INSERT INTO table3 SELECT column1, column2 FROM SEQSCAN table2 WHERE column1 <> 2;\n"
"SELECT * FROM SEQSCAN table3;"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:345
msgid "- - [-1000, '']\n"
"  - [0, '!!!']\n"
"  - [0, '!!@']\n"
"  - [1, 'AB']\n"
"  - [1, 'CD']"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:354
msgid "SELECT with a subquery"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:356
msgid "A subquery is a query within a query."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:358
msgid "Find all the rows in ``table2`` whose ``(column1, column2)`` values are not present in ``table3``."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:361
msgid "SELECT * FROM SEQSCAN table2 WHERE (column1, column2) NOT IN (SELECT column1,\n"
"column2 FROM SEQSCAN table3);"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:366
msgid "The result is the single row that was excluded when inserting the rows with the ``INSERT ... SELECT`` statement:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:369
msgid "- - [2, 'AB', '  ', 12.34567]"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:374
msgid "SELECT with a join"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:376
msgid "A join is a combination of two tables. There is more than one way to do them in Tarantool, for example, \"Cartesian joins\" or \"left outer joins\"."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:379
msgid "This example shows the most typical case, where column values from one table match column values from another table."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:382
msgid "SELECT * FROM SEQSCAN table2, table3\n"
"    WHERE table2.column1 = table3.column1 AND table2.column2 = table3.column2\n"
"    ORDER BY table2.column4;"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:390
msgid "- - [0, '!!!', \"\\0\", null, 0, '!!!']\n"
"  - [0, '!!@', null, null, 0, '!!@']\n"
"  - [-1000, '', '', 0, -1000, '']\n"
"  - [1, 'AB', 'AB', 5.5, 1, 'AB']\n"
"  - [1, 'CD', ' ', 10000, 1, 'CD']"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:401
msgid "Constraints and foreign keys"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:404
msgid "CREATE TABLE with a CHECK clause"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:406
msgid "Create a table that includes a constraint -- there must not be any rows containing ``13`` in ``column2``. After that, try to insert the following row:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:409
msgid "CREATE TABLE table4 (column1 INTEGER PRIMARY KEY, column2 INTEGER, CHECK\n"
"(column2 <> 13));\n"
"INSERT INTO table4 VALUES (12, 13);"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:415
msgid "Result: the insert fails, as it should, with the message ``Check constraint 'ck_unnamed_TABLE4_1' failed for tuple``."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:419
msgid "CREATE TABLE with a FOREIGN KEY clause"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:421
msgid "Create a table that includes a constraint: there must not be any rows containing values that do not appear in ``table2``."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:424
msgid "CREATE TABLE table5 (column1 INTEGER, column2 VARCHAR(100),\n"
"    PRIMARY KEY (column1),\n"
"    FOREIGN KEY (column1, column2) REFERENCES table2 (column1, column2));\n"
"INSERT INTO table5 VALUES (2,'AB');\n"
"INSERT INTO table5 VALUES (3,'AB');"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:432
#: ../../doc/how-to/sql/sql_tutorial.rst:527
msgid "Result:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:434
msgid "The first ``INSERT`` statement succeeds because ``table3`` contains a row with ``[2, 'AB', ' ', 12.34567]``."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:437
msgid "The second ``INSERT`` statement, correctly, fails with the message ``Foreign key constraint ''fk_unnamed_TABLE5_1'' failed: foreign tuple was not found``."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:441
msgid "UPDATE"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:443
msgid "Due to earlier ``INSERT`` statements, these values are in ``column4`` of ``table2``: ``{0, NULL, NULL, 5.5, 10000, 12.34567}``. Add ``5`` to each of these values except ``0``. Adding ``5`` to ``NULL`` results in NULL, as SQL arithmetic requires. Use ``SELECT`` to see what happened to ``column4``."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:448
msgid "UPDATE table2 SET column4 = column4 + 5 WHERE column4 <> 0;\n"
"SELECT column4 FROM SEQSCAN table2 ORDER BY column4;"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:453
msgid "The result is: ``{NULL, NULL, 0, 10.5, 17.34567, 10005}``."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:456
msgid "DELETE"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:458
msgid "Due to earlier ``INSERT`` statements, there are 6 rows in ``table2``:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:460
msgid "- - [-1000, '', '', 0]\n"
"  - [0, '!!!', \"\\0\", null]\n"
"  - [0, '!!@', null, null]\n"
"  - [1, 'AB', 'AB', 10.5]\n"
"  - [1, 'CD', '  ', 10005]\n"
"  - [2, 'AB', '  ', 17.34567]"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:469
msgid "Try to delete the last and first of these rows:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:471
msgid "DELETE FROM table2 WHERE column1 = 2;\n"
"DELETE FROM table2 WHERE column1 = -1000;\n"
"SELECT COUNT(column1) FROM SEQSCAN table2;"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:479
msgid "The first ``DELETE`` statement causes an error because there's a foreign-key constraint."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:482
msgid "The second ``DELETE`` statement succeeds."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:484
msgid "The ``SELECT`` statement shows that there are 5 rows remaining."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:487
msgid "ALTER TABLE with a FOREIGN KEY clause"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:489
msgid "Create another constraint that there must not be any rows in ``table1`` containing values that do not appear in ``table5``. This was impossible during the ``table1`` creation because at that time ``table5`` did not exist. You can add constraints to existing tables with the ``ALTER TABLE`` statement."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:494
msgid "ALTER TABLE table1 ADD CONSTRAINT c\n"
"    FOREIGN KEY (column1) REFERENCES table5 (column1);\n"
"DELETE FROM table1;\n"
"ALTER TABLE table1 ADD CONSTRAINT c\n"
"    FOREIGN KEY (column1) REFERENCES table5 (column1);"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:502
msgid "Result: the ``ALTER TABLE`` statement fails the first time because there is a row in ``table1``, and ``ADD CONSTRAINT`` requires that the table be empty. After the row is deleted, the ``ALTER TABLE`` statement completes successfully. Now there is a chain of references, from ``table1`` to ``table5`` and from ``table5`` to ``table2``."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:509
msgid "Triggers"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:511
msgid "The idea of a trigger is: if a change (``INSERT`` or ``UPDATE`` or ``DELETE``) happens, then a further action -- perhaps another ``INSERT`` or ``UPDATE`` or ``DELETE`` -- will happen."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:515
msgid "Set up the following trigger: when a update to ``table3`` is done, do an update to ``table2``. Specify this as ``FOR EACH ROW``, so that the trigger activates 5 times (since there are 5 rows in ``table3``)."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:519
msgid "SELECT column4 FROM table2 WHERE column1 = 2;\n"
"CREATE TRIGGER tr AFTER UPDATE ON table3 FOR EACH ROW\n"
"BEGIN UPDATE table2 SET column4 = column4 + 1 WHERE column1 = 2; END;\n"
"UPDATE table3 SET column2 = column2;\n"
"SELECT column4 FROM table2 WHERE column1 = 2;"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:529
msgid "The first ``SELECT`` shows that the original value of ``column4`` in ``table2`` where ``column1 = 2`` was: 17.34567."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:531
msgid "The second ``SELECT`` returns:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:533
msgid "- - [22.34567]"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:540
msgid "Operators and functions"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:543
msgid "String operations"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:545
msgid "You can manipulate string data (usually defined with ``CHAR`` or ``VARCHAR`` data types) in many ways. For example:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:548
msgid "concatenate strings with the ``||`` operator"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:549
msgid "extract substrings with the ``SUBSTR`` function"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:551
msgid "SELECT column2, column2 || column2, SUBSTR(column2, 2, 1) FROM SEQSCAN table2;"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:557
msgid "- - ['!!!', '!!!!!!', '!']\n"
"  - ['!!@', '!!@!!@', '!']\n"
"  - ['AB', 'ABAB', 'B']\n"
"  - ['CD', 'CDCD', 'D']\n"
"  - ['AB', 'ABAB', 'B']"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:566
msgid "Number operations"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:568
msgid "You can also manipulate number data (usually defined with ``INTEGER`` or ``DOUBLE`` data types) in many ways. For example:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:571
msgid "shift left with the ``<<`` operator"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:572
msgid "get modulo with the ``%`` operator"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:574
msgid "SELECT column1, column1 << 1, column1 << 2, column1 % 2 FROM SEQSCAN table2;"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:580
msgid "- - [0, 0, 0, 0]\n"
"  - [0, 0, 0, 0]\n"
"  - [1, 2, 4, 1]\n"
"  - [1, 2, 4, 1]\n"
"  - [2, 4, 8, 0]"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:589
msgid "Ranges and limits"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:591
msgid "Tarantool can handle:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:593
msgid "integers anywhere in the 4-byte integer range"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:594
msgid "approximate-numerics anywhere in the 8-byte IEEE floating point range"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:595
msgid "any Unicode characters, with UTF-8 encoding and a choice of collations"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:597
msgid "Insert such values in a new table and see what happens when you select them with arithmetic on a number column and ordering by a string column."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:600
msgid "CREATE TABLE t6 (column1 INTEGER, column2 VARCHAR(10), column4 DOUBLE,\n"
"PRIMARY KEY (column1));\n"
"INSERT INTO t6 VALUES (-1234567890, 'АБВГД', 123456.123456);\n"
"INSERT INTO t6 VALUES (+1234567890, 'GD', 1e30);\n"
"INSERT INTO t6 VALUES (10, 'FADEW?', 0.000001);\n"
"INSERT INTO t6 VALUES (5, 'ABCDEFG', NULL);\n"
"SELECT column1 + 1, column2, column4 * 2 FROM SEQSCAN t6 ORDER BY column2;"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:612
msgid "- - [6, 'ABCDEFG', null]\n"
"  - [11, 'FADEW?', 2e-06]\n"
"  - [1234567891, 'GD', 2e+30]\n"
"  - [-1234567889, 'АБВГД', 246912.246912]"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:620
msgid "Views"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:622
msgid "A view (or *viewed table*), is virtual, meaning that its rows aren't physically in the database, their values are calculated from other tables."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:625
msgid "Create a view ``v3`` based on ``table3`` and select from it:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:627
msgid "CREATE VIEW v3 AS SELECT SUBSTR(column2,1,2), column4 FROM SEQSCAN t6\n"
"WHERE column4 >= 0;\n"
"SELECT * FROM v3;"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:635
#: ../../doc/how-to/sql/sql_tutorial.rst:658
msgid "- - ['АБ', 123456.123456]\n"
"  - ['FA', 1e-06]\n"
"  - ['GD', 1e+30]"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:642
msgid "Common table expressions"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:644
msgid "By putting ``WITH`` + ``SELECT`` in front of a ``SELECT``, you can make a temporary view that lasts for the duration of the statement."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:647
msgid "Create such a view and select from it:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:649
msgid "WITH cte AS (\n"
"             SELECT SUBSTR(column2,1,2), column4 FROM SEQSCAN t6\n"
"             WHERE column4 >= 0)\n"
"SELECT * FROM cte;"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:656
msgid "The result is the same as the ``CREATE VIEW`` result:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:665
msgid "VALUES"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:667
msgid "Tarantool can handle statements like ``SELECT 55;`` (select without ``FROM``) like some other popular DBMSs. But it also handles the more standard statement ``VALUES (expression [, expression ...]);``."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:671
msgid "SELECT 55 * 55, 'The rain in Spain';\n"
"VALUES (55 * 55, 'The rain in Spain');"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:676
msgid "The result of both these statements is:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:678
msgid "- - [3025, 'The rain in Spain']"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:683
msgid "Metadata"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:685
msgid "To find out the internal structure of the Tarantool database with SQL, select from the Tarantool system tables ``_space``, ``_index``, and ``_trigger``:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:688
msgid "SELECT * FROM SEQSCAN \"_space\";\n"
"SELECT * FROM SEQSCAN \"_index\";\n"
"SELECT * FROM SEQSCAN \"_trigger\";"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:694
msgid "Actually, these statements select from NoSQL \"system spaces\"."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:696
msgid "Select from ``_space`` by a table name:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:698
msgid "SELECT \"id\", \"name\", \"owner\", \"engine\" FROM \"_space\" WHERE \"name\"='TABLE3';"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:704
msgid "- - [517, 'TABLE3', 1, 'memtx']"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:711
msgid "Using SQL from Lua"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:713
msgid "You can execute SQL statements directly from the Lua code without switching to the SQL input."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:716
msgid "Change the settings so that the console accepts statements written in Lua instead of statements written in SQL:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:719
msgid "sql_tutorial:instance001> \\set language lua"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:724
msgid "box.execute()"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:725
msgid "You can invoke SQL statements using the Lua function ``box.execute(string)``."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:727
msgid "sql_tutorial:instance001> box.execute([[SELECT * FROM SEQSCAN table3;]]);"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:733
msgid "- - [-1000, '']\n"
"  - [0, '!!!']\n"
"  - [0, '!!@']\n"
"  - [1, 'AB']\n"
"  - [1, 'CD']\n"
"..."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:743
msgid "Create a million-row table"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:745
msgid "To see how the SQL in Tarantool scales, create a bigger table."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:747
msgid "The following Lua code generates one million rows with random data and inserts them into a table. Copy this code into the Tarantool console and wait a bit:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:751
msgid "box.execute(\"CREATE TABLE tester (s1 INT PRIMARY KEY, s2 VARCHAR(10))\");\n"
"\n"
"function string_function()\n"
"    local random_number\n"
"    local random_string\n"
"    random_string = \"\"\n"
"    for x = 1, 10, 1 do\n"
"        random_number = math.random(65, 90)\n"
"        random_string = random_string .. string.char(random_number)\n"
"    end\n"
"    return random_string\n"
"end;\n"
"\n"
"function main_function()\n"
"    local string_value, t, sql_statement\n"
"    for i = 1, 1000000, 1 do\n"
"        string_value = string_function()\n"
"        sql_statement = \"INSERT INTO tester VALUES (\" .. i .. \",'\" .. string_value .. \"')\"\n"
"        box.execute(sql_statement)\n"
"    end\n"
"end;\n"
"start_time = os.clock();\n"
"main_function();\n"
"end_time = os.clock();\n"
"print('insert done in ' .. end_time - start_time .. ' seconds');"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:779
msgid "The result is: you now have a table with a million rows, with a message saying ``insert done in 88.570578 seconds``."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:784
msgid "Select from a million-row table"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:786
msgid "Check how ``SELECT`` works on the million-row table:"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:788
msgid "the first query goes by an index because ``s1`` is the primary key"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:789
msgid "the second query does not go by an index"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:791
msgid "box.execute([[SELECT * FROM tester WHERE s1 = 73446;]]);\n"
"box.execute([[SELECT * FROM SEQSCAN tester WHERE s2 LIKE 'QFML%';]]);"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:798
msgid "the first statement completes instantaneously"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:799
msgid "the second statement completed noticeably slower"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:802
msgid "Cleanup and exit"
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:804
msgid "To cleanup all the objects created in this tutorial, switch to the SQL input language again. Then run the ``DROP`` statements for all created tables, views, and triggers."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:808
msgid "These statements must be entered separately."
msgstr ""

#: ../../doc/how-to/sql/sql_tutorial.rst:810
msgid "sql_tutorial:instance001> \\set language sql\n"
"sql_tutorial:instance001> DROP TABLE tester;\n"
"sql_tutorial:instance001> DROP TABLE table1;\n"
"sql_tutorial:instance001> DROP VIEW v3;\n"
"sql_tutorial:instance001> DROP TRIGGER tr;\n"
"sql_tutorial:instance001> DROP TABLE table5;\n"
"sql_tutorial:instance001> DROP TABLE table4;\n"
"sql_tutorial:instance001> DROP TABLE table3;\n"
"sql_tutorial:instance001> DROP TABLE table2;\n"
"sql_tutorial:instance001> DROP TABLE t6;\n"
"sql_tutorial:instance001> \\set language lua\n"
"sql_tutorial:instance001> os.exit();"
msgstr ""
