# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-17 14:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/concepts/data_model/indexes.rst:5
msgid "Indexes"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:8
msgid "Basics"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:10
msgid "An **index** is a special data structure that stores a group of key values and pointers. It is used for efficient manipulations with data."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:13
msgid "As with spaces, you should specify the index **name** and let Tarantool come up with a unique **numeric identifier** (\"index id\")."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:16
msgid "An index always has a **type**. The default index type is :ref:`TREE <indexes-tree>`. TREE indexes are provided by all Tarantool engines, can index unique and non-unique values, support partial key searches, comparisons, and ordered results. Additionally, the memtx engine supports :ref:`HASH <indexes-hash>`, :ref:`RTREE <indexes-rtree>` and :ref:`BITSET <indexes-bitset>` indexes."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:22
msgid "An index may be **multi-part**, that is, you can declare that an index key value is composed of two or more fields in the tuple, in any order. For example, for an ordinary TREE index, the maximum number of parts is 255."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:26
msgid "An index may be **unique**, that is, you can declare that it would be illegal to have the same key value twice."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:29
msgid "The first index defined on a space is called the **primary key index**, and it must be unique. All other indexes are called **secondary indexes**, and they may be non-unique."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:33
msgid "Indexes have certain limitations. See details on page :doc:`Limitations </book/box/limitations>`."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:36
msgid "To create a generator for indexes, you can use a sequence object. Learn how to do it in the :ref:`tutorial <index-box_sequence>`."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:42
msgid "Indexed field types"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:44
msgid "Not to be confused with :ref:`index types <index-types>` -- the types of the data structure that is an index. See more about index types :ref:`below <index-types>`."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:47
msgid "Indexes restrict values that Tarantool can store with MsgPack. This is why, for example, ``'unsigned'`` and ``'integer'`` are different field types, although in MsgPack they are both stored as integer values. An ``'unsigned'`` index contains only *non-negative* integer values, while an ``‘integer’`` index contains *any* integer values."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:53
msgid "The default field type is ``'unsigned'`` and the default index type is TREE. Although ``'nil'`` is not a legal indexed field type, indexes may contain `nil` :ref:`as a non-default option <key_part_is_nullable>`."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:57
msgid "To learn more about field types, check the :ref:`Field type details <index_box_field_type_details>` section."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:66
msgid "Field type name string"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:67
msgid "Field type"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:68
msgid "Index type"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:69
msgid "``'boolean'``"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:70
#: ../../doc/concepts/data_model/indexes.rst:71
msgid ":ref:`boolean <index-box_boolean>`"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:72
msgid "``'integer'`` (may also be called ``'int'``)"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:73
msgid ":ref:`integer <index-box_integer>`, which may include unsigned values"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:74
#: ../../doc/concepts/data_model/indexes.rst:80
#: ../../doc/concepts/data_model/indexes.rst:85
#: ../../doc/concepts/data_model/indexes.rst:88
#: ../../doc/concepts/data_model/indexes.rst:97
#: ../../doc/concepts/data_model/indexes.rst:120
msgid "TREE or HASH"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:75
msgid "``'unsigned'`` (may also be called ``'uint'`` or ``'num'``, but ``'num'`` is deprecated)"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:76
msgid ":ref:`unsigned <index-box_unsigned>`"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:77
#: ../../doc/concepts/data_model/indexes.rst:91
msgid "TREE, BITSET, or HASH"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:78
msgid "``'double'``"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:79
msgid ":ref:`double <index-box_double>`"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:81
msgid "``'number'``"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:82
msgid ":ref:`number <index-box_number>`, which may include :ref:`integer <index-box_integer>`, :ref:`double <index-box_double>`, or :ref:`decimal <index-box_decimal>` values"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:86
msgid "``'decimal'``"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:87
msgid ":ref:`decimal <index-box_decimal>`"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:89
msgid "``'string'`` (may also be called ``'str'``)"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:90
msgid ":ref:`string <index-box_string>`"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:92
msgid "``'varbinary'``"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:93
msgid ":ref:`varbinary <index-box_bin>`"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:94
msgid "TREE, HASH, or BITSET (since version :doc:`2.7.1 </release/2.7.1>`)"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:95
msgid "``'uuid'``"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:96
msgid ":ref:`uuid <index-box_uuid>`"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:98
msgid "``datetime``"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:99
msgid ":ref:`datetime <index-box_datetime>`"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:100
#: ../../doc/concepts/data_model/indexes.rst:138
msgid "TREE"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:101
msgid "``'array'``"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:102
msgid ":ref:`array <index-box_array>`"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:103
msgid ":ref:`RTREE <box_index-rtree>`"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:104
msgid "``'scalar'``"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:105
msgid "may include :ref:`nil <index-box_nil>`, :ref:`boolean <index-box_boolean>`, :ref:`integer <index-box_integer>`, :ref:`unsigned <index-box_unsigned>`, :ref:`number <index-box_number>`, :ref:`decimal <index-box_decimal>`, :ref:`string <index-box_string>`, :ref:`varbinary <index-box_bin>`, or :ref:`uuid <index-box_uuid>` values                                     | |br| When a scalar field contains values of different underlying types, the key order is: nils, then booleans, then numbers, then strings, then varbinaries, then uuids."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:125
msgid "Index types"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:127
msgid "An index always has a **type**. Different types are intended for different usage scenarios."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:130
msgid "We give an overview of index features in the following table:"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:137
msgid "Feature"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:139
msgid "HASH"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:140
msgid "RTREE"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:141
msgid "BITSET"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:143
msgid "unique"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:144
#: ../../doc/concepts/data_model/indexes.rst:145
#: ../../doc/concepts/data_model/indexes.rst:150
#: ../../doc/concepts/data_model/indexes.rst:152
#: ../../doc/concepts/data_model/indexes.rst:153
#: ../../doc/concepts/data_model/indexes.rst:156
#: ../../doc/concepts/data_model/indexes.rst:162
#: ../../doc/concepts/data_model/indexes.rst:163
#: ../../doc/concepts/data_model/indexes.rst:168
#: ../../doc/concepts/data_model/indexes.rst:174
#: ../../doc/concepts/data_model/indexes.rst:180
#: ../../doc/concepts/data_model/indexes.rst:181
#: ../../doc/concepts/data_model/indexes.rst:186
#: ../../doc/concepts/data_model/indexes.rst:192
msgid "\\+"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:146
#: ../../doc/concepts/data_model/indexes.rst:147
#: ../../doc/concepts/data_model/indexes.rst:151
#: ../../doc/concepts/data_model/indexes.rst:157
#: ../../doc/concepts/data_model/indexes.rst:158
#: ../../doc/concepts/data_model/indexes.rst:159
#: ../../doc/concepts/data_model/indexes.rst:164
#: ../../doc/concepts/data_model/indexes.rst:165
#: ../../doc/concepts/data_model/indexes.rst:169
#: ../../doc/concepts/data_model/indexes.rst:170
#: ../../doc/concepts/data_model/indexes.rst:171
#: ../../doc/concepts/data_model/indexes.rst:175
#: ../../doc/concepts/data_model/indexes.rst:176
#: ../../doc/concepts/data_model/indexes.rst:177
#: ../../doc/concepts/data_model/indexes.rst:182
#: ../../doc/concepts/data_model/indexes.rst:183
#: ../../doc/concepts/data_model/indexes.rst:187
#: ../../doc/concepts/data_model/indexes.rst:188
#: ../../doc/concepts/data_model/indexes.rst:189
#: ../../doc/concepts/data_model/indexes.rst:193
#: ../../doc/concepts/data_model/indexes.rst:194
#: ../../doc/concepts/data_model/indexes.rst:195
msgid "\\-"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:149
msgid "non-unique"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:155
msgid ":ref:`is_nullable <key_part_is_nullable>`"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:161
msgid "can be multi-part"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:167
msgid ":ref:`multikey <box_space-path_multikey>`"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:173
msgid ":ref:`partial-key search <partial_key_search>`"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:179
msgid "can be primary key"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:185
msgid "``exclude_null`` (version 2.8+)"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:191
msgid "Pagination (the :ref:`after <box_index-select>` option)"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:197
msgid ":doc:`iterator types </reference/reference_lua/box_index/pairs>`"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:198
msgid "ALL, EQ, REQ, GT, GE, LT, LE"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:199
msgid "ALL, EQ"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:200
msgid "ALL, EQ, GT, GE, LT, LE, OVERLAPS, NEIGHBOR"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:201
msgid "ALL, EQ, BITS_ALL_SET, BITS_ANY_SET, BITS_ALL_NOT_SET"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:205
msgid "In :doc:`2.11.0 </release/2.11.0>`, the ``GT`` index type is deprecated for HASH indexes."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:210
msgid "TREE indexes"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:212
msgid "The default index type is 'TREE'. TREE indexes are provided by memtx and vinyl engines, can index unique and non-unique values, support partial key searches, comparisons and ordered results."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:216
msgid "This is a universal type of indexes, for most cases it will be the best choice."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:218
msgid "Additionally, memtx engine supports HASH, RTREE and BITSET indexes."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:223
msgid "HASH indexes"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:225
msgid "HASH indexes require unique fields and loses to TREE in almost all respects. So we do not recommend to use it in the applications. HASH is now present in Tarantool mainly because of backward compatibility."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:229
msgid "Here are some tips. Do not use HASH index:"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:231
msgid "just if you want to"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:232
msgid "if you think that HASH is faster with no performance metering"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:233
msgid "if you want to iterate over the data"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:234
msgid "for primary key"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:235
msgid "as an only index"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:237
msgid "Use HASH index:"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:239
msgid "if it is a secondary key"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:240
msgid "if you 100% won't need to make it non-unique"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:241
msgid "if you have taken measurements on your data and you see an accountable increase in performance"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:243
msgid "if you save every byte on tuples (HASH is a little more compact)"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:248
msgid "RTREE indexes"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:250
msgid "RTREE is a multidimensional index supporting up to 20 dimensions. It is used especially for indexing spatial information, such as geographical objects. In :ref:`this example <box_index-rtree>` we demonstrate spatial searches via RTREE index."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:255
msgid "RTREE index could not be primary, and could not be unique. The option list of this type of index may contain ``dimension`` and ``distance`` options. The ``parts`` definition must contain the one and only part with type ``array``. RTREE index can accept two types of ``distance`` functions: ``euclid`` and ``manhattan``."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:262
msgid "Currently, the :ref:`isolation level <transaction_model_levels>` of RTREE indexes in :ref:`MVCC transaction mode <txn_mode_mvcc-tnx-manager>` is *read-committed* (not *serializable*, as stated). If a transaction uses these indexes, it can read committed or confirmed data (depending on the isolation level). However, the indexes are subject to different anomalies that can make them unserializable."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:267
#: ../../doc/concepts/data_model/indexes.rst:450
msgid "**Example 1:**"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:269
msgid "my_space = box.schema.create_space(\"tester\")\n"
"my_space:format({ { type = 'number', name = 'id' }, { type = 'array', name = 'content' } })\n"
"hash_index = my_space:create_index('primary', { type = 'tree', parts = {'id'} })\n"
"rtree_index = my_space:create_index('spatial', { type = 'RTREE', unique = false, parts = {'content'} })"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:276
msgid "Corresponding tuple field thus must be an array of 2 or 4 numbers. 2 numbers mean a point {x, y}; 4 numbers mean a rectangle {x1, y1, x2, y2}, where (x1, y1) and (x2, y2) - diagonal point of the rectangle."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:281
msgid "my_space:insert{1, {1, 1}}\n"
"my_space:insert{2, {2, 2, 3, 3}}"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:286
msgid "Selection results depend on a chosen iterator. The default EQ iterator searches for an exact rectangle, a point is treated as zero width and height rectangle:"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:290
msgid "tarantool> rtree_index:select{1, 1}\n"
"---\n"
"- - [1, [1, 1]]\n"
"...\n"
"\n"
"tarantool> rtree_index:select{1, 1, 1, 1}\n"
"---\n"
"- - [1, [1, 1]]\n"
"...\n"
"\n"
"tarantool> rtree_index:select{2, 2}\n"
"---\n"
"- []\n"
"...\n"
"\n"
"tarantool> rtree_index:select{2, 2, 3, 3}\n"
"---\n"
"- - [2, [2, 2, 3, 3]]\n"
"..."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:312
msgid "Iterator ALL, which is the default when no key is specified, selects all tuples in arbitrary order:"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:315
msgid "tarantool> rtree_index:select{}\n"
"---\n"
"- - [1, [1, 1]]\n"
"  - [2, [2, 2, 3, 3]]\n"
"..."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:323
msgid "Iterator LE (less or equal) searches for tuples with their rectangles within a specified rectangle:"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:326
msgid "tarantool> rtree_index:select({1, 1, 2, 2}, {iterator='le'})\n"
"---\n"
"- - [1, [1, 1]]\n"
"..."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:333
msgid "Iterator LT (less than, or strictly less) searches for tuples with their rectangles strictly within a specified rectangle:"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:336
msgid "tarantool> rtree_index:select({0, 0, 3, 3}, {iterator = 'lt'})\n"
"---\n"
"- - [1, [1, 1]]\n"
"..."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:343
msgid "Iterator GE searches for tuples with a specified rectangle within their rectangles:"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:345
msgid "tarantool> rtree_index:select({1, 1}, {iterator = 'ge'})\n"
"---\n"
"- - [1, [1, 1]]\n"
"..."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:352
msgid "Iterator GT searches for tuples with a specified rectangle strictly within their rectangles:"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:354
msgid "tarantool> rtree_index:select({2.1, 2.1, 2.9, 2.9}, {iterator = 'gt'})\n"
"---\n"
"- []\n"
"..."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:361
msgid "Iterator OVERLAPS searches for tuples with their rectangles overlapping specified rectangle:"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:363
msgid "tarantool> rtree_index:select({0, 0, 10, 2}, {iterator='overlaps'})\n"
"---\n"
"- - [1, [1, 1]]\n"
"  - [2, [2, 2, 3, 3]]\n"
"..."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:371
msgid "Iterator NEIGHBOR searches for all tuples and orders them by distance to the specified point:"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:373
msgid "tarantool> for i=1,10 do\n"
"         >    for j=1,10 do\n"
"         >        my_space:insert{i*10+j, {i, j, i+1, j+1}}\n"
"         >    end\n"
"         > end\n"
"---\n"
"...\n"
"\n"
"tarantool> rtree_index:select({1, 1}, {iterator = 'neighbor', limit = 5})\n"
"---\n"
"- - [11, [1, 1, 2, 2]]\n"
"  - [12, [1, 2, 2, 3]]\n"
"  - [21, [2, 1, 3, 2]]\n"
"  - [22, [2, 2, 3, 3]]\n"
"  - [31, [3, 1, 4, 2]]\n"
"..."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:392
#: ../../doc/concepts/data_model/indexes.rst:499
msgid "**Example 2:**"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:394
msgid "3D, 4D and more dimensional RTREE indexes work in the same way as 2D except that user must specify more coordinates in requests. Here's short example of using 4D tree:"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:398
msgid "tarantool> my_space = box.schema.create_space(\"tester\")\n"
"tarantool> my_space:format{ { type = 'number', name = 'id' }, { type = 'array', name = 'content' } }\n"
"tarantool> primary_index = my_space:create_index('primary', { type = 'TREE', parts = {'id'} })\n"
"tarantool> rtree_index = my_space:create_index('spatial', { type = 'RTREE', unique = false, dimension = 4, parts = {'content'} })\n"
"tarantool> my_space:insert{1, {1, 2, 3, 4}} -- insert 4D point\n"
"tarantool> my_space:insert{2, {1, 1, 1, 1, 2, 2, 2, 2}} -- insert 4D box\n"
"\n"
"tarantool> rtree_index:select{1, 2, 3, 4} -- find exact point\n"
"---\n"
"- - [1, [1, 2, 3, 4]]\n"
"...\n"
"\n"
"tarantool> rtree_index:select({0, 0, 0, 0, 3, 3, 3, 3}, {iterator = 'LE'}) -- select from 4D box\n"
"---\n"
"- - [2, [1, 1, 1, 1, 2, 2, 2, 2]]\n"
"...\n"
"\n"
"tarantool> rtree_index:select({0, 0, 0, 0}, {iterator = 'neighbor'}) -- select neighbours\n"
"---\n"
"- - [2, [1, 1, 1, 1, 2, 2, 2, 2]]\n"
"  - [1, [1, 2, 3, 4]]\n"
"..."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:425
msgid "Keep in mind that select NEIGHBOR iterator with unset limits extracts the entire space in order of increasing distance. And there can be tons of data, and this can affect the performance."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:429
msgid "And another frequent mistake is to specify iterator type without quotes, in such way: ``rtree_index:select(rect, {iterator = LE})``. This leads to silent EQ select, because ``LE`` is undefined variable and treated as nil, so iterator is unset and default used."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:437
msgid "BITSET indexes"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:439
msgid "Bitset is a bit mask. You should use it when you need to search by bit masks. This can be, for example, storing a vector of attributes and searching by these attributes."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:445
msgid "Currently, the :ref:`isolation level <transaction_model_levels>` of BITSET indexes in :ref:`MVCC transaction mode <txn_mode_mvcc-tnx-manager>` is *read-committed* (not *serializable*, as stated). If a transaction uses these indexes, it can read committed or confirmed data (depending on the isolation level). However, the indexes are subject to different anomalies that can make them unserializable."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:452
msgid "The following script shows creating and searching with a BITSET index. Notice that BITSET cannot be unique, so first a primary-key index is created, and bit values are entered as hexadecimal literals for easier reading."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:456
msgid "tarantool> my_space = box.schema.space.create('space_with_bitset')\n"
"tarantool> my_space:create_index('primary_index', {\n"
"         >   parts = {1, 'string'},\n"
"         >   unique = true,\n"
"         >   type = 'TREE'\n"
"         > })\n"
"tarantool> my_space:create_index('bitset_index', {\n"
"         >   parts = {2, 'unsigned'},\n"
"         >   unique = false,\n"
"         >   type = 'BITSET'\n"
"         > })\n"
"tarantool> my_space:insert{'Tuple with bit value = 01', 0x01}\n"
"tarantool> my_space:insert{'Tuple with bit value = 10', 0x02}\n"
"tarantool> my_space:insert{'Tuple with bit value = 11', 0x03}\n"
"tarantool> my_space.index.bitset_index:select(0x02, {\n"
"         >   iterator = box.index.EQ\n"
"         > })\n"
"---\n"
"- - ['Tuple with bit value = 10', 2]\n"
"...\n"
"tarantool> my_space.index.bitset_index:select(0x02, {\n"
"         >   iterator = box.index.BITS_ANY_SET\n"
"         > })\n"
"---\n"
"- - ['Tuple with bit value = 10', 2]\n"
"  - ['Tuple with bit value = 11', 3]\n"
"...\n"
"tarantool> my_space.index.bitset_index:select(0x02, {\n"
"         >   iterator = box.index.BITS_ALL_SET\n"
"         > })\n"
"---\n"
"- - ['Tuple with bit value = 10', 2]\n"
"  - ['Tuple with bit value = 11', 3]\n"
"...\n"
"tarantool> my_space.index.bitset_index:select(0x02, {\n"
"         >   iterator = box.index.BITS_ALL_NOT_SET\n"
"         > })\n"
"---\n"
"- - ['Tuple with bit value = 01', 1]\n"
"..."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:501
msgid "tarantool> box.schema.space.create('bitset_example')\n"
"tarantool> box.space.bitset_example:create_index('primary')\n"
"tarantool> box.space.bitset_example:create_index('bitset',{unique = false, type = 'BITSET', parts = {2,'unsigned'}})\n"
"tarantool> box.space.bitset_example:insert{1,1}\n"
"tarantool> box.space.bitset_example:insert{2,4}\n"
"tarantool> box.space.bitset_example:insert{3,7}\n"
"tarantool> box.space.bitset_example:insert{4,3}\n"
"tarantool> box.space.bitset_example.index.bitset:select(2, {iterator = 'BITS_ANY_SET'})"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:512
msgid "The result will be:"
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:514
msgid "---\n"
"- - [3, 7]\n"
"  - [4, 3]\n"
"..."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:521
msgid "because (7 AND 2) is not equal to 0, and (3 AND 2) is not equal to 0."
msgstr ""

#: ../../doc/concepts/data_model/indexes.rst:523
msgid "Additionally, there exist :doc:`index iterator operations </reference/reference_lua/box_index/pairs>`. They can only be used with code in Lua and C/C++. Index iterators are for traversing indexes one key at a time, taking advantage of features that are specific to an index type. For example, they can be used for evaluating Boolean expressions when traversing BITSET indexes, or for going in descending order when traversing TREE indexes."
msgstr ""
