# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-17 14:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/how-to/db/crud.rst:4
msgid "CRUD operation examples"
msgstr ""

#: ../../doc/how-to/db/crud.rst:11
msgid "Using data operations"
msgstr ""

#: ../../doc/how-to/db/crud.rst:13
msgid "This section shows basic usage scenarios and typical errors for each :ref:`data operation <index-box_data-operations>` in Tarantool: :ref:`INSERT <box_space-operations-insert>`, :ref:`DELETE <box_space-operations-delete>`, :ref:`UPDATE <box_space-operations-update>`, :ref:`UPSERT <box_space-operations-upsert>`, :ref:`REPLACE <box_space-operations-replace>`, and :ref:`SELECT <box_space-operations-select>`. Before trying out the examples, you need to bootstrap a Tarantool instance as shown below."
msgstr ""

#: ../../doc/how-to/db/crud.rst:23
msgid "-- Create a space --\n"
"bands = box.schema.space.create('bands')\n"
"\n"
"-- Specify field names and types --\n"
"box.space.bands:format({\n"
"    { name = 'id', type = 'unsigned' },\n"
"    { name = 'band_name', type = 'string' },\n"
"    { name = 'year', type = 'unsigned' }\n"
"})\n"
"\n"
"-- Create a primary index --\n"
"box.space.bands:create_index('primary', { parts = { 'id' } })\n"
"\n"
"-- Create a unique secondary index --\n"
"box.space.bands:create_index('band', { parts = { 'band_name' } })\n"
"\n"
"-- Create a non-unique secondary index --\n"
"box.space.bands:create_index('year', { parts = { { 'year' } }, unique = false })\n"
"\n"
"-- Create a multi-part index --\n"
"box.space.bands:create_index('year_band', { parts = { { 'year' }, { 'band_name' } } })\n"
""
msgstr ""

#: ../../doc/how-to/db/crud.rst:33
msgid "INSERT"
msgstr ""

#: ../../doc/how-to/db/crud.rst:35
msgid "The :ref:`space_object.insert <box_space-insert>` method accepts a well-formatted tuple."
msgstr ""

#: ../../doc/how-to/db/crud.rst:37
msgid "-- Insert a tuple with a unique primary key --\n"
"tarantool> bands:insert{1, 'Scorpions', 1965}\n"
"---\n"
"- [1, 'Scorpions', 1965]\n"
"..."
msgstr ""

#: ../../doc/how-to/db/crud.rst:46
msgid "``insert`` also checks all the keys for duplicates."
msgstr ""

#: ../../doc/how-to/db/crud.rst:48
msgid "-- Try to insert a tuple with a duplicate primary key --\n"
"tarantool> bands:insert{1, 'Scorpions', 1965}\n"
"---\n"
"- error: Duplicate key exists in unique index \"primary\" in space \"bands\" with old\n"
"    tuple - [1, \"Scorpions\", 1965] and new tuple - [1, \"Scorpions\", 1965]\n"
"...\n"
"\n"
"-- Try to insert a tuple with a duplicate secondary key --\n"
"tarantool> bands:insert{2, 'Scorpions', 1965}\n"
"---\n"
"- error: Duplicate key exists in unique index \"band\" in space \"bands\" with old tuple\n"
"    - [1, \"Scorpions\", 1965] and new tuple - [2, \"Scorpions\", 1965]\n"
"...\n"
"\n"
"-- Insert a second tuple with unique primary and secondary keys --\n"
"tarantool> bands:insert{2, 'Pink Floyd', 1965}\n"
"---\n"
"- [2, 'Pink Floyd', 1965]\n"
"...\n"
"\n"
"-- Delete all tuples --\n"
"tarantool> bands:truncate()\n"
"---\n"
"..."
msgstr ""

#: ../../doc/how-to/db/crud.rst:79
msgid "DELETE"
msgstr ""

#: ../../doc/how-to/db/crud.rst:81
msgid ":ref:`space_object.delete <box_space-delete>` allows you to delete a tuple identified by the primary key."
msgstr ""

#: ../../doc/how-to/db/crud.rst:83
msgid "-- Insert test data --\n"
"tarantool> bands:insert{1, 'Roxette', 1986}\n"
"           bands:insert{2, 'Scorpions', 1965}\n"
"           bands:insert{3, 'Ace of Base', 1987}\n"
"           bands:insert{4, 'The Beatles', 1960}\n"
"\n"
"-- Delete a tuple with an existing key --\n"
"tarantool> bands:delete{4}\n"
"---\n"
"- [4, 'The Beatles', 1960]\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"  - [2, 'Scorpions', 1965]\n"
"  - [3, 'Ace of Base', 1987]\n"
"..."
msgstr ""

#: ../../doc/how-to/db/crud.rst:103
msgid "You can also use :ref:`index_object.delete <box_index-delete>` to delete a tuple by the specified unique index."
msgstr ""

#: ../../doc/how-to/db/crud.rst:105
msgid "-- Delete a tuple by the primary index --\n"
"tarantool> bands.index.primary:delete{3}\n"
"---\n"
"- [3, 'Ace of Base', 1987]\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"  - [2, 'Scorpions', 1965]\n"
"...\n"
"\n"
"-- Delete a tuple by a unique secondary index --\n"
"tarantool> bands.index.band:delete{'Scorpions'}\n"
"---\n"
"- [2, 'Scorpions', 1965]\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"...\n"
"\n"
"-- Try to delete a tuple by a non-unique secondary index --\n"
"tarantool> bands.index.year:delete(1986)\n"
"---\n"
"- error: Get() doesn't support partial keys and non-unique indexes\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"...\n"
"\n"
"-- Try to delete a tuple by a partial key --\n"
"tarantool> bands.index.year_band:delete('Roxette')\n"
"---\n"
"- error: Invalid key part count in an exact match (expected 2, got 1)\n"
"...\n"
"\n"
"-- Delete a tuple by a full key --\n"
"tarantool> bands.index.year_band:delete{1986, 'Roxette'}\n"
"---\n"
"- [1, 'Roxette', 1986]\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- []\n"
"...\n"
"\n"
"-- Delete all tuples --\n"
"tarantool> bands:truncate()\n"
"---\n"
"..."
msgstr ""

#: ../../doc/how-to/db/crud.rst:164
msgid "UPDATE"
msgstr ""

#: ../../doc/how-to/db/crud.rst:166
msgid ":ref:`space_object.update <box_space-update>` allows you to update a tuple identified by the primary key. Similarly to ``delete``, the ``update`` method accepts a full key and also an operation to execute."
msgstr ""

#: ../../doc/how-to/db/crud.rst:169
msgid "-- Insert test data --\n"
"tarantool> bands:insert{1, 'Roxette', 1986}\n"
"           bands:insert{2, 'Scorpions', 1965}\n"
"           bands:insert{3, 'Ace of Base', 1987}\n"
"           bands:insert{4, 'The Beatles', 1960}\n"
"\n"
"-- Update a tuple with an existing key --\n"
"tarantool> bands:update({2}, {{'=', 2, 'Pink Floyd'}})\n"
"---\n"
"- [2, 'Pink Floyd', 1965]\n"
"...\n"
"\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"  - [2, 'Pink Floyd', 1965]\n"
"  - [3, 'Ace of Base', 1987]\n"
"  - [4, 'The Beatles', 1960]\n"
"..."
msgstr ""

#: ../../doc/how-to/db/crud.rst:192
msgid ":ref:`index_object.update <box_index-update>` updates a tuple identified by the specified unique index."
msgstr ""

#: ../../doc/how-to/db/crud.rst:194
msgid "-- Update a tuple by the primary index --\n"
"tarantool> bands.index.primary:update({2}, {{'=', 2, 'The Rolling Stones'}})\n"
"---\n"
"- [2, 'The Rolling Stones', 1965]\n"
"...\n"
"\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"  - [2, 'The Rolling Stones', 1965]\n"
"  - [3, 'Ace of Base', 1987]\n"
"  - [4, 'The Beatles', 1960]\n"
"...\n"
"\n"
"-- Update a tuple by a unique secondary index --\n"
"tarantool> bands.index.band:update({'The Rolling Stones'}, {{'=', 2, 'The Doors'}})\n"
"---\n"
"- [2, 'The Doors', 1965]\n"
"...\n"
"\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"  - [2, 'The Doors', 1965]\n"
"  - [3, 'Ace of Base', 1987]\n"
"  - [4, 'The Beatles', 1960]\n"
"...\n"
"\n"
"-- Try to update a tuple by a non-unique secondary index --\n"
"tarantool> bands.index.year:update({1965}, {{'=', 2, 'Scorpions'}})\n"
"---\n"
"- error: Get() doesn't support partial keys and non-unique indexes\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"  - [2, 'The Doors', 1965]\n"
"  - [3, 'Ace of Base', 1987]\n"
"  - [4, 'The Beatles', 1960]\n"
"...\n"
"\n"
"-- Delete all tuples --\n"
"tarantool> bands:truncate()\n"
"---\n"
"..."
msgstr ""

#: ../../doc/how-to/db/crud.rst:247
msgid "UPSERT"
msgstr ""

#: ../../doc/how-to/db/crud.rst:249
msgid ":ref:`space_object.upsert <box_space-upsert>` updates an existing tuple or inserts a new one:"
msgstr ""

#: ../../doc/how-to/db/crud.rst:251
msgid "If the existing tuple is found by the primary key, Tarantool applies the update operation to this tuple and ignores the new tuple."
msgstr ""

#: ../../doc/how-to/db/crud.rst:254
msgid "If no existing tuple is found, Tarantool inserts the new tuple and ignores the update operation."
msgstr ""

#: ../../doc/how-to/db/crud.rst:257
msgid "tarantool> bands:insert{1, 'Scorpions', 1965}\n"
"---\n"
"- [1, 'Scorpions', 1965]\n"
"...\n"
"-- As the first argument, upsert accepts a tuple, not a key --\n"
"tarantool> bands:upsert({2}, {{'=', 2, 'Pink Floyd'}})\n"
"---\n"
"- error: Tuple field 2 (band_name) required by space format is missing\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Scorpions', 1965]\n"
"...\n"
"tarantool> bands:delete(1)\n"
"---\n"
"- [1, 'Scorpions', 1965]\n"
"..."
msgstr ""

#: ../../doc/how-to/db/crud.rst:277
msgid "``upsert`` acts as ``insert`` when no existing tuple is found by the primary key."
msgstr ""

#: ../../doc/how-to/db/crud.rst:279
msgid "tarantool> bands:upsert({1, 'Scorpions', 1965}, {{'=', 2, 'The Doors'}})\n"
"---\n"
"...\n"
"-- As you can see, {1, 'Scorpions', 1965} is inserted, --\n"
"-- and the update operation is not applied. --\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Scorpions', 1965]\n"
"...\n"
"\n"
"-- upsert with the same primary key but different values in other fields --\n"
"-- applies the update operation and ignores the new tuple. --\n"
"tarantool> bands:upsert({1, 'Scorpions', 1965}, {{'=', 2, 'The Doors'}})\n"
"---\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'The Doors', 1965]\n"
"..."
msgstr ""

#: ../../doc/how-to/db/crud.rst:301
msgid "``upsert`` searches for the existing tuple by the primary index, not by the secondary index. This can lead to a duplication error if the tuple violates a secondary index uniqueness."
msgstr ""

#: ../../doc/how-to/db/crud.rst:305
msgid "tarantool> bands:upsert({2, 'The Doors', 1965}, {{'=', 2, 'Pink Floyd'}})\n"
"---\n"
"- error: Duplicate key exists in unique index \"band\" in space \"bands\" with old tuple\n"
"    - [1, \"The Doors\", 1965] and new tuple - [2, \"The Doors\", 1965]\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'The Doors', 1965]\n"
"...\n"
"\n"
"-- This works if uniqueness is preserved. --\n"
"tarantool> bands:upsert({2, 'The Beatles', 1960}, {{'=', 2, 'Pink Floyd'}})\n"
"---\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'The Doors', 1965]\n"
"  - [2, 'The Beatles', 1960]\n"
"...\n"
"\n"
"-- Delete all tuples --\n"
"tarantool> bands:truncate()\n"
"---\n"
"..."
msgstr ""

#: ../../doc/how-to/db/crud.rst:337
msgid "REPLACE"
msgstr ""

#: ../../doc/how-to/db/crud.rst:339
msgid ":ref:`space_object.replace <box_space-replace>` accepts a well-formatted tuple and searches for the existing tuple by the primary key of the new tuple:"
msgstr ""

#: ../../doc/how-to/db/crud.rst:342
msgid "If the existing tuple is found, Tarantool deletes it and inserts the new tuple."
msgstr ""

#: ../../doc/how-to/db/crud.rst:343
msgid "If no existing tuple is found, Tarantool inserts the new tuple."
msgstr ""

#: ../../doc/how-to/db/crud.rst:346
msgid "tarantool> bands:replace{1, 'Scorpions', 1965}\n"
"---\n"
"- [1, 'Scorpions', 1965]\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Scorpions', 1965]\n"
"...\n"
"tarantool> bands:replace{1, 'The Beatles', 1960}\n"
"---\n"
"- [1, 'The Beatles', 1960]\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'The Beatles', 1960]\n"
"...\n"
"tarantool> bands:truncate()\n"
"---\n"
"..."
msgstr ""

#: ../../doc/how-to/db/crud.rst:368
msgid "``replace`` can violate unique constraints, like ``upsert`` does."
msgstr ""

#: ../../doc/how-to/db/crud.rst:370
msgid "tarantool> bands:insert{1, 'Scorpions', 1965}\n"
"- [1, 'Scorpions', 1965]\n"
"...\n"
"tarantool> bands:insert{2, 'The Beatles', 1960}\n"
"---\n"
"- [2, 'The Beatles', 1960]\n"
"...\n"
"tarantool> bands:replace{2, 'Scorpions', 1965}\n"
"---\n"
"- error: Duplicate key exists in unique index \"band\" in space \"bands\" with old tuple\n"
"    - [1, \"Scorpions\", 1965] and new tuple - [2, \"Scorpions\", 1965]\n"
"...\n"
"tarantool> bands:truncate()\n"
"---\n"
"..."
msgstr ""

#: ../../doc/how-to/db/crud.rst:392
msgid "SELECT"
msgstr ""

#: ../../doc/how-to/db/crud.rst:394
msgid "The :ref:`space_object.select <box_space-select>` request searches for a tuple or a set of tuples in the given space by the primary key. To search by the specified index, use :ref:`index_object.select <box_index-select>`. These methods work with any keys, including unique and non-unique, full and partial. If a key is partial, ``select`` searches by all keys where the prefix matches the specified key part."
msgstr ""

#: ../../doc/how-to/db/crud.rst:400
msgid "tarantool> bands:insert{1, 'Roxette', 1986}\n"
"           bands:insert{2, 'Scorpions', 1965}\n"
"           bands:insert{3, 'The Doors', 1965}\n"
"           bands:insert{4, 'The Beatles', 1960}\n"
"\n"
"tarantool> bands:select(1)\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"...\n"
"\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"  - [2, 'Scorpions', 1965]\n"
"  - [3, 'The Doors', 1965]\n"
"  - [4, 'The Beatles', 1960]\n"
"...\n"
"\n"
"tarantool> bands.index.primary:select(2)\n"
"---\n"
"- - [2, 'Scorpions', 1965]\n"
"...\n"
"\n"
"tarantool> bands.index.band:select('The Doors')\n"
"---\n"
"- - [3, 'The Doors', 1965]\n"
"...\n"
"\n"
"tarantool> bands.index.year:select(1965)\n"
"---\n"
"- - [2, 'Scorpions', 1965]\n"
"  - [3, 'The Doors', 1965]\n"
"..."
msgstr ""

#: ../../doc/how-to/db/crud.rst:440
msgid "Using box.space functions to read _space tuples"
msgstr ""

#: ../../doc/how-to/db/crud.rst:442
msgid "This example illustrates how to look at all the spaces, and for each display: approximately how many tuples it contains, and the first field of its first tuple. The function uses the Tarantool's ``box.space`` functions ``len()`` and ``pairs()``. The iteration through the spaces is coded as a scan of the ``_space`` system space, which contains metadata. The third field in ``_space`` contains the space name, so the key instruction ``space_name = v[3]`` means ``space_name`` is the ``space_name`` field in the tuple of ``_space`` that we've just fetched with ``pairs()``. The function returns a table:"
msgstr ""

#: ../../doc/how-to/db/crud.rst:452
msgid "function example()\n"
"  local tuple_count, space_name, line\n"
"  local ta = {}\n"
"  for k, v in box.space._space:pairs() do\n"
"    space_name = v[3]\n"
"    if box.space[space_name].index[0] ~= nil then\n"
"      tuple_count = '1 or more'\n"
"    else\n"
"      tuple_count = '0'\n"
"    end\n"
"    line = space_name .. ' tuple_count =' .. tuple_count\n"
"    if tuple_count == '1 or more' then\n"
"      for k1, v1 in box.space[space_name]:pairs() do\n"
"        line = line .. '. first field in first tuple = ' .. v1[1]\n"
"        break\n"
"      end\n"
"    end\n"
"    table.insert(ta, line)\n"
"  end\n"
"  return ta\n"
"end"
msgstr ""

#: ../../doc/how-to/db/crud.rst:476
msgid "The output below shows what happens if you invoke this function:"
msgstr ""

#: ../../doc/how-to/db/crud.rst:478
msgid "tarantool> example()\n"
"---\n"
"- - _schema tuple_count =1 or more. first field in first tuple = cluster\n"
"  - _space tuple_count =1 or more. first field in first tuple = 272\n"
"  - _vspace tuple_count =1 or more. first field in first tuple = 272\n"
"  - _index tuple_count =1 or more. first field in first tuple = 272\n"
"  - _vindex tuple_count =1 or more. first field in first tuple = 272\n"
"  - _func tuple_count =1 or more. first field in first tuple = 1\n"
"  - _vfunc tuple_count =1 or more. first field in first tuple = 1\n"
"  - _user tuple_count =1 or more. first field in first tuple = 0\n"
"  - _vuser tuple_count =1 or more. first field in first tuple = 0\n"
"  - _priv tuple_count =1 or more. first field in first tuple = 1\n"
"  - _vpriv tuple_count =1 or more. first field in first tuple = 1\n"
"  - _cluster tuple_count =1 or more. first field in first tuple = 1\n"
"..."
msgstr ""

#: ../../doc/how-to/db/crud.rst:498
msgid "Using box.space functions to organize a _space tuple"
msgstr ""

#: ../../doc/how-to/db/crud.rst:500
msgid "This examples shows how to display field names and field types of a system space -- using metadata to find metadata."
msgstr ""

#: ../../doc/how-to/db/crud.rst:503
msgid "To begin: how can one select the ``_space`` tuple that describes ``_space``?"
msgstr ""

#: ../../doc/how-to/db/crud.rst:505
msgid "A simple way is to look at the constants in ``box.schema``, which shows that there is an item named SPACE_ID == 288, so these statements retrieve the correct tuple:"
msgstr ""

#: ../../doc/how-to/db/crud.rst:509
msgid "box.space._space:select{ 288 }\n"
"-- or --\n"
"box.space._space:select{ box.schema.SPACE_ID }"
msgstr ""

#: ../../doc/how-to/db/crud.rst:515
msgid "Another way is to look at the tuples in ``box.space._index``, which shows that there is a secondary index named 'name' for a space number 288, so this statement also retrieve the correct tuple:"
msgstr ""

#: ../../doc/how-to/db/crud.rst:519
msgid "box.space._space.index.name:select{ '_space' }"
msgstr ""

#: ../../doc/how-to/db/crud.rst:523
msgid "However, the retrieved tuple is not easy to read:"
msgstr ""

#: ../../doc/how-to/db/crud.rst:525
msgid "tarantool> box.space._space.index.name:select{'_space'}\n"
"---\n"
"- - [280, 1, '_space', 'memtx', 0, {}, [{'name': 'id', 'type': 'num'}, {'name': 'owner',\n"
"        'type': 'num'}, {'name': 'name', 'type': 'str'}, {'name': 'engine', 'type': 'str'},\n"
"      {'name': 'field_count', 'type': 'num'}, {'name': 'flags', 'type': 'str'}, {\n"
"        'name': 'format', 'type': '*'}]]\n"
"..."
msgstr ""

#: ../../doc/how-to/db/crud.rst:535
msgid "It looks disorganized because field number 7 has been formatted with recommended names and data types. How can one get those specific sub-fields? Since it's visible that field number 7 is an array of maps, this `for` loop will do the organizing:"
msgstr ""

#: ../../doc/how-to/db/crud.rst:540
msgid "tarantool> do\n"
"         >   local tuple_of_space = box.space._space.index.name:get{'_space'}\n"
"         >   for _, field in ipairs(tuple_of_space[7]) do\n"
"         >     print(field.name .. ', ' .. field.type)\n"
"         >   end\n"
"         > end\n"
"id, num\n"
"owner, num\n"
"name, str\n"
"engine, str\n"
"field_count, num\n"
"flags, str\n"
"format, *\n"
"---\n"
"..."
msgstr ""
