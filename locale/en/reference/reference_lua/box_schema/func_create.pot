
msgid "box.schema.func.create()"
msgstr ""

msgid "Create a function :ref:`tuple <index-box_tuple>`. This does not create the function itself -- that is done with Lua -- but if it is necessary to grant privileges for a function, box.schema.func.create must be done first. For explanation of how Tarantool maintains function data, see reference on :ref:`_func <box_space-func>` space."
msgstr ""

msgid "The possible options are:"
msgstr ""

msgid "``if_not_exists`` = ``true|false`` (default = ``false``) - boolean; ``true`` means there should be no error if the ``_func`` tuple already exists."
msgstr ""

msgid "``setuid`` = ``true|false`` (default = false) - with ``true`` to make Tarantool treat the function’s caller as the function’s creator, with full privileges. Remember that SETUID works only over :ref:`binary ports <admin-security>`. SETUID doesn't work if you invoke a function via an :ref:`admin console <admin-security>` or inside a Lua script."
msgstr ""

msgid "``language`` = 'LUA'|'C' (default = ‘LUA’)."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "name of function, which should conform to the :ref:`rules for object names <app_server-names>`"
msgstr ""

msgid "``if_not_exists``, ``setuid``, ``language``."
msgstr ""

msgid "return"
msgstr ""

msgid "nil"
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "box.schema.func.create('calculate')\n"
"box.schema.func.create('calculate', {if_not_exists = false})\n"
"box.schema.func.create('calculate', {setuid = false})\n"
"box.schema.func.create('calculate', {language = 'LUA'})"
msgstr ""

