# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 2.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-12 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/reference/reference_lua/box_session/push.rst:6
msgid "box.session.push()"
msgstr ""

#: ../../doc/reference/reference_lua/box_session/push.rst:13
msgid "Generate an out-of-band message. By \"out-of-band\" we mean an extra message which supplements what is passed in a network via the usual channels. Although ``box.session.push()`` can be called at any time, in practice it is used with networks that are set up with :ref:`module net.box <net_box-module>`, and it is invoked by the server (on the \"remote database system\" to use our terminology for net.box), and the client has options for getting such messages."
msgstr ""

#: ../../doc/reference/reference_lua/box_session/push.rst:22
msgid "This function returns an error if the session is disconnected."
msgstr ""

#: ../../doc/reference/reference_lua/box_session/push.rst:0
msgid "Parameters"
msgstr ""

#: ../../doc/reference/reference_lua/box_session/push.rst:24
msgid "what to send"
msgstr ""

#: ../../doc/reference/reference_lua/box_session/push.rst:25
msgid "an optional argument to indicate what the session is, as taken from an earlier call to :doc:`/reference/reference_lua/box_session/sync`. If it is omitted, the default is the current ``box.session.sync()`` value. In Tarantool version :doc:`2.4.2 </release/2.4.2>`, ``sync`` is **deprecated** and its use will cause a warning. Since version 2.5.1, its use will cause an error."
msgstr ""

#: ../../doc/reference/reference_lua/box_session/push.rst:0
msgid "rtype"
msgstr ""

#: ../../doc/reference/reference_lua/box_session/push.rst:33
msgid "{nil, error} or true:"
msgstr ""

#: ../../doc/reference/reference_lua/box_session/push.rst:35
msgid "If the result is an error, then the first part of the return is ``nil`` and the second part is the error object."
msgstr ""

#: ../../doc/reference/reference_lua/box_session/push.rst:37
msgid "If the result is not an error, then the return is the boolean value ``true``."
msgstr ""

#: ../../doc/reference/reference_lua/box_session/push.rst:38
msgid "When the return is ``true``, the message has gone to the network buffer as a :ref:`packet <box_protocol-iproto_protocol>` with a different :ref:`header code <box_protocol-responses_out_of_band>` so the client can distinguish from an ordinary Okay response."
msgstr ""

#: ../../doc/reference/reference_lua/box_session/push.rst:43
msgid "The server's sole job is to call ``box.session.push()``, there is no automatic mechanism for showing that the message was received."
msgstr ""

#: ../../doc/reference/reference_lua/box_session/push.rst:46
msgid "The client's job is to check for such messages after it sends something to the server. The major client methods -- :ref:`conn:call <net_box-call>`, :ref:`conn:eval <net_box-eval>`, :ref:`conn:select <conn-select>`, :ref:`conn:insert <conn-insert>`, :ref:`conn:replace <conn-replace>`, :ref:`conn:update <conn-update>`, :ref:`conn:upsert <conn-upsert>`, :ref:`delete <conn-delete>` -- may cause the server to send a message."
msgstr ""

#: ../../doc/reference/reference_lua/box_session/push.rst:54
msgid "Situation 1: when the client calls synchronously with the default ``{async=false}`` option. There are two optional additional options: :samp:`on_push={function-name}`, and :samp:`on_push_ctx={function-argument}`. When the client receives an out-of-band message for the session, it invokes \"function-name(function-argument)\". For example, with options ``{on_push=table.insert, on_push_ctx=messages}``, the client will insert whatever it receives into a table named 'messages'."
msgstr ""

#: ../../doc/reference/reference_lua/box_session/push.rst:62
msgid "Situation 2: when the client calls asynchronously with the non-default ``{async=true}`` option. Here ``on_push`` and ``on_push_ctx`` are not allowed, but the messages can be seen by calling ``pairs()`` in a loop."
msgstr ""

#: ../../doc/reference/reference_lua/box_session/push.rst:66
msgid "Situation 2 complication: ``pairs()`` is subject to timeout. So there is an optional argument = timeout per iteration. If timeout occurs before there is a new message or a final response, there is an error return. To check for an error one can use the first loop parameter (if the loop starts with \"for i, message in future:pairs()\" then the first loop parameter is i). If it is ``box.NULL`` then the second parameter (in our example, \"message\") is the error object."
msgstr ""

#: ../../doc/reference/reference_lua/box_session/push.rst:74
msgid "**Example:**"
msgstr ""

#: ../../doc/reference/reference_lua/box_session/push.rst:76
msgid "-- Make two shells. On Shell#1 set up a \"server\", and\n"
"-- in it have a function that includes box.session.push:\n"
"box.cfg{listen=3301}\n"
"box.schema.user.grant('guest','read,write,execute','universe')\n"
"x = 0\n"
"fiber = require('fiber')\n"
"function server_function() x=x+1; fiber.sleep(1); box.session.push(x); end\n"
"\n"
"-- On Shell#2 connect to this server as a \"client\" that\n"
"-- can handle Lua (such as another Tarantool server operating\n"
"-- as a client), and initialize a table where we'll get messages:\n"
"net_box = require('net.box')\n"
"conn = net_box.connect(3301)\n"
"messages_from_server = {}\n"
"\n"
"-- On Shell#2 remotely call the server function and receive\n"
"-- a SYNCHRONOUS out-of-band message:\n"
"conn:call('server_function', {},\n"
"          {is_async = false,\n"
"           on_push = table.insert,\n"
"           on_push_ctx = messages_from_server})\n"
"messages_from_server\n"
"-- After a 1-second pause that is caused by the fiber.sleep()\n"
"-- request inside server_function, the result in the\n"
"--  messages_from_server table will be: 1. Like this:\n"
"-- tarantool> messages_from_server\n"
"-- ---\n"
"-- - - 1\n"
"-- ...\n"
"-- Good. That shows that box.session.push(x) worked,\n"
"-- because we know that x was 1.\n"
"\n"
"-- On Shell#2 remotely call the same server function and\n"
"-- get an ASYNCHRONOUS out-of-band message. For this we cannot\n"
"-- use on_push and on_push_ctx options, but we can use pairs():\n"
"future = conn:call('server_function', {}, {is_async = true})\n"
"messages = {}\n"
"keys = {}\n"
"for i, message in future:pairs() do\n"
"    table.insert(messages, message) table.insert(keys, i) end\n"
"messages\n"
"future:wait_result(1000)\n"
"for i, message in future:pairs() do\n"
"    table.insert(messages, message) table.insert(keys, i) end\n"
"messages\n"
"-- There is no pause because conn:call does not wait for\n"
"-- server_function to finish. The first time that we go through\n"
"-- the pairs() loop, we see the messages table is empty. Like this:\n"
"-- tarantool> messages\n"
"-- ---\n"
"-- - - 2\n"
"--   - []\n"
"-- ...\n"
"-- That is okay because the server hasn't yet called\n"
"-- box.session.push(). The second time that we go through\n"
"-- the pairs() loop, we see the value of x at the time of\n"
"-- the second call to box.session.push(). Like this:\n"
"-- tarantool> messages\n"
"-- ---\n"
"-- - - 2\n"
"--   - &0 []\n"
"--   - 2\n"
"--   - *0\n"
"-- ...\n"
"-- Good. That shows that the message was asynchronous, and\n"
"-- that box.session.push() did its job."
msgstr ""
