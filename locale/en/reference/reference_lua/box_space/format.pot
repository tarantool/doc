
msgid "space_object:format()"
msgstr ""

msgid "Declare field names and :ref:`types <index-box_data-types>`."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "an :ref:`object reference <app_server-object_reference>`"
msgstr ""

msgid "a list of field names and types"
msgstr ""

msgid "return"
msgstr ""

msgid "nil, unless format-clause is omitted"
msgstr ""

msgid "**Possible errors:**"
msgstr ""

msgid "``space_object`` does not exist;"
msgstr ""

msgid "field names are duplicated;"
msgstr ""

msgid "type is not legal."
msgstr ""

msgid "Ordinarily Tarantool allows unnamed untyped fields. But with ``format`` users can, for example, document that the Nth field is the surname field and must contain strings. It is also possible to specify a format clause in :doc:`box.schema.space.create() </reference/reference_lua/box_schema/space_create>`."
msgstr ""

msgid "The format clause contains, for each field, a definition within braces: ``{name='...',type='...'[,is_nullable=...]}``, where:"
msgstr ""

msgid "the ``name`` value may be any string, provided that two fields do not have the same name;"
msgstr ""

msgid "the ``type`` value may be any of allowed types: any | unsigned | string | integer | number | boolean | array | map | scalar, but for creating an index use only :ref:`indexed fields <index-box_indexed-field-types>`;"
msgstr ""

msgid "the optional ``is_nullable`` value may be either ``true`` or ``false`` (the same as the requirement in :ref:`\"Options for space_object:create_index\" <box_space-create_index-options>`). See also the warning notice in section :ref:`Allowing null for an indexed key <box_space-is_nullable>`."
msgstr ""

msgid "It is not legal for tuples to contain values that have the wrong type; for example after ``box.space.tester:format({{' ',type='number'}})`` the request ``box.space.tester:insert{'string-which-is-not-a-number'}`` will cause an error."
msgstr ""

msgid "It is not legal for tuples to contain null values if ``is_nullable=false``, which is the default; for example after ``box.space.tester:format({{' ',type='number',is_nullable=false}})`` the request ``box.space.tester:insert{nil,2}`` will cause an error."
msgstr ""

msgid "It is legal for tuples to have more fields than are described by a format clause. The way to constrain the number of fields is to specify a space's :ref:`field_count <box_space-field_count>` member."
msgstr ""

msgid "It is legal for tuples to have fewer fields than are described by a format clause, if the omitted trailing fields are described with ``is_nullable=true``; for example after ``box.space.tester:format({{'a',type='number'},{'b',type='number',is_nullable=true}})`` the request ``box.space.tester:insert{2}`` will not cause a format-related error."
msgstr ""

msgid "It is legal to use ``format`` on a space that already has a format, thus replacing any previous definitions, provided that there is no conflict with existing data or index definitions."
msgstr ""

msgid "It is legal to use ``format`` to change the ``is_nullable`` flag; for example after ``box.space.tester:format({{' ',type='scalar',is_nullable=false}})`` the request ``box.space.tester:format({{' ',type='scalar',is_nullable=true}})`` will not cause an error -- and will not cause rebuilding of the space. But going the other way and changing ``is_nullable`` from ``true`` to ``false`` might cause rebuilding and might cause an error if there are existing tuples with nulls."
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "box.space.tester:format({{name='surname',type='string'},{name='IDX',type='array'}})\n"
"box.space.tester:format({{name='surname',type='string',is_nullable=true}})"
msgstr ""

msgid "There are legal variations of the format clause:"
msgstr ""

msgid "omitting both 'name=' and 'type=',"
msgstr ""

msgid "omitting 'type=' alone, and"
msgstr ""

msgid "adding extra braces."
msgstr ""

msgid "The following examples show all the variations, first for one field named 'x', second for two fields named 'x' and 'y'."
msgstr ""

msgid "box.space.tester:format({{'x'}})\n"
"box.space.tester:format({{'x'},{'y'}})\n"
"box.space.tester:format({{name='x',type='scalar'}})\n"
"box.space.tester:format({{name='x',type='scalar'},{name='y',type='unsigned'}})\n"
"box.space.tester:format({{name='x'}})\n"
"box.space.tester:format({{name='x'},{name='y'}})\n"
"box.space.tester:format({{'x',type='scalar'}})\n"
"box.space.tester:format({{'x',type='scalar'},{'y',type='unsigned'}})\n"
"box.space.tester:format({{'x','scalar'}})\n"
"box.space.tester:format({{'x','scalar'},{'y','unsigned'}})"
msgstr ""

msgid "The following example shows how to create a space, format it with all possible types, and insert into it."
msgstr ""

msgid "tarantool> box.schema.space.create('t')\n"
"--- ...\n"
"tarantool> box.space.t:format({{name='1',type='any'},\n"
"         >                     {name='2',type='unsigned'},\n"
"         >                     {name='3',type='string'},\n"
"         >                     {name='4',type='number'},\n"
"         >                     {name='5',type='integer'},\n"
"         >                     {name='6',type='boolean'},\n"
"         >                     {name='7',type='scalar'},\n"
"         >                     {name='8',type='array'},\n"
"         >                     {name='9',type='map'}})\n"
"--- ...\n"
"tarantool> box.space.t:create_index('i',{parts={2,'unsigned'}})\n"
"--- ...\n"
"tarantool> box.space.t:insert{{'a'},      -- any\n"
"         >                    1,          -- unsigned\n"
"         >                    'W?',       -- string\n"
"         >                    5.5,        -- number\n"
"         >                    -0,         -- integer\n"
"         >                    true,       -- boolean\n"
"         >                    true,       -- scalar\n"
"         >                    {{'a'}},    -- array\n"
"         >                    {val=1}}    -- map\n"
"---\n"
"- [['a'], 1, 'W?', 5.5, 0, true, true, [['a']], {'val': 1}]\n"
"..."
msgstr ""

msgid "Names specified with the format clause can be used in :ref:`space_object:get() <box_space-get>` and in :ref:`space_object:create_index() <box_space-create_index>` and in :doc:`/reference/reference_lua/box_tuple/field_name` and in :doc:`/reference/reference_lua/box_tuple/field_path`"
msgstr ""

msgid "If the format clause is omitted, then the returned value is the table that was used in a previous :samp:`{space_object}:format({format-clause})` invocation. For example, after ``box.space.tester:format({{'x','scalar'}})``, ``box.space.tester:format()`` will return ``[{'name': 'x', 'type': 'scalar'}]``."
msgstr ""

msgid "**Note re storage engine:** vinyl supports formatting of non-empty spaces. Primary index definition cannot be formatted."
msgstr ""

