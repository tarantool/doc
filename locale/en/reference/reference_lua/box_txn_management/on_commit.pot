# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 2.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-12 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:5
msgid "box.on_commit()"
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:9
msgid "Define a trigger for execution when a transaction ends due to an event such as :doc:`/reference/reference_lua/box_txn_management/commit`."
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:12
msgid "The trigger function may take an iterator parameter, as described in an example for this section."
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:15
msgid "The trigger function should not access any database spaces."
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:17
msgid "If the trigger execution fails and raises an error, the effect is severe and should be avoided -- use Lua's ``pcall()`` mechanism around code that might fail."
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:21
msgid "``box.on_commit()`` must be invoked within a transaction, and the trigger ceases to exist when the transaction ends."
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:0
msgid "Parameters"
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:24
msgid "function which will become the trigger function"
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:26
msgid "existing trigger function which will be replaced by trigger-function"
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:0
msgid "return"
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:28
msgid "nil or function pointer"
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:30
msgid "If the parameters are ``(nil, old-trigger-function)``, then the old trigger is deleted."
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:33
msgid "Details about trigger characteristics are in the :ref:`triggers <triggers-box_triggers>` section."
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:36
msgid "**Example 1**"
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:38
msgid "-- Insert test data --\n"
"box.space.bands:insert { 1, 'Roxette', 1986 }\n"
"box.space.bands:insert { 2, 'Scorpions', 1965 }\n"
"box.space.bands:insert { 3, 'Ace of Base', 1987 }\n"
"\n"
"-- Define a function called on commit --\n"
"function print_commit_result()\n"
"    print('Commit happened')\n"
"end\n"
"\n"
"-- Commit the transaction --\n"
"box.begin()\n"
"box.space.bands:insert { 4, 'The Beatles', 1960 }\n"
"box.on_commit(print_commit_result)\n"
"box.commit()\n"
""
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:43
msgid "**Example 2**"
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:45
msgid "The function parameter can be an iterator. The iterator goes through the effects of every request that changed a space during the transaction."
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:49
msgid "The iterator has:"
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:51
msgid "an ordinal request number"
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:52
msgid "the old value of the tuple before the request (``nil`` for an ``insert`` request)"
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:54
msgid "the new value of the tuple after the request (``nil`` for a ``delete`` request)"
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:56
msgid "the ID of the space"
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:58
msgid "The example below displays the effects of two ``replace`` requests:"
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:60
msgid "-- Insert test data --\n"
"box.space.bands:insert { 1, 'Roxette', 1986 }\n"
"box.space.bands:insert { 2, 'Scorpions', 1965 }\n"
"box.space.bands:insert { 3, 'Ace of Base', 1987 }\n"
"\n"
"-- Define a function called on commit --\n"
"function print_replace_details(iterator)\n"
"    for request_number, old_tuple, new_tuple, space_id in iterator() do\n"
"        print('request_number: ' .. tostring(request_number))\n"
"        print('old_tuple: ' .. tostring(old_tuple))\n"
"        print('new_tuple: ' .. tostring(new_tuple))\n"
"        print('space_id: ' .. tostring(space_id))\n"
"    end\n"
"end\n"
"\n"
"-- Commit the transaction --\n"
"box.begin()\n"
"box.space.bands:replace { 1, 'The Beatles', 1960 }\n"
"box.space.bands:replace { 2, 'The Rolling Stones', 1965 }\n"
"box.on_commit(print_replace_details)\n"
"box.commit()\n"
""
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:65
msgid "The output might look like this:"
msgstr ""

#: ../../doc/reference/reference_lua/box_txn_management/on_commit.rst:67
msgid "request_number: 1\n"
"old_tuple: [1, 'Roxette', 1986]\n"
"new_tuple: [1, 'The Beatles', 1960]\n"
"space_id: 512\n"
"request_number: 2\n"
"old_tuple: [2, 'Scorpions', 1965]\n"
"new_tuple: [2, 'The Rolling Stones', 1965]\n"
"space_id: 512"
msgstr ""
