
msgid "Module `buffer`"
msgstr ""

msgid "The ``buffer`` module returns a dynamically resizable buffer which is solely for optional use by methods of the :ref:`net.box module <net_box-module>` or the :ref:`msgpack module <msgpack-module>`."
msgstr ""

msgid "Ordinarily the ``net.box`` methods return a Lua table. If a ``buffer`` option is used, then the ``net.box`` methods return a :ref:`raw MsgPack string <msgpack-definitions>`. This saves time on the server, if the client application has its own routine for decoding raw MsgPack strings."
msgstr ""

msgid "The buffer uses four pointers to manage its capacity:"
msgstr ""

msgid "``buf`` -- a pointer to the beginning of the buffer"
msgstr ""

msgid "``rpos`` -- a pointer to the beginning of the range; available for reading data (\"read position\")"
msgstr ""

msgid "``wpos`` -- a pointer to the end of the range; available for reading data, and to the beginning of the range for writing new data (\"write position\")"
msgstr ""

msgid "``epos`` -- a pointer to the end of the range; available for writing new data (\"end position\")"
msgstr ""

msgid "Create a new buffer."
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "In this example we will show that using buffer allows you to keep the data in the format that you get from the server. So if you get the data only for sending it somewhere else, buffer fastens this a lot."
msgstr ""

msgid "box.cfg{listen = 3301}\n"
"buffer = require('buffer')\n"
"net_box = require('net.box')\n"
"msgpack = require('msgpack')\n"
"\n"
"box.schema.space.create('tester')\n"
"box.space.tester:create_index('primary')\n"
"box.space.tester:insert({1, 'ABCDE', 12345})\n"
"\n"
"box.schema.user.create('usr1', {password = 'pwd1'})\n"
"box.schema.user.grant('usr1', 'read,write,execute', 'space', 'tester')\n"
"\n"
"ibuf = buffer.ibuf()\n"
"\n"
"conn = net_box.connect('usr1:pwd1@localhost:3301')\n"
"conn.space.tester:select({}, {buffer=ibuf})\n"
"\n"
"msgpack.decode_unchecked(ibuf.rpos)"
msgstr ""

msgid "The result of the final request looks like this:"
msgstr ""

msgid "tarantool> msgpack.decode_unchecked(ibuf.rpos)\n"
"---\n"
"- {48: [['ABCDE', 12345]]}\n"
"- 'cdata<char *>: 0x7f97ba10c041'\n"
"..."
msgstr ""

msgid "Before Tarantool version 1.7.7, the function to use for this case is ``msgpack.ibuf_decode(ibuf.rpos)``. Starting with Tarantool version 1.7.7, ``ibuf_decode`` is deprecated."
msgstr ""

msgid "Allocate ``size`` bytes for ``buffer_object``."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "memory in bytes to allocate"
msgstr ""

msgid "return"
msgstr ""

msgid "``wpos``"
msgstr ""

msgid "Return the capacity of the ``buffer_object``."
msgstr ""

msgid "``epos - buf``"
msgstr ""

msgid "Check if ``size`` bytes are available for reading in ``buffer_object``."
msgstr ""

msgid "memory in bytes to check"
msgstr ""

msgid "``rpos``"
msgstr ""

msgid "Return the size of the range occupied by data."
msgstr ""

msgid "``rpos - buf``"
msgstr ""

msgid "Read ``size`` bytes from buffer."
msgstr ""

msgid "Clear the memory slots allocated by ``buffer_object``."
msgstr ""

msgid "tarantool> ibuf:recycle()\n"
"---\n"
"...\n"
"tarantool> ibuf.buf, ibuf.rpos, ibuf.wpos, ibuf.epos\n"
"---\n"
"- 'cdata<char *>: NULL'\n"
"- 'cdata<char *>: NULL'\n"
"- 'cdata<char *>: NULL'\n"
"- 'cdata<char *>: NULL'\n"
"..."
msgstr ""

msgid "Clear the memory slots used by ``buffer_object``. This method allows to keep the buffer but remove data from it. It is useful when you want to use the buffer further."
msgstr ""

msgid "tarantool> ibuf:reset()\n"
"---\n"
"...\n"
"tarantool> ibuf.buf, ibuf.rpos, ibuf.wpos, ibuf.epos\n"
"---\n"
"- 'cdata<char *>: 0x010cc28030'\n"
"- 'cdata<char *>: 0x010cc28030'\n"
"- 'cdata<char *>: 0x010cc28030'\n"
"- 'cdata<char *>: 0x010cc2c000'\n"
"..."
msgstr ""

msgid "Reserve memory for ``buffer_object``. Check if there is enough memory to write ``size`` bytes after ``wpos``. If not, ``epos`` shifts until ``size`` bytes will be available."
msgstr ""

msgid "Return a range, available for reading data."
msgstr ""

msgid "``wpos - rpos``"
msgstr ""

msgid "Return a range for writing data."
msgstr ""

msgid "``epos - wpos``"
msgstr ""

