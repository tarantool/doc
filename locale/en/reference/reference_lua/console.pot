
msgid "Module `console`"
msgstr ""

msgid "Overview"
msgstr ""

msgid "The console module allows one Tarantool instance to access another Tarantool instance, and allows one Tarantool instance to start listening on an :ref:`admin port <admin-security>`."
msgstr ""

msgid "Index"
msgstr ""

msgid "Below is a list of all ``console`` functions."
msgstr ""

msgid "Name"
msgstr ""

msgid "Use"
msgstr ""

msgid ":ref:`console.connect() <console-connect>`"
msgstr ""

msgid "Connect to an instance"
msgstr ""

msgid ":ref:`console.listen() <console-listen>`"
msgstr ""

msgid "Listen for incoming requests"
msgstr ""

msgid ":ref:`console.start() <console-start>`"
msgstr ""

msgid "Start the console"
msgstr ""

msgid ":ref:`console.ac() <console-ac>`"
msgstr ""

msgid "Set the auto-completion flag"
msgstr ""

msgid ":ref:`console.delimiter() <console-delimiter>`"
msgstr ""

msgid "Set a delimiter"
msgstr ""

msgid ":ref:`console.get_default_output() <console-get_default_output>`"
msgstr ""

msgid "Get default output format"
msgstr ""

msgid ":ref:`console.set_default_output() <console-set_default_output>`"
msgstr ""

msgid "Set default output format"
msgstr ""

msgid ":ref:`console.eos() <console-eos>`"
msgstr ""

msgid "Set or get end-of-output string"
msgstr ""

msgid "Connect to the instance at :ref:`URI <index-uri>`, change the prompt from '``tarantool>``' to ':samp:`{uri}>`', and act henceforth as a client until the user ends the session or types ``control-D``."
msgstr ""

msgid "The console.connect function allows one Tarantool instance, in interactive mode, to access another Tarantool instance. Subsequent requests will appear to be handled locally, but in reality the requests are being sent to the remote instance and the local instance is acting as a client. Once connection is successful, the prompt will change and subsequent requests are sent to, and executed on, the remote instance. Results are displayed on the local instance. To return to local mode, enter ``control-D``."
msgstr ""

msgid "If the Tarantool instance at :samp:`uri` requires authentication, the connection might look something like: ``console.connect('admin:secretpassword@distanthost.com:3301')``."
msgstr ""

msgid "There are no restrictions on the types of requests that can be entered, except those which are due to privilege restrictions -- by default the login to the remote instance is done with user name = 'guest'. The remote instance could allow for this by granting at least one privilege: ``box.schema.user.grant('guest','execute','universe')``."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "the URI of the remote instance"
msgstr ""

msgid "return"
msgstr ""

msgid "nil"
msgstr ""

msgid "Possible errors: the connection will fail if the target Tarantool instance was not initiated with ``box.cfg{listen=...}``."
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "tarantool> console = require('console')\n"
"---\n"
"...\n"
"tarantool> console.connect('198.18.44.44:3301')\n"
"---\n"
"...\n"
"198.18.44.44:3301> -- prompt is telling us that instance is remote"
msgstr ""

msgid "Listen on :ref:`URI <index-uri>`. The primary way of listening for incoming requests is via the connection-information string, or URI, specified in ``box.cfg{listen=...}``. The alternative way of listening is via the URI specified in ``console.listen(...)``. This alternative way is called \"administrative\" or simply :ref:`\"admin port\" <admin-security>`. The listening is usually over a local host with a Unix domain socket."
msgstr ""

msgid "the URI of the local instance"
msgstr ""

msgid "The \"admin\" address is the URI to listen on. It has no default value, so it must be specified if connections will occur via an admin port. The parameter is expressed with URI = Universal Resource Identifier format, for example \"/tmpdir/unix_domain_socket.sock\", or a numeric TCP port. Connections are often made with telnet. A typical port value is 3313."
msgstr ""

msgid "tarantool> console = require('console')\n"
"---\n"
"...\n"
"tarantool> console.listen('unix/:/tmp/X.sock')\n"
"... main/103/console/unix/:/tmp/X I> started\n"
"---\n"
"- fd: 6\n"
"  name:\n"
"    host: unix/\n"
"    family: AF_UNIX\n"
"    type: SOCK_STREAM\n"
"    protocol: 0\n"
"    port: /tmp/X.sock\n"
"..."
msgstr ""

msgid "Start the console on the current interactive terminal."
msgstr ""

msgid "A special use of ``console.start()`` is with :ref:`initialization files <index-init_label>`. Normally, if one starts the Tarantool instance with :samp:`tarantool {initialization file}` there is no console. This can be remedied by adding these lines at the end of the initialization file:"
msgstr ""

msgid "local console = require('console')\n"
"console.start()"
msgstr ""

msgid "Set the auto-completion flag. If auto-completion is `true`, and the user is using Tarantool as a client or the user is using Tarantool via ``console.connect()``, then hitting the TAB key may cause tarantool to complete a word automatically. The default auto-completion value is `true`."
msgstr ""

msgid "Set a custom end-of-request marker for Tarantool console."
msgstr ""

msgid "The default end-of-request marker is a newline (line feed). Custom markers are not necessary because Tarantool can tell when a multi-line request has not ended (for example, if it sees that a function declaration does not have an end keyword). Nonetheless for special needs, or for entering multi-line requests in older Tarantool versions, you can change the end-of-request marker. As a result, newline alone is not treated as end of request."
msgstr ""

msgid "To go back to normal mode, say: ``console.delimiter('')<marker>``"
msgstr ""

msgid "a custom end-of-request marker for Tarantool console"
msgstr ""

msgid "tarantool> console = require('console'); console.delimiter('!')\n"
"---\n"
"...\n"
"tarantool> function f ()\n"
"         > statement_1 = 'a'\n"
"         > statement_2 = 'b'\n"
"         > end!\n"
"---\n"
"...\n"
"tarantool> console.delimiter('')!\n"
"---\n"
"..."
msgstr ""

msgid "Return the current default output format. The result will be ``fmt=\"yaml\"``, or it will be ``fmt=\"lua\"`` if the last :ref:`set_default_output <console-set_default_output>` call was ``console.set_default_output('lua')``."
msgstr ""

msgid "Set the default output format. The possible values are 'yaml' (the default default) or 'lua'. The output format can be changed within a session by executing :samp:`console.eval('\\\\\\\\set output {yaml}|{lua}')`; see the description of output format in the :ref:`Interactive console <interactive_console_output>` section."
msgstr ""

msgid "Set or access the end-of-output string if default output is 'lua'. This is the string that appears at the end of output in a response to any Lua request. The default value is ``;`` semicolon. Saying ``eos()`` will return the current value. For example, after ``require('console').eos('!!')`` responses will end with '!!'."
msgstr ""

