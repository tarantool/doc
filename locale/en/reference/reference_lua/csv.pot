
msgid "Module `csv`"
msgstr ""

msgid "Overview"
msgstr ""

msgid "The ``csv`` module handles records formatted according to Comma-Separated-Values (CSV) rules."
msgstr ""

msgid "The default formatting rules are:"
msgstr ""

msgid "Lua `escape sequences`_ such as \\\\n or \\\\10 are legal within strings but not within files,"
msgstr ""

msgid "Commas designate end-of-field,"
msgstr ""

msgid "Line feeds, or line feeds plus carriage returns, designate end-of-record,"
msgstr ""

msgid "Leading or trailing spaces are ignored,"
msgstr ""

msgid "Quote marks may enclose fields or parts of fields,"
msgstr ""

msgid "When enclosed by quote marks, commas and line feeds and spaces are treated as ordinary characters, and a pair of quote marks \"\" is treated as a single quote mark."
msgstr ""

msgid "The possible options which can be passed to csv functions are:"
msgstr ""

msgid ":samp:`delimiter = {string}` (default: comma) -- single-byte character to designate end-of-field"
msgstr ""

msgid ":samp:`quote_char = {string}` (default: quote mark) -- single-byte character to designate encloser of string"
msgstr ""

msgid ":samp:`chunk_size = {number}` (default: 4096) -- number of characters to read at once (usually for file-IO efficiency)"
msgstr ""

msgid ":samp:`skip_head_lines = {number}` (default: 0) -- number of lines to skip at the start (usually for a header)"
msgstr ""

msgid "Index"
msgstr ""

msgid "Below is a list of all ``csv`` functions."
msgstr ""

msgid "Name"
msgstr ""

msgid "Use"
msgstr ""

msgid ":ref:`csv.load() <csv-load>`"
msgstr ""

msgid "Load a CSV file"
msgstr ""

msgid ":ref:`csv.dump() <csv-dump>`"
msgstr ""

msgid "Transform input into a CSV-formatted string"
msgstr ""

msgid ":ref:`csv.iterate() <csv-iterate>`"
msgstr ""

msgid "Iterate over CSV records"
msgstr ""

msgid "Get CSV-formatted input from ``readable`` and return a table as output. Usually ``readable`` is either a string or a file opened for reading. Usually :samp:`{options}` is not specified."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "a string, or any object which has a read() method, formatted according to the CSV rules"
msgstr ""

msgid "see :ref:`above <csv-options>`"
msgstr ""

msgid "return"
msgstr ""

msgid "loaded_value"
msgstr ""

msgid "rtype"
msgstr ""

msgid "table"
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "Readable string has 3 fields, field#2 has comma and space so use quote marks:"
msgstr ""

msgid "tarantool> csv = require('csv')\n"
"---\n"
"...\n"
"tarantool> csv.load('a,\"b,c \",d')\n"
"---\n"
"- - - a\n"
"    - 'b,c '\n"
"    - d\n"
"..."
msgstr ""

msgid "Readable string contains 2-byte character = Cyrillic Letter Palochka: (This displays a palochka if and only if character set = UTF-8.)"
msgstr ""

msgid "tarantool> csv.load('a\\\\211\\\\128b')\n"
"---\n"
"- - - a\\211\\128b\n"
"..."
msgstr ""

msgid "Semicolon instead of comma for the delimiter:"
msgstr ""

msgid "tarantool> csv.load('a,b;c,d', {delimiter = ';'})\n"
"---\n"
"- - - a,b\n"
"    - c,d\n"
"..."
msgstr ""

msgid "Readable file :file:`./file.csv` contains two CSV records. Explanation of ``fio`` is in section :ref:`fio <fio-section>`. Source CSV file and example respectively:"
msgstr ""

msgid "tarantool> -- input in file.csv is:\n"
"tarantool> -- a,\"b,c \",d\n"
"tarantool> -- a\\\\211\\\\128b\n"
"tarantool> fio = require('fio')\n"
"---\n"
"...\n"
"tarantool> f = fio.open('./file.csv', {'O_RDONLY'})\n"
"---\n"
"...\n"
"tarantool> csv.load(f, {chunk_size = 4096})\n"
"---\n"
"- - - a\n"
"    - 'b,c '\n"
"    - d\n"
"  - - a\\\\211\\\\128b\n"
"...\n"
"tarantool> f:close()\n"
"---\n"
"- true\n"
"..."
msgstr ""

msgid "Get table input from ``csv-table`` and return a CSV-formatted string as output. Or, get table input from ``csv-table`` and put the output in ``writable``. Usually :samp:`{options}` is not specified. Usually ``writable``, if specified, is a file opened for writing. :ref:`csv.dump() <csv-dump>` is the reverse of :ref:`csv.load() <csv-load>`."
msgstr ""

msgid "a table which can be formatted according to the CSV rules."
msgstr ""

msgid "optional. see :ref:`above <csv-options>`"
msgstr ""

msgid "any object which has a ``write()`` method"
msgstr ""

msgid "dumped_value"
msgstr ""

msgid "string, which is written to ``writable`` if specified"
msgstr ""

msgid "CSV-table has 3 fields, field#2 has \",\" so result has quote marks"
msgstr ""

msgid "tarantool> csv = require('csv')\n"
"---\n"
"...\n"
"tarantool> csv.dump({'a','b,c ','d'})\n"
"---\n"
"- 'a,\"b,c \",d\n"
"\n"
"'\n"
"..."
msgstr ""

msgid "Round Trip: from string to table and back to string"
msgstr ""

msgid "tarantool> csv_table = csv.load('a,b,c')\n"
"---\n"
"...\n"
"tarantool> csv.dump(csv_table)\n"
"---\n"
"- 'a,b,c\n"
"\n"
"'\n"
"..."
msgstr ""

msgid "Form a Lua iterator function for going through CSV records one field at a time. Use of an iterator is strongly recommended if the amount of data is large (ten or more megabytes)."
msgstr ""

msgid "Lua iterator function"
msgstr ""

msgid "iterator function"
msgstr ""

msgid ":ref:`csv.iterate() <csv-iterate>` is the low level of :ref:`csv.load() <csv-load>` and :ref:`csv.dump() <csv-dump>`. To illustrate that, here is a function which is the same as the :ref:`csv.load() <csv-load>` function, as seen in `the Tarantool source code`_."
msgstr ""

msgid "tarantool> load = function(readable, opts)\n"
"         >   opts = opts or {}\n"
"         >   local result = {}\n"
"         >   for i, tup in csv.iterate(readable, opts) do\n"
"         >     result[i] = tup\n"
"         >   end\n"
"         >   return result\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> load('a,b,c')\n"
"---\n"
"- - - a\n"
"    - b\n"
"    - c\n"
"..."
msgstr ""

