# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 2.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-12 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/reference/reference_lua/errcodes.rst:4
msgid "Database error codes"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:6
msgid "The table below lists some popular errors that can be raised by Tarantool in case of various issues. You can find a complete list of errors in the `errcode.h <https://github.com/tarantool/tarantool/blob/master/src/box/errcode.h>`_ file."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:12
msgid "The :ref:`box.error <box-error-submodule>` module provides the ability to get the information about the last error raised by Tarantool or raise custom errors manually."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:23
msgid "Code"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:24
msgid "box.error value"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:25
msgid "Description"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:27
msgid "ER_NONMASTER"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:28
msgid "box.error.NONMASTER"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:29
msgid "(In replication) A server instance cannot modify data unless it is a master."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:31
msgid "ER_ILLEGAL_PARAMS"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:32
msgid "box.error.ILLEGAL_PARAMS"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:33
msgid "Illegal parameters. Malformed protocol message."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:35
msgid "ER_MEMORY_ISSUE"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:36
msgid "box.error.MEMORY_ISSUE"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:37
msgid "Out of memory: :ref:`memtx_memory <cfg_storage-memtx_memory>` limit has been reached."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:39
msgid "ER_WAL_IO"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:40
msgid "box.error.WAL_IO"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:41
msgid "Failed to write to disk. May mean: failed  to record a change in the write-ahead log."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:43
msgid "ER_READONLY"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:44
msgid "box.error.READONLY"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:45
msgid "Can't modify data on a read-only instance."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:47
msgid "ER_KEY_PART_COUNT"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:48
msgid "box.error.KEY_PART_COUNT"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:49
msgid "Key part count is not the same as index part count."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:51
msgid "ER_NO_SUCH_SPACE"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:52
msgid "box.error.NO_SUCH_SPACE"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:53
msgid "The specified space does not exist."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:55
msgid "ER_NO_SUCH_INDEX"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:56
msgid "box.error.NO_SUCH_INDEX"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:57
msgid "The specified index in the specified space does not exist."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:59
msgid "ER_PROC_LUA"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:60
msgid "box.error.PROC_LUA"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:61
msgid "An error occurred inside a Lua procedure."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:63
msgid "ER_FIBER_STACK"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:64
msgid "box.error.FIBER_STACK"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:65
msgid "The recursion limit was reached when creating a new fiber. This usually indicates that a stored procedure is recursively invoking itself too often."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:67
msgid "ER_UPDATE_FIELD"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:68
msgid "box.error.UPDATE_FIELD"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:69
msgid "An error occurred during update of a field."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:71
msgid "ER_TUPLE_FOUND"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:72
msgid "box.error.TUPLE_FOUND"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:73
msgid "A duplicate key exists in a unique index."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:80
msgid "Handling errors"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:82
msgid "Here are some procedures that can make Lua functions more robust when there are errors, particularly database errors."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:85
msgid "Invoke a function using ``pcall``."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:87
msgid "Take advantage of Lua's mechanisms for `Error handling and exceptions <https://www.lua.org/pil/8.4.html>`_, particularly ``pcall``. That is, instead of invoking with ..."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:90
msgid "box.space.{space-name}:{function-name}()"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:94
msgid "... call the function as follows:"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:96
msgid "if pcall(box.space.{space-name}.{function-name}, box.space.{space-name}) ..."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:100
msgid "For some Tarantool box functions, ``pcall`` also returns error details, including a file-name and line-number within Tarantool's source code. This can be seen by unpacking, for example:"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:104
msgid "status, error = pcall(function() box.schema.space.create('') end)\n"
"error:unpack()"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:109
msgid "See the tutorial :ref:`Sum a JSON field for all tuples <c_lua_tutorial-sum_a_json_field>` to see how ``pcall`` can fit in an application."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:112
msgid "Examine errors and raise new errors using ``box.error``."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:114
msgid "To make a new error and pass it on, the ``box.error`` module provides :doc:`box.error() </reference/reference_lua/box_error/error>`."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:117
msgid "To find the last error, the ``box.error`` submodule provides :doc:`/reference/reference_lua/box_error/last`. There is also a way to find the text of the last operating-system error for certain functions -- :ref:`errno.strerror([code]) <errno-strerror>`."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:123
msgid "Log."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:125
msgid "Put messages in a log using the :ref:`log module <log-module>`."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:127
msgid "Filter automatically generated messages using the :ref:`log <cfg_logging-log>` configuration parameter."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:131
msgid "Generally, for Tarantool built-in functions which are designed to return objects: the result is an object, or nil, or `a Lua error <https://www.lua.org/pil/8.3.html>`_. For example consider the :ref:`fio_read.lua <cookbook-fio_read>` program in a cookbook:"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:135
msgid "#!/usr/bin/env tarantool\n"
"\n"
"local fio = require('fio')\n"
"local errno = require('errno')\n"
"local f = fio.open('/tmp/xxxx.txt', {'O_RDONLY' })\n"
"if not f then\n"
"    error(\"Failed to open file: \"..errno.strerror())\n"
"end\n"
"local data = f:read(4096)\n"
"f:close()\n"
"print(data)"
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:149
msgid "After a function call that might fail, like ``fio.open()`` above, it is common to see syntax like ``if not f then ...`` or ``if f == nil then ...``, which check for common failures. But if there had been a syntax error, for example fio.opex instead of fio.open, then there would have been a Lua error and f would not have been changed. If checking for such an obvious error had been a concern, the programmer would probably have used ``pcall()``."
msgstr ""

#: ../../doc/reference/reference_lua/errcodes.rst:159
msgid "All functions in Tarantool modules should work this way, unless the manual explicitly says otherwise."
msgstr ""
