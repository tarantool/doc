# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 2.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-12 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/reference/reference_lua/key_def.rst:5
msgid "Module key_def"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:9
msgid "The `key_def` module has a function for defining the field numbers and types of a tuple. The definition is usually used with an index definition to extract or compare the index key values."
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:17
msgid "Create a new key_def instance."
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:0
#: ../../doc/reference/reference_lua/key_def.rst:0
#: ../../doc/reference/reference_lua/key_def.rst:0
#: ../../doc/reference/reference_lua/key_def.rst:0
#: ../../doc/reference/reference_lua/key_def.rst:0
msgid "Parameters"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:19
msgid "field numbers and types. There must be at least one part. Every part must contain the attributes ``type`` and ``fieldno``/``field``. Other attributes are optional."
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:0
msgid "returns"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:24
msgid ":ref:`a key_def object <key_def-object>`"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:26
msgid "The parts table has components which are the same as the ``parts`` option in :ref:`Options for space_object:create_index() <index_opts_object>`."
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:30
msgid "``fieldno`` (integer), for example, ``fieldno = 1``. It is legal to use ``field`` instead of ``fieldno``."
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:33
msgid "``type`` (string), for example, ``type = 'string'``."
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:35
msgid "Other components are optional."
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:37
msgid "Example: ``key_def.new({{type = 'unsigned', fieldno = 1}})``"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:39
msgid "Example: ``key_def.new({{type = 'string', collation = 'unicode', field = 2}})``"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:46
msgid "A key_def object is an object returned by :ref:`key_def.new() <key_def-new>`. It has methods :ref:`extract_key() <key_def-extract_key>`, :ref:`compare() <key_def-compare>`, :ref:`compare_with_key() <key_def-compare_with_key>`, :ref:`merge() <key_def-merge>`, :ref:`totable() <key_def-totable>`."
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:58
msgid "Return a tuple containing only the fields of the ``key_def`` object."
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:60
#: ../../doc/reference/reference_lua/key_def.rst:135
#: ../../doc/reference/reference_lua/key_def.rst:136
#: ../../doc/reference/reference_lua/key_def.rst:161
#: ../../doc/reference/reference_lua/key_def.rst:162
msgid "tuple or Lua table with field contents"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:0
#: ../../doc/reference/reference_lua/key_def.rst:0
#: ../../doc/reference/reference_lua/key_def.rst:0
#: ../../doc/reference/reference_lua/key_def.rst:0
#: ../../doc/reference/reference_lua/key_def.rst:0
msgid "return"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:62
msgid "the fields defined for the ``key_def`` object"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:64
msgid "**Example #1:**"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:66
msgid "-- Suppose an item has five fields\n"
"-- 1, 99.5, 'X', nil, 99.5\n"
"-- and the fields that we care about are\n"
"-- #3 (a string) and #1 (an integer).\n"
"-- We can define those fields with k = key_def.new\n"
"-- and extract the values with k:extract_key.\n"
"\n"
"tarantool> key_def = require('key_def')\n"
"---\n"
"...\n"
"\n"
"tarantool> k = key_def.new({{type = 'string', fieldno = 3},\n"
">                           {type = 'unsigned', fieldno = 1}})\n"
"---\n"
"...\n"
"\n"
"tarantool> k:extract_key({1, 99.5, 'X', nil, 99.5})\n"
"---\n"
"- ['X', 1]\n"
"..."
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:89
msgid "**Example #2**"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:91
msgid "-- Now suppose the item is a tuple in a space with\n"
"-- an index on field #3 plus field #1.\n"
"-- We can use key_def.new with the index definition\n"
"-- instead of filling it out (Example #1).\n"
"-- The result will be the same.\n"
"key_def = require('key_def')\n"
"box.schema.space.create('T')\n"
"i = box.space.T:create_index('I', {parts={3, 'string', 1, 'unsigned'}})\n"
"box.space.T:insert{1, 99.5, 'X', nil, 99.5}\n"
"k = key_def.new(i.parts)\n"
"k:extract_key(box.space.T:get({'X', 1}))"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:105
msgid "**Example #3**"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:107
msgid "-- Iterate through the tuples in a secondary non-unique index\n"
"-- extracting the tuples' primary-key values, so they could be deleted\n"
"-- using a unique index. This code should be a part of a Lua function.\n"
"local key_def_lib = require('key_def')\n"
"local s = box.schema.space.create('test')\n"
"local pk = s:create_index('pk')\n"
"local sk = s:create_index('test', {unique = false, parts = {\n"
"    {2, 'number', path = 'a'}, {2, 'number', path = 'b'}}})\n"
"s:insert{1, {a = 1, b = 1}}\n"
"s:insert{2, {a = 1, b = 2}}\n"
"local key_def = key_def_lib.new(pk.parts)\n"
"for _, tuple in sk:pairs({1})) do\n"
"    local key = key_def:extract_key(tuple)\n"
"    pk:delete(key)\n"
"end"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:129
msgid "Compare the key fields of ``tuple_1`` with the key fields of ``tuple_2``. It is a tuple-by-tuple comparison so users do not have to write code that compares one field at a time. Each field's type and collation will be taken into account. In effect it is a comparison of ``extract_key(tuple_1)`` with ``extract_key(tuple_2)``."
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:138
msgid "> 0 if tuple_1 key fields > tuple_2 key fields, = 0 if tuple_1 key fields = tuple_2 key fields, < 0 if tuple_1 key fields < tuple_2 key fields"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:142
#: ../../doc/reference/reference_lua/key_def.rst:168
#: ../../doc/reference/reference_lua/key_def.rst:191
#: ../../doc/reference/reference_lua/key_def.rst:216
msgid "**Example:**"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:144
msgid "-- This will return 0\n"
"key_def = require('key_def')\n"
"k = key_def.new({{type = 'string', fieldno = 3, collation = 'unicode_ci'},\n"
"                 {type = 'unsigned', fieldno = 1}})\n"
"k:compare({1, 99.5, 'X', nil, 99.5}, {1, 99.5, 'x', nil, 99.5})"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:156
msgid "Compare the key fields of ``tuple_1`` with all the fields of ``tuple_2``. This is the same as :ref:`key_def_object:compare() <key_def-compare>` except that ``tuple_2`` contains only the key fields. In effect it is a comparison of ``extract_key(tuple_1)`` with ``tuple_2``."
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:164
msgid "> 0 if tuple_1 key fields > tuple_2 fields, = 0 if tuple_1 key fields = tuple_2 fields, < 0 if tuple_1 key fields < tuple_2 fields"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:170
msgid "-- Returns 0\n"
"key_def = require('key_def')\n"
"k = key_def.new({{type = 'string', fieldno = 3, collation = 'unicode_ci'},\n"
"                 {type = 'unsigned', fieldno = 1}})\n"
"k:compare_with_key({1, 99.5, 'X', nil, 99.5}, {'x', 1})"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:182
msgid "Combine the main ``key_def_object`` with ``other_key_def_object``. The return value is a new ``key_def_object`` containing all the fields of the main ``key_def_object``, then all the fields of ``other_key_def_object`` which are not in the main ``key_def_object``."
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:187
msgid "definition of fields to add"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:189
msgid "key_def_object"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:193
msgid "-- Returns a key definition with fieldno = 3 and fieldno = 1.\n"
"key_def = require('key_def')\n"
"k = key_def.new({{type = 'string', fieldno = 3}})\n"
"k2= key_def.new({{type = 'unsigned', fieldno = 1},\n"
"                 {type = 'string', fieldno = 3}})\n"
"k:merge(k2)"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:206
msgid "Returns a table containing the fields of the ``key_def_object``. This is the reverse of ``key_def.new()``:"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:209
msgid "``key_def.new()`` takes a table and returns a ``key_def`` object,"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:210
msgid "``key_def_object:totable()`` takes a ``key_def`` object and returns a table."
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:212
msgid "This is useful for input to ``_serialize`` methods."
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:214
msgid "table"
msgstr ""

#: ../../doc/reference/reference_lua/key_def.rst:218
msgid "-- Returns a table with type = 'string', fieldno = 3\n"
"key_def = require('key_def')\n"
"k = key_def.new({{type = 'string', fieldno = 3}})\n"
"k:totable()"
msgstr ""
