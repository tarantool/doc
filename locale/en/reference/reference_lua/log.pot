
msgid "Module `log`"
msgstr ""

msgid "Overview"
msgstr ""

msgid "The Tarantool server puts all diagnostic messages in a log file specified by the :ref:`log <cfg_logging-log>` configuration parameter. Diagnostic messages may be either system-generated by the server's internal code, or user-generated with the :samp:`log.{log_level_function_name}` function."
msgstr ""

msgid "As explained in the description of :ref:`log_format <cfg_logging-log_format>` configuration setting, there are two possible formats for log entries:"
msgstr ""

msgid "'plain' (the default), or"
msgstr ""

msgid "'json' (with more detail and with JSON labels)."
msgstr ""

msgid "Here is what a log entry looks like after ``box.cfg{log_format='plain'}``:"
msgstr ""

msgid "2017-10-16 11:36:01.508 [18081] main/101/interactive I> set 'log_format' configuration option to \"plain\""
msgstr ""

msgid "Here is what a log entry looks like after ``box.cfg{log_format='json'}``:"
msgstr ""

msgid "{\"time\": \"2017-10-16T11:36:17.996-0600\",\n"
"\"level\": \"INFO\",\n"
"\"message\": \"set 'log_format' configuration option to \\\"json\\\"\",\n"
"\"pid\": 18081,|\n"
"\"cord_name\": \"main\",\n"
"\"fiber_id\": 101,\n"
"\"fiber_name\": \"interactive\",\n"
"\"file\": \"builtin\\/box\\/load_cfg.lua\",\n"
"\"line\": 317}"
msgstr ""

msgid "Index"
msgstr ""

msgid "Below is a list of all ``log`` functions."
msgstr ""

msgid "Name"
msgstr ""

msgid "Use"
msgstr ""

msgid ":ref:`log.error() <log-ug_message>` |br| :ref:`log.warn() <log-ug_message>` |br| :ref:`log.info() <log-ug_message>` |br| :ref:`log.verbose() <log-ug_message>` |br| :ref:`log.debug() <log-ug_message>`"
msgstr ""

msgid "Write a user-generated message to a log file"
msgstr ""

msgid ":ref:`log.logger_pid() <log-logger_pid>`"
msgstr ""

msgid "Get the PID of a logger"
msgstr ""

msgid ":ref:`log.rotate() <log-rotate>`"
msgstr ""

msgid "Rotate a log file"
msgstr ""

msgid "Output a user-generated message to the :ref:`log file <cfg_logging-log>`, given log_level_function_name = ``error`` or ``warn`` or ``info`` or ``verbose`` or ``debug``."
msgstr ""

msgid "As explained in the description of the configuration setting for :ref:`log_level <cfg_logging-log_level>`, there are seven levels of detail:"
msgstr ""

msgid "1 – ``SYSERROR``"
msgstr ""

msgid "2 – ``ERROR`` -- this corresponds to ``log.error(...)``"
msgstr ""

msgid "3 – ``CRITICAL``"
msgstr ""

msgid "4 – ``WARNING``  -- this corresponds to ``log.warn(...)``"
msgstr ""

msgid "5 – ``INFO`` -- this corresponds to ``log.info(...)``"
msgstr ""

msgid "6 – ``VERBOSE``  -- this corresponds to ``log.verbose(...)``"
msgstr ""

msgid "7 – ``DEBUG`` -- this corresponds to ``log.debug(...)``"
msgstr ""

msgid "For example, if ``box.cfg.log_level`` is currently 5 (the default value), then ``log.error(...)``, ``log.warn(...)`` and ``log.info(...)`` messages will go to the log file. However, ``log.verbose(...)`` and ``log.debug(...)`` messages will not go to the log file, because they correspond to higher levels of detail."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "Usually a string.  Messages may contain C-style format specifiers %d or %s, so :samp:`log.error('...%d...%s', {x}, {y})` will work if ``x`` is a number and ``y`` is a string.  Less commonly, messages may be other scalar data types, or even tables. So :code:`log.error({'x',18.7,true})` will work."
msgstr ""

msgid "Usually a string."
msgstr ""

msgid "Messages may contain C-style format specifiers %d or %s, so :samp:`log.error('...%d...%s', {x}, {y})` will work if ``x`` is a number and ``y`` is a string."
msgstr ""

msgid "Less commonly, messages may be other scalar data types, or even tables. So :code:`log.error({'x',18.7,true})` will work."
msgstr ""

msgid "return"
msgstr ""

msgid "nil"
msgstr ""

msgid "The actual output will be a line in the log, containing:"
msgstr ""

msgid "the current timestamp,"
msgstr ""

msgid "a module name,"
msgstr ""

msgid "'E', 'W', 'I', 'V' or 'D' depending on ``log_level_function_name``, and"
msgstr ""

msgid "``message``."
msgstr ""

msgid "Output will not occur if ``log_level_function_name`` is for a type greater than :ref:`log_level <cfg_logging-log_level>`."
msgstr ""

msgid "PID of a logger"
msgstr ""

msgid "Rotate the log."
msgstr ""

msgid "Example"
msgstr ""

msgid "$ tarantool\n"
"tarantool> box.cfg{log_level=3, log='tarantool.txt'}\n"
"tarantool> log = require('log')\n"
"tarantool> log.error('Error')\n"
"tarantool> log.info('Info %s', box.info.version)\n"
"tarantool> os.exit()"
msgstr ""

msgid "$ less tarantool.txt\n"
"2017-09-20 ... [68617] main/101/interactive C> version 1.7.5-31-ge939c6ea6\n"
"2017-09-20 ... [68617] main/101/interactive C> log level 3\n"
"2017-09-20 ... [68617] main/101/interactive [C]:-1 E> Error"
msgstr ""

msgid "The 'Error' line is visible in ``tarantool.txt`` preceded by the letter E."
msgstr ""

msgid "The 'Info' line is not present because the ``log_level`` is 3."
msgstr ""

