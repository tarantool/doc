
msgid "Module `pickle`"
msgstr ""

msgid "Index"
msgstr ""

msgid "Below is a list of all ``pickle`` functions."
msgstr ""

msgid "Name"
msgstr ""

msgid "Use"
msgstr ""

msgid ":ref:`pickle.pack() <pickle-pack>`"
msgstr ""

msgid "Convert Lua variables to binary format"
msgstr ""

msgid ":ref:`pickle.unpack() <pickle-unpack>`"
msgstr ""

msgid "Convert Lua variables back from binary format"
msgstr ""

msgid "To use Tarantool binary protocol primitives from Lua, it's necessary to convert Lua variables to binary format. The ``pickle.pack()`` helper function is prototyped after Perl 'pack_'."
msgstr ""

msgid "**Format specifiers**"
msgstr ""

msgid "b, B"
msgstr ""

msgid "converts Lua scalar value to a 1-byte integer, and stores the integer in the resulting string"
msgstr ""

msgid "s, S"
msgstr ""

msgid "converts Lua scalar value to a 2-byte integer, and stores the integer in the resulting string, low byte first"
msgstr ""

msgid "i, I"
msgstr ""

msgid "converts Lua scalar value to a 4-byte integer, and stores the integer in the resulting string, low byte first"
msgstr ""

msgid "l, L"
msgstr ""

msgid "converts Lua scalar value to an 8-byte integer, and stores the integer in the resulting string, low byte first"
msgstr ""

msgid "n"
msgstr ""

msgid "converts Lua scalar value to a 2-byte integer, and stores the integer in the resulting string, big endian,"
msgstr ""

msgid "N"
msgstr ""

msgid "converts Lua scalar value to a 4-byte integer, and stores the integer in the resulting string, big"
msgstr ""

msgid "q, Q"
msgstr ""

msgid "converts Lua scalar value to an 8-byte integer, and stores the integer in the resulting string, big endian,"
msgstr ""

msgid "f"
msgstr ""

msgid "converts Lua scalar value to a 4-byte float, and stores the float in the resulting string"
msgstr ""

msgid "d"
msgstr ""

msgid "converts Lua scalar value to a 8-byte double, and stores the double in the resulting string"
msgstr ""

msgid "a, A"
msgstr ""

msgid "converts Lua scalar value to a sequence of bytes, and stores the sequence in the resulting string"
msgstr ""

msgid "Parameters"
msgstr ""

msgid "string containing format specifiers"
msgstr ""

msgid "scalar values to be formatted"
msgstr ""

msgid "return"
msgstr ""

msgid "a binary string containing all arguments, packed according to the format specifiers."
msgstr ""

msgid "rtype"
msgstr ""

msgid "string"
msgstr ""

msgid "A scalar value can be either a variable or a literal. Remember that large integers should be entered with :ref:`tonumber64() or LL or ULL suffixes <index-box_number>`."
msgstr ""

msgid "Possible errors: unknown format specifier."
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "tarantool> pickle = require('pickle')\n"
"---\n"
"...\n"
"tarantool> box.space.tester:insert{0, 'hello world'}\n"
"---\n"
"- [0, 'hello world']\n"
"...\n"
"tarantool> box.space.tester:update({0}, {{'=', 2, 'bye world'}})\n"
"---\n"
"- [0, 'bye world']\n"
"...\n"
"tarantool> box.space.tester:update({0}, {\n"
"         >   {'=', 2, pickle.pack('iiA', 0, 3, 'hello')}\n"
"         > })\n"
"---\n"
"- [0, \"\\0\\0\\0\\0\\x03\\0\\0\\0hello\"]\n"
"...\n"
"tarantool> box.space.tester:update({0}, {{'=', 2, 4}})\n"
"---\n"
"- [0, 4]\n"
"...\n"
"tarantool> box.space.tester:update({0}, {{'+', 2, 4}})\n"
"---\n"
"- [0, 8]\n"
"...\n"
"tarantool> box.space.tester:update({0}, {{'^', 2, 4}})\n"
"---\n"
"- [0, 12]\n"
"..."
msgstr ""

msgid "Counterpart to ``pickle.pack()``. Warning: if format specifier 'A' is used, it must be the last item."
msgstr ""

msgid "A list of strings or numbers."
msgstr ""

msgid "table"
msgstr ""

msgid "tarantool> pickle = require('pickle')\n"
"---\n"
"...\n"
"tarantool> tuple = box.space.tester:replace{0}\n"
"---\n"
"...\n"
"tarantool> string.len(tuple[1])\n"
"---\n"
"- 1\n"
"...\n"
"tarantool> pickle.unpack('b', tuple[1])\n"
"---\n"
"- 48\n"
"...\n"
"tarantool> pickle.unpack('bsi', pickle.pack('bsi', 255, 65535, 4294967295))\n"
"---\n"
"- 255\n"
"- 65535\n"
"- 4294967295\n"
"...\n"
"tarantool> pickle.unpack('ls', pickle.pack('ls', tonumber64('18446744073709551615'), 65535))\n"
"---\n"
"...\n"
"tarantool> num, num64, str = pickle.unpack('slA', pickle.pack('slA', 666,\n"
"         > tonumber64('666666666666666'), 'string'))\n"
"---\n"
"..."
msgstr ""

