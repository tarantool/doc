
msgid "Module `string`"
msgstr ""

msgid "Overview"
msgstr ""

msgid "The :code:`string` module has everything in the `standard Lua string library <https://www.lua.org/pil/20.html>`_, and some Tarantool extensions."
msgstr ""

msgid "In this section we only discuss the additional functions that the Tarantool developers have added."
msgstr ""

msgid "Below is a list of all additional ``string`` functions."
msgstr ""

msgid "Name"
msgstr ""

msgid "Use"
msgstr ""

msgid ":ref:`string.ljust() <string-ljust>`"
msgstr ""

msgid "Left-justify a string"
msgstr ""

msgid ":ref:`string.rjust() <string-rjust>`"
msgstr ""

msgid "Right-justify a string"
msgstr ""

msgid ":ref:`string.hex() <string-hex>`"
msgstr ""

msgid "Get the hexadecimal value of a string"
msgstr ""

msgid ":ref:`string.startswith() <string-startswith>`"
msgstr ""

msgid "Check if a string starts with a given substring"
msgstr ""

msgid ":ref:`string.endswith() <string-endswith>`"
msgstr ""

msgid "Check if a string ends with a given substring"
msgstr ""

msgid ":ref:`string.lstrip() <string-lstrip>`"
msgstr ""

msgid "Remove spaces on the left of a string"
msgstr ""

msgid ":ref:`string.rstrip() <string-rstrip>`"
msgstr ""

msgid "Remove spaces on the right of a string"
msgstr ""

msgid ":ref:`string.split() <string-split>`"
msgstr ""

msgid "Split a string into a table of strings"
msgstr ""

msgid ":ref:`string.strip() <string-strip>`"
msgstr ""

msgid "Remove spaces on the left and right of a string"
msgstr ""

msgid "Return the string left-justified in a string of length ``width``."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "the string to left-justify"
msgstr ""

msgid "the width of the string after left-justifying"
msgstr ""

msgid "a single character, default = 1 space"
msgstr ""

msgid "Return"
msgstr ""

msgid "left-justified string (unchanged if width <= string length)"
msgstr ""

msgid "Rtype"
msgstr ""

msgid "string"
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "tarantool> string = require('string')\n"
"---\n"
"...\n"
"tarantool> string.ljust(' A', 5)\n"
"---\n"
"- ' A   '\n"
"..."
msgstr ""

msgid "Return the string right-justified in a string of length ``width``."
msgstr ""

msgid "the string to right-justify"
msgstr ""

msgid "the width of the string after right-justifying"
msgstr ""

msgid "right-justified string (unchanged if width <= string length)"
msgstr ""

msgid "tarantool> string = require('string')\n"
"---\n"
"...\n"
"tarantool> string.rjust('', 5, 'X')\n"
"---\n"
"- 'XXXXX'\n"
"..."
msgstr ""

msgid "Return the hexadecimal value of the input string."
msgstr ""

msgid "the string to process"
msgstr ""

msgid "hexadecimal, 2 hex-digit characters for each input character"
msgstr ""

msgid "tarantool> string = require('string')\n"
"---\n"
"...\n"
"tarantool> string.hex('ABC ')\n"
"---\n"
"- '41424320'\n"
"..."
msgstr ""

msgid "Return True if ``input-string`` starts with ``start-string``, otherwise return False."
msgstr ""

msgid "the string where ``start-string`` should be looked for"
msgstr ""

msgid "the string to look for"
msgstr ""

msgid "position: where to start looking within ``input-string``"
msgstr ""

msgid "position: where to end looking within ``input-string``"
msgstr ""

msgid "true or false"
msgstr ""

msgid "boolean"
msgstr ""

msgid "``start-pos`` and ``end-pos`` may be negative, meaning the position should be calculated from the end of the string."
msgstr ""

msgid "tarantool> string = require('string')\n"
"---\n"
"...\n"
"tarantool> string.startswith(' A', 'A', 2, 5)\n"
"---\n"
"- true\n"
"..."
msgstr ""

msgid "Return True if ``input-string`` ends with ``end-string``, otherwise return False."
msgstr ""

msgid "the string where ``end-string`` should be looked for"
msgstr ""

msgid "tarantool> string = require('string')\n"
"---\n"
"...\n"
"tarantool> string.endswith('Baa', 'aa')\n"
"---\n"
"- true\n"
"..."
msgstr ""

msgid "Return the value of the input string, but without spaces on the left."
msgstr ""

msgid "result after stripping spaces from input string"
msgstr ""

msgid "tarantool> string = require('string')\n"
"---\n"
"...\n"
"tarantool> string.lstrip(' ABC ')\n"
"---\n"
"- 'ABC '\n"
"..."
msgstr ""

msgid "Return the value of the input string, but without spaces on the right."
msgstr ""

msgid "tarantool> string = require('string')\n"
"---\n"
"...\n"
"tarantool> string.rstrip(' ABC ')\n"
"---\n"
"- ' ABC'\n"
"..."
msgstr ""

msgid "Split ``input-string`` into one or more output strings in a table. The places to split are the places where ``split-string`` occurs."
msgstr ""

msgid "the string to split"
msgstr ""

msgid "the string to find within ``input-string``. Default = space."
msgstr ""

msgid "maximum number of delimiters to process counting from the beginning of the input string. Result will contain max + 1 parts maximum."
msgstr ""

msgid "table of strings that were split from ``input-string``"
msgstr ""

msgid "table"
msgstr ""

msgid "tarantool> string = require('string')\n"
"---\n"
"...\n"
"tarantool> string.split(\"A:B:C:D:F\", \":\", 2)\n"
"---\n"
"- - A\n"
"  - B\n"
"  - C:D:F\n"
"..."
msgstr ""

msgid "Return the value of the input string, but without spaces on the left or the right."
msgstr ""

msgid "tarantool> string = require('string')\n"
"---\n"
"...\n"
"tarantool> string.strip(' ABC ')\n"
"---\n"
"- ABC\n"
"..."
msgstr ""

