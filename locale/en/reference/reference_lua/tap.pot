
msgid "Module `tap`"
msgstr ""

msgid "Overview"
msgstr ""

msgid "The ``tap`` module streamlines the testing of other modules. It allows writing of tests in the `TAP protocol`_. The results from the tests can be parsed by standard TAP-analyzers so they can be passed to utilities such as `prove`_. Thus one can run tests and then use the results for statistics, decision-making, and so on."
msgstr ""

msgid "Index"
msgstr ""

msgid "Name"
msgstr ""

msgid "Use"
msgstr ""

msgid ":ref:`tap.test() <tap-test>`"
msgstr ""

msgid "Initialize"
msgstr ""

msgid ":ref:`taptest:test() <taptest-test>`"
msgstr ""

msgid "Create a subtest and print the results"
msgstr ""

msgid ":ref:`taptest:plan() <taptest-plan>`"
msgstr ""

msgid "Indicate how many tests to perform"
msgstr ""

msgid ":ref:`taptest:check() <taptest-check>`"
msgstr ""

msgid "Check the number of tests performed"
msgstr ""

msgid ":ref:`taptest:diag() <taptest-diag>`"
msgstr ""

msgid "Display a diagnostic message"
msgstr ""

msgid ":ref:`taptest:ok() <taptest-ok>`"
msgstr ""

msgid "Evaluate the condition and display the message"
msgstr ""

msgid ":ref:`taptest:fail() <taptest-fail>`"
msgstr ""

msgid ":ref:`taptest:skip() <taptest-skip>`"
msgstr ""

msgid ":ref:`taptest:is() <taptest-is>`"
msgstr ""

msgid "Check if the two arguments are equal"
msgstr ""

msgid ":ref:`taptest:isnt() <taptest-isnt>`"
msgstr ""

msgid "Check if the two arguments are different"
msgstr ""

msgid ":ref:`taptest:is_deeply() <taptest-is_deeply>`"
msgstr ""

msgid "Recursively check if the two arguments are equal"
msgstr ""

msgid ":ref:`taptest:like() <taptest-like>`"
msgstr ""

msgid "Check if the argument matches a pattern"
msgstr ""

msgid ":ref:`taptest:unlike() <taptest-unlike>`"
msgstr ""

msgid "Check if the argument does not match a pattern"
msgstr ""

msgid ":ref:`taptest:isnil() <taptest-istype>` |br| :ref:`taptest:isstring() <taptest-istype>` |br| :ref:`taptest:isnumber() <taptest-istype>` |br| :ref:`taptest:istable() <taptest-istype>` |br| :ref:`taptest:isboolean() <taptest-istype>` |br| :ref:`taptest:isudata() <taptest-istype>` |br| :ref:`taptest:iscdata() <taptest-istype>`"
msgstr ""

msgid "Check if a value has a particular type"
msgstr ""

msgid ":ref:`taptest.strict <taptest-strict>`"
msgstr ""

msgid "Flag, true if comparisons with nil should be strict"
msgstr ""

msgid "Initialize."
msgstr ""

msgid "The result of ``tap.test`` is an object, which will be called taptest in the rest of this discussion, which is necessary for ``taptest:plan()`` and all the other methods."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "an arbitrary name to give for the test outputs."
msgstr ""

msgid "return"
msgstr ""

msgid "taptest"
msgstr ""

msgid "rtype"
msgstr ""

msgid "table"
msgstr ""

msgid "tap = require('tap')\n"
"taptest = tap.test('test-name')"
msgstr ""

msgid "Create a subtest (if no ``func`` argument specified), or (if all arguments are specified) create a subtest, run the test function and print the result."
msgstr ""

msgid "See the :ref:`example <tap-example>`."
msgstr ""

msgid "the test logic to run."
msgstr ""

msgid "userdata or string"
msgstr ""

msgid "Indicate how many tests will be performed."
msgstr ""

msgid "nil"
msgstr ""

msgid "Checks the number of tests performed."
msgstr ""

msgid "The result will be a display saying ``# bad plan: ...`` if the number of completed tests is not equal to the number of tests specified by ``taptest:plan(...)``. (This is a purely Tarantool feature: \"bad plan\" messages are out of the TAP13 standard.)"
msgstr ""

msgid "This check should only be done after all planned tests are complete, so ordinarily ``taptest:check()`` will only appear at the end of a script. However, as a Tarantool extension, ``taptest:check()`` may appear at the end of any subtest. Therefore there are three ways to cause the check:"
msgstr ""

msgid "by calling ``taptest:check()`` at the end of a script,"
msgstr ""

msgid "by calling a function which ends with a call to ``taptest:check()``,"
msgstr ""

msgid "or by calling taptest:test('...', subtest-function-name) where subtest-function-name does not need to end with ``taptest:check()`` because it can be called after the subtest is complete."
msgstr ""

msgid "true or false."
msgstr ""

msgid "boolean"
msgstr ""

msgid "Display a diagnostic message."
msgstr ""

msgid "the message to be displayed."
msgstr ""

msgid "This is a basic function which is used by other functions. Depending on the value of ``condition``, print 'ok' or 'not ok' along with debugging information. Displays the message."
msgstr ""

msgid "an expression which is true or false"
msgstr ""

msgid "name of the test"
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "tarantool> taptest:ok(true, 'x')\n"
"ok - x\n"
"---\n"
"- true\n"
"...\n"
"tarantool> tap = require('tap')\n"
"---\n"
"...\n"
"tarantool> taptest = tap.test('test-name')\n"
"TAP version 13\n"
"---\n"
"...\n"
"tarantool> taptest:ok(1 + 1 == 2, 'X')\n"
"ok - X\n"
"---\n"
"- true\n"
"..."
msgstr ""

msgid "``taptest:fail('x')`` is equivalent to ``taptest:ok(false, 'x')``. Displays the message."
msgstr ""

msgid "``taptest:skip('x')`` is equivalent to ``taptest:ok(true, 'x' .. '# skip')``. Displays the message."
msgstr ""

msgid "tarantool> taptest:skip('message')\n"
"ok - message # skip\n"
"---\n"
"- true\n"
"..."
msgstr ""

msgid "Check whether the first argument equals the second argument. Displays extensive message if the result is false."
msgstr ""

msgid "actual result"
msgstr ""

msgid "expected result"
msgstr ""

msgid "This is the negation of :ref:`taptest:is() <taptest-is>`."
msgstr ""

msgid "Recursive version of ``taptest:is(...)``, which can be be used to compare tables as well as scalar values."
msgstr ""

msgid "Verify a string against a `pattern <http://lua-users.org/wiki/PatternsTutorial>`_. Ok if match is found."
msgstr ""

msgid "pattern"
msgstr ""

msgid "test:like(tarantool.version, '^[1-9]', \"version\")"
msgstr ""

msgid "This is the negation of :ref:`taptest:like() <taptest-like>`."
msgstr ""

msgid "Test whether a value has a particular type. Displays a long message if the value is not of the specified type."
msgstr ""

msgid "Set ``taptest.strict=true`` if :ref:`taptest:is() <taptest-is>` and :ref:`taptest:isnt() <taptest-isnt>` and :ref:`taptest:is_deeply() <taptest-is_deeply>` must be compared strictly with ``nil``. Set ``taptest.strict=false`` if ``nil`` and ``box.NULL`` both have the same effect. The default is false. For example, if and only if ``taptest.strict=true`` has happened, then ``taptest:is_deeply({a = box.NULL}, {})`` will return ``false``."
msgstr ""

msgid "Example"
msgstr ""

msgid "To run this example: put the script in a file named ./tap.lua, then make tap.lua executable by saying ``chmod a+x ./tap.lua``, then execute using Tarantool as a script processor by saying ./tap.lua."
msgstr ""

msgid "#!/usr/bin/tarantool\n"
"local tap = require('tap')\n"
"test = tap.test(\"my test name\")\n"
"test:plan(2)\n"
"test:ok(2 * 2 == 4, \"2 * 2 is 4\")\n"
"test:test(\"some subtests for test2\", function(test)\n"
"    test:plan(2)\n"
"    test:is(2 + 2, 4, \"2 + 2 is 4\")\n"
"    test:isnt(2 + 3, 4, \"2 + 3 is not 4\")\n"
"end)\n"
"test:check()"
msgstr ""

msgid "The output from the above script will look approximately like this:"
msgstr ""

msgid "TAP version 13\n"
"1..2\n"
"ok - 2 * 2 is 4\n"
"    # Some subtests for test2\n"
"    1..2\n"
"    ok - 2 + 2 is 4,\n"
"    ok - 2 + 3 is not 4\n"
"    # Some subtests for test2: end\n"
"ok - some subtests for test2"
msgstr ""

