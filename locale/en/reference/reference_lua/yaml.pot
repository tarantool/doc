
msgid "Module `yaml`"
msgstr ""

msgid "Overview"
msgstr ""

msgid "The ``yaml`` module takes strings in YAML_ format and decodes them, or takes a series of non-YAML values and encodes them."
msgstr ""

msgid "Index"
msgstr ""

msgid "Below is a list of all ``yaml`` functions and members."
msgstr ""

msgid "Name"
msgstr ""

msgid "Use"
msgstr ""

msgid ":ref:`yaml.encode() <yaml-encode>`"
msgstr ""

msgid "Convert a Lua object to a YAML string"
msgstr ""

msgid ":ref:`yaml.decode() <yaml-decode>`"
msgstr ""

msgid "Convert a YAML string to a Lua object"
msgstr ""

msgid ":ref:`__serialize parameter <yaml-serialize>`"
msgstr ""

msgid "Output structure specification"
msgstr ""

msgid ":ref:`yaml.cfg() <yaml-cfg>`"
msgstr ""

msgid "Change configuration"
msgstr ""

msgid ":ref:`yaml.NULL <yaml-null>`"
msgstr ""

msgid "Analog of Lua's \"nil\""
msgstr ""

msgid "Convert a Lua object to a YAML string."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "either a scalar value or a Lua table value."
msgstr ""

msgid "return"
msgstr ""

msgid "the original value reformatted as a YAML string."
msgstr ""

msgid "rtype"
msgstr ""

msgid "string"
msgstr ""

msgid "Convert a YAML string to a Lua object."
msgstr ""

msgid "a string formatted as YAML."
msgstr ""

msgid "the original contents formatted as a Lua table."
msgstr ""

msgid "table"
msgstr ""

msgid "**__serialize parameter:**"
msgstr ""

msgid "The YAML output structure can be specified with ``__serialize``:"
msgstr ""

msgid "'seq', 'sequence', 'array' - table encoded as an array"
msgstr ""

msgid "'map', 'mappping' - table encoded as a map"
msgstr ""

msgid "function - the meta-method called to unpack serializable representation of table, cdata or userdata objects"
msgstr ""

msgid "'seq' or 'map' also enable the flow (compact) mode for the YAML serializer (flow=\"[1,2,3]\" vs block=\" - 1\\n - 2\\n - 3\\n\")."
msgstr ""

msgid "Serializing 'A' and 'B' with different ``__serialize`` values brings different results:"
msgstr ""

msgid "tarantool> yaml.encode(setmetatable({'A', 'B'}, { __serialize=\"seq\"}))\n"
"---\n"
"- '[\"A\",\"B\"]'\n"
"...\n"
"tarantool> yaml.encode(setmetatable({'A', 'B'}, { __serialize=\"map\"}))\n"
"---\n"
"- '{\"1\":\"A\",\"2\":\"B\"}'\n"
"...\n"
"tarantool> yaml.encode({setmetatable({f1 = 'A', f2 = 'B'}, { __serialize=\"map\"})})\n"
"---\n"
"- '[{\"f2\":\"B\",\"f1\":\"A\"}]'\n"
"...\n"
"tarantool> yaml.encode({setmetatable({f1 = 'A', f2 = 'B'}, { __serialize=\"seq\"})})\n"
"---\n"
"- '[[]]'\n"
"..."
msgstr ""

msgid "Set values affecting the behavior of encode and decode functions."
msgstr ""

msgid "The values are all either integers or boolean ``true``/``false``."
msgstr ""

msgid "Option"
msgstr ""

msgid "Default"
msgstr ""

msgid "``cfg.encode_invalid_numbers``"
msgstr ""

msgid "true"
msgstr ""

msgid "A flag saying whether to enable encoding of NaN and Inf numbers"
msgstr ""

msgid "``cfg.encode_number_precision``"
msgstr ""

msgid "14"
msgstr ""

msgid "Precision of floating point numbers"
msgstr ""

msgid "``cfg.encode_load_metatables``"
msgstr ""

msgid "A flag saying whether the serializer will follow :ref:`__serialize <json-serialize>` metatable field"
msgstr ""

msgid "``cfg.encode_use_tostring``"
msgstr ""

msgid "false"
msgstr ""

msgid "A flag saying whether to use ``tostring()`` for unknown types"
msgstr ""

msgid "``cfg.encode_invalid_as_nil``"
msgstr ""

msgid "A flag saying whether to use NULL for non-recognized types"
msgstr ""

msgid "``cfg.encode_sparse_convert``"
msgstr ""

msgid "A flag saying whether to handle excessively sparse arrays as maps. See detailed description :ref:`below <yaml-cfg_sparse>`"
msgstr ""

msgid "``cfg.encode_sparse_ratio``"
msgstr ""

msgid "2"
msgstr ""

msgid "1/``encode_sparse_ratio`` is the permissible percentage of missing values in a sparse array"
msgstr ""

msgid "``cfg.encode_sparse_safe``"
msgstr ""

msgid "10"
msgstr ""

msgid "A limit ensuring that small Lua arrays are always encoded as sparse arrays (instead of generating an error or encoding as map)"
msgstr ""

msgid "``cfg.decode_invalid_numbers``"
msgstr ""

msgid "A flag saying whether to enable decoding of NaN and Inf numbers"
msgstr ""

msgid "``cfg.decode_save_metatables``"
msgstr ""

msgid "A flag saying whether to set metatables for all arrays and maps"
msgstr ""

msgid "**Sparse arrays features:**"
msgstr ""

msgid "During encoding, The YAML encoder tries to classify table into one of four kinds:"
msgstr ""

msgid "map - at least one table index is not unsigned integer"
msgstr ""

msgid "regular array - all array indexes are available"
msgstr ""

msgid "sparse array - at least one array index is missing"
msgstr ""

msgid "excessively sparse array - the number of values missing exceeds the configured ratio"
msgstr ""

msgid "An array is excessively sparse when **all** the following conditions are met:"
msgstr ""

msgid "``encode_sparse_ratio`` > 0"
msgstr ""

msgid "``max(table)`` > ``encode_sparse_safe``"
msgstr ""

msgid "``max(table)`` > ``count(table)`` * ``encode_sparse_ratio``"
msgstr ""

msgid "The YAML encoder will never consider an array to be excessively sparse when ``encode_sparse_ratio = 0``. The ``encode_sparse_safe`` limit ensures that small Lua arrays are always encoded as sparse arrays. By default, attempting to encode an excessively sparse array will generate an error. If ``encode_sparse_convert`` is set to ``true``, excessively sparse arrays will be handled as maps."
msgstr ""

msgid "**yaml.cfg() example 1:**"
msgstr ""

msgid "The following code will encode 0/0 as NaN (\"not a number\") and 1/0 as Inf (\"infinity\"), rather than returning nil or an error message:"
msgstr ""

msgid "yaml = require('yaml')\n"
"yaml.cfg{encode_invalid_numbers = true}\n"
"x = 0/0\n"
"y = 1/0\n"
"yaml.encode({1, x, y, 2})"
msgstr ""

msgid "The result of the ``yaml.encode()`` request will look like this:"
msgstr ""

msgid "tarantool> yaml.encode({1, x, y, 2})\n"
"---\n"
"- '[1,nan,inf,2]\n"
"..."
msgstr ""

msgid "**yaml.cfg example 2:**"
msgstr ""

msgid "To avoid generating errors on attempts to encode unknown data types as userdata/cdata, you can use this code:"
msgstr ""

msgid "tarantool> httpc = require('http.client').new()\n"
"---\n"
"...\n"
"\n"
"tarantool> yaml.encode(httpc.curl)\n"
"---\n"
"- error: unsupported Lua type 'userdata'\n"
"...\n"
"\n"
"tarantool> yaml.encode(httpc.curl, {encode_use_tostring=true})\n"
"---\n"
"- '\"userdata: 0x010a4ef2a0\"'\n"
"..."
msgstr ""

msgid "To achieve the same effect for only one call to ``yaml.encode()`` (i.e. without changing the configuration permanently), you can use ``yaml.encode({1, x, y, 2}, {encode_invalid_numbers = true})``."
msgstr ""

msgid "Similar configuration settings exist for :ref:`JSON <json-module_cfg>` and :ref:`MsgPack <msgpack-cfg>`."
msgstr ""

msgid "A value comparable to Lua \"nil\" which may be useful as a placeholder in a tuple."
msgstr ""

msgid "Example"
msgstr ""

msgid "tarantool> yaml = require('yaml')\n"
"---\n"
"...\n"
"tarantool> y = yaml.encode({'a', 1, 'b', 2})\n"
"---\n"
"...\n"
"tarantool> z = yaml.decode(y)\n"
"---\n"
"...\n"
"tarantool> z[1], z[2], z[3], z[4]\n"
"---\n"
"- a\n"
"- 1\n"
"- b\n"
"- 2\n"
"...\n"
"tarantool> if yaml.NULL == nil then print('hi') end\n"
"hi\n"
"---\n"
"..."
msgstr ""

msgid "The `YAML collection style <http://yaml.org/spec/1.1/#id930798>`_ can be specified with ``__serialize``:"
msgstr ""

msgid "``__serialize=\"sequence\"`` for a Block Sequence array,"
msgstr ""

msgid "``__serialize=\"seq\"`` for a Flow Sequence array,"
msgstr ""

msgid "``__serialize=\"mapping\"`` for a Block Mapping map,"
msgstr ""

msgid "``__serialize=\"map\"`` for a Flow Mapping map."
msgstr ""

msgid "Serializing 'A' and 'B' with different ``__serialize`` values causes different results:"
msgstr ""

msgid "tarantool> yaml = require('yaml')\n"
"---\n"
"...\n"
"\n"
"tarantool> yaml.encode(setmetatable({'A', 'B'}, { __serialize=\"sequence\"}))\n"
"---\n"
"- '---\n"
"\n"
"  - A\n"
"\n"
"  - B\n"
"\n"
"  ...\n"
"\n"
"  '\n"
"...\n"
"\n"
"tarantool> yaml.encode(setmetatable({'A', 'B'}, { __serialize=\"seq\"}))\n"
"---\n"
"- '--- [''A'', ''B'']\n"
"\n"
"  ...\n"
"\n"
"  '\n"
"...\n"
"\n"
"tarantool> yaml.encode({setmetatable({f1 = 'A', f2 = 'B'}, { __serialize=\"map\"})})\n"
"---\n"
"- '---\n"
"\n"
"  - {''f2'': ''B'', ''f1'': ''A''}\n"
"\n"
"  ...\n"
"\n"
"  '\n"
"..."
msgstr ""

