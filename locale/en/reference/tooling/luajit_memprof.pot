# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-17 14:22+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/reference/tooling/luajit_memprof.rst:4
msgid "LuaJIT memory profiler"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:6
msgid "Starting from version :doc:`2.7.1 </release/2.7.1>`, Tarantool has a built‑in module called ``misc.memprof`` that implements a LuaJIT memory profiler (which we will just call *the profiler* in this section). The profiler provides a memory allocation report that helps analyze Lua code and find the places that put the most pressure on the Lua garbage collector (GC)."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:19
msgid "Working with the profiler"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:21
msgid "Usage of the profiler involves two steps:"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:23
msgid ":ref:`Collecting <profiler_usage_get>` a binary profile of allocations, reallocations, and deallocations in memory related to Lua (further, *binary memory profile* or *binary profile* for short)."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:26
msgid ":ref:`Parsing <profiler_usage_parse>` the collected binary profile to get a human-readable profiling report."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:32
msgid "Collecting binary profile"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:34
msgid "To collect a binary profile for a particular part of the Lua code, you need to place this part between two ``misc.memprof`` functions, namely, ``misc.memprof.start()`` and ``misc.memprof.stop()``, and then execute the code under Tarantool."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:39
msgid "Below is a chunk of Lua code named ``test.lua`` to illustrate this."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:43
msgid "-- Prevent allocations on traces.\n"
"jit.off()\n"
"local str, err = misc.memprof.start(\"memprof_new.bin\")\n"
"-- Lua doesn't create a new frame to call string.rep, and all allocations\n"
"-- are attributed not to the append() function but to the parent scope.\n"
"local function append(str, rep)\n"
"    return string.rep(str, rep)\n"
"end\n"
"\n"
"local t = {}\n"
"for i = 1, 1e4 do\n"
"    -- table.insert is the built-in function and all corresponding\n"
"    -- allocations are reported in the scope of the main chunk.\n"
"    table.insert(t,\n"
"        append('q', i)\n"
"    )\n"
"end\n"
"local stp, err = misc.memprof.stop()"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:65
msgid "The Lua code for starting the profiler -- as in line 3 in the test.lua example above -- is:"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:67
msgid "local str, err = misc.memprof.start(FILENAME)"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:71
msgid "where ``FILENAME`` is the name of the binary file where profiling events are written."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:73
msgid "If the operation fails, for example if it is not possible to open a file for writing or if the profiler is already running, ``misc.memprof.start()`` returns ``nil`` as the first result, an error-message string as the second result, and a system-dependent error code number as the third result. If the operation succeeds, ``misc.memprof.start()`` returns ``true``."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:80
msgid "The Lua code for stopping the profiler -- as in line 18 in the test.lua example above -- is:"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:82
msgid "local stp, err = misc.memprof.stop()"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:86
msgid "If the operation fails, for example if  there is an error when the file descriptor is being closed or if there is a failure during reporting, ``misc.memprof.stop()`` returns ``nil`` as the first result, an error-message string as the second result, and a system-dependent error code number as the third result. If the operation succeeds, ``misc.memprof.stop()`` returns ``true``."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:96
msgid "To generate the file with memory profile in binary format (in the :ref:`test.lua code example above <profiler_usage_example01>` the file name is ``memprof_new.bin``), execute the code under Tarantool:"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:100
msgid "$ tarantool test.lua"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:104
msgid "Tarantool collects the allocation events in ``memprof_new.bin``, puts the file in its :ref:`working directory <cfg_basic-work_dir>`, and closes the session."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:108
msgid "The :ref:`test.lua code example <profiler_usage_example01>` above also illustrates the memory allocation logic in some cases that are important to understand for :ref:`reading <profiler_usage_parse>` and :ref:`analyzing <profiler_analysis>` a profiling report:"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:113
msgid "Line 2: It is recommended to switch the JIT compilation off by calling ``jit.off()`` before the profiler start. Refer to the following :ref:`note about jitoff <profiler_usage_internal_jitoff>` for more details."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:117
msgid "Lines 6-8: Tail call optimization doesn't create a new call frame, so all allocations inside the function called via the ``CALLT/CALLMT`` `bytecodes <http://wiki.luajit.org/Bytecode-2.0#calls-and-vararg-handling>`_ are attributed to the function's caller. See also the comments preceding these lines."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:121
msgid "Lines 14-16: Usually the information about allocations inside Lua built‑ins is not really useful for developers. That's why if a Lua built‑in function is called from a Lua function, the profiler attributes all allocations to the Lua function. Otherwise, this event is attributed to a C function. See also the comments preceding these lines."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:131
msgid "Parsing binary profile and generating profiling report"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:135
msgid "After getting the memory profile in binary format, the next step is to parse it to get a human-readable profiling report. You can do this via Tarantool by using the following command (mind the hyphen ``-`` before the filename):"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:140
msgid "$ tarantool -e 'require(\"memprof\")(arg)' - memprof_new.bin"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:144
msgid "where ``memprof_new.bin`` is the binary profile :ref:`generated earlier <profiler_usage_generate>` by ``tarantool test.lua``. (Warning: there is a slight behavior change here, the ``tarantool -e ...`` command was slightly different in Tarantool versions prior to Tarantool 2.8.1.)"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:149
msgid "Tarantool generates a profiling report and displays it on the console before closing the session:"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:152
msgid "ALLOCATIONS\n"
"@test.lua:14: 10000 events  +50240518 bytes -0 bytes\n"
"@test.lua:9: 1 events       +32 bytes       -0 bytes\n"
"@test.lua:8: 1 events       +20 bytes       -0 bytes\n"
"@test.lua:13: 1 events      +24 bytes       -0 bytes\n"
"\n"
"REALLOCATIONS\n"
"@test.lua:13: 13 events     +262216 bytes   -131160 bytes\n"
"    Overrides:\n"
"        @test.lua:13\n"
"\n"
"@test.lua:14: 11 events     +49536 bytes    -24768 bytes\n"
"            Overrides:\n"
"        @test.lua:14\n"
"        INTERNAL\n"
"\n"
"INTERNAL: 3 events          +8448 bytes     -16896 bytes\n"
"    Overrides:\n"
"        @test.lua:14\n"
"\n"
"DEALLOCATIONS\n"
"INTERNAL: 1723 events       +0 bytes        -483515 bytes\n"
"@test.lua:14: 1 events      +0 bytes        -32768 bytes\n"
"\n"
"HEAP SUMMARY:\n"
"@test.lua:14 holds 50248326 bytes: 10010 allocs, 10 frees\n"
"@test.lua:13 holds 131080 bytes: 14 allocs, 13 frees\n"
"INTERNAL holds 8448 bytes: 3 allocs, 3 frees\n"
"@test.lua:9 holds 32 bytes: 1 allocs, 0 frees\n"
"@test.lua:8 holds 20 bytes: 1 allocs, 0 frees"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:187
msgid "On macOS, a report will be different for the same chunk of code because Tarantool and LuaJIT are built with the GC64 mode enabled for macOS."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:191
msgid "Let's examine the report structure. A report has four sections:"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:193
msgid "ALLOCATIONS"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:194
msgid "REALLOCATIONS"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:195
msgid "DEALLOCATIONS"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:196
msgid "HEAP SUMMARY (described later in :ref:`The heap summary and the --leak-only option<luajit_memprof_leak_only>`)"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:198
msgid "Each section contains event records that are sorted from the most frequent to the least frequent."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:201
msgid "An event record has the following format:"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:203
msgid "@<filename>:<line_number>: <number_of_events> events +<allocated> bytes -<freed> bytes"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:209
msgid "<filename>—a name of the file containing Lua code."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:210
msgid "<line_number>—the line number where the event is detected."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:211
msgid "<number_of_events>—a number of events for this code line."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:212
msgid "+<allocated> bytes—amount of memory allocated during all the events on this line."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:213
msgid "-<freed> bytes—amount of memory freed during all the events on this line."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:215
msgid "The ``Overrides`` label shows what allocation has been overridden."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:217
msgid "See the :ref:`test.lua chunk above <profiler_usage_example01>` with the explanation in the comments for some examples."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:223
msgid "The ``INTERNAL`` label indicates that this event is caused by internal LuaJIT structures."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:228
msgid "Important note regarding the ``INTERNAL`` label and the recommendation of switching the JIT compilation off (``jit.off()``): this version of the profiler doesn't support verbose reporting for allocations on `traces <https://en.wikipedia.org/wiki/Tracing_just-in-time_compilation#Technical_details>`_. If memory allocations are made on a trace, the profiler can't associate the allocations with the part of Lua code that generated the trace. In this case, the profiler labels such allocations as ``INTERNAL``."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:237
msgid "So, if the JIT compilation is on, new traces will be generated and there will be a mixture of events labeled ``INTERNAL`` in the profiling report: some of them are really caused by internal LuaJIT structures, but some of them are caused by allocations on traces."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:243
msgid "If you want to have a more definite report without JIT compiler allocations, :ref:`call jit.off() <profiler_usage_example01>` before starting the profiling. And if you want to completely exclude the trace allocations from the report, remove also the old traces by additionally calling ``jit.flush()`` after ``jit.off()``."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:249
msgid "Nevertheless, switching the JIT compilation off before the profiling is not \"a must\". It is rather a recommendation, and in some cases, for example in a production environment, you may need to keep JIT compilation on to see the full picture of all the memory allocations. In this case, the majority of the ``INTERNAL`` events are most probably caused by traces."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:256
msgid "As for investigating the Lua code with the help of profiling reports, it is always code-dependent and there can't be hundred per cent definite recommendations in this regard. Nevertheless, you can see some of the things in the :ref:`Profiling report analysis example <profiler_analysis>` later."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:261
msgid "Also, below is the :ref:`FAQ <profiler_faq>` section with the questions that most probably can arise while using profiler."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:267
msgid "FAQ"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:269
msgid "In this section, some profiler-related points are discussed in a Q&A format."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:272
msgid "**Question (Q)**: Is the profiler suitable for C allocations or allocations inside C code?"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:275
msgid "**Answer (A)**: The profiler reports only allocation events caused by the Lua allocator. All Lua-related allocations, like table or string creation are reported. But the profiler doesn't report allocations made by ``malloc()`` or other non-Lua allocators. You can use ``valgrind`` to debug them."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:282
msgid "**Q**: Why are there so many ``INTERNAL`` allocations in my profiling report? What does it mean?"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:285
msgid "**A**: ``INTERNAL`` means that these allocations/reallocations/deallocations are related to the internal LuaJIT structures or are made on traces. Currently, the profiler doesn't verbosely report allocations of objects that are made during trace execution. Try :ref:`adding jit.off() <profiler_usage_internal_jitoff>` before the profiler start."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:293
msgid "**Q**: Why are there some reallocations/deallocations without an ``Overrides`` section?"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:296
msgid "**A**: These objects can be created before the profiler starts. Adding ``collectgarbage()`` before the profiler's start enables collecting all previously allocated objects that are dead when the profiler starts."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:302
msgid "**Q**: Why are some objects not collected during profiling? Is it a memory leak?"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:305
msgid "**A**: LuaJIT uses incremental Garbage Collector (GC). A GC cycle may not be finished at the moment the profiler stops. Add ``collectgarbage()`` before stopping the profiler to collect all the dead objects for sure."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:311
msgid "**Q**: Can I profile not just a current chunk but the entire running application? Can I start the profiler when the application is already running?"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:314
msgid "**A**: Yes. Here is an example of code that can be inserted in the Tarantool console for a running instance."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:317
msgid "local fiber = require \"fiber\"\n"
"local log = require \"log\"\n"
"\n"
"fiber.create(function()\n"
"  fiber.name(\"memprof\")\n"
"\n"
"  collectgarbage() -- Collect all objects already dead\n"
"  log.warn(\"start of profile\")\n"
"\n"
"  local st, err = misc.memprof.start(FILENAME)\n"
"  if not st then\n"
"    log.error(\"failed to start profiler: %s\", err)\n"
"  end\n"
"\n"
"  fiber.sleep(TIME)\n"
"\n"
"  collectgarbage()\n"
"  st, err = misc.memprof.stop()\n"
"\n"
"  if not st then\n"
"    log.error(\"profiler on stop error: %s\", err)\n"
"  end\n"
"\n"
"  log.warn(\"end of profile\")\n"
"end)"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:346
msgid "where"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:348
msgid "``FILENAME``—the name of the binary file where profiling events are written"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:349
msgid "``TIME``—duration of profiling, in seconds."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:351
msgid "Also, you can directly call ``misc.memprof.start()`` and ``misc.memprof.stop()`` from a console."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:357
msgid "Profiling report analysis example"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:359
msgid "In the example below, the following Lua code named ``format_concat.lua`` is investigated with the help of the memory profiler reports."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:364
msgid "-- Prevent allocations on new traces.\n"
"jit.off()\n"
"\n"
"local function concat(a)\n"
"  local nstr = a..\"a\"\n"
"  return nstr\n"
"end\n"
"\n"
"local function format(a)\n"
"  local nstr = string.format(\"%sa\", a)\n"
"  return nstr\n"
"end\n"
"\n"
"collectgarbage()\n"
"\n"
"local binfile = \"/tmp/memprof_\"..(arg[0]):match(\"([^/]*).lua\")..\".bin\"\n"
"\n"
"local st, err = misc.memprof.start(binfile)\n"
"assert(st, err)\n"
"\n"
"-- Payload.\n"
"for i = 1, 10000 do\n"
"  local f = format(i)\n"
"  local c = concat(i)\n"
"end\n"
"collectgarbage()\n"
"\n"
"local st, err = misc.memprof.stop()\n"
"assert(st, err)\n"
"\n"
"os.exit()"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:399
msgid "When you run this code :ref:`under Tarantool <profiler_usage_generate>` and then :ref:`parse <profiler_usage_parse_command>` the binary memory profile in /tmp/memprof_format_concat.bin, you will get the following profiling report:"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:404
msgid "ALLOCATIONS\n"
"@format_concat.lua:10: 19996 events +624284 bytes   -0 bytes\n"
"INTERNAL: 1 events                  +65536 bytes    -0 bytes\n"
"\n"
"REALLOCATIONS\n"
"\n"
"DEALLOCATIONS\n"
"INTERNAL: 19996 events              +0 bytes        -558778 bytes\n"
"    Overrides:\n"
"        @format_concat.lua:10\n"
"\n"
"@format_concat.lua:10: 2 events     +0 bytes        -98304 bytes\n"
"    Overrides:\n"
"        @format_concat.lua:10\n"
"\n"
"HEAP SUMMARY:\n"
"INTERNAL holds 65536 bytes: 1 allocs, 0 frees"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:424
msgid "Reasonable questions regarding the report can be:"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:426
msgid "Why are there no allocations related to the ``concat()`` function?"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:427
msgid "Why is the number of allocations not a round number?"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:428
msgid "Why are there about 20K allocations instead of 10K?"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:430
msgid "First of all, LuaJIT doesn't create a new string if the string with the same payload exists (see details on `lua-users.org/wiki <http://lua-users.org/wiki/ImmutableObjects>`_). This is called `string interning <https://en.wikipedia.org/wiki/String_interning>`_. So, when a string is created via the ``format()`` function, there is no need to create the same string via the ``concat()`` function, and LuaJIT just uses the previous one."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:437
msgid "That is also the reason why the number of allocations is not a round number as could be expected from the cycle operator ``for i = 1, 10000...``: Tarantool creates some strings for internal needs and built‑in modules, so some strings already exist."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:442
msgid "But why are there so many allocations? It's almost twice as big as the expected amount. This is because the ``string.format()`` built‑in function creates another string necessary for the ``%s`` identifier, so there are two allocations for each iteration: for ``tostring(i)`` and for ``string.format(\"%sa\", string_i_value)``. You can see the difference in behavior by adding the line ``local _ = tostring(i)`` between lines 22 and 23."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:449
msgid "To profile only the ``concat()`` function, comment out line 23 (which is ``local f = format(i)``) and run the profiler. Now the output looks like this:"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:452
msgid "ALLOCATIONS\n"
"@format_concat.lua:5: 10000 events  +284411 bytes    -0 bytes\n"
"\n"
"REALLOCATIONS\n"
"\n"
"DEALLOCATIONS\n"
"INTERNAL: 10000 events              +0 bytes         -218905 bytes\n"
"    Overrides:\n"
"        @format_concat.lua:5\n"
"\n"
"@format_concat.lua:5: 1 events      +0 bytes         -32768 bytes\n"
"\n"
"HEAP SUMMARY:\n"
"@format_concat.lua:5 holds 65536 bytes: 10000 allocs, 9999 frees"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:469
msgid "**Q**: But what will change if JIT compilation is enabled?"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:471
msgid "**A**: In the :ref:`code <profiler_usage_example03>`, comment out line 2 (which is ``jit.off()``) and run the profiler . Now there are only 56 allocations in the report, and all other allocations are JIT-related (see also the related `dev issue <https://github.com/tarantool/tarantool/issues/5679>`_):"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:477
msgid "ALLOCATIONS\n"
"@format_concat.lua:5: 56 events +1112 bytes -0 bytes\n"
"@format_concat.lua:0: 4 events  +640 bytes  -0 bytes\n"
"INTERNAL: 2 events              +382 bytes  -0 bytes\n"
"\n"
"REALLOCATIONS\n"
"\n"
"DEALLOCATIONS\n"
"INTERNAL: 58 events             +0 bytes    -1164 bytes\n"
"    Overrides:\n"
"        @format_concat.lua:5\n"
"        INTERNAL\n"
"\n"
"\n"
"HEAP SUMMARY:\n"
"@format_concat.lua:0 holds 640 bytes: 4 allocs, 0 frees\n"
"INTERNAL holds 360 bytes: 2 allocs, 1 frees"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:499
msgid "This happens because a trace has been compiled after 56 iterations (the default value of the ``hotloop`` compiler parameter). Then, the JIT-compiler removed the unused variable ``c`` from the trace, and, therefore, the dead code of the ``concat()`` function is eliminated."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:504
msgid "Next, let's profile only the ``format()`` function with JIT enabled. For that, comment out lines 2 and 24 (``jit.off()`` and ``local c = concat(i)``), do not comment out line 23 (``local f = format(i)``), and run the profiler. Now the output will look like this:"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:510
msgid "ALLOCATIONS\n"
"@format_concat.lua:10: 19996 events +624284 bytes  -0 bytes\n"
"INTERNAL: 4 events                  +66928 bytes   -0 bytes\n"
"@format_concat.lua:0: 4 events      +640 bytes     -0 bytes\n"
"\n"
"REALLOCATIONS\n"
"\n"
"DEALLOCATIONS\n"
"INTERNAL: 19997 events              +0 bytes       -559034 bytes\n"
"    Overrides:\n"
"        @format_concat.lua:0\n"
"        @format_concat.lua:10\n"
"\n"
"@format_concat.lua:10: 2 events     +0 bytes       -98304 bytes\n"
"    Overrides:\n"
"        @format_concat.lua:10\n"
"\n"
"\n"
"HEAP SUMMARY:\n"
"INTERNAL holds 66928 bytes: 4 allocs, 0 frees\n"
"@format_concat.lua:0 holds 384 bytes: 4 allocs, 1 frees"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:534
msgid "**Q**: Why are there so many allocations in comparison to the ``concat()`` function?"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:536
msgid "**A**: The answer is simple: the ``string.format()`` function with the ``%s`` identifier is not yet compiled via LuaJIT. So, a trace can't be recorded and the compiler doesn't perform the corresponding optimizations."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:540
msgid "If we change the ``format()`` function in lines 9-12 of the :ref:`Profiling report analysis example <profiler_usage_example03>` in the following way"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:544
msgid "local function format(a)\n"
"  local nstr = string.format(\"%sa\", tostring(a))\n"
"  return nstr\n"
"end"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:551
msgid "the profiling report becomes much prettier:"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:553
msgid "ALLOCATIONS\n"
"@format_concat.lua:10: 109 events   +2112 bytes -0 bytes\n"
"@format_concat.lua:0: 4 events      +640 bytes  -0 bytes\n"
"INTERNAL: 3 events                  +1206 bytes -0 bytes\n"
"\n"
"REALLOCATIONS\n"
"\n"
"DEALLOCATIONS\n"
"INTERNAL: 112 events                +0 bytes    -2460 bytes\n"
"    Overrides:\n"
"        @format_concat.lua:0\n"
"        @format_concat.lua:10\n"
"        INTERNAL\n"
"\n"
"\n"
"HEAP SUMMARY:\n"
"INTERNAL holds 1144 bytes: 3 allocs, 1 frees\n"
"@format_concat.lua:0 holds 384 bytes: 4 allocs, 1 frees"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:577
msgid "The heap summary and the --leak-only option"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:579
msgid "This feature was added in version :doc:`2.8.1 </release/2.8.1>`."
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:581
msgid "The end of each display is a HEAP SUMMARY section which looks like this:"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:583
msgid "@<filename>:<line number> holds <number of still reachable bytes> bytes:\n"
"<number of allocation events> allocs, <number of deallocation events> frees"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:588
msgid "Sometimes a program can cause many deallocations, so the DEALLOCATION section can become large, so the display is not easy to read. To minimize output, start the parsing with an extra flag: ``--leak-only``, for example"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:593
msgid "$ tarantool -e 'require(\"memprof\")(arg)' - --leak-only memprof_new.bin"
msgstr ""

#: ../../doc/reference/tooling/luajit_memprof.rst:597
msgid "When `--leak-only`` is used, only the HEAP SUMMARY section is displayed."
msgstr ""
