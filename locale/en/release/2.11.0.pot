# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-26 10:36+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/release/2.11.0.rst:2
msgid "Tarantool 2.11 (LTS)"
msgstr ""

#: ../../doc/release/2.11.0.rst:4
msgid "Release date: May 24, 2023"
msgstr ""

#: ../../doc/release/2.11.0.rst:6
msgid "Releases on GitHub: :tarantool-release:`2.11.2`, :tarantool-release:`2.11.1`, :tarantool-release:`2.11.0`"
msgstr ""

#: ../../doc/release/2.11.0.rst:8
msgid "The 2.11 release of Tarantool includes many new features and fixes. This document provides an overview of the most important features for the Enterprise and Community editions."
msgstr ""

#: ../../doc/release/2.11.0.rst:11
msgid "2.11 is the long-term support (LTS) release with four years of maintenance. This means that you will continue to receive all the necessary security fixes and bug fixes throughout this period. You can learn more about the Tarantool release policy from the :doc:`corresponding document </release/policy>`."
msgstr ""

#: ../../doc/release/2.11.0.rst:22
msgid ":ref:`Enterprise Edition <2-11-enterprise>`"
msgstr ""

#: ../../doc/release/2.11.0.rst:23
msgid ":ref:`Community Edition <2-11-community>`"
msgstr ""

#: ../../doc/release/2.11.0.rst:25
msgid ":ref:`Security enhancements <2-11-security_enhancements>`"
msgstr ""

#: ../../doc/release/2.11.0.rst:26
msgid ":ref:`Read views <2-11-read_views>`"
msgstr ""

#: ../../doc/release/2.11.0.rst:27
msgid ":ref:`Data compression improvements <2-11-data_compression_improvements>`"
msgstr ""

#: ../../doc/release/2.11.0.rst:28
msgid ":ref:`WAL extensions <2-11-wal_extensions>`"
msgstr ""

#: ../../doc/release/2.11.0.rst:29
msgid ":ref:`Pagination <2-11-pagination>`"
msgstr ""

#: ../../doc/release/2.11.0.rst:30
msgid ":ref:`Downgrading a database <2-11-downgrading_database>`"
msgstr ""

#: ../../doc/release/2.11.0.rst:31
msgid ":ref:`New bootstrap strategy <2-11-new_bootstrap_strategy>`"
msgstr ""

#: ../../doc/release/2.11.0.rst:32
msgid ":ref:`Limitation of fiber execution time <2-11-limit_fiber_execution>`"
msgstr ""

#: ../../doc/release/2.11.0.rst:33
msgid ":ref:`Per-module logging <2-11-per_module_logging>`"
msgstr ""

#: ../../doc/release/2.11.0.rst:34
msgid ":ref:`HTTP client enhancements <2-11-http_client>`"
msgstr ""

#: ../../doc/release/2.11.0.rst:35
msgid ":ref:`Linearizable read <2-11-linearizable_read>`"
msgstr ""

#: ../../doc/release/2.11.0.rst:36
msgid ":ref:`Explicit sequential scanning in SQL <2-11-sequential_scanning_sql>`"
msgstr ""

#: ../../doc/release/2.11.0.rst:37
msgid ":ref:`Strict fencing in RAFT <2-11-strict_fencing_raft>`"
msgstr ""

#: ../../doc/release/2.11.0.rst:42
msgid "Upgrading to Tarantool 2.11"
msgstr ""

#: ../../doc/release/2.11.0.rst:44
msgid "Tarantool provides the live upgrade mechanism that enables cluster upgrade without downtime. In case of upgrade issues, you can roll back to the original state without downtime as well."
msgstr ""

#: ../../doc/release/2.11.0.rst:48
msgid "To learn how to upgrade to Tarantool 2.11, see :doc:`Upgrades </book/admin/upgrades>`."
msgstr ""

#: ../../doc/release/2.11.0.rst:53
msgid "Enterprise Edition"
msgstr ""

#: ../../doc/release/2.11.0.rst:59
msgid "Security enhancements"
msgstr ""

#: ../../doc/release/2.11.0.rst:65
msgid "Encrypted SSL/TLS keys"
msgstr ""

#: ../../doc/release/2.11.0.rst:67
msgid "Tarantool Enterprise Edition now supports encrypted SSL/TLS private key files protected with a password. Given that most certificate authorities generate encrypted keys, this feature simplifies the maintenance of Tarantool instances."
msgstr ""

#: ../../doc/release/2.11.0.rst:70
msgid "A password can be provided using either the new ``ssl_password`` URI parameter or in a text file specified using ``ssl_password_file``, for example:"
msgstr ""

#: ../../doc/release/2.11.0.rst:72
msgid "box.cfg{ listen = {\n"
"    uri = 'localhost:3301',\n"
"    params = {\n"
"        transport = 'ssl',\n"
"        ssl_key_file = '/path_to_key_file',\n"
"        ssl_cert_file = '/path_to_cert_file',\n"
"        ssl_ciphers = 'HIGH:!aNULL',\n"
"        ssl_password = 'topsecret'\n"
"    }\n"
"}}"
msgstr ""

#: ../../doc/release/2.11.0.rst:85
msgid "To learn more, see :ref:`Traffic encryption <enterprise-iproto-encryption>`."
msgstr ""

#: ../../doc/release/2.11.0.rst:91
msgid "Security enforcement options"
msgstr ""

#: ../../doc/release/2.11.0.rst:93
msgid "With 2.11, Tarantool Enterprise Edition includes new security enforcement options. These options enable you to enforce the use of strong passwords, set up a maximum password age, and so on. For example, the ``password_min_length`` configuration option specifies the minimum number of characters for a password:"
msgstr ""

#: ../../doc/release/2.11.0.rst:97
msgid "box.cfg{ password_min_length = 10 }"
msgstr ""

#: ../../doc/release/2.11.0.rst:101
msgid "To specify the maximum period of time (in days) a user can use the same password, you can use the ``password_lifetime_days`` option, which uses the system clock under the hood:"
msgstr ""

#: ../../doc/release/2.11.0.rst:103
msgid "box.cfg{ password_lifetime_days = 365 }"
msgstr ""

#: ../../doc/release/2.11.0.rst:107
msgid "Note that by default, new options are not specified. You can learn more about all the available options from the :ref:`Authentication restrictions <enterprise-auth-restrictions>` and :ref:`Password policy <enterprise-password-policy>` sections."
msgstr ""

#: ../../doc/release/2.11.0.rst:116
msgid "PAP-SHA256 authentication method"
msgstr ""

#: ../../doc/release/2.11.0.rst:118
msgid "By default, Tarantool uses the CHAP protocol to authenticate users and applies SHA-1 hashing to passwords. In this case, password hashes are stored in the ``_user`` space unsalted. If an attacker gains access to the database, they may crack a password, for example, using a rainbow table."
msgstr ""

#: ../../doc/release/2.11.0.rst:122
msgid "With the Enterprise Edition, you can enable PAP authentication with the SHA256 hashing algorithm. For PAP, a password is salted with a user-unique salt before saving it in the database."
msgstr ""

#: ../../doc/release/2.11.0.rst:125
msgid "Given that PAP transmits a password as plain text, Tarantool requires configuring :ref:`SSL/TLS <enterprise-iproto-encryption-config>`. Then, you need to specify the ``box.cfg.auth_type`` option as follows:"
msgstr ""

#: ../../doc/release/2.11.0.rst:129
msgid "box.cfg{ auth_type = 'pap-sha256' }"
msgstr ""

#: ../../doc/release/2.11.0.rst:133
msgid "Learn more from the :ref:`Authentication protocol <enterprise-authentication-protocol>` section."
msgstr ""

#: ../../doc/release/2.11.0.rst:141
msgid "Read views"
msgstr ""

#: ../../doc/release/2.11.0.rst:143
msgid "Starting with 2.11, Tarantool Enterprise Edition provides the ability to create read views - in-memory snapshots of the entire database that aren't affected by future data modifications. Read views can be used to make complex analytical queries. This reduces the load on the main database and improves RPS for a single Tarantool instance."
msgstr ""

#: ../../doc/release/2.11.0.rst:147
msgid "Working with read views consists of three main steps:"
msgstr ""

#: ../../doc/release/2.11.0.rst:149
msgid "To create a read view, call the ``box.read_view.open()`` function:"
msgstr ""

#: ../../doc/release/2.11.0.rst:151
msgid "tarantool> read_view1 = box.read_view.open({name = 'read_view1'})"
msgstr ""

#: ../../doc/release/2.11.0.rst:155
msgid "After creating a read view, you can access database spaces and their indexes and get data using the familiar ``select`` and ``pairs`` data-retrieval operations, for example:"
msgstr ""

#: ../../doc/release/2.11.0.rst:157
msgid "tarantool> read_view1.space.bands:select({}, {limit = 4})\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"  - [2, 'Scorpions', 1965]\n"
"  - [3, 'Ace of Base', 1987]\n"
"  - [4, 'The Beatles', 1960]"
msgstr ""

#: ../../doc/release/2.11.0.rst:166
msgid "When a read view is no longer needed, close it using the ``read_view_object:close()`` method:"
msgstr ""

#: ../../doc/release/2.11.0.rst:168
msgid "tarantool> read_view1:close()"
msgstr ""

#: ../../doc/release/2.11.0.rst:172
msgid "To learn more, see the :ref:`Read views <read_views>` topic."
msgstr ""

#: ../../doc/release/2.11.0.rst:178
msgid "Data compression improvements"
msgstr ""

#: ../../doc/release/2.11.0.rst:180
msgid "Tarantool Enterprise Edition now includes the ``zlib`` algorithm for :ref:`tuple compression <tuple_compression>`. This algorithm shows good performance in data decompression, which reduces CPU usage if the volume of read operations significantly exceeds the volume of write operations."
msgstr ""

#: ../../doc/release/2.11.0.rst:184
msgid "To use the new algorithm, set the ``compression`` option to ``zlib`` when formatting a space:"
msgstr ""

#: ../../doc/release/2.11.0.rst:186
msgid "box.space.my_space:format{\n"
"    {name = 'id', type = 'unsigned'},\n"
"    {name = 'data', type = 'string', compression = 'zlib'},\n"
"}"
msgstr ""

#: ../../doc/release/2.11.0.rst:193
msgid "The new :ref:`compress <compress-module>` module provides an API for compressing and decompressing arbitrary data strings using the same algorithms available for tuple compression:"
msgstr ""

#: ../../doc/release/2.11.0.rst:195
msgid "compressor = require('compress.zlib').new()\n"
"\n"
"data = compressor:compress('Hello world!') -- returns a binary string\n"
"compressor:decompress(data) -- returns 'Hello world!'"
msgstr ""

#: ../../doc/release/2.11.0.rst:207
msgid "WAL extensions"
msgstr ""

#: ../../doc/release/2.11.0.rst:209
msgid "Tarantool can use a write-ahead log not only to maintain data persistence and replication. Another use case is implementing a CDC (Change Data Capture) utility that transforms a data replication stream and provides the ability to replicate data from Tarantool to an external storage."
msgstr ""

#: ../../doc/release/2.11.0.rst:None
msgid "Write-ahead log extensions"
msgstr ""

#: ../../doc/release/2.11.0.rst:216
msgid "With 2.11, Tarantool Enterprise Edition provides WAL extensions that add auxiliary information to each write-ahead log record. For example, you can enable storing old and new tuples for each write-ahead log record. This is especially useful for the ``update`` operation because a write-ahead log record contains only a key value."
msgstr ""

#: ../../doc/release/2.11.0.rst:220
msgid "See the :ref:`WAL extensions <wal_extensions>` topic to learn how to enable and configure WAL extensions."
msgstr ""

#: ../../doc/release/2.11.0.rst:227
msgid "Community Edition"
msgstr ""

#: ../../doc/release/2.11.0.rst:232
msgid "Pagination"
msgstr ""

#: ../../doc/release/2.11.0.rst:235
msgid "With the 2.11 version, Tarantool supports pagination and enables the ability to get data in chunks. The :ref:`index_object:select() <box_index-select>` and :ref:`index_object:pairs() <box_index-pairs>` methods now provide the ``after`` option that specifies a tuple or a tuple's position after which ``select`` starts the search. In the example below, the ``select`` operation gets maximum 3 tuples after the specified tuple:"
msgstr ""

#: ../../doc/release/2.11.0.rst:239
msgid "tarantool> bands.index.primary:select({}, {after = {4, 'The Beatles', 1960}, limit = 3})\n"
"---\n"
"- - [5, 'Pink Floyd', 1965]\n"
"  - [6, 'The Rolling Stones', 1962]\n"
"  - [7, 'The Doors', 1965]\n"
"..."
msgstr ""

#: ../../doc/release/2.11.0.rst:248
msgid "The ``after`` option also accepts the position of the tuple represented by the base64 string. For example, you can set the ``fetch_pos`` boolean option to ``true`` to return the position of the last selected tuple as the second value:"
msgstr ""

#: ../../doc/release/2.11.0.rst:251
msgid "tarantool> result, position = bands.index.primary:select({}, {limit = 3, fetch_pos = true})\n"
"---\n"
"..."
msgstr ""

#: ../../doc/release/2.11.0.rst:257
msgid "Then, pass this position as the ``after`` parameter:"
msgstr ""

#: ../../doc/release/2.11.0.rst:259
msgid "tarantool> bands.index.primary:select({}, {limit = 3, after = position})\n"
"---\n"
"- - [4, 'The Beatles', 1960]\n"
"  - [5, 'Pink Floyd', 1965]\n"
"  - [6, 'The Rolling Stones', 1962]\n"
"..."
msgstr ""

#: ../../doc/release/2.11.0.rst:268
msgid "The new ``after`` and ``fetch_pos`` options are also implemented by the built-in ``net.box`` connector. For example, you can use these options to get data :ref:`asynchronously <net_box-is_async>`."
msgstr ""

#: ../../doc/release/2.11.0.rst:276
msgid "Downgrading a database"
msgstr ""

#: ../../doc/release/2.11.0.rst:278
msgid "The 2.11 version provides the ability to downgrade a database to the specified Tarantool version using the :ref:`box.schema.downgrade() <box_schema-downgrade>` method. This might be useful in the case of a failed upgrade."
msgstr ""

#: ../../doc/release/2.11.0.rst:281
msgid "To prepare a database for using it on an older Tarantool instance, call ``box.schema.downgrade`` and pass the desired Tarantool version:"
msgstr ""

#: ../../doc/release/2.11.0.rst:283
msgid "tarantool> box.schema.downgrade('2.8.4')"
msgstr ""

#: ../../doc/release/2.11.0.rst:287
msgid "To see Tarantool versions available for downgrade, call ``box.schema.downgrade_versions()``. The earliest release available for downgrade is :doc:`2.8.2 </release/2.8.2>`."
msgstr ""

#: ../../doc/release/2.11.0.rst:295
msgid "New bootstrap strategy"
msgstr ""

#: ../../doc/release/2.11.0.rst:297
msgid "In previous Tarantool versions, the :ref:`replication_connect_quorum <cfg_replication-replication_connect_quorum>` option was used to specify the number of running nodes to start a replica set. This option was designed to simplify a replica set bootstrap. But in fact, this behavior brought some issues during a cluster lifetime and maintenance operations, for example:"
msgstr ""

#: ../../doc/release/2.11.0.rst:301
msgid "Users who didn't change this option encountered problems with the partial cluster bootstrap."
msgstr ""

#: ../../doc/release/2.11.0.rst:302
msgid "Users who changed the option encountered problems during the instance restart."
msgstr ""

#: ../../doc/release/2.11.0.rst:304
msgid "With 2.11, ``replication_connect_quorum`` is deprecated in favor of :ref:`bootstrap_strategy <cfg_replication-bootstrap_strategy>`. This option works during a replica set bootstrap and implies sensible default values for other parameters based on the replica set configuration. Currently, ``bootstrap_strategy`` accepts two values:"
msgstr ""

#: ../../doc/release/2.11.0.rst:308
msgid "``auto``: a node doesn't boot if half or more of the other nodes in a replica set are not connected. For example, if the replication parameter contains 2 or 3 nodes, a node requires 2 connected instances. In the case of 4 or 5 nodes, at least 3 connected instances are required. Moreover, a bootstrap leader fails to boot unless every connected node has chosen it as a bootstrap leader."
msgstr ""

#: ../../doc/release/2.11.0.rst:312
msgid "``legacy``: a node requires the ``replication_connect_quorum`` number of other nodes to be connected. This option is added to keep the compatibility with the current versions of Cartridge and might be removed in the future."
msgstr ""

#: ../../doc/release/2.11.0.rst:320
msgid "Limitation of fiber execution time"
msgstr ""

#: ../../doc/release/2.11.0.rst:322
msgid "Starting with 2.11, if a fiber works too long without yielding control, you can use a fiber slice to limit its execution time. The :ref:`fiber_slice_default <compat-option-fiber-slice>` ``compat`` option controls the default value of the maximum fiber slice. In future versions, this option will be set to ``true`` by default."
msgstr ""

#: ../../doc/release/2.11.0.rst:326
msgid "There are two slice types - a warning and an error slice:"
msgstr ""

#: ../../doc/release/2.11.0.rst:328
msgid "When a warning slice is over, a warning message is logged, for example:"
msgstr ""

#: ../../doc/release/2.11.0.rst:330
msgid "fiber has not yielded for more than 0.500 seconds"
msgstr ""

#: ../../doc/release/2.11.0.rst:334
msgid "When an error slice is over, the fiber is cancelled and the ``FiberSliceIsExceeded`` error is thrown:"
msgstr ""

#: ../../doc/release/2.11.0.rst:336
msgid "FiberSliceIsExceeded: fiber slice is exceeded"
msgstr ""

#: ../../doc/release/2.11.0.rst:340
msgid "Note that these messages can point at issues in the existing application code. These issues can cause potential problems in production."
msgstr ""

#: ../../doc/release/2.11.0.rst:343
msgid "The fiber slice is checked by all functions operating on spaces and indexes, such as ``index_object.select()``, ``space_object.replace()``, and so on. You can also use the ``fiber.check_slice()`` function in application code to check whether the slice for the current fiber is over."
msgstr ""

#: ../../doc/release/2.11.0.rst:347
msgid "The example below shows how to use ``fiber.set_max_slice()`` to limit the slice for all fibers. ``fiber.check_slice()`` is called inside a long-running operation to determine whether a slice for the current fiber is over."
msgstr ""

#: ../../doc/release/2.11.0.rst:350
msgid "-- app.lua --\n"
"fiber = require('fiber')\n"
"clock = require('clock')\n"
"\n"
"fiber.set_max_slice({warn = 1.5, err = 3})\n"
"time = clock.monotonic()\n"
"function long_operation()\n"
"    while clock.monotonic() - time < 5 do\n"
"        fiber.check_slice()\n"
"        -- Long-running operation ⌛⌛⌛ --\n"
"    end\n"
"end\n"
"long_operation_fiber = fiber.create(long_operation)"
msgstr ""

#: ../../doc/release/2.11.0.rst:366
msgid "The output should look as follows:"
msgstr ""

#: ../../doc/release/2.11.0.rst:368
msgid "$ tarantool app.lua\n"
"fiber has not yielded for more than 1.500 seconds\n"
"FiberSliceIsExceeded: fiber slice is exceeded"
msgstr ""

#: ../../doc/release/2.11.0.rst:375
msgid "To learn more about fiber slices, see the :ref:`Limit execution time <fibers_limit_execution_time>` section."
msgstr ""

#: ../../doc/release/2.11.0.rst:381
msgid "Per-module logging"
msgstr ""

#: ../../doc/release/2.11.0.rst:383
msgid "Tarantool 2.11 adds support for modules in the :ref:`logging <log-module>` subsystem. You can configure different log levels for each module using the ``box.cfg.log_modules`` configuration option. The example below shows how to set the ``info`` level for ``module1`` and the ``error`` level for ``module2``:"
msgstr ""

#: ../../doc/release/2.11.0.rst:387
msgid "tarantool> box.cfg{log_level = 'warn', log_modules = {module1 = 'info', module2 = 'error'}}\n"
"---\n"
"..."
msgstr ""

#: ../../doc/release/2.11.0.rst:393
msgid "To create a log module, call the ``require('log').new()`` function:"
msgstr ""

#: ../../doc/release/2.11.0.rst:395
msgid "tarantool> module1_log = require('log').new('module1')\n"
"---\n"
"...\n"
"tarantool> module2_log = require('log').new('module2')\n"
"---\n"
"..."
msgstr ""

#: ../../doc/release/2.11.0.rst:404
msgid "Given that ``module1_log`` has the ``info`` logging level, calling ``module1_log.info`` shows a message but ``module1_log.debug`` is swallowed:"
msgstr ""

#: ../../doc/release/2.11.0.rst:406
msgid "tarantool> module1_log.info('Hello from module1!')\n"
"2023-05-12 15:10:13.691 [39202] main/103/interactive/module1 I> Hello from module1!\n"
"---\n"
"...\n"
"tarantool> module1_log.debug('Hello from module1!')\n"
"---\n"
"..."
msgstr ""

#: ../../doc/release/2.11.0.rst:416
msgid "Similarly, ``module2_log`` swallows all events with severities below the ``error`` level:"
msgstr ""

#: ../../doc/release/2.11.0.rst:418
msgid "tarantool> module2_log.info('Hello from module2!')\n"
"---\n"
"..."
msgstr ""

#: ../../doc/release/2.11.0.rst:430
msgid "HTTP client enhancements"
msgstr ""

#: ../../doc/release/2.11.0.rst:435
msgid "Content serialization"
msgstr ""

#: ../../doc/release/2.11.0.rst:437
msgid "The :ref:`HTTP client <http-module>` now automatically serializes the content in a specific format when sending a request based on the specified ``Content-Type`` header and supports all the Tarantool built-in types. By default, the client uses the ``application/json`` content type and sends data serialized as JSON:"
msgstr ""

#: ../../doc/release/2.11.0.rst:440
msgid "local http_client = require('http.client').new()\n"
"local uuid = require('uuid')\n"
"local datetime = require('datetime')\n"
"\n"
"response = http_client:post('https://httpbin.org/anything', {\n"
"    user_uuid = uuid.new(),\n"
"    user_name = \"John Smith\",\n"
"    created_at = datetime.now()\n"
"})"
msgstr ""

#: ../../doc/release/2.11.0.rst:452
msgid "The body for the request above might look like this:"
msgstr ""

#: ../../doc/release/2.11.0.rst:454
msgid "{\n"
"    \"user_uuid\": \"70ebc08d-2a9a-4ea7-baac-e9967dd45ac7\",\n"
"    \"user_name\": \"John Smith\",\n"
"    \"created_at\": \"2023-05-15T11:18:46.160910+0300\"\n"
"}"
msgstr ""

#: ../../doc/release/2.11.0.rst:463
msgid "To send data in a YAML or MsgPack format, set the ``Content-Type`` header explicitly to ``application/yaml`` or ``application/msgpack``, for example:"
msgstr ""

#: ../../doc/release/2.11.0.rst:465
msgid "response = http_client:post('https://httpbin.org/anything', {\n"
"    user_uuid = uuid.new(),\n"
"    user_name = \"John Smith\",\n"
"    created_at = datetime.now()\n"
"}, {\n"
"    headers = {\n"
"        ['Content-Type'] = 'application/yaml',\n"
"    }\n"
"})"
msgstr ""

#: ../../doc/release/2.11.0.rst:483
msgid "Query and form parameters"
msgstr ""

#: ../../doc/release/2.11.0.rst:485
msgid "You can now encode query and form parameters using the new ``params`` request option. In the example below, the requested URL is ``https://httpbin.org/get?page=1``."
msgstr ""

#: ../../doc/release/2.11.0.rst:488
msgid "local http_client = require('http.client').new()\n"
"\n"
"response = http_client:get('https://httpbin.org/get', {\n"
"    params = { page = 1 },\n"
"})"
msgstr ""

#: ../../doc/release/2.11.0.rst:496
msgid "Similarly, you can send form parameters using the ``application/x-www-form-urlencoded`` type as follows:"
msgstr ""

#: ../../doc/release/2.11.0.rst:498
msgid "local http_client = require('http.client').new()\n"
"\n"
"response = http_client:post('https://httpbin.org/anything', nil, {\n"
"    params = { user_id = 1, user_name = 'John Smith' },\n"
"})"
msgstr ""

#: ../../doc/release/2.11.0.rst:510
msgid "Streaming"
msgstr ""

#: ../../doc/release/2.11.0.rst:513
msgid "The HTTP client now supports chunked writing and reading of request and response data, respectively. The example below shows how to get chunks of a JSON response sequentially instead of waiting for the entire response:"
msgstr ""

#: ../../doc/release/2.11.0.rst:516
msgid "local http_client = require('http.client').new()\n"
"local json = require('json')\n"
"\n"
"local timeout = 1\n"
"local io = http_client:get(url, nil, {chunked = true})\n"
"for i = 1, 3 do\n"
"     local data = io:read('\\r\\n', timeout)\n"
"     if len(data) == 0 then\n"
"         -- End of the response.\n"
"         break\n"
"     end\n"
"     local decoded = json.decode(data)\n"
"     -- <..process decoded data..>\n"
"end\n"
"io:finish(timeout)"
msgstr ""

#: ../../doc/release/2.11.0.rst:534
msgid "Streaming can also be useful to upload a large file to a server or to subscribe to changes in ``etcd`` using the gRPC-JSON gateway. The example below demonstrates communication with the ``etcd`` stream interface. The request data is written line-by-line, and each line represents an ``etcd`` command."
msgstr ""

#: ../../doc/release/2.11.0.rst:538
msgid "local http_client = require('http.client').new()\n"
"\n"
"local io = http_client:post('http://localhost:2379/v3/watch', nil, {chunked = true})\n"
"io:write('{\"create_request\":{\"key\":\"Zm9v\"}}')\n"
"local res = io:read('\\n')\n"
"print(res)\n"
"-- <..you can feed more commands here..>\n"
"io:finish()"
msgstr ""

#: ../../doc/release/2.11.0.rst:555
msgid "Linearizable read"
msgstr ""

#: ../../doc/release/2.11.0.rst:557
msgid "Linearizability of read operations implies that if a response for a write request arrived earlier than a read request was made, this read request should return the results of the write request. Tarantool 2.11 introduces the new ``linearizable`` isolation level for :ref:`box.begin() <box-begin>`:"
msgstr ""

#: ../../doc/release/2.11.0.rst:560
msgid "box.begin({txn_isolation = 'linearizable', timeout = 10})\n"
"box.space.my_space:select({1})\n"
"box.commit()"
msgstr ""

#: ../../doc/release/2.11.0.rst:566
msgid "When called with ``linearizable``, ``box.begin()`` yields until the instance receives enough data from remote peers to be sure that the transaction is linearizable."
msgstr ""

#: ../../doc/release/2.11.0.rst:568
msgid "There are several prerequisites for linearizable transactions:"
msgstr ""

#: ../../doc/release/2.11.0.rst:570
msgid "Linearizable transactions may only perform requests to synchronous, local, or temporary memtx spaces."
msgstr ""

#: ../../doc/release/2.11.0.rst:571
msgid "Starting a linearizable transaction requires :ref:`box.cfg.memtx_use_mvcc_engine <cfg_basic-memtx_use_mvcc_engine>` to be set to ``true``."
msgstr ""

#: ../../doc/release/2.11.0.rst:572
msgid "The node is the replication source for at least ``N - Q + 1`` remote replicas. Here ``N`` is the count of registered nodes in the cluster and ``Q`` is :ref:`replication_synchro_quorum <cfg_replication-replication_synchro_quorum>`. So, for example, you can't perform a linearizable transaction on anonymous replicas."
msgstr ""

#: ../../doc/release/2.11.0.rst:581
msgid "Explicit sequential scanning in SQL"
msgstr ""

#: ../../doc/release/2.11.0.rst:583
msgid "Tarantool is primarily designed for OLTP workloads. This means that data reads are supposed to be relatively small. However, a suboptimal SQL query can cause a heavy load on a database."
msgstr ""

#: ../../doc/release/2.11.0.rst:587
msgid "The new ``sql_seq_scan`` :ref:`session setting <sql_set>` is added to explicitly cancel full table scanning. The request below should fail with the ``Scanning is not allowed for 'T'`` error:"
msgstr ""

#: ../../doc/release/2.11.0.rst:590
msgid "SET SESSION \"sql_seq_scan\" = false;\n"
"SELECT a FROM t WHERE a + 1 > 10;"
msgstr ""

#: ../../doc/release/2.11.0.rst:596
msgid "To enable table scanning explicitly, use the new ``SEQSCAN`` keyword:"
msgstr ""

#: ../../doc/release/2.11.0.rst:598
msgid "SET SESSION \"sql_seq_scan\" = false;\n"
"SELECT a FROM SEQSCAN t WHERE a + 1 > 10;"
msgstr ""

#: ../../doc/release/2.11.0.rst:603
msgid "In future versions, ``SEQSCAN`` will be required for scanning queries with the ability to disable the check using the ``sql_seq_scan`` session setting. The new behavior can be enabled using a :ref:`corresponding compat option <compat-option-sql-scan>`."
msgstr ""

#: ../../doc/release/2.11.0.rst:610
msgid "Strict fencing in RAFT"
msgstr ""

#: ../../doc/release/2.11.0.rst:612
msgid "Leader election is implemented in Tarantool as a modification of the Raft algorithm. The 2.11 release adds the ability to specify the leader fencing mode that affects the leader election process."
msgstr ""

#: ../../doc/release/2.11.0.rst:617
msgid "Currently, Cartridge does not support leader election using Raft."
msgstr ""

#: ../../doc/release/2.11.0.rst:619
msgid "You can control the fencing mode using the :ref:`election_fencing_mode <cfg_replication-election_fencing_mode>` property, which accepts the following values:"
msgstr ""

#: ../../doc/release/2.11.0.rst:621
msgid "In ``soft`` mode, a connection is considered dead if there are no responses for ``4 * replication_timeout`` seconds both on the current leader and the followers."
msgstr ""

#: ../../doc/release/2.11.0.rst:622
msgid "In ``strict`` mode, a connection is considered dead if there are no responses for ``2 * replication_timeout`` seconds on the current leader and ``4 * replication_timeout`` seconds on the followers. This improves the chances that there is only one leader at any time."
msgstr ""
