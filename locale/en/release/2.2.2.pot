# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 2.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-12 15:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/release/2.2.2.rst:2
msgid "Tarantool 2.2.2"
msgstr ""

#: ../../doc/release/2.2.2.rst:4
msgid "Release: :tarantool-release:`2.2.2` Date: 2019-12-31 Tag: 2.2.2-0-g0a577ff"
msgstr ""

#: ../../doc/release/2.2.2.rst:8
msgid "Overview"
msgstr ""

#: ../../doc/release/2.2.2.rst:10
msgid "2.2.2 is the first stable version of the 2.2 release series. The label stable means we have all planned features implemented and we see no high-impact issues."
msgstr ""

#: ../../doc/release/2.2.2.rst:14
msgid "This release resolves roughly 75 issues since the latest beta version. There may be bugs in less common areas, please feel free to file an issue at `GitHub <https://github.com/tarantool/tarantool/issues>`_."
msgstr ""

#: ../../doc/release/2.2.2.rst:19
msgid "Compatibility"
msgstr ""

#: ../../doc/release/2.2.2.rst:21
msgid "Tarantool 2.x is backward compatible with Tarantool 1.10.x in binary data layout, client-server protocol and replication protocol."
msgstr ""

#: ../../doc/release/2.2.2.rst:24
msgid "Please `upgrade <https://www.tarantool.io/en/doc/2.2/book/admin/upgrades/>`_ using the ``box.schema.upgrade()`` procedure to unlock all the new features of the 2.x series."
msgstr ""

#: ../../doc/release/2.2.2.rst:30
msgid "Functionality added or changed"
msgstr ""

#: ../../doc/release/2.2.2.rst:32
msgid "There are changes labeled with **[Breaking change]**. It means that the old behaviour was considered error-prone and therefore changed to protect users from unintended mistakes. However, there is a little probability that someone can lean on the old behaviour, and this label is to bring attention to the things that have been changed."
msgstr ""

#: ../../doc/release/2.2.2.rst:39
#: ../../doc/release/2.2.2.rst:116
msgid "Core"
msgstr ""

#: ../../doc/release/2.2.2.rst:41
msgid "**[Breaking change]** Drop ``rows_per_wal`` ``box.cfg()`` option in favor of ``wal_max_size`` (:tarantool-issue:`3762`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:45
#: ../../doc/release/2.2.2.rst:229
msgid "Lua"
msgstr ""

#: ../../doc/release/2.2.2.rst:47
msgid "**[Breaking change]** json and msgpack serializers now raise an error when a depth of data nesting exceeds ``encode_max_depth`` option value. The default value of the option is increased from 32 to 128. ``encode_deep_as_nil`` option was added to give ability to set the old behaviour back (:tarantool-issue:`4434`). Note: Those options can be set using ``json.cfg({<...>})`` or ``msgpack.cfg({<...>})``. Note: box data modification functions (``insert``, ``replace``, ``update``, ``upsert``) follows options of default msgpack serializer instance and now they will raise an error by default on too nested data rather then cut them silently. This behaviour can be configured using ``msgpack.cfg({<...>})``. Note: ``box.tuple.new()``, ``space:update()``, ``space:upsert()`` and several other functions did not follow ``encode_max_depth`` option, now they do (see also ‘Bug fixes’). Note: ``json.cfg`` and ``msgpack.cfg`` tables did not updated when an option is changed, now they show actual values (see also ‘Bug fixes’)."
msgstr ""

#: ../../doc/release/2.2.2.rst:63
msgid "Show line and column in json.decode() errors (:tarantool-issue:`3316`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:64
msgid "Exit gracefully when a main script throws an error: notify systemd, log the error (:tarantool-issue:`4382`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:66
msgid "key_def: accept both ``field`` and ``fieldno`` in ``key_def.new(<...>)`` (:tarantool-issue:`4519`). Originally ``key_def.new(<...>)`` accepts only ``fieldno`` to allow creation with ``<index_object>.parts`` as argument. However index definition format (``<space_object>.create_index(<...>)``) is different and requires ``field``. Now both are supported."
msgstr ""

#: ../../doc/release/2.2.2.rst:72
msgid "Enable ``__pairs`` and ``__ipairs`` metamethods from Lua 5.2 (:tarantool-issue:`4560`). We still conform Lua 5.1 API, which is not always compatible with Lua 5.2. The change is only about those metamethods."
msgstr ""

#: ../../doc/release/2.2.2.rst:77
#: ../../doc/release/2.2.2.rst:320
msgid "Misc"
msgstr ""

#: ../../doc/release/2.2.2.rst:79
msgid "tarantoolctl: allow to start instances with delayed box.cfg{} (:tarantool-issue:`4435`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:81
msgid "Add package builds and deployment for the following Linux distros:"
msgstr ""

#: ../../doc/release/2.2.2.rst:83
msgid "Ubuntu 19.10 Eoan Ermine (:tarantool-issue:`4583`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:84
msgid "CentOS 8 (:tarantool-issue:`4543`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:85
msgid "Fedora 31 (:tarantool-issue:`4612`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:88
msgid "Bugs fixed"
msgstr ""

#: ../../doc/release/2.2.2.rst:91
msgid "SQL"
msgstr ""

#: ../../doc/release/2.2.2.rst:93
msgid "Modify type of a binding value in a query response metainformation: always return INTEGER rather then UNSIGNED, even for positive values. This is necessary for consistency with integer literal types. `c5246686 <https://github.com/tarantool/tarantool/commit/c5246686494ba19ceb321c0ee86b36495ab7d923>`_."
msgstr ""

#: ../../doc/release/2.2.2.rst:97
msgid "Reuse noSQL way to compare floating point values with integral ones. This allows to handle corner cases like ``SELECT 18446744073709551615.0 > 18446744073709551615`` uniformly. `12431ed4 <https://github.com/tarantool/tarantool/commit/12431ed42956a3561f10b7834752046590db73e6>`_."
msgstr ""

#: ../../doc/release/2.2.2.rst:101
msgid "Create or alter of a table with a foreign key may lead to wrong bytecode generation that may cause a crash or wrong result (:tarantool-issue:`4495`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:103
msgid "Allow to update a scalar value using SQL in a space that was created from Lua and contains ‘array’, ‘map’ or ‘any’ field (:tarantool-issue:`4189`). Note: Tarantool/SQL provides operations on scalar types and does not support ‘array’ and ‘map’ per se."
msgstr ""

#: ../../doc/release/2.2.2.rst:107
msgid "``INDEXED BY`` clause now obligates the query planner to choose provided index, `411be0f0 <https://github.com/tarantool/tarantool/commit/411be0f01153dde6a705306120fc50c6d74ed30e>`_"
msgstr ""

#: ../../doc/release/2.2.2.rst:110
msgid "Fix dirty memory access when constructing query plan involving search of floating point value in index over integer field (:tarantool-issue:`4558`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:118
msgid "Detect a new invalid json path case (:tarantool-issue:`4419`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:119
msgid "Randomize the next checkpoint time also after a manual ``box.snapshot()`` (:tarantool-issue:`4432`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:121
msgid "Fix memory leak in call / eval in the case when a transaction is not committed (:tarantool-issue:`4388`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:123
msgid "Eliminate warning re ‘strip_core’ box.cfg option on MacOS and FreeBSD (:tarantool-issue:`4464`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:125
msgid "The msgpack serializer that is under ``box.tuple.new()`` (called tuple serializer) did not reflect options set by ``msgpack.cfg({<...>})``, part of (:tarantool-issue:`4434`). Aside of ``box.tuple.new()`` behaviour itself, it may affect tuple:frommap(), methods of key_def Lua module, tuple and table merger sources, net.box results of ``:select()`` and ``:execute()`` calls, xlog Lua module."
msgstr ""

#: ../../doc/release/2.2.2.rst:132
msgid "box’s ``update`` and ``upsert`` now follow ``msgpack.cfg({encode_max_depth = <...>}`` option, part of (:tarantool-issue:`4434`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:134
msgid "fiber: make sure the guard page is created, refuse to create a new fiber otherwise (:tarantool-issue:`4541`). It is possible in case of heavy memory pressure, say, when there is no resources to split VMAs."
msgstr ""

#: ../../doc/release/2.2.2.rst:137
msgid "recovery: build secondary indices in the hot standby mode without waiting till the main instance termination (:tarantool-issue:`4135`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:139
msgid "Fix error message for incorrect return value of functional index extractor function (:tarantool-issue:`4553`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:142
msgid "Was: \"Key format doesn’t match one defined in functional index ‘’ of space ‘’: supplied key type is invalid: expected boolean’"
msgstr ""

#: ../../doc/release/2.2.2.rst:144
msgid "Now: “<…>: expected array”"
msgstr ""

#: ../../doc/release/2.2.2.rst:146
msgid "JSON path index did ignore is_nullable property when a space had a format (:tarantool-issue:`4520`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:148
msgid "Forbid ``00000000-0000-0000-0000-000000000000`` as ``replicaset_uuid`` and ``instance_uuid`` ``box.cfg({<...>})`` options value, (:tarantool-issue:`4282`). It did not work as expected: the nil UUID was treated as absence of a value."
msgstr ""

#: ../../doc/release/2.2.2.rst:152
msgid "Update cache of universe privileges without reconnect (:tarantool-issue:`2763`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:154
msgid "net.box: fix memory leak in ``net_box:connect(<URI>)`` (:tarantool-issue:`4588`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:156
msgid "net.box: don’t fire ``on_connect`` trigger at schema update (:tarantool-issue:`4593`). Also don’t fire ``on_disconnect`` trigger if a connection never entered into ‘active’ state (e.g. when a first schema fetch is failed)."
msgstr ""

#: ../../doc/release/2.2.2.rst:161
msgid "func: fix use after free on function unload, `64f4d06a <https://github.com/tarantool/tarantool/commit/64f4d06a906d610c9b2694486c3a45b407b7bbc9>`_"
msgstr ""

#: ../../doc/release/2.2.2.rst:163
msgid "Fix bootstrap.snap file in order to overcome the following warning, (:tarantool-issue:`4510`) > xlog.c:1934 E> can’t open tx: bootstrap: has some data after eof marker at 5902"
msgstr ""

#: ../../doc/release/2.2.2.rst:166
msgid "Don’t destroy a session until ``box.session.on_disconnect(<...>)`` triggers will be finished (:tarantool-issue:`4627`). This means that, say, ``box.session.id()`` can be safely invoked from the ``on_disconnect`` trigger. Before this change ``box.session.id()`` returns garbage (usually 0) after yield in the ``on_disconnect`` trigger. Note: tarantool/queue module is affected by this problem in `some scenarious <https://github.com/tarantool/queue/issues/103>`_. It is especially suggested to update tarantool at least to this release if you’re using this module."
msgstr ""

#: ../../doc/release/2.2.2.rst:175
msgid "func: ``box.schema.func.drop(<..>)`` did not unload unused modules (:tarantool-issue:`4648`). Also ``box.schema.func.create(<..>)`` did load of a module again even when another function from the module is loaded."
msgstr ""

#: ../../doc/release/2.2.2.rst:178
msgid "Encode Lua number -2^63 as integer in msgpack.encode() and box’s functions (:tarantool-issue:`4672`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:182
msgid "Replication"
msgstr ""

#: ../../doc/release/2.2.2.rst:184
msgid "Stop relay on subscribe error (:tarantool-issue:`4399`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:186
msgid "Set ``last_row_time`` to ``now`` in ``relay_new`` and ``relay_start`` (:tarantool-issue:`4431`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:189
msgid "Do not abort replication on ER_UNKNOWN_REPLICA (:tarantool-issue:`4455`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:191
msgid "Enter orphan mode on manual replication configuration change (:tarantool-issue:`4424`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:193
msgid "Disallow bootstrap of read-only masters (:tarantool-issue:`4321`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:195
msgid "Prefer to bootstrap a replica from a fully bootstrapped instance rather than currently bootstrapping one (:tarantool-issue:`4527`). This change enables the case when two nodes (B, C) are being bootstrapped simultaneously using the one that is already bootstrapped (A), while A is configured to replicate from {B, C} and B from {A, C}."
msgstr ""

#: ../../doc/release/2.2.2.rst:200
msgid "Return immediately from ``box.cfg{<...>}`` when an instance is reconfigured with ``replication_connect_quorum = 0`` (:tarantool-issue:`3760`) This change also fixes the behaviour of reconfiguration with non-zero ``replication_connect_quorum``: ``box.cfg{<...>}`` returns immediately regardless of whether connections to upstreams are established."
msgstr ""

#: ../../doc/release/2.2.2.rst:206
msgid "Apply replication ``box.cfg({<...>})`` settings in a strict order (:tarantool-issue:`4433`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:208
msgid "Auto reconnect a replica if password is invalid (:tarantool-issue:`4550`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:210
msgid "``box.session.su(<username>)`` now reports an error correctly for ``<username>`` longer then BOX_NAME_MAX, which is 65000, `43e29191 <https://github.com/tarantool/tarantool/commit/43e2919122f6ca0d6c8a6bd18d29151a15d115c8>`_ Was: ‘C++ exception’ Now: ‘name length <…> is greater than BOX_NAME_MAX’"
msgstr ""

#: ../../doc/release/2.2.2.rst:215
msgid "Use empty password when an URI in ``box.cfg{replication = <...>}`` is like ``login@host:port`` (:tarantool-issue:`4605`). The behaviour match net.box’s one now. Explicit ``login:@host:port`` was necessary before, otherwise a replica shows the following error: > Missing mandatory field ‘tuple’ in request"
msgstr ""

#: ../../doc/release/2.2.2.rst:220
msgid "Fix segfault during replication configuration (``box.cfg{replication = <...>}`` call) (:tarantool-issue:`4440`, :tarantool-issue:`4576`, :tarantool-issue:`4586`, :tarantool-issue:`4643`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:231
msgid "Fix segfault on ``ffi.C._say()`` without filename (:tarantool-issue:`4336`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:233
msgid "Fix ``pwd.getpwall()`` and ``pwd.getgrall()`` hang on CentOS 6 and FreeBSD 12 (:tarantool-issue:`4428`, :tarantool-issue:`4447`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:235
msgid "json.encode() now follows ``encode_max_depth`` option for arrays that leads to a segfault on recursive Lua tables with numeric keys (:tarantool-issue:`4366`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:238
msgid "fio.mktree() now reports an error for existing non-directory file (:tarantool-issue:`4439`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:240
msgid "Update ``json.cfg`` and ``msgpack.cfg`` tables when an option is changed, part of (:tarantool-issue:`4434`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:242
msgid "Fix handling of a socket read error on the console client (``console.connect(<URI>)`` or ``tarantoolctl connect/enter <...>``), `b0b19992 <https://github.com/tarantool/tarantool/commit/b0b1999258b0dd859fa39c4234620e9918281d1e>`_"
msgstr ""

#: ../../doc/release/2.2.2.rst:245
msgid "Handle ‘not enough memory’ gracefully when it is raised from ``lua_newthread()`` (:tarantool-issue:`4556`). There are several places where a new Lua thread is created:"
msgstr ""

#: ../../doc/release/2.2.2.rst:249
msgid "Start execution a Lua function call or an eval request (from a binary protocol, SQL or with ``box.func.<...>:call()``)."
msgstr ""

#: ../../doc/release/2.2.2.rst:251
msgid "Create of a new fiber."
msgstr ""

#: ../../doc/release/2.2.2.rst:252
msgid "Start execution of a trigger."
msgstr ""

#: ../../doc/release/2.2.2.rst:253
msgid "Start of encoding into a YAML format (``yaml.encode()``)."
msgstr ""

#: ../../doc/release/2.2.2.rst:255
msgid "Fix stack-use-after-scope in json.decode() (:tarantool-issue:`4637`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:259
msgid "HTTP client"
msgstr ""

#: ../../doc/release/2.2.2.rst:261
msgid "Use bundled ``libcurl`` rather than system-wide by default, (:tarantool-issue:`4318`, :tarantool-issue:`4180`, :tarantool-issue:`4288`, :tarantool-issue:`4389`, :tarantool-issue:`4397`). This closes several known problems that were fixed in recent libcurl versions, including segfaults, hangs, memory leaks and performance problems."
msgstr ""

#: ../../doc/release/2.2.2.rst:269
msgid "Disable verbose mode when ``{verbose = false}`` is passed, `5f3d9015 <https://github.com/tarantool/tarantool/commit/5f3d90154165fa7fb4d190f56d6c1658ff8c517f>`_"
msgstr ""

#: ../../doc/release/2.2.2.rst:271
msgid "Fix assertion fail after curl write error (:tarantool-issue:`4232`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:275
msgid "Console Lua output"
msgstr ""

#: ../../doc/release/2.2.2.rst:277
msgid "The new Lua output format is still in the alpha stage and has known flaws, but we are working to make it rich and stable."
msgstr ""

#: ../../doc/release/2.2.2.rst:280
msgid "Output ``box.NULL`` as ``\"box.NULL\"`` rather then ``\"cdata<void *>: NULL\"``, part of (:tarantool-issue:`3834`) (in quotes for now, yes, due to (:tarantool-issue:`4585`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:283
msgid "Add semicolon (``;``) as responses delimiter (EOS, end of stream/statement), analogue of YAMLs end-of-document (``...``) marker. This is vital for remote clients to determine an end of a particular response, part of (:tarantool-issue:`3834`)."
msgstr ""

#: ../../doc/release/2.2.2.rst:287
msgid "Fix hang in the console client (``console.connect(<URI>)`` or ``tarantoolctl connect/enter <...>``) after ``\\set output lua[,block]`` command, part of (:tarantool-issue:`3834`). In order to overcome it two changes were made:"
msgstr ""

#: ../../doc/release/2.2.2.rst:292
msgid "Parse ``\\set output lua[,block]`` command on a client prior to sending it to a server, store current responses delimiter (EOS) and use it to determine end of responses."
msgstr ""

#: ../../doc/release/2.2.2.rst:295
msgid "Send ``\\set output <...>`` command with a default output mode when establishing a connection (it is matter if different default modes are set)."
msgstr ""

#: ../../doc/release/2.2.2.rst:299
msgid "Provide ability to get or set current responses delimiter using ``console.eos([<...>])``, part of (:tarantool-issue:`3834`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:303
msgid "LuaJIT"
msgstr ""

#: ../../doc/release/2.2.2.rst:305
msgid "Fix fold machinery misbehaves (:tarantool-issue:`4376`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:307
msgid "Fix for ``debug.getinfo(1,'>S')`` (:tarantool-issue:`3833`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:309
msgid "Fix ``string.find`` recording (:tarantool-issue:`4476`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:311
msgid "Fixed ‘Data segment size exceeds process limit’ error on FreeBSD/x64: do not change resource limits when it is not necessary (:tarantool-issue:`4537`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:314
msgid "fold: keep type of emitted CONV in sync with its mode, `LuaJIT#524 <https://github.com/LuaJIT/LuaJIT/issues/524>`__ This fixes the following assertion fail: > asm_conv: Assertion \\`((IRType)((ir->t).irt & IRT_TYPE)) != st’ failed"
msgstr ""

#: ../../doc/release/2.2.2.rst:322
msgid "Support ``systemd``\\ ’s NOTIFY_SOCKET on OS X (:tarantool-issue:`4436`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:324
msgid "Fix linking with static ``openssl`` library (:tarantool-issue:`4437`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:326
msgid "Get rid of warning re empty ``NOTIFY_SOCKET`` variable (:tarantool-issue:`4305`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:328
msgid "rocks: fix ‘invalid date format’ error when installing a packed rock (:tarantool-issue:`4481`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:330
msgid "Remove libyaml from rpm/deb dependencies, because we use bunbled version of libyaml for the packages (since 2.2.1) (:tarantool-issue:`4442`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:333
msgid "Fix boolean CLI options handling in ``tarantoolctl cat <...>``, such as ``--show-system`` (:tarantool-issue:`4076`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:336
msgid "Fix segfault (out of bounds access) when unwinding error occurs at backtrace printing (:tarantool-issue:`4636`). Backtrace is printed on SIGFPE and SIGSEGV signal or when LuaJIT find itself in unrecoverable state (lua_atpanic())."
msgstr ""

#: ../../doc/release/2.2.2.rst:342
msgid "Building from sources"
msgstr ""

#: ../../doc/release/2.2.2.rst:344
msgid "Fix for GCC 4.8.5, which is default version on CentOS 7 (:tarantool-issue:`4438`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:346
msgid "Fix OpenSSL linking problems on FreeBSD (:tarantool-issue:`4490`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:348
msgid "Fix linking problems on Mac OS when several toolchains are in PATH (:tarantool-issue:`4587`)"
msgstr ""

#: ../../doc/release/2.2.2.rst:350
msgid "Fix GCC 9 warning on strncpy() (:tarantool-issue:`4515`)"
msgstr ""
