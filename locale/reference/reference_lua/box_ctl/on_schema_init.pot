
msgid "box.ctl.on_schema_init()"
msgstr ""

msgid "The ``box.ctl`` submodule also contains two functions for the two :ref:`server trigger <triggers>` definitions: ``on_shutdown`` and ``on_schema_init``. Please, familiarize yourself with the mechanism of trigger functions before using them."
msgstr ""

msgid "Create a \"schema_init :ref:`trigger <triggers>`\". The ``trigger-function`` will be executed when :ref:`box.cfg{} <index-book_cfg>` happens for the first time. That is, the ``schema_init`` trigger is called before the server's configuration and recovery begins, and therefore ``box.ctl.on_schema_init`` must be called before ``box.cfg`` is called."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "function which will become the trigger function"
msgstr ""

msgid "existing trigger function which will be replaced by trigger-function"
msgstr ""

msgid "return"
msgstr ""

msgid "nil or function pointer"
msgstr ""

msgid "If the parameters are (nil, old-trigger-function), then the old trigger is deleted."
msgstr ""

msgid "A common use is: make a ``schema_init`` trigger function which creates a ``before_replace`` trigger function on a system space. Thus, since system spaces are created when the server starts, the ``before_replace`` triggers will be activated for each tuple in each system space. For example, such a trigger could change the storage engine of a given space, or make a given space :ref:`replica-local <replication-local>` while a replica is being bootstrapped. Making such a change after ``box.cfg`` is not reliable because other connections might use the database before the change is made."
msgstr ""

msgid "Details about trigger characteristics are in the :ref:`triggers <triggers-box_triggers>` section."
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "Suppose that, before the server is fully up and ready for connections, you want to make sure that the engine of space ``space_name`` is vinyl. So you want to make a trigger that will be activated when a tuple is inserted in the ``_space`` system space. In this case you could end up with a master that has space-name with ``engine='memtx'`` and a replica that has space_name with ``engine='vinyl'``, with the same contents."
msgstr ""

msgid "function function_for_before_replace(old, new)\n"
"  if old == nil and new ~= nil and new[3] == 'space_name' and new[4] ~= 'vinyl' then\n"
"    return new:update{{'=', 4, 'vinyl'}}\n"
"  end\n"
"end\n"
"\n"
"box.ctl.on_schema_init(function()\n"
"  box.space._space:before_replace(function_for_before_replace)\n"
"end)\n"
"\n"
"box.cfg{replication='master_uri', ...}"
msgstr ""

