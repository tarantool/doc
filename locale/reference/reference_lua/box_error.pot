
msgid "Submodule `box.error`"
msgstr ""

msgid "Overview"
msgstr ""

msgid "The ``box.error`` function is for raising an error. The difference between this function and Lua's built-in `error <https://www.lua.org/pil/8.3.html>`_ function is that when the error reaches the client, its error code is preserved. In contrast, a Lua error would always be presented to the client as :errcode:`ER_PROC_LUA`."
msgstr ""

msgid "Index"
msgstr ""

msgid "Below is a list of all ``box.error`` functions."
msgstr ""

msgid "Name"
msgstr ""

msgid "Use"
msgstr ""

msgid ":ref:`box.error() <box_error-error>`"
msgstr ""

msgid "Throw an error"
msgstr ""

msgid ":ref:`box.error.last() <box_error-last>`"
msgstr ""

msgid "Get a description of the last error"
msgstr ""

msgid ":ref:`box.error.clear() <box_error-clear>`"
msgstr ""

msgid "Clear the record of errors"
msgstr ""

msgid ":ref:`box.error.new() <box_error-new>`"
msgstr ""

msgid "Create an error but do not throw"
msgstr ""

msgid ":ref:`box.error.set() <box_error-set>`"
msgstr ""

msgid "Set an error as ``box.error.last()``"
msgstr ""

msgid ":ref:`error_object.prev <box_error-prev>`"
msgstr ""

msgid "Return the previous error"
msgstr ""

msgid ":ref:`error_object.set_prev() <box_error-set_prev>`"
msgstr ""

msgid "Set the previous error"
msgstr ""

msgid ":ref:`Custom error types <box_error-custom_type>`"
msgstr ""

msgid "Create a custom error type"
msgstr ""

msgid "When called with a Lua-table argument, the code and reason have any user-desired values. The result will be those values."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "description of an error, defined by user"
msgstr ""

msgid "numeric code for this error, defined by user"
msgstr ""

msgid "When called without arguments, ``box.error()`` re-throws whatever the last error was."
msgstr ""

msgid "Emulate a request error, with text based on one of the pre-defined Tarantool errors defined in the file `errcode.h <https://github.com/tarantool/tarantool/blob/2.1/src/box/errcode.h>`_ in the source tree. Lua constants which correspond to those Tarantool errors are defined as members of ``box.error``, for example ``box.error.NO_SUCH_USER == 45``."
msgstr ""

msgid "number of a pre-defined error"
msgstr ""

msgid "part of the message which will accompany the error"
msgstr ""

msgid "For example:"
msgstr ""

msgid "the ``NO_SUCH_USER`` message is \"``User '%s' is not found``\" -- it includes one \"``%s``\" component which will be replaced with errtext. Thus a call to ``box.error(box.error.NO_SUCH_USER, 'joe')`` or ``box.error(45, 'joe')`` will result in an error with the accompanying message \"``User 'joe' is not found``\"."
msgstr ""

msgid "except"
msgstr ""

msgid "whatever is specified in errcode-number."
msgstr ""

msgid "``box.error()`` accepts two sets of arguments:"
msgstr ""

msgid "error code and reason (``box.error{code = 555, reason = 'Arbitrary message'}``), or"
msgstr ""

msgid "error object (``box.error(err)``)."
msgstr ""

msgid "In both cases the error is promoted as the last error."
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "tarantool> e1 = box.error.new({code = 111, reason = \"Сause\"})\n"
"---\n"
"...\n"
"tarantool> box.error(e1)\n"
"---\n"
"- error: Сause\n"
"...\n"
"tarantool> box.error{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.error()\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.error(box.error.FUNCTION_ACCESS_DENIED, 'A', 'B', 'C')\n"
"---\n"
"- error: A access denied for user 'B' to function 'C'\n"
"..."
msgstr ""

msgid "Returns a description of the last error, as a Lua table with five members: \"line\" (number) Tarantool source file line number, \"code\" (number) error's number, \"type\", (string) error's C++ class, \"message\" (string) error's message, \"file\" (string) Tarantool source file. Additionally, if the error is a system error (for example due to a failure in socket or file io), there may be a sixth member: \"errno\" (number) C standard error number."
msgstr ""

msgid "rtype: table"
msgstr ""

msgid "Clears the record of errors, so functions like `box.error()` or `box.error.last()` will have no effect."
msgstr ""

msgid "tarantool> box.error{code = 555, reason = 'Arbitrary message'}\n"
"---\n"
"- error: Arbitrary message\n"
"...\n"
"tarantool> box.schema.space.create('#')\n"
"---\n"
"- error: Invalid identifier '#' (expected letters, digits or an underscore)\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- line: 278\n"
"  code: 70\n"
"  type: ClientError\n"
"  message: Invalid identifier '#' (expected letters, digits or an underscore)\n"
"  file: /tmp/buildd/tarantool-1.7.0.252.g1654e31~precise/src/box/key_def.cc\n"
"...\n"
"tarantool> box.error.clear()\n"
"---\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- null\n"
"..."
msgstr ""

msgid "Create an error object, but doesn't throw it as :ref:`box.error() <box_error-error>` does. This is useful when error information should be saved for later retrieval. To set an error as the last explicitly use :ref:`box.error.set() <box_error-set>`."
msgstr ""

msgid "tarantool> e=box.error.new{code=5,reason='A',type='B'}\n"
"---\n"
"...\n"
"tarantool> e:unpack()\n"
"---\n"
"- code: 5\n"
"  base_type: CustomError\n"
"  type: B\n"
"  custom_type: B\n"
"  message: A\n"
"  trace:\n"
"  - file: '[string \"e=box.error.new{code=5,reason=''A'',type=''B''}\"]'\n"
"    line: 1\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- nil"
msgstr ""

msgid "Beginning in version 2.4.1 there is a :ref:`session_settings <box_space-session_settings>` setting which affects structure of error objects. If ``error_marshaling_enabled`` is changed to ``true``, then the object will have the MP_EXT type and the MP_ERROR subtype. Using the :ref:`binary protocol <internals-box_protocol>`, in the body of a packet that the server could send in response to ``box.error.new()``, one will see: the encoding of MP_EXT according to the `MessagePack specification <https://github.com/msgpack/msgpack/blob/master/spec.md>`_ (usually 0xc7), followed by the encoding of MP_ERROR (0x03), followed by the encoding of MP_ERROR_STACK (0x81), followed by all of the MP_ERROR_STACK components (MP_ARRAY which contains MP_MAP which contains keys MP_ERROR_MESSAGE, MP_ERROR_CODE, etc.) that are described and illustrated in section :ref:`MessagePack extensions - The ERROR type <msgpack_ext-error>`. The map field for error object \"type\" will have key = MP_ERROR_TYPE, the map field for error object \"code\" will have key = MP_ERROR_CODE, the map field for error object \"message\" will have key = MP_ERROR_MESSAGE."
msgstr ""

msgid "Set an error as the last system error explicitly. Accepts an error object and makes it available via :ref:`box.error.last() <box_error-last>`."
msgstr ""

msgid "tarantool> err = box.error.new({code = 111, reason = \"cause\"})\n"
"---\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- error: '[string \"return tarantool> box.error.last()\"]:1: attempt to compare two\n"
"    nil values'\n"
"...\n"
"tarantool> box.error.set(err)\n"
"---\n"
"...\n"
"tarantool> box.error.last()\n"
"---\n"
"- cause\n"
"..."
msgstr ""

msgid "Errors can be organized into lists. To achieve this, a Lua table representing an error object has ``.prev`` field and ``e:set_prev(err)`` method."
msgstr ""

msgid "Return a previous error, if any."
msgstr ""

msgid "Set an error as the previous error. Accepts an ``error object`` or ``nil``."
msgstr ""

msgid "tarantool> e1 = box.error.new({code = 111, reason = \"some cause\"})\n"
"---\n"
"...\n"
"tarantool> e2 = box.error.new({code = 111, reason = \"cause of cause\"})\n"
"---\n"
"...\n"
"tarantool> e1:set_prev(e2)\n"
"---\n"
"...\n"
"tarantool> e1.prev\n"
"---\n"
"- cause of cause\n"
"..."
msgstr ""

msgid "Cycles are not allowed for error lists:"
msgstr ""

msgid "tarantool> e2:set_prev(e1)\n"
"---\n"
"- error: 'builtin/error.lua:147: Cycles are not allowed'\n"
"..."
msgstr ""

msgid "Setting the previous error does not erase its own previous members:"
msgstr ""

msgid "-- e1 -> e2 -> e3 -> e4\n"
"e1:set_prev(e2)\n"
"e2:set_prev(e3)\n"
"e3:set_prev(e4)\n"
"e2:set_prev(e5)\n"
"-- Now there are two lists: e1->e2->e5 and e3->e4"
msgstr ""

msgid "The iProto protocol also supports stacked diagnostics. See details in :ref:`MessagePack extensions - The ERROR type <msgpack_ext-error>`."
msgstr ""

msgid "Custom error types"
msgstr ""

msgid "From above you know that errors can be created in two ways: with ``box.error.new()`` and with ``box.error()``."
msgstr ""

msgid "Both methods can take arguments either as a list (``code, reason, <reason string args>``):"
msgstr ""

msgid "box.error(9, 'my_space', 'reason') -- error: 'Failed to create space my_space: reason'"
msgstr ""

msgid "...or as a table (``{code = code, reason = reason, ...}``):"
msgstr ""

msgid "box.error({code = 9, reason = 'Failed to create space my_space: reason'})"
msgstr ""

msgid "It is also possible to specify your own type of errors instead of pre-defined ones. Put a string with your type in the ``type`` field if you pass arguments as a table, or instead of the ``code`` parameter if you use listing:"
msgstr ""

msgid "box.error('MyErrorType', 'Message')\n"
"box.error({type = 'MyErrorType', code = 1024, reason = 'Message'})"
msgstr ""

msgid "Or a no-throw version:"
msgstr ""

msgid "box.error.new('MyErrorType', 'Message')\n"
"box.error.new({type = 'MyErrorType', code = 1024, reason = 'Message'})"
msgstr ""

msgid "When a custom type is specified, it is reported in the ``err.type`` attribute. When it is not specified, ``err.type`` reports one of built-in errors such as ``'ClientError'``, ``'OurOfMemory'``, etc."
msgstr ""

msgid "The maximum name length for a custom type is *63 bytes*. Everything longer than this limit is truncated."
msgstr ""

msgid "The original error type can be checked using the ``err.base_type`` member, although normally it should not be used. For user-defined types, the base type is ``'CustomError'``."
msgstr ""

msgid "tarantool> e = box.error.new({type = 'MyErrorType', code = 1024, reason = 'Message'})\n"
"---\n"
"...\n"
"\n"
"tarantool> e:unpack()\n"
"---\n"
"- code: 1024\n"
"trace:\n"
"- file: '[string \"e = box.error.new({type = ''MyErrorType'', code...\"]'\n"
"    line: 1\n"
"type: MyErrorType\n"
"custom_type: MyErrorType\n"
"message: Message\n"
"base_type: CustomError\n"
"..."
msgstr ""

msgid "You can also use a format string to compose an error message for the ``'CustomError'`` type."
msgstr ""

msgid "box.error('MyCustomType', 'The error reason: %s', 'some error reason')"
msgstr ""

