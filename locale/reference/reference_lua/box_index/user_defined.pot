
msgid "index_object:user_defined()"
msgstr ""

msgid "Users can define any functions they want, and associate them with indexes: in effect they can make their own index methods. They do this by:"
msgstr ""

msgid "creating a Lua function,"
msgstr ""

msgid "adding the function name to a predefined global variable which has type = table, and"
msgstr ""

msgid "invoking the function any time thereafter, as long as the server is up, by saying ``index_object:function-name([parameters])``."
msgstr ""

msgid "There are three predefined global variables:"
msgstr ""

msgid "Adding to ``box_schema.index_mt`` makes the method available for all indexes."
msgstr ""

msgid "Adding to ``box_schema.memtx_index_mt`` makes the method available for all memtx indexes."
msgstr ""

msgid "Adding to ``box_schema.vinyl_index_mt`` makes the method available for all vinyl indexes."
msgstr ""

msgid "Alternatively, user-defined methods can be made available for only one index, by calling ``getmetatable(index_object)`` and then adding the function name to the meta table."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "an :ref:`object reference <app_server-object_reference>`."
msgstr ""

msgid "whatever the user defines"
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "-- Visible to any index of a memtx space, no parameters.\n"
"-- After these requests, the value of global_variable will be 6.\n"
"box.schema.space.create('t', {engine='memtx'})\n"
"box.space.t:create_index('i')\n"
"global_variable = 5\n"
"function f() global_variable = global_variable + 1 end\n"
"box.schema.memtx_index_mt.counter = f\n"
"box.space.t.index.i:counter()"
msgstr ""

msgid "-- Visible to index box.space.t.index.i only, 1 parameter.\n"
"-- After these requests, the value of X will be 1005.\n"
"box.schema.space.create('t', {engine='memtx', id = 1000})\n"
"box.space.t:create_index('i')\n"
"X = 0\n"
"i = box.space.t.index.i\n"
"function f(i_arg, param) X = X + param + i_arg.space_id end\n"
"box.schema.memtx_index_mt.counter = f\n"
"meta = getmetatable(i)\n"
"meta.counter = f\n"
"i:counter(5)"
msgstr ""

