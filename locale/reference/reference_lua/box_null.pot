# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-29 14:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Constant `box.NULL`"
msgstr ""

msgid "There are some major problems with using a Lua **nil** value in tuples. For example: you can't correctly assess length of sparse array (an array with nullable values set to null) in case of using Lua **nil** value."
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "tarantool> t = {0, nil, 1, 2, nil}\n"
"---\n"
"...\n"
"\n"
"tarantool> t\n"
"---\n"
"- - 0\n"
"  - null\n"
"  - 1\n"
"  - 2\n"
"...\n"
"\n"
"tarantool> #t\n"
"---\n"
"- 4\n"
"..."
msgstr ""

msgid "Provided example clearly shows a problem with sparse arrays."
msgstr ""

msgid "Trying to find length for sparse arrays in LuaJIT leads to `undefined behaviour <https://www.lua.org/manual/5.2/manual.html#3.4.6>`_."
msgstr ""

msgid "To overcome this and some other issues use ``box.NULL`` constant instead of **nil**."
msgstr ""

msgid "Using box.NULL"
msgstr ""

msgid "``box.NULL`` is a value of cdata type representing a NULL pointer. It is similar to ``msgpack.NULL``, ``json.NULL`` and ``ffi.NULL``. So it is some not **nil** value, even if it is a pointer to NULL."
msgstr ""

msgid "Use ``box.NULL`` only with capitalized NULL (``box.null`` is incorrect)."
msgstr ""

msgid "Technically speaking ``box.NULL`` equals to ``ffi.cast('void *', 0)``."
msgstr ""

msgid "tarantool> t = {0, box.NULL, 1, 2, box.NULL}\n"
"---\n"
"...\n"
"\n"
"tarantool> t\n"
"---\n"
"- - 0\n"
"  - null\n"
"  - 1\n"
"  - 2\n"
"  - null\n"
"...\n"
"\n"
"tarantool> #t\n"
"---\n"
"- 5\n"
"..."
msgstr ""

msgid "There is a possible problem induced by using ``box.NULL``. Avoid using implicit comparisons with nullable values when using ``box.NULL``. Due to `Lua behaviour <https://www.lua.org/manual/5.1/manual.html#2.4.4>`_ returning from condition expression anything except **false** or **nil** is considered as **true**. And as it was mentioned earlier ``box.NULL`` is a pointer by design."
msgstr ""

msgid "That is why expression ``box.NULL`` will always be considered true in case it is used as condition in comparison. This means that code"
msgstr ""

msgid "``if box.NULL then func() end``"
msgstr ""

msgid "will always execute function ``func()`` (because condition ``box.NULL`` will always be neither **false** nor **nil**)."
msgstr ""

msgid "Distinction of nil and box.NULL"
msgstr ""

msgid "If condition expression ``x == nil`` is **true** the ``x`` could be **nil** or ``box.NULL``."
msgstr ""

msgid "To check whether ``x`` is a **nil** but not a ``box.NULL`` use the following condition expression:"
msgstr ""

msgid "x == nil and type(x) == 'nil'"
msgstr ""

msgid "If its **true** then the ``x`` is a **nil**, but not a ``box.NULL``."
msgstr ""

msgid "You can use the following for ``box.NULL``:"
msgstr ""

msgid "x == nil and type(x) == 'cdata'"
msgstr ""

msgid "If the expression above is **true** then the ``x`` is a ``box.NULL``."
msgstr ""

msgid "By converting data to different format (JSON, YAML, msgpack) you shall expect that it is possible, that **nil** in sparse arrays will be converted to ``box.NULL``. And it is worth mentioning that such convertation might be unexpected (for example: by sending data via :ref:`net.box <net_box-module>` or by obtaining data from :ref:`spaces <box_space> etc.`)."
msgstr ""

msgid "tarantool> type(({1, nil, 2})[2])\n"
"---\n"
"- nil\n"
"...\n"
"\n"
"tarantool> type(json.decode(json.encode({1, nil, 2}))[2])\n"
"---\n"
"- cdata\n"
"..."
msgstr ""

msgid "You must anticipate such behaviour and use proper condition expression. Use explicit comparison ``x == nil`` for checking for NULL in nullable values. It will detect both **nil** and ``box.NULL``."
msgstr ""

