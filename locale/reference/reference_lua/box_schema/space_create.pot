
msgid "box.schema.space.create() / schema_object:create_space()"
msgstr ""

msgid "Create a :ref:`space <index-box_space>`."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "name of space, which should conform to the :ref:`rules for object names <app_server-names>`"
msgstr ""

msgid "see \"Options for box.schema.space.create\" chart, below"
msgstr ""

msgid "return"
msgstr ""

msgid "space object"
msgstr ""

msgid "rtype"
msgstr ""

msgid "userdata"
msgstr ""

msgid "You can use either syntax. For example, ``s = box.schema.space.create('tester')`` has the same effect as ``s = box.schema.create_space('tester')``."
msgstr ""

msgid "**Options for box.schema.space.create**"
msgstr ""

msgid "Name"
msgstr ""

msgid "Effect"
msgstr ""

msgid "Type"
msgstr ""

msgid "Default"
msgstr ""

msgid "engine"
msgstr ""

msgid "'memtx' or 'vinyl'"
msgstr ""

msgid "string"
msgstr ""

msgid "'memtx'"
msgstr ""

msgid "field_count"
msgstr ""

msgid "fixed count of :ref:`fields <index-box_tuple>`: for example if field_count=5, it is illegal to insert a tuple with fewer than or more than 5 fields"
msgstr ""

msgid "number"
msgstr ""

msgid "0 i.e. not fixed"
msgstr ""

msgid "format"
msgstr ""

msgid "field names and types: See the illustrations of format clauses in the :ref:`space_object:format() <box_space-format>` description and in the :ref:`box.space._space <box_space-space>` example. Optional and usually not specified."
msgstr ""

msgid "table"
msgstr ""

msgid "(blank)"
msgstr ""

msgid "id"
msgstr ""

msgid "unique identifier: users can refer to spaces with the id instead of the name"
msgstr ""

msgid "last space's id, +1"
msgstr ""

msgid "if_not_exists"
msgstr ""

msgid "create space only if a space with the same name does not exist already, otherwise do nothing but do not cause an error"
msgstr ""

msgid "boolean"
msgstr ""

msgid "false"
msgstr ""

msgid "is_local"
msgstr ""

msgid "space contents are :ref:`replication-local <replication-local>`: changes are stored in the :ref:`write-ahead log <internals-wal>` of the local node but there is no :ref:`replication <replication>`."
msgstr ""

msgid "temporary"
msgstr ""

msgid "space contents are temporary: changes are not stored in the :ref:`write-ahead log <internals-wal>` and there is no :ref:`replication <replication>`. Note re storage engine: vinyl does not support temporary spaces."
msgstr ""

msgid "user"
msgstr ""

msgid "name of the user who is considered to be the space's :ref:`owner <authentication-owners_privileges>` for authorization purposes"
msgstr ""

msgid "current user's name"
msgstr ""

msgid "Saying ``box.cfg{read_only=true...}`` during :ref:`configuration <cfg_basic-read_only>` affects spaces differently depending on the options that were used during ``box.schema.space.create``, as summarized by this chart:"
msgstr ""

msgid "Option"
msgstr ""

msgid "Can be created?"
msgstr ""

msgid "Can be written to?"
msgstr ""

msgid "Is replicated?"
msgstr ""

msgid "Is persistent?"
msgstr ""

msgid "(default)"
msgstr ""

msgid "no"
msgstr ""

msgid "yes"
msgstr ""

msgid "There are three :ref:`syntax variations <app_server-object_reference>` for object references targeting space objects, for example :samp:`box.schema.space.drop({space-id})` will drop a space. However, the common approach is to use functions attached to the space objects, for example :ref:`space_object:drop() <box_space-drop>`."
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "tarantool> s = box.schema.space.create('space55')\n"
"---\n"
"...\n"
"tarantool> s = box.schema.space.create('space55', {\n"
"         >   id = 555,\n"
"         >   temporary = false\n"
"         > })\n"
"---\n"
"- error: Space 'space55' already exists\n"
"...\n"
"tarantool> s = box.schema.space.create('space55', {\n"
"         >   if_not_exists = true\n"
"         > })\n"
"---\n"
"..."
msgstr ""

msgid "After a space is created, usually the next step is to :ref:`create an index <box_space-create_index>` for it, and then it is available for insert, select, and all the other :ref:`box.space <box_space>` functions."
msgstr ""

