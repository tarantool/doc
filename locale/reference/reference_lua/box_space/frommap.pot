
msgid "space_object:frommap()"
msgstr ""

msgid "Convert a map to a tuple instance or to a table. The map must consist of \"field name = value\" pairs. The field names and the value types must match names and types stated previously for the space, via :doc:`/reference/reference_lua/box_space/format`."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "an :ref:`object reference <app_server-object_reference>`"
msgstr ""

msgid "a series of \"field = value\" pairs, in any order."
msgstr ""

msgid "the only legal option is ``{table = true|false}``; |br| if the option is omitted or if ``{table = false}``, then return type will be 'cdata' (i.e. tuple); |br| if ``{table = true}``, then return type will be 'table'."
msgstr ""

msgid "return"
msgstr ""

msgid "a tuple instance or table."
msgstr ""

msgid "rtype"
msgstr ""

msgid "tuple or table"
msgstr ""

msgid "**Possible errors:** ``space_object`` does not exist or has no format; \"unknown field\"."
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "-- Create a format with two fields named 'a' and 'b'.\n"
"-- Create a space with that format.\n"
"-- Create a tuple based on a map consistent with that space.\n"
"-- Create a table based on a map consistent with that space.\n"
"tarantool> format1 = {{name='a',type='unsigned'},{name='b',type='scalar'}}\n"
"---\n"
"...\n"
"tarantool> s = box.schema.create_space('test', {format = format1})\n"
"---\n"
"...\n"
"tarantool> s:frommap({b = 'x', a = 123456})\n"
"---\n"
"- [123456, 'x']\n"
"...\n"
"tarantool> s:frommap({b = 'x', a = 123456}, {table = true})\n"
"---\n"
"- - 123456\n"
"  - x\n"
"..."
msgstr ""

