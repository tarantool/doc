
msgid "space_object:get()"
msgstr ""

msgid "Search for a tuple in the given space."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "an :ref:`object reference <app_server-object_reference>`"
msgstr ""

msgid "value to be matched against the index key, which may be multi-part."
msgstr ""

msgid "return"
msgstr ""

msgid "the tuple whose index key matches ``key``, or ``nil``."
msgstr ""

msgid "rtype"
msgstr ""

msgid "tuple"
msgstr ""

msgid "**Possible errors:** ``space_object`` does not exist."
msgstr ""

msgid "**Complexity factors:** Index size, Index type, Number of indexes accessed, WAL settings."
msgstr ""

msgid "The ``box.space...select`` function returns a set of tuples as a Lua table; the ``box.space...get`` function returns at most a single tuple. And it is possible to get the first tuple in a space by appending ``[1]``. Therefore ``box.space.tester:get{1}`` has the same effect as ``box.space.tester:select{1}[1]``, if exactly one tuple is found."
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "box.space.tester:get{1}"
msgstr ""

msgid "**Using field names instead of field numbers:** `get()` can use field names described by the optional :ref:`space_object:format() <box_space-format>` clause. This is similar to a standard Lua feature, where a component can be referenced by its name instead of its number. For example, we can format the `tester` space with a field named `x` and use the name `x` in the index definition:"
msgstr ""

msgid "box.space.tester:format({{name='x',type='scalar'}})\n"
"box.space.tester:create_index('I',{parts={'x'}})"
msgstr ""

msgid "Then, if ``get`` or ``select`` retrieve a single tuple, we can reference the field 'x' in the tuple by its name:"
msgstr ""

msgid "box.space.tester:get{1}['x']\n"
"box.space.tester:select{1}[1]['x']"
msgstr ""

