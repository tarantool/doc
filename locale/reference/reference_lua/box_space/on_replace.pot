
msgid "space_object:on_replace()"
msgstr ""

msgid "Create a \"replace :ref:`trigger <triggers>`\". The ``trigger-function`` will be executed whenever a ``replace()`` or ``insert()`` or ``update()`` or ``upsert()`` or ``delete()`` happens to a tuple in ``<space-name>``."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "function which will become the trigger function; see Example #2 below for details about trigger function parameters"
msgstr ""

msgid "existing trigger function which will be replaced by ``trigger-function``"
msgstr ""

msgid "return"
msgstr ""

msgid "nil or function pointer"
msgstr ""

msgid "If the parameters are (nil, old-trigger-function), then the old trigger is deleted."
msgstr ""

msgid "If both parameters are omitted, then the response is a list of existing trigger functions."
msgstr ""

msgid "If it is necessary to know whether the trigger activation happened due to replication or on a specific connection type, the function can refer to :doc:`/reference/reference_lua/box_session/type`."
msgstr ""

msgid "Details about trigger characteristics are in the :ref:`triggers <triggers-box_triggers>` section."
msgstr ""

msgid "See also :doc:`/reference/reference_lua/box_space/before_replace`."
msgstr ""

msgid "**Example #1:**"
msgstr ""

msgid "tarantool> function f ()\n"
"         >   x = x + 1\n"
"         > end\n"
"tarantool> box.space.X:on_replace(f)"
msgstr ""

msgid "**Example #2:**"
msgstr ""

msgid "The ``trigger-function`` can have up to four parameters:"
msgstr ""

msgid "(tuple) old value which has the contents before the request started,"
msgstr ""

msgid "(tuple) new value which has the contents after the request ended,"
msgstr ""

msgid "(string) space name,"
msgstr ""

msgid "(string) type of request which is 'INSERT', 'DELETE', 'UPDATE', or 'REPLACE'."
msgstr ""

msgid "For example, the following code causes nil and 'INSERT' to be printed when the insert request is processed, and causes [1, 'Hi'] and 'DELETE' to be printed when the delete request is processed:"
msgstr ""

msgid "box.schema.space.create('space_1')\n"
"box.space.space_1:create_index('space_1_index',{})\n"
"function on_replace_function (old, new, s, op) print(old) print(op) end\n"
"box.space.space_1:on_replace(on_replace_function)\n"
"box.space.space_1:insert{1,'Hi'}\n"
"box.space.space_1:delete{1}"
msgstr ""

msgid "**Example #3:**"
msgstr ""

msgid "The following series of requests will create a space, create an index, create a function which increments a counter, create a trigger, do two inserts, drop the space, and display the counter value - which is 2, because the function is executed once after each insert."
msgstr ""

msgid "tarantool> s = box.schema.space.create('space53')\n"
"tarantool> s:create_index('primary', {parts = {{field = 1, type = 'unsigned'}}})\n"
"tarantool> function replace_trigger()\n"
"         >   replace_counter = replace_counter + 1\n"
"         > end\n"
"tarantool> s:on_replace(replace_trigger)\n"
"tarantool> replace_counter = 0\n"
"tarantool> t = s:insert{1, 'First replace'}\n"
"tarantool> t = s:insert{2, 'Second replace'}\n"
"tarantool> s:drop()\n"
"tarantool> replace_counter"
msgstr ""

msgid "You shouldn't use in trigger-functions for ``on_replace`` and ``before_replace``"
msgstr ""

msgid "transactions,"
msgstr ""

msgid "yield-operations (:ref:`explicit <atomic-implicit-yields>` or not),"
msgstr ""

msgid "actions that are not allowed to be used in transactions (see :ref:`rule #2 <box-txn_management>`)"
msgstr ""

msgid "because everything executed inside triggers is already in a transaction."
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "tarantool> box.space.test:on_replace(fiber.yield)\n"
"tarantool> box.space.test:replace{1, 2, 3}\n"
"2020-02-02 21:22:03.073 [73185] main/102/init.lua txn.c:532 E> ER_TRANSACTION_YIELD: Transaction has been aborted by a fiber yield\n"
"---\n"
"- error: Transaction has been aborted by a fiber yield\n"
"..."
msgstr ""

