
msgid "space_object:pairs()"
msgstr ""

msgid "Search for a tuple or a set of tuples in the given space, and allow iterating over one tuple at a time."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "an :ref:`object reference <app_server-object_reference>`"
msgstr ""

msgid "value to be matched against the index key, which may be multi-part"
msgstr ""

msgid "see :doc:`/reference/reference_lua/box_index/pairs`"
msgstr ""

msgid "return"
msgstr ""

msgid "`iterator <https://www.lua.org/pil/7.1.html>`_ which can be used in a for/end loop or with `totable() <https://luafun.github.io/reducing.html#fun.totable>`_"
msgstr ""

msgid "**Possible errors:**"
msgstr ""

msgid "no such space;"
msgstr ""

msgid "wrong type."
msgstr ""

msgid "**Complexity factors:** Index size, Index type."
msgstr ""

msgid "For examples of complex ``pairs`` requests, where one can specify which index to search and what condition to use (for example \"greater than\" instead of \"equal to\"), see the later section :doc:`/reference/reference_lua/box_index/pairs`."
msgstr ""

msgid "For information about iterators' internal structures see the `\"Lua Functional library\" <https://luafun.github.io/index.html>`_ documentation."
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "tarantool> s = box.schema.space.create('space33')\n"
"---\n"
"...\n"
"tarantool> -- index 'X' has default parts {1, 'unsigned'}\n"
"tarantool> s:create_index('X', {})\n"
"---\n"
"...\n"
"tarantool> s:insert{0, 'Hello my '}, s:insert{1, 'Lua world'}\n"
"---\n"
"- [0, 'Hello my ']\n"
"- [1, 'Lua world']\n"
"...\n"
"tarantool> tmp = ''\n"
"---\n"
"...\n"
"tarantool> for k, v in s:pairs() do\n"
"         >   tmp = tmp .. v[2]\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> tmp\n"
"---\n"
"- Hello my Lua world\n"
"..."
msgstr ""

