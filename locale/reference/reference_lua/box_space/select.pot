
msgid "space_object:select()"
msgstr ""

msgid "Search for a tuple or a set of tuples in the given space. This method doesn't yield (for details see :ref:`Cooperative multitasking <atomic-cooperative_multitasking>`)."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "an :ref:`object reference <app_server-object_reference>`"
msgstr ""

msgid "value to be matched against the index key, which may be multi-part."
msgstr ""

msgid "none, any or all of the same options that :doc:`/reference/reference_lua/box_index/select` allows:  * ``options.iterator`` (:ref:`type of iterator <box_index-iterator-types>`) * ``options.limit`` (maximum number of tuples) * ``options.offset`` (number of tuples to skip)"
msgstr ""

msgid "none, any or all of the same options that :doc:`/reference/reference_lua/box_index/select` allows:"
msgstr ""

msgid "``options.iterator`` (:ref:`type of iterator <box_index-iterator-types>`)"
msgstr ""

msgid "``options.limit`` (maximum number of tuples)"
msgstr ""

msgid "``options.offset`` (number of tuples to skip)"
msgstr ""

msgid "return"
msgstr ""

msgid "the tuples whose primary-key fields are equal to the fields of the passed key. If the number of passed fields is less than the number of fields in the primary key, then only the passed fields are compared, so ``select{1,2}`` will match a tuple whose primary key is ``{1,2,3}``."
msgstr ""

msgid "rtype"
msgstr ""

msgid "array of tuples"
msgstr ""

msgid "A ``select`` request can also be done with a specific index and index options, which are the subject of :doc:`/reference/reference_lua/box_index/select`."
msgstr ""

msgid "**Possible errors:**"
msgstr ""

msgid "no such space;"
msgstr ""

msgid "wrong type."
msgstr ""

msgid "**Complexity factors:** Index size, Index type."
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "tarantool> s = box.schema.space.create('tmp', {temporary=true})\n"
"---\n"
"...\n"
"tarantool> s:create_index('primary',{parts = { {field = 1, type = 'unsigned'}, {field = 2, type = 'string'}} })\n"
"---\n"
"...\n"
"tarantool> s:insert{1,'A'}\n"
"---\n"
"- [1, 'A']\n"
"...\n"
"tarantool> s:insert{1,'B'}\n"
"---\n"
"- [1, 'B']\n"
"...\n"
"tarantool> s:insert{1,'C'}\n"
"---\n"
"- [1, 'C']\n"
"...\n"
"tarantool> s:insert{2,'D'}\n"
"---\n"
"- [2, 'D']\n"
"...\n"
"tarantool> -- must equal both primary-key fields\n"
"tarantool> s:select{1,'B'}\n"
"---\n"
"- - [1, 'B']\n"
"...\n"
"tarantool> -- must equal only one primary-key field\n"
"tarantool> s:select{1}\n"
"---\n"
"- - [1, 'A']\n"
"  - [1, 'B']\n"
"  - [1, 'C']\n"
"...\n"
"tarantool> -- must equal 0 fields, so returns all tuples\n"
"tarantool> s:select{}\n"
"---\n"
"- - [1, 'A']\n"
"  - [1, 'B']\n"
"  - [1, 'C']\n"
"  - [2, 'D']\n"
"...\n"
"tarantool> -- the first field must be greater than 0, and\n"
"tarantool> -- skip the first tuple, and return up to\n"
"tarantool> -- 2 tuples. This example's options all\n"
"tarantool> -- depend on index characteristics so see\n"
"tarantool> -- more explanation in index_object:select().\n"
"tarantool> s:select({0},{iterator='GT',offset=1,limit=2})\n"
"---\n"
"- - [1, 'B']\n"
"  - [1, 'C']\n"
"..."
msgstr ""

msgid "As the last request in the above example shows: to make complex ``select`` requests, where you can specify which index to search and what condition to use (for example \"greater than\" instead of \"equal to\") and how many tuples to return, it will be necessary to become familiar with :doc:`/reference/reference_lua/box_index/select`."
msgstr ""

msgid "Remember that you can get a field from a tuple both by field number and by field name which is more convenient. See example: :ref:`using field names instead of field numbers <box_space-get_field_names>`."
msgstr ""

msgid "For more usage scenarios and typical errors see :ref:`Example: using data operations <box_space-operations-detailed-examples>` further in this section."
msgstr ""

