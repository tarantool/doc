
msgid "box.on_commit()"
msgstr ""

msgid "Define a trigger for execution when a transaction ends due to an event such as :doc:`/reference/reference_lua/box_txn_management/commit`."
msgstr ""

msgid "The trigger function may take an iterator parameter, as described in an example for this section."
msgstr ""

msgid "The trigger function should not access any database spaces."
msgstr ""

msgid "If the trigger execution fails and raises an error, the effect is severe and should be avoided -- use Lua's ``pcall()`` mechanism around code that might fail."
msgstr ""

msgid "``box.on_commit()`` must be invoked within a transaction, and the trigger ceases to exist when the transaction ends."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "function which will become the trigger function"
msgstr ""

msgid "existing trigger function which will be replaced by trigger-function"
msgstr ""

msgid "return"
msgstr ""

msgid "nil or function pointer"
msgstr ""

msgid "If the parameters are ``(nil, old-trigger-function)``, then the old trigger is deleted."
msgstr ""

msgid "Details about trigger characteristics are in the :ref:`triggers <triggers-box_triggers>` section."
msgstr ""

msgid "**Simple and useless example:** this will display 'commit happened':"
msgstr ""

msgid "function f()\n"
"function f() print('commit happened') end\n"
"box.begin() box.on_commit(f) box.commit()"
msgstr ""

msgid "But of course there is more to it: the function parameter can be an ITERATOR."
msgstr ""

msgid "The iterator goes through the effects of every request that changed a space during the transaction."
msgstr ""

msgid "The iterator will have:"
msgstr ""

msgid "an ordinal request number,"
msgstr ""

msgid "the old value of the tuple before the request (this will be nil for an insert request),"
msgstr ""

msgid "the new value of the tuple after the request (this will be nil for a delete request),"
msgstr ""

msgid "and the id of the space."
msgstr ""

msgid "**Less simple more useful example:** this will display the effects of two replace requests:"
msgstr ""

msgid "box.space.test:drop()\n"
"s = box.schema.space.create('test')\n"
"i = box.space.test:create_index('i')\n"
"function f(iterator)\n"
"  for request_number, old_tuple, new_tuple, space_id in iterator() do\n"
"    print('request_number ' .. tostring(request_number))\n"
"    print('  old_tuple ' .. tostring(old_tuple[1]) .. ' ' .. old_tuple[2])\n"
"    print('  new_tuple ' .. tostring(new_tuple[1]) .. ' ' .. new_tuple[2])\n"
"    print('  space_id ' .. tostring(space_id))\n"
"  end\n"
"end\n"
"s:insert{1,'-'}\n"
"box.begin() s:replace{1,'x'} s:replace{1,'y'} box.on_commit(f) box.commit()"
msgstr ""

msgid "The result will look like this:"
msgstr ""

msgid "tarantool> box.begin() s:replace{1,'x'} s:replace{1,'y'} box.on_commit(f) box.commit()\n"
"request_number 1\n"
"  old_tuple 1 -\n"
"  new_tuple 1 x\n"
"  space_id 517\n"
"request_number 2\n"
"  old_tuple 1 x\n"
"  new_tuple 1 y\n"
"  space_id 517"
msgstr ""

