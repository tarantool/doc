# SOME DESCRIPTIVE TITLE.
# Copyright (C) 
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-06 07:42+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Module `fiber`"
msgstr ""

msgid "Overview"
msgstr ""

msgid "With the ``fiber`` module, you can:"
msgstr ""

msgid "create, run and manage :ref:`fibers <fiber-fibers>`,"
msgstr ""

msgid "send and receive messages between different processes (i.e. different connections, sessions, or fibers) via :ref:`channels <fiber_ipc-channel>`, and"
msgstr ""

msgid "use a :ref:`synchronization mechanism <fiber_ipc-cond_var>` for fibers, similar to \"condition variables\" and similar to operating-system functions such as ``pthread_cond_wait()`` plus ``pthread_cond_signal()``."
msgstr ""

msgid "Index"
msgstr ""

msgid "Below is a list of all ``fiber`` functions and members."
msgstr ""

msgid "Name"
msgstr ""

msgid "Use"
msgstr ""

msgid ":ref:`fiber.create() <fiber-create>`"
msgstr ""

msgid "Create and start a fiber"
msgstr ""

msgid ":ref:`fiber.new() <fiber-new>`"
msgstr ""

msgid "Create but do not start a fiber"
msgstr ""

msgid ":ref:`fiber.self() <fiber-self>`"
msgstr ""

msgid "Get a fiber object"
msgstr ""

msgid ":ref:`fiber.find() <fiber-find>`"
msgstr ""

msgid "Get a fiber object by ID"
msgstr ""

msgid ":ref:`fiber.sleep() <fiber-sleep>`"
msgstr ""

msgid "Make a fiber go to sleep"
msgstr ""

msgid ":ref:`fiber.yield() <fiber-yield>`"
msgstr ""

msgid "Yield control"
msgstr ""

msgid ":ref:`fiber.status() <fiber-status>`"
msgstr ""

msgid "Get the current fiber's status"
msgstr ""

msgid ":ref:`fiber.info() <fiber-info>`"
msgstr ""

msgid "Get information about all fibers"
msgstr ""

msgid ":ref:`fiber.kill() <fiber-kill>`"
msgstr ""

msgid "Cancel a fiber"
msgstr ""

msgid ":ref:`fiber.testcancel() <fiber-testcancel>`"
msgstr ""

msgid "Check if the current fiber has been cancelled"
msgstr ""

msgid ":ref:`fiber_object:id() <fiber_object-id>`"
msgstr ""

msgid "Get a fiber's ID"
msgstr ""

msgid ":ref:`fiber_object:name() <fiber_object-name_get>`"
msgstr ""

msgid "Get a fiber's name"
msgstr ""

msgid ":ref:`fiber_object:name(name) <fiber_object-name_set>`"
msgstr ""

msgid "Set a fiber's name"
msgstr ""

msgid ":ref:`fiber_object:status() <fiber_object-status>`"
msgstr ""

msgid "Get a fiber's status"
msgstr ""

msgid ":ref:`fiber_object:cancel() <fiber_object-cancel>`"
msgstr ""

msgid ":ref:`fiber_object.storage <fiber_object-storage>`"
msgstr ""

msgid "Local storage within the fiber"
msgstr ""

msgid ":ref:`fiber_object:set_joinable() <fiber_object-set_joinable>`"
msgstr ""

msgid "Make it possible for a new fiber to join"
msgstr ""

msgid ":ref:`fiber_object:join() <fiber_object-join>`"
msgstr ""

msgid "Wait for a fiber's state to become 'dead'"
msgstr ""

msgid ":ref:`fiber.time() <fiber-time>`"
msgstr ""

msgid "Get the system time in seconds"
msgstr ""

msgid ":ref:`fiber.time64() <fiber-time64>`"
msgstr ""

msgid "Get the system time in microseconds"
msgstr ""

msgid ":ref:`fiber.channel() <fiber-channel>`"
msgstr ""

msgid "Create a communication channel"
msgstr ""

msgid ":ref:`channel_object:put() <channel_object-put>`"
msgstr ""

msgid "Send a message via a channel"
msgstr ""

msgid ":ref:`channel_object:close() <channel_object-close>`"
msgstr ""

msgid "Close a channel"
msgstr ""

msgid ":ref:`channel_object:get() <channel_object-get>`"
msgstr ""

msgid "Fetch a message from a channel"
msgstr ""

msgid ":ref:`channel_object:is_empty() <channel_object-is_empty>`"
msgstr ""

msgid "Check if a channel is empty"
msgstr ""

msgid ":ref:`channel_object:count() <channel_object-count>`"
msgstr ""

msgid "Count messages in a channel"
msgstr ""

msgid ":ref:`channel_object:is_full() <channel_object-is_full>`"
msgstr ""

msgid "Check if a channel is full"
msgstr ""

msgid ":ref:`channel_object:has_readers() <channel_object-has_readers>`"
msgstr ""

msgid "Check if an empty channel has any readers waiting"
msgstr ""

msgid ":ref:`channel_object:has_writers() <channel_object-has_writers>`"
msgstr ""

msgid "Check if a full channel has any writers waiting"
msgstr ""

msgid ":ref:`channel_object:is_closed() <channel_object-is_closed>`"
msgstr ""

msgid "Check if a channel is closed"
msgstr ""

msgid ":ref:`fiber.cond() <fiber-cond>`"
msgstr ""

msgid "Create a condition variable"
msgstr ""

msgid ":ref:`cond_object:wait() <cond_object-wait>`"
msgstr ""

msgid "Make a fiber go to sleep until woken by another fiber"
msgstr ""

msgid ":ref:`cond_object:signal() <cond_object-signal>`"
msgstr ""

msgid "Wake up a single fiber"
msgstr ""

msgid ":ref:`cond_object:broadcast() <cond_object-broadcast>`"
msgstr ""

msgid "Wake up all fibers"
msgstr ""

msgid "Fibers"
msgstr ""

msgid "A **fiber** is a set of instructions which are executed with cooperative multitasking. Fibers managed by the fiber module are associated with a user-supplied function called the *fiber function*."
msgstr ""

msgid "A fiber has three possible states: **running**, **suspended** or **dead**. When a fiber is created with :ref:`fiber.create() <fiber-create>`, it is running. When a fiber is created with :ref:`fiber.new() <fiber-new>` or yields control with :ref:`fiber.sleep() <fiber-sleep>`, it is suspended. When a fiber ends (because the fiber function ends), it is dead."
msgstr ""

msgid "All fibers are part of the fiber registry. This registry can be searched with :ref:`fiber.find() <fiber-find>` - via fiber id (fid), which is a numeric identifier."
msgstr ""

msgid "A runaway fiber can be stopped with :ref:`fiber_object.cancel <fiber_object-cancel>`. However, :ref:`fiber_object.cancel <fiber_object-cancel>` is advisory — it works only if the runaway fiber calls :ref:`fiber.testcancel() <fiber-testcancel>` occasionally. Most ``box.*`` functions, such as :ref:`box.space...delete() <box_space-delete>` or :ref:`box.space...update() <box_space-update>`, do call :ref:`fiber.testcancel() <fiber-testcancel>` but :ref:`box.space...select{} <box_space-select>` does not. In practice, a runaway fiber can only become unresponsive if it does many computations and does not check whether it has been cancelled."
msgstr ""

msgid "The other potential problem comes from fibers which never get scheduled, because they are not subscribed to any events, or because no relevant events occur. Such morphing fibers can be killed with :ref:`fiber.kill() <fiber-kill>` at any time, since :ref:`fiber.kill() <fiber-kill>` sends an asynchronous wakeup event to the fiber, and :ref:`fiber.testcancel() <fiber-testcancel>` is checked whenever such a wakeup event occurs."
msgstr ""

msgid "Like all Lua objects, dead fibers are garbage collected. The Lua garbage collector frees pool allocator memory owned by the fiber, resets all fiber data, and returns the fiber (now called a fiber carcass) to the fiber pool. The carcass can be reused when another fiber is created."
msgstr ""

msgid "A fiber has all the features of a Lua coroutine_ and all the programming concepts that apply for Lua coroutines will apply for fibers as well. However, Tarantool has made some enhancements for fibers and has used fibers internally. So, although use of coroutines is possible and supported, use of fibers is recommended."
msgstr ""

msgid "Create and start a fiber. The fiber is created and begins to run immediately."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "the function to be associated with the fiber"
msgstr ""

msgid "what will be passed to function"
msgstr ""

msgid "Return"
msgstr ""

msgid "created fiber object"
msgstr ""

msgid "Rtype"
msgstr ""

msgid "userdata"
msgstr ""

msgid "**Example:**"
msgstr ""

msgid "tarantool> fiber = require('fiber')\n"
"---\n"
"...\n"
"tarantool> function function_name()\n"
"         >   print(\"I'm a fiber\")\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> fiber_object = fiber.create(function_name); print(\"Fiber started\")\n"
"I'm a fiber\n"
"Fiber started\n"
"---\n"
"..."
msgstr ""

msgid "Create but do not start a fiber: the fiber is created but does not begin to run immediately -- it starts after the fiber creator (that is, the job that is calling ``fiber.new()``) yields, under :ref:`transaction control <atomic-atomic_execution>`. The initial fiber state is 'suspended'. Thus ``fiber.new()`` differs slightly from :ref:`fiber.create() <fiber-create>`."
msgstr ""

msgid "Ordinarily ``fiber.new()`` is used in conjunction with :ref:`fiber_object:set_joinable() <fiber_object-set_joinable>` and :ref:`fiber_object:join() <fiber_object-join>`."
msgstr ""

msgid "tarantool> fiber = require('fiber')\n"
"---\n"
"...\n"
"tarantool> function function_name()\n"
"         >   print(\"I'm a fiber\")\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> fiber_object = fiber.new(function_name); print(\"Fiber not started yet\")\n"
"Fiber not started yet\n"
"---\n"
"...\n"
"tarantool> I'm a fiber\n"
"---\n"
"..."
msgstr ""

msgid "fiber object for the currently scheduled fiber."
msgstr ""

msgid "tarantool> fiber.self()\n"
"---\n"
"- status: running\n"
"  name: interactive\n"
"  id: 101\n"
"..."
msgstr ""

msgid "numeric identifier of the fiber."
msgstr ""

msgid "fiber object for the specified fiber."
msgstr ""

msgid "tarantool> fiber.find(101)\n"
"---\n"
"- status: running\n"
"  name: interactive\n"
"  id: 101\n"
"..."
msgstr ""

msgid "Yield control to the scheduler and sleep for the specified number of seconds. Only the current fiber can be made to sleep."
msgstr ""

msgid "number of seconds to sleep."
msgstr ""

msgid "tarantool> fiber.sleep(1.5)\n"
"---\n"
"..."
msgstr ""

msgid "Yield control to the scheduler. Equivalent to :ref:`fiber.sleep(0) <fiber-sleep>`, except that `fiber.sleep(0)` depends on a timer, `fiber.yield()` does not."
msgstr ""

msgid "tarantool> fiber.yield()\n"
"---\n"
"..."
msgstr ""

msgid "Return the status of the current fiber. Or, if optional fiber_object is passed, return the status of the specified fiber."
msgstr ""

msgid "the status of ``fiber``. One of: “dead”, “suspended”, or “running”."
msgstr ""

msgid "string"
msgstr ""

msgid "tarantool> fiber.status()\n"
"---\n"
"- running\n"
"..."
msgstr ""

msgid "Return information about all fibers."
msgstr ""

msgid "number of context switches, backtrace, id, total memory, used memory, name for each fiber."
msgstr ""

msgid "table"
msgstr ""

msgid "tarantool> fiber.info()\n"
"---\n"
"- 101:\n"
"    csw: 7\n"
"    backtrace: []\n"
"    fid: 101\n"
"    memory:\n"
"      total: 65776\n"
"      used: 0\n"
"    name: interactive\n"
"..."
msgstr ""

msgid "Locate a fiber by its numeric id and cancel it. In other words, :ref:`fiber.kill() <fiber-kill>` combines :ref:`fiber.find() <fiber-find>` and :ref:`fiber_object:cancel() <fiber_object-cancel>`."
msgstr ""

msgid "the id of the fiber to be cancelled."
msgstr ""

msgid "Exception"
msgstr ""

msgid "the specified fiber does not exist or cancel is not permitted."
msgstr ""

msgid "tarantool> fiber.kill(fiber.id()) -- kill self, may make program end\n"
"---\n"
"- error: fiber is cancelled\n"
"..."
msgstr ""

msgid "Check if the current fiber has been cancelled and throw an exception if this is the case."
msgstr ""

msgid "Even if you catch the exception, the fiber will remain cancelled. Most types of calls will check ``fiber.testcancel()``. However, some functions (``id``, ``status``, ``join`` etc.) will return no error. We recommend application developers to implement occasional checks with :ref:`fiber.testcancel() <fiber-testcancel>` and to end fiber's execution as soon as possible in case it has been cancelled."
msgstr ""

msgid "tarantool> fiber.testcancel()\n"
"---\n"
"- error: fiber is cancelled\n"
"..."
msgstr ""

msgid "generally this is an object referenced in the return from :ref:`fiber.create <fiber-create>` or :ref:`fiber.self <fiber-self>` or :ref:`fiber.find <fiber-find>`"
msgstr ""

msgid "id of the fiber."
msgstr ""

msgid "number"
msgstr ""

msgid "``fiber.self():id()`` can also be expressed as ``fiber.id()``."
msgstr ""

msgid "tarantool> fiber_object = fiber.self()\n"
"---\n"
"...\n"
"tarantool> fiber_object:id()\n"
"---\n"
"- 101\n"
"..."
msgstr ""

msgid "name of the fiber."
msgstr ""

msgid "``fiber.self():name()`` can also be expressed as ``fiber.name()``."
msgstr ""

msgid "tarantool> fiber.self():name()\n"
"---\n"
"- interactive\n"
"..."
msgstr ""

msgid "Change the fiber name. By default a Tarantool server's interactive-mode fiber is named 'interactive' and new fibers created due to :ref:`fiber.create <fiber-create>` are named 'lua'. Giving fibers distinct names makes it easier to distinguish them when using :ref:`fiber.info <fiber-info>`."
msgstr ""

msgid "the new name of the fiber."
msgstr ""

msgid "nil"
msgstr ""

msgid "tarantool> fiber.self():name('non-interactive')\n"
"---\n"
"..."
msgstr ""

msgid "Return the status of the specified fiber."
msgstr ""

msgid "the status of fiber. One of: “dead”, “suspended”, or “running”."
msgstr ""

msgid "``fiber.self():status(`` can also be expressed as ``fiber.status()``."
msgstr ""

msgid "tarantool> fiber.self():status()\n"
"---\n"
"- running\n"
"..."
msgstr ""

msgid "Cancel a fiber. Running and suspended fibers can be cancelled. After a fiber has been cancelled, attempts to operate on it will cause errors, for example :ref:`fiber_object:name() <fiber_object-name_get>` will cause ``error: the fiber is dead``. But a dead fiber can still report its id and status."
msgstr ""

msgid "Possible errors: cancel is not permitted for the specified fiber object."
msgstr ""

msgid "tarantool> fiber.self():cancel() -- kill self, may make program end\n"
"---\n"
"...\n"
"tarantool> fiber.self():cancel()\n"
"---\n"
"- error: fiber is cancelled\n"
"...\n"
"tarantool> fiber.self:id()\n"
"---\n"
"- 163\n"
"...\n"
"tarantool> fiber.self:status()\n"
"---\n"
"- dead\n"
"..."
msgstr ""

msgid "Local storage within the fiber. It is a Lua table created when it is first accessed. The storage can contain any number of named values, subject to memory limitations. Naming may be done with :samp:`{fiber_object}.storage.{name}` or :samp:`{fiber_object}.storage['{name}'].` or with a number :samp:`{fiber_object}.storage[{number}]`. Values may be either numbers or strings."
msgstr ""

msgid "``fiber.storage`` is destroyed when the fiber is finished, regardless of how is it finished -- via :samp:`{fiber_object}:cancel()`, or the fiber's function did 'return'. Moreover, from that moment the storage is cleaned up even for pooled fibers used to serve IProto requests. Pooled fibers never really die, but nonetheless their storage is cleaned up after each request. That makes possible to use ``fiber.storage`` as a full featured request-local storage."
msgstr ""

msgid "This storage may be created for a fiber, no matter how the fiber itself was created -- from C or from Lua. For example, a fiber can be created in C using ``fiber_new()``, then it can insert into a space, which has Lua ``on_replace`` triggers, and one of the triggers can create ``fiber.storage``. That storage will be deleted when the fiber is stopped."
msgstr ""

msgid "``fiber.storage`` may be also used for the replication applier fiber. The applier has a fiber from which it applies transactions from a remote instance. In case the applier fiber somehow creates a ``fiber.storage`` (for example, from a space trigger again), the storage won't be deleted until the applier fiber is stopped."
msgstr ""

msgid "tarantool> fiber = require('fiber')\n"
"---\n"
"...\n"
"tarantool> function f () fiber.sleep(1000); end\n"
"---\n"
"...\n"
"tarantool> fiber_function = fiber.create(f)\n"
"---\n"
"...\n"
"tarantool> fiber_function.storage.str1 = 'string'\n"
"---\n"
"...\n"
"tarantool> fiber_function.storage['str1']\n"
"---\n"
"- string\n"
"...\n"
"tarantool> fiber_function:cancel()\n"
"---\n"
"...\n"
"tarantool> fiber_function.storage['str1']\n"
"---\n"
"- error: '[string \"return fiber_function.storage[''str1'']\"]:1: the fiber is dead'\n"
"..."
msgstr ""

msgid "See also :ref:`box.session.storage <box_session-storage>`."
msgstr ""

msgid "``fiber_object:set_joinable(true)`` makes a fiber joinable; ``fiber_object:set_joinable(false)`` makes a fiber not joinable; the default is false."
msgstr ""

msgid "A joinable fiber can be waited for, with :ref:`fiber_object:join() <fiber_object-join>`."
msgstr ""

msgid "Best practice is to call ``fiber_object:set_joinable()`` before the fiber function begins to execute, because otherwise the fiber could become 'dead' before ``fiber_object:set_joinable()`` takes effect. The usual sequence could be:"
msgstr ""

msgid "Call ``fiber.new()`` instead of ``fiber.create()`` to create a new fiber_object."
msgstr ""

msgid "Do not yield at this point, because that will cause the fiber function to begin."
msgstr ""

msgid "Call ``fiber_object:set_joinable(true)`` to make the new fiber_object joinable."
msgstr ""

msgid "Now it is safe to yield."
msgstr ""

msgid "Call ``fiber_object:join()``."
msgstr ""

msgid "Usually ``fiber_object:join()`` should be called, otherwise the fiber's status may become 'suspended' when the fiber function ends, instead of 'dead'."
msgstr ""

msgid "the boolean value that changes the ``set_joinable`` flag"
msgstr ""

msgid "The result of the following sequence of requests is:"
msgstr ""

msgid "the global variable ``d`` will be 6 (which proves that the function was not executed until after ``d`` was set to 1, when ``fiber.sleep(1)`` caused a yield);"
msgstr ""

msgid "``fiber.status(fi2)`` will be 'suspended' (which proves that after the function was executed the fiber status did not change to 'dead')."
msgstr ""

msgid "fiber=require('fiber')\n"
"d=0\n"
"function fu2() d=d+5 end\n"
"fi2=fiber.new(fu2) fi2:set_joinable(true) d=1 fiber.sleep(1)\n"
"print(d)\n"
"fiber.status(fi2)"
msgstr ""

msgid "\"Join\" a joinable fiber. That is, let the fiber's function run and wait until the fiber's status is 'dead' (normally a status becomes 'dead' when the function execution finishes). Joining will cause a yield, therefore, if the fiber is currently in a suspended state, execution of its fiber function will resume."
msgstr ""

msgid "This kind of waiting is more convenient than going into a loop and periodically checking the status; however, it works only if the fiber was created with :ref:`fiber.new() <fiber-new>` and was made joinable with :ref:`fiber_object:set_joinable() <fiber_object-set_joinable>`."
msgstr ""

msgid "two values. The first value is boolean. If the first value is true, then the join succeeded because the fiber's function ended normally and the second result has the return value from the fiber's function. If the first value is false, then the join succeeded because the fiber's function ended abnormally and the second result has the details about the error, which one can unpack in the same way that one unpacks :ref:`a pcall result <error_handling>`."
msgstr ""

msgid "boolean +result type, or boolean + struct error"
msgstr ""

msgid "the first ``fiber.status()`` call returns 'suspended',"
msgstr ""

msgid "the ``join()`` call returns true,"
msgstr ""

msgid "the elapsed time is usually 5 seconds, and"
msgstr ""

msgid "the second ``fiber.status()`` call returns 'dead'."
msgstr ""

msgid "This proves that the ``join()`` does not return until the function -- which sleeps 5 seconds -- is 'dead'."
msgstr ""

msgid "fiber=require('fiber')\n"
"function fu2() fiber.sleep(5) end\n"
"fi2=fiber.new(fu2) fi2:set_joinable(true)\n"
"start_time = os.time()\n"
"fiber.status(fi2)\n"
"fi2:join()\n"
"print('elapsed = ' .. os.time() - start_time)\n"
"fiber.status(fi2)"
msgstr ""

msgid "current system time (in seconds since the epoch) as a Lua number. The time is taken from the event loop clock, which makes this call very cheap, but still useful for constructing artificial tuple keys."
msgstr ""

msgid "tarantool> fiber.time(), fiber.time()\n"
"---\n"
"- 1448466279.2415\n"
"- 1448466279.2415\n"
"..."
msgstr ""

msgid "current system time (in microseconds since the epoch) as a 64-bit integer. The time is taken from the event loop clock."
msgstr ""

msgid "cdata"
msgstr ""

msgid "tarantool> fiber.time(), fiber.time64()\n"
"---\n"
"- 1448466351.2708\n"
"- 1448466351270762\n"
"..."
msgstr ""

msgid "Example"
msgstr ""

msgid "Make the function which will be associated with the fiber. This function contains an infinite loop. Each iteration of the loop adds 1 to a global variable named gvar, then goes to sleep for 2 seconds. The sleep causes an implicit :ref:`fiber.yield() <fiber-yield>`."
msgstr ""

msgid "tarantool> fiber = require('fiber')\n"
"tarantool> function function_x()\n"
"         >   gvar = 0\n"
"         >   while true do\n"
"         >     gvar = gvar + 1\n"
"         >     fiber.sleep(2)\n"
"         >   end\n"
"         > end\n"
"---\n"
"..."
msgstr ""

msgid "Make a fiber, associate function_x with the fiber, and start function_x. It will immediately \"detach\" so it will be running independently of the caller."
msgstr ""

msgid "tarantool> gvar = 0\n"
"\n"
"tarantool> fiber_of_x = fiber.create(function_x)\n"
"---\n"
"..."
msgstr ""

msgid "Get the id of the fiber (fid), to be used in later displays."
msgstr ""

msgid "tarantool> fid = fiber_of_x:id()\n"
"---\n"
"..."
msgstr ""

msgid "Pause for a while, while the detached function runs. Then ... Display the fiber id, the fiber status, and gvar (gvar will have gone up a bit depending how long the pause lasted). The status is suspended because the fiber spends almost all its time sleeping or yielding."
msgstr ""

msgid "tarantool> print('#', fid, '. ', fiber_of_x:status(), '. gvar=', gvar)\n"
"# 102 .  suspended . gvar= 399\n"
"---\n"
"..."
msgstr ""

msgid "Pause for a while, while the detached function runs. Then ... Cancel the fiber. Then, once again ... Display the fiber id, the fiber status, and gvar (gvar will have gone up a bit more depending how long the pause lasted). This time the status is dead because the cancel worked."
msgstr ""

msgid "tarantool> fiber_of_x:cancel()\n"
"---\n"
"...\n"
"tarantool> print('#', fid, '. ', fiber_of_x:status(), '. gvar=', gvar)\n"
"# 102 .  dead . gvar= 421\n"
"---\n"
"..."
msgstr ""

msgid "Channels"
msgstr ""

msgid "Call ``fiber.channel()`` to allocate space and get a channel object, which will be called channel for examples in this section."
msgstr ""

msgid "Call the other routines, via channel, to send messages, receive messages, or check channel status."
msgstr ""

msgid "Message exchange is synchronous. The Lua garbage collector will mark or free the channel when no one is using it, as with any other Lua object. Use object-oriented syntax, for example ``channel:put(message)`` rather than ``fiber.channel.put(message)``."
msgstr ""

msgid "Create a new communication channel."
msgstr ""

msgid "the maximum number of slots (spaces for ``channel:put`` messages) that can be in use at once. The default is 0."
msgstr ""

msgid "return"
msgstr ""

msgid "new channel."
msgstr ""

msgid "rtype"
msgstr ""

msgid "userdata, possibly including the string \"channel ...\"."
msgstr ""

msgid "Send a message using a channel. If the channel is full, ``channel:put()`` waits until there is a free slot in the channel."
msgstr ""

msgid "what will be sent, usually a string or number or table"
msgstr ""

msgid "maximum number of seconds to wait for a slot to become free"
msgstr ""

msgid "If timeout is specified, and there is no free slot in the channel for the duration of the timeout, then the return value is ``false``. If the channel is closed, then the return value is ``false``. Otherwise, the return value is ``true``, indicating success."
msgstr ""

msgid "boolean"
msgstr ""

msgid "Close the channel. All waiters in the channel will stop waiting. All following ``channel:get()`` operations will return ``nil``, and all following ``channel:put()`` operations will return ``false``."
msgstr ""

msgid "Fetch and remove a message from a channel. If the channel is empty, ``channel:get()`` waits for a message."
msgstr ""

msgid "maximum number of seconds to wait for a message"
msgstr ""

msgid "If timeout is specified, and there is no message in the channel for the duration of the timeout, then the return value is ``nil``. If the channel is closed, then the return value is ``nil``. Otherwise, the return value is the message placed on the channel by ``channel:put()``."
msgstr ""

msgid "usually string or number or table, as determined by ``channel:put``"
msgstr ""

msgid "Check whether the channel is empty (has no messages)."
msgstr ""

msgid "``true`` if the channel is empty. Otherwise ``false``."
msgstr ""

msgid "Find out how many messages are in the channel."
msgstr ""

msgid "the number of messages."
msgstr ""

msgid "Check whether the channel is full."
msgstr ""

msgid "``true`` if the channel is full (the number of messages in the channel equals the number of slots so there is no room for a new message). Otherwise ``false``."
msgstr ""

msgid "Check whether readers are waiting for a message because they have issued ``channel:get()`` and the channel is empty."
msgstr ""

msgid "``true`` if readers are waiting. Otherwise ``false``."
msgstr ""

msgid "Check whether writers are waiting because they have issued ``channel:put()`` and the channel is full."
msgstr ""

msgid "``true`` if writers are waiting. Otherwise ``false``."
msgstr ""

msgid "``true`` if the channel is already closed. Otherwise ``false``."
msgstr ""

msgid "This example should give a rough idea of what some functions for fibers should look like. It's assumed that the functions would be referenced in :ref:`fiber.create() <fiber-create>`."
msgstr ""

msgid "fiber = require('fiber')\n"
"channel = fiber.channel(10)\n"
"function consumer_fiber()\n"
"    while true do\n"
"        local task = channel:get()\n"
"        ...\n"
"    end\n"
"end\n"
"\n"
"function consumer2_fiber()\n"
"    while true do\n"
"        -- 10 seconds\n"
"        local task = channel:get(10)\n"
"        if task ~= nil then\n"
"            ...\n"
"        else\n"
"            -- timeout\n"
"        end\n"
"    end\n"
"end\n"
"\n"
"function producer_fiber()\n"
"    while true do\n"
"        task = box.space...:select{...}\n"
"        ...\n"
"        if channel:is_empty() then\n"
"            -- channel is empty\n"
"        end\n"
"\n"
"        if channel:is_full() then\n"
"            -- channel is full\n"
"        end\n"
"\n"
"        ...\n"
"        if channel:has_readers() then\n"
"            -- there are some fibers\n"
"            -- that are waiting for data\n"
"        end\n"
"        ...\n"
"\n"
"        if channel:has_writers() then\n"
"            -- there are some fibers\n"
"            -- that are waiting for readers\n"
"        end\n"
"        channel:put(task)\n"
"    end\n"
"end\n"
"\n"
"function producer2_fiber()\n"
"    while true do\n"
"        task = box.space...select{...}\n"
"        -- 10 seconds\n"
"        if channel:put(task, 10) then\n"
"            ...\n"
"        else\n"
"            -- timeout\n"
"        end\n"
"    end\n"
"end"
msgstr ""

msgid "Condition variables"
msgstr ""

msgid "Call ``fiber.cond()`` to create a named condition variable, which will be called 'cond' for examples in this section."
msgstr ""

msgid "Call ``cond:wait()`` to make a fiber wait for a signal via a condition variable."
msgstr ""

msgid "Call ``cond:signal()`` to send a signal to wake up a single fiber that has executed ``cond:wait()``."
msgstr ""

msgid "Call ``cond:broadcast()`` to send a signal to all fibers that have executed ``cond:wait()``."
msgstr ""

msgid "Create a new condition variable."
msgstr ""

msgid "new condition variable."
msgstr ""

msgid "Lua object"
msgstr ""

msgid "Make the current fiber go to sleep, waiting until another fiber invokes the ``signal()`` or ``broadcast()`` method on the cond object. The sleep causes an implicit :ref:`fiber.yield() <fiber-yield>`."
msgstr ""

msgid "number of seconds to wait, default = forever."
msgstr ""

msgid "If timeout is provided, and a signal doesn't happen for the duration of the timeout, ``wait()`` returns false. If a signal or broadcast happens, ``wait()`` returns true."
msgstr ""

msgid "Wake up a single fiber that has executed ``wait()`` for the same variable. Does not yield."
msgstr ""

msgid "Wake up all fibers that have executed ``wait()`` for the same variable. Does not yield."
msgstr ""

msgid "Assume that a tarantool instance is running and listening for connections on localhost port 3301. Assume that guest users have privileges to connect. We will use the tarantoolctl utility to start two clients."
msgstr ""

msgid "On terminal #1, say"
msgstr ""

msgid "$ tarantoolctl connect '3301'\n"
"tarantool> fiber = require('fiber')\n"
"tarantool> cond = fiber.cond()\n"
"tarantool> cond:wait()"
msgstr ""

msgid "The job will hang because ``cond:wait()`` -- without an optional timeout argument -- will go to sleep until the condition variable changes."
msgstr ""

msgid "On terminal #2, say"
msgstr ""

msgid "$ tarantoolctl connect '3301'\n"
"tarantool> cond:signal()"
msgstr ""

msgid "Now look again at terminal #1. It will show that the waiting stopped, and the ``cond:wait()`` function returned ``true``."
msgstr ""

msgid "This example depended on the use of a global conditional variable with the arbitrary name ``cond``. In real life, programmers would make sure to use different conditional variable names for different applications."
msgstr ""

