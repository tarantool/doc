
msgid "Module `msgpack`"
msgstr ""

msgid "Overview"
msgstr ""

msgid "The ``msgpack`` module decodes :ref:`raw MsgPack strings <msgpack-definitions>` by converting them to Lua objects, and encodes Lua objects by converting them to raw MsgPack strings. Tarantool makes heavy internal use of MsgPack because tuples in Tarantool are :ref:`stored <index-box_lua-vs-msgpack>` as MsgPack arrays."
msgstr ""

msgid "Definitions: MsgPack is short for `MessagePack <https://msgpack.org/index.html>`_. A \"raw MsgPack string\" is a byte array formatted according to the `MsgPack specification <https://github.com/msgpack/msgpack/blob/master/spec.md>`_ including type bytes and sizes. The type bytes and sizes can be made displayable with :ref:`string.hex() <string-hex>`, or the raw MsgPack strings can be converted to Lua objects with ``msgpack`` methods."
msgstr ""

msgid "Index"
msgstr ""

msgid "Below is a list of all ``msgpack`` functions and members."
msgstr ""

msgid "Name"
msgstr ""

msgid "Use"
msgstr ""

msgid ":ref:`msgpack.encode(lua_value) <msgpack-encode_lua_value>`"
msgstr ""

msgid "Convert a Lua object to a raw MsgPack string"
msgstr ""

msgid ":ref:`msgpack.encode(lua_value,ibuf) <msgpack-encode_lua_value_ibuf>`"
msgstr ""

msgid "Convert a Lua object to a raw MsgPack string in an ibuf"
msgstr ""

msgid ":ref:`msgpack.decode(msgpack_string) <msgpack-decode_string>`"
msgstr ""

msgid "Convert a raw MsgPack string to a Lua object"
msgstr ""

msgid ":ref:`msgpack.decode(C_style_string_pointer) <msgpack-decode_c_style_string_pointer>`"
msgstr ""

msgid "Convert a raw MsgPack string in an ibuf to a Lua object"
msgstr ""

msgid ":ref:`msgpack.decode_unchecked(mspack_string) <msgpack-decode_unchecked_string>`"
msgstr ""

msgid ":ref:`msgpack.decode_unchecked(C_style_string_pointer) <msgpack-decode_unchecked_c_style_string_pointer>`"
msgstr ""

msgid ":ref:`msgpack.decode_array_header <msgpack-decode_array_header>`"
msgstr ""

msgid "Skip array header in a raw MsgPack string"
msgstr ""

msgid ":ref:`msgpack.decode_map_header <msgpack-decode_map_header>`"
msgstr ""

msgid "Skip map header in a raw MsgPack string"
msgstr ""

msgid ":ref:`__serialize parameter <msgpack-serialize>`"
msgstr ""

msgid "Output structure specification"
msgstr ""

msgid ":ref:`msgpack.cfg <msgpack-cfg>`"
msgstr ""

msgid "Change configuration"
msgstr ""

msgid ":ref:`msgpack.NULL <msgpack-null>`"
msgstr ""

msgid "Analog of Lua's \"nil\""
msgstr ""

msgid "Convert a Lua object to a raw MsgPack string."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "either a scalar value or a Lua table value."
msgstr ""

msgid "return"
msgstr ""

msgid "the original contents formatted as a raw MsgPack string;"
msgstr ""

msgid "rtype"
msgstr ""

msgid "raw MsgPack string"
msgstr ""

msgid "Convert a Lua object to a raw MsgPack string in an ibuf, which is a buffer such as :ref:`buffer.ibuf() <buffer-ibuf>` creates. As with :ref:`encode(lua_value) <msgpack-encode_lua_value>`, the result is a raw MsgPack string, but it goes to the ``ibuf`` output instead of being returned."
msgstr ""

msgid "(output parameter) where the result raw MsgPack string goes"
msgstr ""

msgid "number of bytes in the output"
msgstr ""

msgid "Example using :ref:`buffer.ibuf() <buffer-ibuf>` and `ffi.string() <https://luajit.org/ext_ffi_api.html>`_ and :ref:`string.hex() <string-hex>`: The result will be '91a161' because 91 is the MessagePack encoding of \"fixarray size 1\", a1 is the MessagePack encoding of \"fixstr size 1\", and 61 is the UTF-8 encoding of 'a':"
msgstr ""

msgid "ibuf = require('buffer').ibuf()\n"
"msgpack_string_size = require('msgpack').encode({'a'}, ibuf)\n"
"msgpack_string = require('ffi').string(ibuf.rpos, msgpack_string_size)\n"
"string.hex(msgpack_string)"
msgstr ""

msgid "Convert a raw MsgPack string to a Lua object."
msgstr ""

msgid "a raw MsgPack string."
msgstr ""

msgid "where to start, minimum = 1, maximum = string length, default = 1."
msgstr ""

msgid "(if ``msgpack_string`` is a valid raw MsgPack string) the original contents of ``msgpack_string``, formatted as a Lua object, usually a Lua table, (otherwise) a scalar value, such as a string or a number;"
msgstr ""

msgid "\"next_start_position\". If ``decode`` stops after parsing as far as byte N in ``msgpack_string``, then \"next_start_position\" will equal N + 1, and ``decode(msgpack_string, next_start_position)`` will continue parsing from where the previous ``decode`` stopped, plus 1. Normally ``decode`` parses all of ``msgpack_string``, so \"next_start_position\" will equal ``string.len(msgpack_string)`` + 1."
msgstr ""

msgid "Lua object and number"
msgstr ""

msgid "Example: The result will be ['a'] and 4:"
msgstr ""

msgid "msgpack_string = require('msgpack').encode({'a'})\n"
"require('msgpack').decode(msgpack_string, 1)"
msgstr ""

msgid "Convert a raw MsgPack string, whose address is supplied as a C-style string pointer such as the ``rpos`` pointer which is inside an ibuf such as :ref:`buffer.ibuf() <buffer-ibuf>` creates, to a Lua object. A C-style string pointer may be described as ``cdata<char *>`` or ``cdata<const char *>``."
msgstr ""

msgid "a pointer to a raw MsgPack string."
msgstr ""

msgid "number of bytes in the raw MsgPack string"
msgstr ""

msgid "(if C_style_string_pointer points to a valid raw MsgPack string) the original contents of ``msgpack_string``, formatted as a Lua object, usually a Lua table, (otherwise) a scalar value, such as a string or a number;"
msgstr ""

msgid "returned_pointer = a C-style pointer to the byte after what was passed, so that C_style_string_pointer + size = returned_pointer"
msgstr ""

msgid "table and C-style pointer to after what was passed"
msgstr ""

msgid "Example using :ref:`buffer.ibuf <buffer-ibuf>` and pointer arithmetic: The result will be ['a'] and 3 and true:"
msgstr ""

msgid "ibuf = require('buffer').ibuf()\n"
"msgpack_string_size = require('msgpack').encode({'a'}, ibuf)\n"
"a, b = require('msgpack').decode(ibuf.rpos, msgpack_string_size)\n"
"a, b - ibuf.rpos, msgpack_string_size == b - ibuf.rpos"
msgstr ""

msgid "Input and output are the same as for :ref:`decode(string) <msgpack-decode_string>`."
msgstr ""

msgid "Input and output are the same as for :ref:`decode(C_style_string_pointer) <msgpack-decode_c_style_string_pointer>`, except that ``size`` is not needed. Some checking is skipped, and ``decode_unchecked(C_style_string_pointer)`` can operate with string pointers to buffers which ``decode(C_style_string_pointer)`` cannot handle. For an example see the :ref:`buffer <buffer-module>` module."
msgstr ""

msgid "Call the mp_decode_array function in the `MsgPuck <http://rtsisyk.github.io/msgpuck/>`_ library and return the array size and a pointer to the first array component. A subsequent call to ``msgpack_decode`` can decode the component instead of the whole array."
msgstr ""

msgid "a number greater than or equal to the string's length"
msgstr ""

msgid "the size of the array;"
msgstr ""

msgid "a pointer to after the array header."
msgstr ""

msgid "-- Example of decode_array_header\n"
"-- Suppose we have the raw data '\\x93\\x01\\x02\\x03'.\n"
"-- \\x93 is MsgPack encoding for a header of a three-item array.\n"
"-- We want to skip it and decode the next three items.\n"
"msgpack=require('msgpack'); ffi=require('ffi')\n"
"x,y=msgpack.decode_array_header(ffi.cast('char*','\\x93\\x01\\x02\\x03'),4)\n"
"a=msgpack.decode(y,1);b=msgpack.decode(y+1,1);c=msgpack.decode(y+2,1);\n"
"a,b,c\n"
"-- The result will be: 1,2,3."
msgstr ""

msgid "Call the mp_decode_map function in the `MsgPuck <http://rtsisyk.github.io/msgpuck/>`_ library and return the map size and a pointer to the first map component. A subsequent call to ``msgpack_decode`` can decode the component instead of the whole map."
msgstr ""

msgid "a number greater than or equal to the raw MsgPack string's length"
msgstr ""

msgid "the size of the map;"
msgstr ""

msgid "a pointer to after the map header."
msgstr ""

msgid "-- Example of decode_map_header\n"
"-- Suppose we have the raw data '\\x81\\xa2\\x41\\x41\\xc3'.\n"
"-- \\x81 is MsgPack encoding for a header of a one-item map.\n"
"-- We want to skip it and decode the next map item.\n"
"msgpack=require('msgpack'); ffi=require('ffi')\n"
"x,y=msgpack.decode_map_header(ffi.cast('char*','\\x81\\xa2\\x41\\x41\\xc3'),5)\n"
"a=msgpack.decode(y,3);b=msgpack.decode(y+3,1)\n"
"x,a,b\n"
"-- The result will be: 1,\"AA\", true."
msgstr ""

msgid "**__serialize parameter:**"
msgstr ""

msgid "The MsgPack output structure can be specified with ``__serialize``:"
msgstr ""

msgid "'seq', 'sequence', 'array' - table encoded as an array"
msgstr ""

msgid "'map', 'mappping' - table encoded as a map"
msgstr ""

msgid "function - the meta-method called to unpack serializable representation of table, cdata or userdata objects"
msgstr ""

msgid "Serializing 'A' and 'B' with different ``__serialize`` values brings different results. To show this, here is a routine which encodes ``{'A','B'}`` both as an array and as a map, then displays each result in hexadecimal."
msgstr ""

msgid "function hexdump(bytes)\n"
"    local result = ''\n"
"    for i = 1, #bytes do\n"
"        result = result .. string.format(\"%x\", string.byte(bytes, i)) .. ' '\n"
"    end\n"
"    return result\n"
"end\n"
"\n"
"msgpack = require('msgpack')\n"
"m1 = msgpack.encode(setmetatable({'A', 'B'}, {\n"
"                             __serialize = \"seq\"\n"
"                          }))\n"
"m2 = msgpack.encode(setmetatable({'A', 'B'}, {\n"
"                             __serialize = \"map\"\n"
"                          }))\n"
"print('array encoding: ', hexdump(m1))\n"
"print('map encoding: ', hexdump(m2))"
msgstr ""

msgid "**Result:**"
msgstr ""

msgid "**array** encoding: 92 a1 41 a1 42\n"
"**map** encoding:   82 01 a1 41 02 a1 42"
msgstr ""

msgid "The MsgPack `Specification page <http://github.com/msgpack/msgpack/blob/master/spec.md>`_ explains that the first encoding means:"
msgstr ""

msgid "fixarray(2), fixstr(1), \"A\", fixstr(1), \"B\""
msgstr ""

msgid "and the second encoding means:"
msgstr ""

msgid "fixmap(2), key(1), fixstr(1), \"A\", key(2), fixstr(2), \"B\""
msgstr ""

msgid "Here are examples for all the common types, with the Lua-table representation on the left, with the MsgPack format name and encoding on the right."
msgstr ""

msgid "**Common Types and MsgPack Encodings**"
msgstr ""

msgid "{}"
msgstr ""

msgid "'fixmap' if metatable is 'map' = 80 otherwise 'fixarray' = 90"
msgstr ""

msgid "'a'"
msgstr ""

msgid "'fixstr' = a1 61"
msgstr ""

msgid "false"
msgstr ""

msgid "'false' = c2"
msgstr ""

msgid "true"
msgstr ""

msgid "'true' = c3"
msgstr ""

msgid "127"
msgstr ""

msgid "'positive fixint' = 7f"
msgstr ""

msgid "65535"
msgstr ""

msgid "'uint 16' = cd ff ff"
msgstr ""

msgid "4294967295"
msgstr ""

msgid "'uint 32' = ce ff ff ff ff"
msgstr ""

msgid "nil"
msgstr ""

msgid "'nil' = c0"
msgstr ""

msgid "msgpack.NULL"
msgstr ""

msgid "same as nil"
msgstr ""

msgid "[0] = 5"
msgstr ""

msgid "'fixmap(1)' + 'positive fixint' (for the key) + 'positive fixint' (for the value) = 81 00 05"
msgstr ""

msgid "[0] = nil"
msgstr ""

msgid "'fixmap(0)' = 80 -- nil is not stored when it is a missing map value"
msgstr ""

msgid "1.5"
msgstr ""

msgid "'float 64' = cb 3f f8 00 00 00 00 00 00"
msgstr ""

msgid "Some MsgPack configuration settings can be changed."
msgstr ""

msgid "The values are all either integers or boolean ``true``/``false``."
msgstr ""

msgid "Option"
msgstr ""

msgid "Default"
msgstr ""

msgid "``cfg.encode_max_depth``"
msgstr ""

msgid "128"
msgstr ""

msgid "Max recursion depth for encoding"
msgstr ""

msgid "``cfg.encode_deep_as_nil``"
msgstr ""

msgid "A flag saying whether to crop tables with nesting level deeper than ``cfg.encode_max_depth``. Not-encoded fields are replaced with one null. If not set, too high nesting is considered an error."
msgstr ""

msgid "``cfg.encode_invalid_numbers``"
msgstr ""

msgid "A flag saying whether to enable encoding of NaN and Inf numbers"
msgstr ""

msgid "``cfg.encode_load_metatables``"
msgstr ""

msgid "A flag saying whether the serializer will follow :ref:`__serialize <json-serialize>` metatable field"
msgstr ""

msgid "``cfg.encode_use_tostring``"
msgstr ""

msgid "A flag saying whether to use ``tostring()`` for unknown types"
msgstr ""

msgid "``cfg.encode_invalid_as_nil``"
msgstr ""

msgid "A flag saying whether to use NULL for non-recognized types"
msgstr ""

msgid "``cfg.encode_sparse_convert``"
msgstr ""

msgid "A flag saying whether to handle excessively sparse arrays as maps. See detailed description :ref:`below <msgpack-cfg_sparse>`"
msgstr ""

msgid "``cfg.encode_sparse_ratio``"
msgstr ""

msgid "2"
msgstr ""

msgid "1/``encode_sparse_ratio`` is the permissible percentage of missing values in a sparse array"
msgstr ""

msgid "``cfg.encode_sparse_safe``"
msgstr ""

msgid "10"
msgstr ""

msgid "A limit ensuring that small Lua arrays are always encoded as sparse arrays (instead of generating an error or encoding as a map)"
msgstr ""

msgid "``cfg.decode_invalid_numbers``"
msgstr ""

msgid "A flag saying whether to enable decoding of NaN and Inf numbers"
msgstr ""

msgid "``cfg.decode_save_metatables``"
msgstr ""

msgid "A flag saying whether to set metatables for all arrays and maps"
msgstr ""

msgid "**Sparse arrays features:**"
msgstr ""

msgid "During encoding, the MsgPack encoder tries to classify tables into one of four kinds:"
msgstr ""

msgid "map - at least one table index is not unsigned integer"
msgstr ""

msgid "regular array - all array indexes are available"
msgstr ""

msgid "sparse array - at least one array index is missing"
msgstr ""

msgid "excessively sparse array - the number of values missing exceeds the configured ratio"
msgstr ""

msgid "An array is excessively sparse when **all** the following conditions are met:"
msgstr ""

msgid "``encode_sparse_ratio`` > 0"
msgstr ""

msgid "``max(table)`` > ``encode_sparse_safe``"
msgstr ""

msgid "``max(table)`` > ``count(table)`` * ``encode_sparse_ratio``"
msgstr ""

msgid "MsgPack encoder will never consider an array to be excessively sparse when ``encode_sparse_ratio = 0``. The ``encode_sparse_safe`` limit ensures that small Lua arrays are always encoded as sparse arrays. By default, attempting to encode an excessively sparse array will generate an error. If ``encode_sparse_convert`` is set to ``true``, excessively sparse arrays will be handled as maps."
msgstr ""

msgid "**msgpack.cfg() example 1:**"
msgstr ""

msgid "If ``msgpack.cfg.encode_invalid_numbers = true`` (the default), then NaN and Inf are legal values. If that is not desirable, then ensure that ``msgpack.encode()`` will not accept them, by saying ``msgpack.cfg{encode_invalid_numbers = false}``, thus:"
msgstr ""

msgid "tarantool> msgpack = require('msgpack'); msgpack.cfg{encode_invalid_numbers = true}\n"
"---\n"
"...\n"
"tarantool> msgpack.decode(msgpack.encode{1, 0 / 0, 1 / 0, false})\n"
"---\n"
"- [1, -nan, inf, false]\n"
"- 22\n"
"...\n"
"tarantool> msgpack.cfg{encode_invalid_numbers = false}\n"
"---\n"
"...\n"
"tarantool> msgpack.decode(msgpack.encode{1, 0 / 0, 1 / 0, false})\n"
"---\n"
"- error: ... number must not be NaN or Inf'\n"
"..."
msgstr ""

msgid "**msgpack.cfg example 2:**"
msgstr ""

msgid "To avoid generating errors on attempts to encode unknown data types as userdata/cdata, you can use this code:"
msgstr ""

msgid "tarantool> httpc = require('http.client').new()\n"
"---\n"
"...\n"
"\n"
"tarantool> msgpack.encode(httpc.curl)\n"
"---\n"
"- error: unsupported Lua type 'userdata'\n"
"...\n"
"\n"
"tarantool> msgpack.encode(httpc.curl, {encode_use_tostring=true})\n"
"---\n"
"- '\"userdata: 0x010a4ef2a0\"'\n"
"..."
msgstr ""

msgid "To achieve the same effect for only one call to ``msgpack.encode()`` (i.e. without changing the configuration permanently), you can use ``msgpack.encode({1, x, y, 2}, {encode_invalid_numbers = true})``."
msgstr ""

msgid "Similar configuration settings exist for :ref:`JSON <json-module_cfg>` and :ref:`YAML <yaml-cfg>`."
msgstr ""

msgid "A value comparable to Lua \"nil\" which may be useful as a placeholder in a tuple."
msgstr ""

msgid "**Example**"
msgstr ""

msgid "tarantool> msgpack = require('msgpack')\n"
"---\n"
"...\n"
"tarantool> y = msgpack.encode({'a',1,'b',2})\n"
"---\n"
"...\n"
"tarantool> z = msgpack.decode(y)\n"
"---\n"
"...\n"
"tarantool> z[1], z[2], z[3], z[4]\n"
"---\n"
"- a\n"
"- 1\n"
"- b\n"
"- 2\n"
"...\n"
"tarantool> box.space.tester:insert{20, msgpack.NULL, 20}\n"
"---\n"
"- [20, null, 20]\n"
"..."
msgstr ""

