
msgid "Module `uuid`"
msgstr ""

msgid "Overview"
msgstr ""

msgid "A \"UUID\" is a `Universally unique identifier`_. If an application requires that a value be unique only within a single computer or on a single database, then a simple counter is better than a UUID, because getting a UUID is time-consuming (it requires a syscall_). For clusters of computers, or widely distributed applications, UUIDs are better."
msgstr ""

msgid "Index"
msgstr ""

msgid "Below is list of all ``uuid`` functions and members."
msgstr ""

msgid "Name"
msgstr ""

msgid "Use"
msgstr ""

msgid ":ref:`uuid.nil <uuid-nil>`"
msgstr ""

msgid "A nil object"
msgstr ""

msgid ":ref:`uuid() <uuid-__call>` |br| :ref:`uuid.bin() <uuid-bin>` |br| :ref:`uuid.str() <uuid-str>`"
msgstr ""

msgid "Get a UUID"
msgstr ""

msgid ":ref:`uuid.new() <uuid-new>`"
msgstr ""

msgid "Create a UUID"
msgstr ""

msgid ":ref:`uuid.fromstr() <uuid-fromstr>` |br| :ref:`uuid.frombin() <uuid-frombin>` |br| :ref:`uuid_object:bin() <uuid-object_bin>` |br| :ref:`uuid_object:str() <uuid-object_str>`"
msgstr ""

msgid "Get a converted UUID"
msgstr ""

msgid ":ref:`uuid_object:isnil() <uuid-isnil>`"
msgstr ""

msgid "Check if a UUID is an all-zero value"
msgstr ""

msgid "Create a UUID sequence. You can use it in an index over a :ref:`uuid field <details_about_index_field_types>`. For example, to create such index for a space named `test`, say:"
msgstr ""

msgid "tarantool> box.space.test:create_index(\"pk\", {parts={field = 1, type = 'uuid'}})"
msgstr ""

msgid "Now you can insert uuids into the space:"
msgstr ""

msgid "tarantool> box.space.test:insert{uuid.new()}\n"
"---\n"
"- [e631fdcc-0e8a-4d2f-83fd-b0ce6762b13f]\n"
"...\n"
"\n"
"tarantool> box.space.test:insert{uuid.fromstr('64d22e4d-ac92-4a23-899a-e59f34af5479')}\n"
"---\n"
"- [64d22e4d-ac92-4a23-899a-e59f34af5479]\n"
"...\n"
"\n"
"tarantool> box.space.test:select{}\n"
"---\n"
"- - [64d22e4d-ac92-4a23-899a-e59f34af5479]\n"
"- [e631fdcc-0e8a-4d2f-83fd-b0ce6762b13f]\n"
"..."
msgstr ""

msgid "return"
msgstr ""

msgid "a UUID"
msgstr ""

msgid "rtype"
msgstr ""

msgid "cdata"
msgstr ""

msgid "16-byte string"
msgstr ""

msgid "36-byte binary string"
msgstr ""

msgid "Parameters"
msgstr ""

msgid "UUID in 36-byte hexadecimal string"
msgstr ""

msgid "converted UUID"
msgstr ""

msgid "UUID in 16-byte binary string"
msgstr ""

msgid "``byte-order`` can be one of next flags:"
msgstr ""

msgid "'l' - little-endian,"
msgstr ""

msgid "'b' - big-endian,"
msgstr ""

msgid "'h' - endianness depends on host (default),"
msgstr ""

msgid "'n' - endianness depends on network"
msgstr ""

msgid "one of ``'l'``, ``'b'``, ``'h'`` or ``'n'``."
msgstr ""

msgid "UUID converted from cdata input value."
msgstr ""

msgid "16-byte binary string"
msgstr ""

msgid "36-byte hexadecimal string"
msgstr ""

msgid "The all-zero UUID value can be expressed as uuid.NULL, or as ``uuid.fromstr('00000000-0000-0000-0000-000000000000')``. The comparison with an all-zero value can also be expressed as ``uuid_with_type_cdata == uuid.NULL``."
msgstr ""

msgid "true if the value is all zero, otherwise false."
msgstr ""

msgid "bool"
msgstr ""

msgid "Example"
msgstr ""

msgid "tarantool> uuid = require('uuid')\n"
"---\n"
"...\n"
"tarantool> uuid(), uuid.bin(), uuid.str()\n"
"---\n"
"- 16ffedc8-cbae-4f93-a05e-349f3ab70baa\n"
"- !!binary FvG+Vy1MfUC6kIyeM81DYw==\n"
"- 67c999d2-5dce-4e58-be16-ac1bcb93160f\n"
"...\n"
"tarantool> uu = uuid()\n"
"---\n"
"...\n"
"tarantool> #uu:bin(), #uu:str(), type(uu), uu:isnil()\n"
"---\n"
"- 16\n"
"- 36\n"
"- cdata\n"
"- false\n"
"..."
msgstr ""

