
msgid "Application environment"
msgstr ""

msgid ""
"This section provides a high-level overview on how to prepare a Tarantool "
"application for deployment and how the application's environment and layout "
"might look. This information is helpful for understanding how to administer "
"Tarantool instances using :ref:`tt CLI <tt-cli>` in both development and "
"production environments."
msgstr ""

msgid ""
"The main steps of creating and preparing the application for deployment are:"
msgstr ""

msgid ":ref:`admin-instance_config-init-environment`."
msgstr ""

msgid ":ref:`admin-instance_config-develop-app`."
msgstr ""

msgid ":ref:`admin-instance_config-package-app`."
msgstr ""

msgid ""
"In this section, a `sharded_cluster "
"<https://github.com/tarantool/doc/tree/latest/doc/code_snippets/snippets/sharding/instances.enabled/sharded_cluster>`_"
" application is used as an example. This cluster includes 5 instances: one "
"router and 4 storages, which constitute two replica sets."
msgstr ""

msgid "Cluster topology"
msgstr ""

msgid "Initializing a local environment"
msgstr ""

msgid ""
"Before creating an application, you need to set up a local environment for "
"``tt``:"
msgstr ""

msgid "Create a home directory for the environment."
msgstr ""

msgid "Run ``tt init`` in this directory:"
msgstr ""

msgid ""
"~/myapp$ tt init\n"
"   • Environment config is written to 'tt.yaml'"
msgstr ""

msgid ""
"This command creates a default ``tt`` configuration file ``tt.yaml`` for a "
"local environment and the directories for applications, control sockets, "
"logs, and other artifacts:"
msgstr ""

msgid ""
"~/myapp$ ls\n"
"bin  distfiles  include  instances.enabled  modules  templates  tt.yaml"
msgstr ""

msgid ""
"Find detailed information about the ``tt`` configuration parameters and "
"launch modes on the :ref:`tt configuration page <tt-config>`."
msgstr ""

msgid "Creating and developing an application"
msgstr ""

msgid "You can create an application in two ways:"
msgstr ""

msgid ""
"Manually by preparing its layout in a directory inside "
"``instances_enabled``. The directory name is used as the application "
"identifier."
msgstr ""

msgid "From a template by using the :ref:`tt create <tt-create>` command."
msgstr ""

msgid ""
"In this example, the application's layout is prepared manually and looks as "
"follows."
msgstr ""

msgid ""
"~/myapp$ tree\n"
".\n"
"├── bin\n"
"├── distfiles\n"
"├── include\n"
"├── instances.enabled\n"
"│   └── sharded_cluster\n"
"│       ├── config.yaml\n"
"│       ├── instances.yaml\n"
"│       ├── router.lua\n"
"│       ├── sharded_cluster-scm-1.rockspec\n"
"│       └── storage.lua\n"
"├── modules\n"
"├── templates\n"
"└── tt.yaml"
msgstr ""

msgid "The ``sharded_cluster`` directory contains the following files:"
msgstr ""

msgid ""
"``config.yaml``: contains the :ref:`configuration <configuration>` of the "
"cluster. This file might include the entire cluster topology or provide "
"connection settings to a centralized configuration storage."
msgstr ""

msgid ""
"``instances.yml``: specifies instances to run in the current environment. "
"For example, on the developer’s machine, this file might include all the "
"instances defined in the cluster configuration. In the production "
"environment, this file includes :ref:`instances to run on the specific "
"machine <admin-instances_to_run>`."
msgstr ""

msgid ""
"``router.lua``: includes code specific for a :ref:`router <vshard-"
"architecture-router>`."
msgstr ""

msgid ""
"``sharded_cluster-scm-1.rockspec``: specifies the required external "
"dependencies (for example, ``vshard``)."
msgstr ""

msgid ""
"``storage.lua``: includes code specific for :ref:`storages <vshard-"
"architecture-storage>`."
msgstr ""

msgid ""
"You can find the full example here: `sharded_cluster "
"<https://github.com/tarantool/doc/tree/latest/doc/code_snippets/snippets/sharding/instances.enabled/sharded_cluster>`_."
msgstr ""

msgid "Packaging the application"
msgstr ""

msgid ""
"To package the ready application, use the :ref:`tt pack <tt-pack>` command. "
"This command can create an installable DEB/RPM package or generate ``.tgz`` "
"archive."
msgstr ""

msgid ""
"The structure below reflects the content of the packed ``.tgz`` archive for "
"the `sharded_cluster "
"<https://github.com/tarantool/doc/tree/latest/doc/code_snippets/snippets/sharding/instances.enabled/sharded_cluster>`_"
" application:"
msgstr ""

msgid ""
"~/myapp$ tree -a\n"
".\n"
"├── bin\n"
"│   ├── tarantool\n"
"│   └── tt\n"
"├── include\n"
"├── instances.enabled\n"
"│   └── sharded_cluster -> ../sharded_cluster\n"
"├── modules\n"
"├── sharded_cluster\n"
"│   ├── .rocks\n"
"│   │   └── share\n"
"│   │       └── ...\n"
"│   ├── config.yaml\n"
"│   ├── instances.yaml\n"
"│   ├── router.lua\n"
"│   ├── sharded_cluster-scm-1.rockspec\n"
"│   └── storage.lua\n"
"└── tt.yaml"
msgstr ""

msgid ""
"The application's layout looks similar to the one defined when "
":ref:`developing the application <admin-instance_config-develop-app>` with "
"some differences:"
msgstr ""

msgid ""
"``bin``: contains the ``tarantool`` and ``tt`` binaries packed with the "
"application bundle."
msgstr ""

msgid ""
"``instances.enabled``: contains a symlink to the packed ``sharded_cluster`` "
"application."
msgstr ""

msgid ""
"``sharded_cluster``: a packed application. In addition to files created "
"during the application development, includes the ``.rocks`` directory "
"containing application dependencies (for example, ``vshard``)."
msgstr ""

#, fuzzy
msgid "``tt.yaml``: a ``tt`` configuration file."
msgstr "Конфигурационный файл tarantoolctl"

#, fuzzy
msgid "Instances to run"
msgstr "Файл экземпляра"

msgid ""
"One more difference for a deployed application is the content of the "
"``instances.yaml`` file that specifies instances to run in the current "
"environment."
msgstr ""

msgid ""
"On the developer's machine, this file might include all the instances "
"defined in the cluster configuration."
msgstr ""

#, fuzzy
msgid "``instances.yaml``:"
msgstr "``instance_dir``"

msgid ""
"storage-a-001:\n"
"storage-a-002:\n"
"storage-b-001:\n"
"storage-b-002:\n"
"router-a-001:"
msgstr ""

msgid ""
"In the production environment, this file includes instances to run on the "
"specific machine."
msgstr ""

msgid "``instances.yaml`` (Server-001):"
msgstr ""

msgid "router-a-001:"
msgstr ""

msgid "``instances.yaml`` (Server-002):"
msgstr ""

msgid ""
"storage-a-001:\n"
"storage-b-001:"
msgstr ""

msgid "``instances.yaml`` (Server-003):"
msgstr ""

msgid ""
"storage-a-002:\n"
"storage-b-002:"
msgstr ""

msgid ""
"The :ref:`Starting and stopping instances <admin-start_stop_instance>` "
"section describes how to start and stop Tarantool instances."
msgstr ""

#~ msgid "Instance configuration"
#~ msgstr "Настройка экземпляров Tarantool"

#~ msgid "For each Tarantool instance, you need two files:"
#~ msgstr "Для каждого экземпляра Tarantool понадобится два файла:"

#~ msgid ""
#~ "[Optional] An :ref:`application file <app_server-launching_app>` with "
#~ "instance-specific logic. Put this file into the ``/usr/share/tarantool/`` "
#~ "directory."
#~ msgstr ""
#~ "[Необязательный] :ref:`Файл приложения <app_server-launching_app>`, "
#~ "содержащий логику данного экземпляра. Поместите его в папку "
#~ "``/usr/share/tarantool/``."

#~ msgid ""
#~ "For example, ``/usr/share/tarantool/my_app.lua`` (here we implement it as a "
#~ ":ref:`Lua module <app_server-modules>` that bootstraps the database and "
#~ "exports ``start()`` function for API calls):"
#~ msgstr ""
#~ "Например, ``/usr/share/tarantool/my_app.lua`` (здесь мы реализуем его как  "
#~ ":ref:`Lua-модуль <app_server-modules>`, который запускает базу данных и "
#~ "экспортирует функцию ``start()`` для API -вызовов):"

#~ msgid ""
#~ "local function start()\n"
#~ "    box.schema.space.create(\"somedata\")\n"
#~ "    box.space.somedata:create_index(\"primary\")\n"
#~ "    <...>\n"
#~ "end\n"
#~ "\n"
#~ "return {\n"
#~ "  start = start;\n"
#~ "}"
#~ msgstr ""
#~ "local function start()\n"
#~ "    box.schema.space.create(\"somedata\")\n"
#~ "    box.space.somedata:create_index(\"primary\")\n"
#~ "    <...>\n"
#~ "end\n"
#~ "\n"
#~ "return {\n"
#~ "  start = start;\n"
#~ "}"

#~ msgid ""
#~ "An :ref:`instance file <admin-instance_file>` with instance-specific "
#~ "initialization logic and parameters. Put this file, or a symlink to it, into"
#~ " the **instance directory** (see :ref:`instance_dir <admin-instance_dir>` "
#~ "parameter in ``tarantoolctl`` configuration file)."
#~ msgstr ""
#~ ":ref:`Файл экземпляра <admin-instance_file>`, содержащий логику и параметры "
#~ "инициализации данного экземпляра. Поместите этот файл или символьную ссылку "
#~ "на него в **директорию экземпляра** (см. параметр :ref:`instance_dir <admin-"
#~ "instance_dir>` в конфигурационном файле ``tarantoolctl``)."

#~ msgid ""
#~ "For example, ``/etc/tarantool/instances.enabled/my_app.lua`` (here we load "
#~ "``my_app.lua`` module and make a call to ``start()`` function from that "
#~ "module):"
#~ msgstr ""
#~ "Например, ``/etc/tarantool/instances.enabled/my_app.lua`` (здесь мы "
#~ "загружаем модуль ``my_app.lua`` и вызываем из него функцию ``start()``):"

#~ msgid ""
#~ "#!/usr/bin/env tarantool\n"
#~ "\n"
#~ "box.cfg {\n"
#~ "    listen = 3301;\n"
#~ "}\n"
#~ "\n"
#~ "-- load my_app module and call start() function\n"
#~ "-- with some app options controlled by sysadmins\n"
#~ "local m = require('my_app').start({...})"
#~ msgstr ""
#~ "#!/usr/bin/env tarantool\n"
#~ "\n"
#~ "box.cfg {\n"
#~ "    listen = 3301;\n"
#~ "}\n"
#~ "\n"
#~ "-- загрузить модуль my_app и вызвать функцию start()\n"
#~ "-- некоторые опции приложения под контролем сисадминов\n"
#~ "local m = require('my_app').start({...})"

#~ msgid ""
#~ "After this short introduction, you may wonder what an instance file is, what"
#~ " it is for, and how ``tarantoolctl`` uses it. After all, Tarantool is an "
#~ "application server, so why not start the application stored in "
#~ "``/usr/share/tarantool`` directly?"
#~ msgstr ""
#~ "После столь краткого предисловия может возникнуть вопрос: что из себя "
#~ "представляет файл экземпляра, для чего он нужен и как ``tarantoolctl`` "
#~ "использует его? Если Tarantool -- это сервер приложений, так почему бы не "
#~ "запускать хранящееся в ``/usr/share/tarantool`` приложение напрямую?"

#~ msgid ""
#~ "A typical Tarantool application is not a script, but a daemon running in "
#~ "background mode and processing requests, usually sent to it over a TCP/IP "
#~ "socket. This daemon needs to be started automatically when the operating "
#~ "system starts, and managed with the operating system standard tools for "
#~ "service management -- such as ``systemd`` or ``init.d``. To serve this very "
#~ "purpose, we created **instance files**."
#~ msgstr ""
#~ "Типичное приложение для Tarantool -- это не скрипт, а демон, запущенный в "
#~ "фоновом режиме и обрабатывающий запросы, которые, как правило, посылаются  "
#~ "через TCP/IP-сокет. Необходимо запускать этот демон со стартом операционной "
#~ "системы и управлять им с помощью стандартных средств операционной системы "
#~ "для управления сервисами -- таких как ``systemd`` или ``init.d``. С этой "
#~ "целью и были созданы **файлы экземпляра**."

#~ msgid ""
#~ "You can have more than one instance file. For example, a single application "
#~ "in ``/usr/share/tarantool`` can run in multiple instances, each of them "
#~ "having its own instance file. Or you can have multiple applications in "
#~ "``/usr/share/tarantool`` -- again, each of them having its own instance "
#~ "file."
#~ msgstr ""
#~ "Файлов экземпляра может быть больше одного. Например, одно и то же "
#~ "приложение в ``/usr/share/tarantool`` может быть запущено на нескольких "
#~ "экземплярах Tarantool, у каждого из которых есть свой файл экземпляра. Или в"
#~ " ``/usr/share/tarantool`` может быть несколько приложений, и на каждое из "
#~ "них будет опять же приходиться свой файл экземпляра."

#~ msgid ""
#~ "An instance file is typically created by a system administrator. An "
#~ "application file is often provided by a developer, in a Lua rock or an "
#~ "rpm/deb package."
#~ msgstr ""
#~ "Обычно файл экземпляра создает системный администратор, а файл приложения  "
#~ "предоставляет разработчик в Lua-модуле или rpm/deb-пакете."

#~ msgid ""
#~ "An instance file is designed to not differ in any way from a Lua "
#~ "application. It must, however, configure the database, i.e. contain a call "
#~ "to :doc:`box.cfg{} </reference/reference_lua/box_cfg>` somewhere in it, "
#~ "because it’s the only way to turn a Tarantool script into a background "
#~ "process, and ``tarantoolctl`` is a tool to manage background processes. "
#~ "Other than that, an instance file may contain arbitrary Lua code, and, in "
#~ "theory, even include the entire application business logic in it. We, "
#~ "however, do not recommend this, since it clutters the instance file and "
#~ "leads to unnecessary copy-paste when you need to run multiple instances of "
#~ "an application."
#~ msgstr ""
#~ "По своему устройству файл экземпляра ничем не отличается от Lua-приложения. "
#~ "Однако с его помощью должна настраиваться база данных, поэтому в нем должен "
#~ "содержаться вызов :doc:`box.cfg{} </reference/reference_lua/box_cfg>`, "
#~ "потому что это единственный способ превратить Tarantool-скрипт в фоновый "
#~ "процесс, а ``tarantoolctl`` -- это инструмент для управления фоновыми "
#~ "процессами. За исключением этого вызова, файл экземпляра может содержать "
#~ "произвольный код на Lua и, теоретически, даже всю бизнес-логику приложения. "
#~ "Однако мы не рекомендуем  хранить весь код в файле экземпляра, потому что "
#~ "это приводит как к замусориванию самого файла, так и к ненужному копированию"
#~ " кода при необходимости запустить несколько экземпляров приложения."

#~ msgid ""
#~ "While instance files contain instance configuration, the ``tarantoolctl`` "
#~ "configuration file contains the configuration that ``tarantoolctl`` uses to "
#~ "override instance configuration. In other words, it contains system-wide "
#~ "configuration defaults. If ``tarantoolctl`` fails to find this file with the"
#~ " method described in section :ref:`Starting/stopping an instance <admin-"
#~ "start_stop_instance>`, it uses default settings."
#~ msgstr ""
#~ "Файлы экземпляра содержат конфигурацию экземпляра, тогда как "
#~ "конфигурационный файл ``tarantoolctl`` содержит конфигурацию, которую "
#~ "``tarantoolctl`` использует, чтобы переопределять конфигурацию экземпляров. "
#~ "Другими словами, он содержит общесистемную конфигурацию по умолчанию. Если "
#~ "``tarantoolctl`` не сможет обнаружить этот файл, используя метод, описанный "
#~ "в разделе :ref:`Запуск/остановка экземпляра <admin-start_stop_instance>`, "
#~ "будут использованы настройки по умолчанию."

#~ msgid ""
#~ "Most of the parameters are similar to those used by :doc:`box.cfg{} "
#~ "</reference/reference_lua/box_cfg>`. Here are the default settings (possibly"
#~ " installed in ``/etc/default/tarantool`` or ``/etc/sysconfig/tarantool`` as "
#~ "part of Tarantool distribution -- see OS-specific default paths in "
#~ ":ref:`Notes for operating systems <admin-os_notes>`):"
#~ msgstr ""
#~ "Большинство параметров схожи с теми, которые используются в :doc:`box.cfg{} "
#~ "</reference/reference_lua/box_cfg>`. Ниже даны настройки по умолчанию (могут"
#~ " быть установлены в ``/etc/default/tarantool`` или "
#~ "``/etc/sysconfig/tarantool`` как часть дистрибутива Tarantool -- см. пути по"
#~ " умолчанию для разных ОС в :ref:`Замечаниях по поводу некоторых операционных"
#~ " систем <admin-os_notes>`):"

#~ msgid ""
#~ "default_cfg = {\n"
#~ "    pid_file  = \"/var/run/tarantool\",\n"
#~ "    wal_dir   = \"/var/lib/tarantool\",\n"
#~ "    memtx_dir = \"/var/lib/tarantool\",\n"
#~ "    vinyl_dir = \"/var/lib/tarantool\",\n"
#~ "    log       = \"/var/log/tarantool\",\n"
#~ "    username  = \"tarantool\",\n"
#~ "    language  = \"Lua\",\n"
#~ "}\n"
#~ "instance_dir = \"/etc/tarantool/instances.enabled\""
#~ msgstr ""
#~ "default_cfg = {\n"
#~ "    pid_file  = \"/var/run/tarantool\",\n"
#~ "    wal_dir   = \"/var/lib/tarantool\",\n"
#~ "    memtx_dir = \"/var/lib/tarantool\",\n"
#~ "    vinyl_dir = \"/var/lib/tarantool\",\n"
#~ "    log       = \"/var/log/tarantool\",\n"
#~ "    username  = \"tarantool\",\n"
#~ "    language  = \"Lua\",\n"
#~ "}\n"
#~ "instance_dir = \"/etc/tarantool/instances.enabled\""

#~ msgid "where:"
#~ msgstr "где:"

#~ msgid "``pid_file``"
#~ msgstr "``pid_file``"

#~ msgid ""
#~ "Directory for the pid file and control-socket file; ``tarantoolctl`` will "
#~ "add “/instance_name” to the directory name."
#~ msgstr ""
#~ "Директория, где хранятся pid-файл и socket-файл; ``tarantoolctl`` добавляет "
#~ "“/имя_экземпляра” к имени директории."

#~ msgid "``wal_dir``"
#~ msgstr "``wal_dir``"

#~ msgid ""
#~ "Directory for write-ahead .xlog files; ``tarantoolctl`` will add "
#~ "\"/instance_name\" to the directory name."
#~ msgstr ""
#~ "Директория, где хранятся .xlog-файлы; ``tarantoolctl`` добавляет "
#~ "“/имя_экземпляра” к имени директории."

#~ msgid "``memtx_dir``"
#~ msgstr "``memtx_dir``"

#~ msgid ""
#~ "Directory for snapshot .snap files; ``tarantoolctl`` will add "
#~ "\"/instance_name\" to the directory name."
#~ msgstr ""
#~ "Директория, где хранятся .snap-файлы; ``tarantoolctl`` добавляет "
#~ "“/имя_экземпляра” к имени директории."

#~ msgid "``vinyl_dir``"
#~ msgstr "``vinyl_dir``"

#~ msgid ""
#~ "Directory for vinyl files; ``tarantoolctl`` will add \"/instance_name\" to "
#~ "the directory name."
#~ msgstr ""
#~ "Директория, где хранятся vinyl-файлы; ``tarantoolctl`` добавляет "
#~ "“/имя_экземпляра” к имени директории."

#~ msgid "``log``"
#~ msgstr "``log``"

#~ msgid ""
#~ "The place where the application log will go; ``tarantoolctl`` will add "
#~ "\"/instance_name.log\" to the name."
#~ msgstr ""
#~ "Директория, где хранятся файлы журнала с сообщениями от Tarantool-"
#~ "приложения; ``tarantoolctl`` добавляет “/имя_экземпляра” к имени директории."

#~ msgid "``username``"
#~ msgstr "``username``"

#~ msgid ""
#~ "The user that runs the Tarantool instance. This is the operating-system user"
#~ " name rather than the Tarantool-client user name. Tarantool will change its "
#~ "effective user to this user after becoming a daemon."
#~ msgstr ""
#~ "Пользователь, запускающий экземпляр Tarantool. Это пользователь операционной"
#~ " системы, а не Tarantool-клиента. Став демоном, Tarantool сменит своего "
#~ "пользователя на указанного."

#~ msgid "``language``"
#~ msgstr "``language``"

#~ msgid ""
#~ "The :ref:`interactive console <interactive_console>` language. Can be either"
#~ " ``Lua`` or ``SQL``."
#~ msgstr ""
#~ "Язык :ref:`интерактивной консоли <interactive_console>`: ``Lua`` либо "
#~ "``SQL``."

#~ msgid ""
#~ "The directory where all instance files for this host are stored. Put "
#~ "instance files in this directory, or create symbolic links."
#~ msgstr ""
#~ "Директория, где хранятся все файлы экземпляра для данного компьютера. "
#~ "Поместите сюда файлы экземпляра или создайте символьные ссылки на них."

#~ msgid ""
#~ "The default instance directory depends on Tarantool's ``WITH_SYSVINIT`` "
#~ "build option: when ON, it is ``/etc/tarantool/instances.enabled``, otherwise"
#~ " (OFF or not set) it is ``/etc/tarantool/instances.available``. The latter "
#~ "case is typical for Tarantool builds for Linux distros with ``systemd``."
#~ msgstr ""
#~ "Директория с экземплярами, которая используется по умолчанию, зависит от "
#~ "параметра сборки Tarantool ``WITH_SYSVINIT``: когда его значение \"ON\", то "
#~ "``/etc/tarantool/instances.enabled``, в противном случае (\"OFF\" или "
#~ "значение не установлено) ``/etc/tarantool/instances.available``. Последний "
#~ "случай характерен для сборок Tarantool для дистрибутивов Linux с "
#~ "``systemd``."

#~ msgid "To check the build options, say ``tarantool --version``."
#~ msgstr ""
#~ "Для проверки параметров сборки выполните команду ``tarantool --version``."

#~ msgid ""
#~ "As a full-featured example, you can take `example.lua "
#~ "<https://github.com/tarantool/tarantool/blob/2.1/extra/dist/example.lua>`_ "
#~ "script that ships with Tarantool and defines all configuration options."
#~ msgstr ""
#~ "В качестве полноценного примера можно использовать скрипт `example.lua "
#~ "<https://github.com/tarantool/tarantool/blob/2.1/extra/dist/example.lua>`_,"
#~ "  который поставляется вместе с Tarantool и задает все конфигурационные "
#~ "параметры."
