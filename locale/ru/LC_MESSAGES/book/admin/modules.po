
#, fuzzy
msgid "Managing modules"
msgstr "Установка модуля"

msgid ""
"This section covers the installation and reloading of Tarantool modules. To "
"learn about writing your own module and contributing it, check the "
":ref:`Contributing a module <app_server-contributing_module>` section."
msgstr ""

msgid "Installing a module"
msgstr "Установка модуля"

msgid ""
"Modules in Lua and C that come from Tarantool developers and community "
"contributors are available in the following locations:"
msgstr ""
"Модули на Lua и C от разработчиков Tarantool и сторонних разработчиков "
"доступны здесь:"

msgid ""
"Tarantool modules repository (see :ref:`below <app_server-"
"installing_module_luarocks>`)"
msgstr ""
"Репозиторий модулей Tarantool (см. :ref:`ниже <app_server-"
"installing_module_luarocks>`)"

msgid ""
"Tarantool deb/rpm repositories (see :ref:`below <app_server-"
"installing_module_debrpm>`)"
msgstr ""
"Репозитории deb/rpm Tarantool (см. :ref:`ниже <app_server-"
"installing_module_debrpm>`)"

msgid "Installing a module from a repository"
msgstr "Установка модуля из репозитория"

msgid ""
"See `README in tarantool/rocks repository "
"<https://github.com/tarantool/rocks#managing-modules-with-tarantool-174>`_ "
"for detailed instructions."
msgstr ""
"Для получения подробной информации см. `README в репозитории tarantool/rocks"
" <https://github.com/tarantool/rocks#managing-modules-with-tarantool-174>`_."

msgid "Installing a module from deb/rpm"
msgstr "Установка модуля из deb/rpm"

msgid "Follow these steps:"
msgstr "Выполните следующие действия:"

msgid ""
"Install Tarantool as recommended on the `download page "
"<https://www.tarantool.io/download>`_."
msgstr ""
"Установите Tarantool в соответствии с рекомендациями на `странице загрузки "
"<https://www.tarantool.io/download>`_."

#, fuzzy
msgid ""
"Install the module you need. Look up the module's name on `Tarantool rocks "
"page <https://tarantool.io/rocks.html>`_ and put the prefix \"tarantool-\" "
"before the module name to avoid ambiguity:"
msgstr ""
"Установите необходимый модуль. Найдите имя модуля на `странице со сторонними"
" библиотеками Tarantool <http://tarantool.org/rocks.html>`_  и введите "
"префикс \"tarantool-\" перед названием модуля во избежание неоднозначности:"

msgid ""
"$ # for Ubuntu/Debian:\n"
"$ sudo apt-get install tarantool-<module-name>\n"
"\n"
"$ # for RHEL/CentOS/Amazon:\n"
"$ sudo yum install tarantool-<module-name>"
msgstr ""
"$ # для Ubuntu/Debian:\n"
"$ sudo apt-get install tarantool-<module-name>\n"
"\n"
"$ # для RHEL/CentOS/Amazon:\n"
"$ sudo yum install tarantool-<module-name>"

msgid ""
"For example, to install the module `vshard "
"<http://github.com/tarantool/vshard>`_ on Ubuntu, say:"
msgstr ""
"Например, чтобы установить модуль `vshard "
"<http://github.com/tarantool/vshard>`_ на Ubuntu, введите:"

msgid "$ sudo apt-get install tarantool-vshard"
msgstr "$ sudo apt-get install tarantool-vshard"

msgid "Once these steps are complete, you can:"
msgstr "Теперь можно:"

msgid "load any module with"
msgstr "загружать любой модуль с помощью"

msgid "tarantool> name = require('module-name')"
msgstr "tarantool> name = require('module-name')"

msgid "for example:"
msgstr "например:"

msgid "tarantool> vshard = require('vshard')"
msgstr "tarantool> vshard = require('vshard')"

msgid ""
"search locally for installed modules using ``package.path`` (Lua) or "
"``package.cpath`` (C):"
msgstr ""
"локально находить установленные модули с помощью ``package.path`` (Lua) или "
"``package.cpath`` (C):"

msgid ""
"tarantool> package.path\n"
"---\n"
"- ./?.lua;./?/init.lua; /usr/local/share/tarantool/?.lua;/usr/local/share/\n"
"tarantool/?/init.lua;/usr/share/tarantool/?.lua;/usr/share/tarantool/?/ini\n"
"t.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/\n"
"usr/share/lua/5.1/?.lua;/usr/share/lua/5.1/?/init.lua;\n"
"...\n"
"\n"
"tarantool> package.cpath\n"
"---\n"
"- ./?.so;/usr/local/lib/x86_64-linux-gnu/tarantool/?.so;/usr/lib/x86_64-li\n"
"nux-gnu/tarantool/?.so;/usr/local/lib/tarantool/?.so;/usr/local/lib/x86_64\n"
"-linux-gnu/lua/5.1/?.so;/usr/lib/x86_64-linux-gnu/lua/5.1/?.so;/usr/local/\n"
"lib/lua/5.1/?.so;\n"
"..."
msgstr ""
"tarantool> package.path\n"
"---\n"
"- ./?.lua;./?/init.lua; /usr/local/share/tarantool/?.lua;/usr/local/share/\n"
"tarantool/?/init.lua;/usr/share/tarantool/?.lua;/usr/share/tarantool/?/ini\n"
"t.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/\n"
"usr/share/lua/5.1/?.lua;/usr/share/lua/5.1/?/init.lua;\n"
"...\n"
"\n"
"tarantool> package.cpath\n"
"---\n"
"- ./?.so;/usr/local/lib/x86_64-linux-gnu/tarantool/?.so;/usr/lib/x86_64-li\n"
"nux-gnu/tarantool/?.so;/usr/local/lib/tarantool/?.so;/usr/local/lib/x86_64\n"
"-linux-gnu/lua/5.1/?.so;/usr/lib/x86_64-linux-gnu/lua/5.1/?.so;/usr/local/\n"
"lib/lua/5.1/?.so;\n"
"..."

msgid ""
"Question-marks stand for the module name that was specified earlier when "
"saying ``require('module-name')``."
msgstr ""
"Знаки вопроса стоят вместо имени модуля, которое было указано ранее при "
"вызове ``require('module-name')``."

msgid "Reloading a module"
msgstr "Перезагрузка модуля"

msgid "You can reload any Tarantool application or module with zero downtime."
msgstr ""
"Любое приложение или модуль Tarantool можно перезагрузить с нулевым временем"
" простоя."

msgid "Reloading a module in Lua"
msgstr "Перезагрузка модуля на Lua"

msgid ""
"Here's an example that illustrates the most typical case -- \"update and "
"reload\"."
msgstr ""
"Ниже представлен пример, который иллюстрирует наиболее типичный случай -- "
"\"обновление и перезагрузка\"."

#, fuzzy
msgid ""
"In this example, we use recommended :ref:`administration practices <admin>` "
"based on :ref:`instance files <admin-instance_file>` and :ref:`tt <tt-cli>` "
"utility."
msgstr ""
"В этом примере используются рекомендованные :ref:`методики администрирования"
" <admin>` на основании :ref:`файлов экземпляров <admin-instance_file>` и "
"утилиты :ref:`tarantoolctl <tarantoolctl>`."

msgid "Update the application file."
msgstr "Обновите файлы приложения."

msgid "For example, a module in ``/usr/share/tarantool/app.lua``:"
msgstr "Например, модуль в ``/usr/share/tarantool/app.lua``:"

msgid ""
"local function start()\n"
"  -- initial version\n"
"  box.once(\"myapp:v1.0\", function()\n"
"    box.schema.space.create(\"somedata\")\n"
"    box.space.somedata:create_index(\"primary\")\n"
"    ...\n"
"  end)\n"
"\n"
"  -- migration code from 1.0 to 1.1\n"
"  box.once(\"myapp:v1.1\", function()\n"
"    box.space.somedata.index.primary:alter(...)\n"
"    ...\n"
"  end)\n"
"\n"
"  -- migration code from 1.1 to 1.2\n"
"  box.once(\"myapp:v1.2\", function()\n"
"    box.space.somedata.index.primary:alter(...)\n"
"    box.space.somedata:insert(...)\n"
"    ...\n"
"  end)\n"
"end\n"
"\n"
"-- start some background fibers if you need\n"
"\n"
"local function stop()\n"
"  -- stop all background fibers and clean up resources\n"
"end\n"
"\n"
"local function api_for_call(xxx)\n"
"  -- do some business\n"
"end\n"
"\n"
"return {\n"
"  start = start,\n"
"  stop = stop,\n"
"  api_for_call = api_for_call\n"
"}"
msgstr ""
"local function start()\n"
"  -- начальная версия\n"
"  box.once(\"myapp:v1.0\", function()\n"
"    box.schema.space.create(\"somedata\")\n"
"    box.space.somedata:create_index(\"primary\")\n"
"    ...\n"
"  end)\n"
"\n"
"  -- код миграции с 1.0 на 1.1\n"
"  box.once(\"myapp:v1.1\", function()\n"
"    box.space.somedata.index.primary:alter(...)\n"
"    ...\n"
"  end)\n"
"\n"
"  -- код миграции с 1.1 на 1.2\n"
"  box.once(\"myapp:v1.2\", function()\n"
"    box.space.somedata.index.primary:alter(...)\n"
"    box.space.somedata:insert(...)\n"
"    ...\n"
"  end)\n"
"end\n"
"\n"
"-- запустить файберы в фоновом режиме, если необходимо\n"
"\n"
"local function stop()\n"
"  -- остановить все файберы, работающие в фоновом режиме, и очистить ресурсы\n"
"end\n"
"\n"
"local function api_for_call(xxx)\n"
"  -- сделать что-то\n"
"end\n"
"\n"
"return {\n"
"  start = start,\n"
"  stop = stop,\n"
"  api_for_call = api_for_call\n"
"}"

msgid "Update the :ref:`instance file <admin-instance_file>`."
msgstr "Обновить :ref:`файл экземпляра <admin-instance_file>`."

msgid "For example, ``/etc/tarantool/instances.enabled/my_app.lua``:"
msgstr "Например, ``/etc/tarantool/instances.enabled/my_app.lua``:"

msgid ""
"#!/usr/bin/env tarantool\n"
"--\n"
"-- hot code reload example\n"
"--\n"
"\n"
"box.cfg({listen = 3302})\n"
"\n"
"-- ATTENTION: unload it all properly!\n"
"local app = package.loaded['app']\n"
"if app ~= nil then\n"
"  -- stop the old application version\n"
"  app.stop()\n"
"  -- unload the application\n"
"  package.loaded['app'] = nil\n"
"  -- unload all dependencies\n"
"  package.loaded['somedep'] = nil\n"
"end\n"
"\n"
"-- load the application\n"
"log.info('require app')\n"
"app = require('app')\n"
"\n"
"-- start the application\n"
"app.start({some app options controlled by sysadmins})"
msgstr ""
"#!/usr/bin/env tarantool\n"
"--\n"
"-- пример горячей перезагрузки кода\n"
"--\n"
"\n"
"box.cfg({listen = 3302})\n"
"\n"
"-- ВНИМАНИЕ: правильно выполните разгрузку!\n"
"local app = package.loaded['app']\n"
"if app ~= nil then\n"
"  -- остановите старую версию приложения\n"
"  app.stop()\n"
"  -- разгрузите приложение\n"
"  package.loaded['app'] = nil\n"
"  -- разгрузите все зависимости\n"
"  package.loaded['somedep'] = nil\n"
"end\n"
"\n"
"-- загрузите приложение\n"
"log.info('require app')\n"
"app = require('app')\n"
"\n"
"-- запустите приложение\n"
"app.start({some app options controlled by sysadmins})"

msgid ""
"The important thing here is to properly unload the application and its "
"dependencies."
msgstr "Самое главное -- правильно разгрузить приложение и его зависимости."

msgid "Manually reload the application file."
msgstr "Вручную перезагрузите файл приложения."

#, fuzzy
msgid "For example, using ``tt``:"
msgstr "Например, используя ``tarantoolctl``:"

#, fuzzy
msgid "$ tt connect my_app -f /etc/tarantool/instances.enabled/my_app.lua"
msgstr ""
"$ tarantoolctl eval my_app /etc/tarantool/instances.enabled/my_app.lua"

msgid "Reloading a module in C"
msgstr "Перезагрузка модуля на С"

msgid ""
"After you compiled a new version of a C module (``*.so`` shared library), "
"call :doc:`box.schema.func.reload('module-name') "
"</reference/reference_lua/box_schema/func_reload>` from your Lua script to "
"reload the module."
msgstr ""
"После компиляции новой версии модуля на C (библиотека общего пользования "
"``*.so``),  вызовите функцию :doc:`box.schema.func.reload('module-name') "
"</reference/reference_lua/box_schema/func_reload>` из Lua-скрипта для "
"перезагрузки модуля."
