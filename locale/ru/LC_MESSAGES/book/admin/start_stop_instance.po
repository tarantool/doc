
#, fuzzy
msgid "Starting and stopping instances"
msgstr "Запуск/остановка экземпляра"

msgid ""
"This section describes how to manage instances in a Tarantool cluster using "
"the :ref:`tt <tt-cli>` utility. A cluster can include multiple instances "
"that run different code. A typical example is a cluster application that "
"includes router and storage instances. Particularly, you can perform the "
"following actions:"
msgstr ""

msgid "start all instances in a cluster or only specific ones"
msgstr ""

msgid "check the status of instances"
msgstr ""

msgid "connect to a specific instance"
msgstr ""

msgid "stop all instances or only specific ones"
msgstr ""

msgid ""
"To get more context on how the application's environment might look, refer "
"to :ref:`Application environment <admin-instance_config>`."
msgstr ""

msgid ""
"In this section, a `sharded_cluster "
"<https://github.com/tarantool/doc/tree/latest/doc/code_snippets/snippets/sharding/instances.enabled/sharded_cluster>`_"
" application is used to demonstrate how to start, stop, and manage instances"
" in a cluster."
msgstr ""

#, fuzzy
msgid "Starting Tarantool instances"
msgstr "Запуск/остановка экземпляра"

msgid "Starting instances using the tt utility"
msgstr ""

msgid ""
"The :ref:`tt <tt-cli>` utility is the recommended way to start Tarantool "
"instances."
msgstr ""

msgid ""
"$ tt start sharded_cluster\n"
"   • Starting an instance [sharded_cluster:storage-a-001]...\n"
"   • Starting an instance [sharded_cluster:storage-a-002]...\n"
"   • Starting an instance [sharded_cluster:storage-b-001]...\n"
"   • Starting an instance [sharded_cluster:storage-b-002]...\n"
"   • Starting an instance [sharded_cluster:router-a-001]..."
msgstr ""

msgid ""
"After the cluster has started and worked for some time, you can find its "
"artifacts in the directories specified in the ``tt`` configuration. These "
"are the default locations in the local :ref:`launch mode <tt-config_modes>`:"
msgstr ""

msgid ""
"``sharded_cluster/var/log/<instance_name>/`` -- instance :ref:`logs <admin-"
"logs>`."
msgstr ""

msgid ""
"``sharded_cluster/var/lib/<instance_name>/`` -- :ref:`snapshots and write-"
"ahead logs <concepts-data_model-persistence>`."
msgstr ""

msgid ""
"``sharded_cluster/var/run/<instance_name>/`` -- control sockets and PID "
"files."
msgstr ""

msgid "In the system launch mode, artifacts are created in these locations:"
msgstr ""

#, fuzzy
msgid "``/var/log/tarantool/<instance_name>/``"
msgstr "$ tarantoolctl start <имя_экземпляра>"

#, fuzzy
msgid "``/var/lib/tarantool/<instance_name>/``"
msgstr "$ tarantoolctl start <имя_экземпляра>"

#, fuzzy
msgid "``/var/run/tarantool/<instance_name>/``"
msgstr "$ tarantoolctl start <имя_экземпляра>"

msgid "Starting an instance using the tarantool command"
msgstr ""

msgid ""
"The ``tarantool`` command provides additional :ref:`options "
"<configuration_command_options>` that might be helpful for development "
"purposes. Below is the syntax for starting a Tarantool instance configured "
"in a file:"
msgstr ""

msgid ""
"$ tarantool [OPTION ...] --name INSTANCE_NAME --config CONFIG_FILE_PATH"
msgstr ""

msgid ""
"The command below starts ``router-a-001`` configured in the ``config.yaml`` "
"file:"
msgstr ""

msgid "$ tarantool --name router-a-001 --config config.yaml"
msgstr ""

msgid "Basic instance management"
msgstr ""

msgid ""
"Most of the commands described in this section can be called with or without"
" an instance name. Without the instance name, they are executed for all "
"instances defined in ``instances.yaml``."
msgstr ""

msgid "Checking an instance's status"
msgstr ""

msgid ""
"To check the status of instances, execute :ref:`tt status <tt-status>`:"
msgstr ""

msgid ""
"$ tt status sharded_cluster\n"
"INSTANCE                          STATUS      PID\n"
"sharded_cluster:storage-a-001     RUNNING     2023\n"
"sharded_cluster:storage-a-002     RUNNING     2026\n"
"sharded_cluster:storage-b-001     RUNNING     2020\n"
"sharded_cluster:storage-b-002     RUNNING     2021\n"
"sharded_cluster:router-a-001      RUNNING     2022"
msgstr ""

msgid ""
"To check the status of a specific instance, you need to specify its name:"
msgstr ""

msgid ""
"$ tt status sharded_cluster:storage-a-001\n"
"INSTANCE                          STATUS      PID\n"
"sharded_cluster:storage-a-001     RUNNING     2023"
msgstr ""

#, fuzzy
msgid "Connecting to an instance"
msgstr "Запуск/остановка экземпляра"

msgid ""
"To connect to the instance, use the :ref:`tt connect <tt-connect>` command:"
msgstr ""

msgid ""
"$ tt connect sharded_cluster:storage-a-001\n"
"   • Connecting to the instance...\n"
"   • Connected to sharded_cluster:storage-a-001\n"
"\n"
"sharded_cluster:storage-a-001>"
msgstr ""

msgid ""
"In the instance's console, you can execute commands provided by the "
":ref:`box <box-module>` module. For example, :ref:`box.info "
"<box_introspection-box_info>` can be used to get various information about a"
" running instance:"
msgstr ""

msgid ""
"sharded_cluster:storage-a-001> box.info.ro\n"
"---\n"
"- false\n"
"..."
msgstr ""

#, fuzzy
msgid "Restarting instances"
msgstr "Запуск/остановка экземпляра"

msgid "To restart an instance, use :ref:`tt restart <tt-restart>`:"
msgstr ""

msgid "$ tt restart sharded_cluster:storage-a-002"
msgstr ""

msgid "After executing ``tt restart``, you need to confirm this operation:"
msgstr ""

msgid ""
"Confirm restart of 'sharded_cluster:storage-a-002' [y/n]: y\n"
"   • The Instance sharded_cluster:storage-a-002 (PID = 2026) has been terminated.\n"
"   • Starting an instance [sharded_cluster:storage-a-002]..."
msgstr ""

#, fuzzy
msgid "Stopping instances"
msgstr "Запуск/остановка экземпляра"

msgid ""
"To stop the specific instance, use :ref:`tt stop <tt-stop>` as follows:"
msgstr ""

msgid "$ tt stop sharded_cluster:storage-a-002"
msgstr ""

msgid "You can also stop all the instances at once as follows:"
msgstr ""

msgid ""
"$ tt stop sharded_cluster\n"
"   • The Instance sharded_cluster:storage-b-001 (PID = 2020) has been terminated.\n"
"   • The Instance sharded_cluster:storage-b-002 (PID = 2021) has been terminated.\n"
"   • The Instance sharded_cluster:router-a-001 (PID = 2022) has been terminated.\n"
"   • The Instance sharded_cluster:storage-a-001 (PID = 2023) has been terminated.\n"
"   • can't \"stat\" the PID file. Error: \"stat /home/testuser/myapp/instances.enabled/sharded_cluster/var/run/storage-a-002/tt.pid: no such file or directory\""
msgstr ""

msgid ""
"The error message indicates that ``storage-a-002`` is already not running."
msgstr ""

msgid "Removing instance artifacts"
msgstr ""

msgid ""
"The :ref:`tt clean <tt-clean>` command removes instance artifacts (such as "
"logs or snapshots):"
msgstr ""

msgid ""
"$ tt clean sharded_cluster\n"
"   • List of files to delete:\n"
"\n"
"   • /home/testuser/myapp/instances.enabled/sharded_cluster/var/log/storage-a-001/tt.log\n"
"   • /home/testuser/myapp/instances.enabled/sharded_cluster/var/lib/storage-a-001/00000000000000001062.snap\n"
"   • /home/testuser/myapp/instances.enabled/sharded_cluster/var/lib/storage-a-001/00000000000000001062.xlog\n"
"   • ...\n"
"\n"
"Confirm [y/n]:"
msgstr ""

msgid ""
"Enter ``y`` and press ``Enter`` to confirm removing of artifacts for each "
"instance."
msgstr ""

msgid ""
"The ``-f`` option of the ``tt clean`` command can be used to remove the "
"files without confirmation."
msgstr ""

msgid "Preloading Lua scripts and modules"
msgstr ""

msgid ""
"Tarantool supports loading and running chunks of Lua code before starting "
"instances. To load or run Lua code immediately upon Tarantool startup, "
"specify the ``TT_PRELOAD`` environment variable. Its value can be either a "
"path to a Lua script or a Lua module name:"
msgstr ""

msgid ""
"To run the Lua script ``preload_script.lua`` from the ``sharded_cluster`` "
"directory, set ``TT_PRELOAD`` as follows:"
msgstr ""

msgid "$ TT_PRELOAD=preload_script.lua tt start sharded_cluster"
msgstr ""

msgid ""
"Tarantool runs the ``preload_script.lua`` code, waits for it to complete, "
"and then starts instances."
msgstr ""

msgid ""
"To load the ``preload_module`` from the ``sharded_cluster`` directory, set "
"``TT_PRELOAD`` as follows:"
msgstr ""

msgid "$ TT_PRELOAD=preload_module tt start sharded_cluster"
msgstr ""

msgid ""
"``TT_PRELOAD`` values that end with ``.lua`` are considered scripts, so "
"avoid module names with this ending."
msgstr ""

msgid ""
"To load several scripts or modules, pass them in a single quoted string, "
"separated by semicolons:"
msgstr ""

msgid ""
"$ TT_PRELOAD=\"preload_script.lua;preload_module\" tt start sharded_cluster"
msgstr ""

msgid ""
"If an error happens during the execution of the preload script or module, "
"Tarantool reports the problem and exits."
msgstr ""

msgid "tarantool command-line options"
msgstr ""

msgid ""
"Options that can be passed when :ref:`starting a Tarantool instance "
"<configuration_run_instance_tarantool>`:"
msgstr ""

msgid "Print an annotated list of all available options and exit."
msgstr ""

msgid "**Since:** :doc:`3.0.0 </release/3.0.0>`."
msgstr ""

msgid ""
"Show a list of :ref:`environment variables "
"<configuration_environment_variable>` that can be used to configure "
"Tarantool."
msgstr ""

msgid "Print the product name and version."
msgstr ""

msgid "**Example**"
msgstr ""

msgid ""
"$ tarantool --version\n"
"Tarantool Enterprise 3.0.0-beta1-2-gcbb569b4c-r607-gc64\n"
"Target: Linux-x86_64-RelWithDebInfo\n"
"..."
msgstr ""

msgid "In this example:"
msgstr ""

msgid ""
"``3.0.0`` is a Tarantool version. Tarantool follows semantic versioning, "
"which is described in the :ref:`Tarantool release policy <release-policy>` "
"section."
msgstr ""

msgid ""
"``Target`` is the platform Tarantool is built on. Platform-specific details "
"may follow this line."
msgstr ""

msgid ""
"Set a path to a :ref:`YAML configuration file <configuration_file>`. You can"
" also configure this value using the ``TT_CONFIG`` environment variable."
msgstr ""

msgid ""
"See also: :ref:`Starting an instance using the tarantool command "
"<configuration_run_instance_tarantool>`"
msgstr ""

msgid ""
"Set the name of an instance to run. You can also configure this value using "
"the ``TT_INSTANCE_NAME`` environment variable."
msgstr ""

msgid "Enter an :ref:`interactive mode <interactive_console>`."
msgstr ""

#, fuzzy
msgid "$ tarantool -i"
msgstr "$ rm -R tarantool_test"

msgid ""
"Execute the 'EXPR' string. See also: `lua man page "
"<https://www.lua.org/manual/5.3/lua.html>`_."
msgstr ""

msgid ""
"$ tarantool -e 'print(\"Hello, world!\")'\n"
"Hello, world!"
msgstr ""

msgid ""
"Require the 'NAME' library. See also: `lua man page "
"<https://www.lua.org/manual/5.3/lua.html>`_."
msgstr ""

msgid "$ tarantool -l luatest.coverage script.lua"
msgstr ""

msgid ""
"Perform a LuaJIT control command. See also: `Command Line Options "
"<https://luajit.org/running.html>`_."
msgstr ""

#, fuzzy
msgid "$ tarantool -j off app.lua"
msgstr "$ tarantoolctl stop my_app"

msgid ""
"Save or list bytecode. See also: `Command Line Options "
"<https://luajit.org/running.html>`_."
msgstr ""

msgid "$ tarantool -b test.lua test.out"
msgstr ""

msgid ""
"Activate a debugging session for 'SCRIPT'. See also: `luadebug.lua "
"<https://github.com/tarantool/tarantool/blob/master/third_party/lua/README-"
"luadebug.md>`_."
msgstr ""

#, fuzzy
msgid "$ tarantool -d app.lua"
msgstr "$ tarantoolctl stop my_app"

msgid ""
"Stop handling options. See also: `lua man page "
"<https://www.lua.org/manual/5.3/lua.html>`_."
msgstr ""

msgid ""
"Stop handling options and execute the standard input as a file. See also: "
"`lua man page <https://www.lua.org/manual/5.3/lua.html>`_."
msgstr ""

#~ msgid ""
#~ "While a Lua application is executed by Tarantool, an instance file is "
#~ "executed by ``tarantoolctl`` which is a Tarantool script."
#~ msgstr ""
#~ "Lua-приложение выполняется Tarantool, тогда как файл экземпляра выполняется "
#~ "Tarantool-скриптом ``tarantoolctl``."

#~ msgid "Here is what ``tarantoolctl`` does when you issue the command:"
#~ msgstr "Вот что делает ``tarantoolctl`` при вводе следующей команды:"

#~ msgid ""
#~ "Read and parse the command line arguments. The last argument, in our case, "
#~ "contains an instance name."
#~ msgstr ""
#~ "Считывает и разбирает аргументы командной строки. В нашем случае последний "
#~ "аргумент содержит имя экземпляра."

#~ msgid ""
#~ "Read and parse its own configuration file. This file contains "
#~ "``tarantoolctl`` defaults, like the path to the directory where instances "
#~ "should be searched for."
#~ msgstr ""
#~ "Считывает и разбирает собственный конфигурационный файл. Этот файл содержит "
#~ "параметры ``tarantoolctl`` по умолчанию -- такие как путь до директории, в "
#~ "которой располагаются экземпляры."

#~ msgid ""
#~ "When ``tarantool`` is invoked by root, it looks for a configuration file in "
#~ "``/etc/default/tarantool``. When ``tarantool`` is invoked by a local (non-"
#~ "root) user, it looks for a configuration file first in the current directory"
#~ " (``$PWD/.tarantoolctl``), and then in the current user's home directory "
#~ "(``$HOME/.config/tarantool/tarantool``). If no configuration file is found "
#~ "there, or in the ``/usr/local/etc/default/tarantool`` file, then "
#~ "``tarantoolctl`` falls back to :ref:`built-in defaults <admin-"
#~ "tarantoolctl_config_file>`."
#~ msgstr ""
#~ "Когда ``tarantoolctl`` вызывается с root-правами, он ищет конфигурационный "
#~ "файл в ``/etc/default/tarantool``. Если вызов ``tarantool`` производит "
#~ "локальный пользователь, сначала он ищет конфигурационный файл в текущей "
#~ "директории (``$PWD/.tarantoolctl``), а затем в домашней директории текущего "
#~ "пользователя (``$HOME/.config/tarantool/tarantool``). Если конфигурационный "
#~ "файл не найден, ``tarantoolctl`` принимает :ref:`встроенные параметры по "
#~ "умолчанию <admin-tarantoolctl_config_file>`."

#~ msgid ""
#~ "Look up the instance file in the instance directory, for example "
#~ "``/etc/tarantool/instances.enabled``. To build the instance file path, "
#~ "``tarantoolctl`` takes the instance name, prepends the instance directory "
#~ "and appends \".lua\" extension to the instance file."
#~ msgstr ""
#~ "Ищет файл экземпляра в директории, где располагаются экземпляры, например, в"
#~ " ``/etc/tarantool/instances.enabled``. ``tarantoolctl`` строит путь до файла"
#~ " экземпляра следующим образом: \"путь до директории с экземплярами\" + \"имя"
#~ " экземпляра\" + \".lua\"."

#~ msgid ""
#~ "Override :doc:`box.cfg{} </reference/reference_lua/box_cfg>` function to "
#~ "pre-process its parameters and ensure that instance paths are pointing to "
#~ "the paths defined in the ``tarantoolctl`` configuration file. For example, "
#~ "if the configuration file specifies that instance work directory must be in "
#~ "``/var/tarantool``, then the new implementation of ``box.cfg{}`` ensures "
#~ "that :ref:`work_dir <cfg_basic-work_dir>` parameter in ``box.cfg{}`` is set "
#~ "to ``/var/tarantool/<instance_name>``, regardless of what the path is set to"
#~ " in the instance file itself."
#~ msgstr ""
#~ "Переопределяет функцию :doc:`box.cfg{} </reference/reference_lua/box_cfg>`, "
#~ "чтобы предобработать ее параметры и сделать так, чтобы пути к экземплярам  "
#~ "указывали на пути, прописанные в конфигурационном файле ``tarantoolctl``. "
#~ "Например, если в конфигурационном файле указано, что рабочей директорией "
#~ "экземпляра является ``/var/tarantool``, то новая реализация ``box.cfg{}`` "
#~ "сделает так, чтобы параметр :ref:`work_dir <cfg_basic-work_dir>` в "
#~ "``box.cfg{}`` имел значение ``/var/tarantool/<имя_экземпляра>``, независимо "
#~ "от того, какой путь указан в самом файле экземпляра."

#~ msgid ""
#~ "Create a so-called \"instance control file\". This is a Unix socket with Lua"
#~ " console attached to it. This file is used later by ``tarantoolctl`` to "
#~ "query the instance state, send commands to the instance and so on."
#~ msgstr ""
#~ "Создает так называемый \"файл для управления экземпляром\". Это Unix-сокет с"
#~ " прикрепленной к нему Lua-консолью. В дальнейшем ``tarantoolctl`` использует"
#~ " этот файл для получения состояния экземпляра,  отправки команд и т.д."

#~ msgid ""
#~ "Set the TARANTOOLCTL environment variable to 'true'. This allows the user to"
#~ " know that the instance was started by ``tarantoolctl``."
#~ msgstr ""
#~ "Задает значение переменной окружения TARANTOOLCTL = 'true'. Это позволит "
#~ "пользователю понять, что экземпляр был запущен ``tarantoolctl``."

#~ msgid "Finally, use Lua ``dofile`` command to execute the instance file."
#~ msgstr ""
#~ "Наконец, использует Lua-команду ``dofile`` для выполнения файла экземпляра."

#~ msgid ""
#~ "If you start an instance using ``systemd`` tools, like this (the instance "
#~ "name is ``my_app``):"
#~ msgstr ""
#~ "При запуске экземпляра с помощью инструментария ``systemd`` указанным ниже "
#~ "способом (имя экземпляра -- ``my_app``):"

#~ msgid ""
#~ "$ systemctl start tarantool@my_app\n"
#~ "$ ps axuf|grep my_app\n"
#~ "taranto+  5350  1.3  0.3 1448872 7736 ?        Ssl  20:05   0:28 tarantool my_app.lua <running>"
#~ msgstr ""
#~ "$ systemctl start tarantool@my_app\n"
#~ "$ ps axuf|grep my_app\n"
#~ "taranto+  5350  1.3  0.3 1448872 7736 ?        Ssl  20:05   0:28 tarantool my_app.lua <running>"

#~ msgid ""
#~ "... this actually calls ``tarantoolctl`` like in case of ``tarantoolctl "
#~ "start my_app``."
#~ msgstr ""
#~ "...на самом деле вызывается ``tarantoolctl`` -- так же, как и в случае "
#~ "``tarantoolctl start my_app``."

#~ msgid ""
#~ "To check the instance file for syntax errors prior to starting ``my_app`` "
#~ "instance, say:"
#~ msgstr ""
#~ "Для проверки файла экземпляра на наличие синтаксических ошибок перед "
#~ "запуском экземпляра ``my_app`` используйте команду:"

#~ msgid "$ tarantoolctl check my_app"
#~ msgstr "$ tarantoolctl check my_app"

#~ msgid ""
#~ "To enable ``my_app`` instance for auto-load during system startup, say:"
#~ msgstr ""
#~ "Для включения автоматической загрузки экземпляра ``my_app`` при запуске всей"
#~ " системы используйте команду:"

#~ msgid "$ systemctl enable tarantool@my_app"
#~ msgstr "$ systemctl enable tarantool@my_app"

#~ msgid "To stop a running ``my_app`` instance, say:"
#~ msgstr "Для остановки работающего экземпляра ``my_app`` используйте команду:"

#~ msgid ""
#~ "$ tarantoolctl stop my_app\n"
#~ "$ # - OR -\n"
#~ "$ systemctl stop tarantool@my_app"
#~ msgstr ""
#~ "$ tarantoolctl stop my_app\n"
#~ "$ # - ИЛИ -\n"
#~ "$ systemctl stop tarantool@my_app"

#~ msgid "To restart (i.e. stop and start) a running ``my_app`` instance, say:"
#~ msgstr ""
#~ "Для перезапуска (т.е. остановки и запуска) работающего экземпляра ``my_app``"
#~ " используйте команду:"

#~ msgid ""
#~ "$ tarantoolctl restart my_app\n"
#~ "$ # - OR -\n"
#~ "$ systemctl restart tarantool@my_app"
#~ msgstr ""
#~ "$ tarantoolctl restart my_app\n"
#~ "$ # - ИЛИ -\n"
#~ "$ systemctl restart tarantool@my_app"

#~ msgid "Running Tarantool locally"
#~ msgstr "Локальный запуск Tarantool"

#~ msgid ""
#~ "Sometimes you may need to run a Tarantool instance locally, e.g. for test "
#~ "purposes. Let's configure a local instance, then start and monitor it with "
#~ "``tarantoolctl``."
#~ msgstr ""
#~ "Иногда бывает необходимо запустить Tarantool локально -- например, для "
#~ "тестирования. Давайте настроим локальный экземпляр, запустим его и будем "
#~ "мониторить с помощью ``tarantoolctl``."

#~ msgid "First, we create a sandbox directory on the user's path:"
#~ msgstr "Сперва создадим директорию-песочницу по следующему пути:"

#~ msgid "$ mkdir ~/tarantool_test"
#~ msgstr "$ mkdir ~/tarantool_test"

#~ msgid ""
#~ "... and set default ``tarantoolctl`` configuration in "
#~ "``$HOME/.config/tarantool/tarantool``. Let the file contents be:"
#~ msgstr ""
#~ "...и поместим конфигурационный файл с параметрами ``tarantoolctl`` по "
#~ "умолчанию в ``$HOME/.config/tarantool/tarantool``. Содержимое файла будет "
#~ "таким:"

#~ msgid ""
#~ "default_cfg = {\n"
#~ "    pid_file  = \"/home/user/tarantool_test/my_app.pid\",\n"
#~ "    wal_dir   = \"/home/user/tarantool_test\",\n"
#~ "    snap_dir  = \"/home/user/tarantool_test\",\n"
#~ "    vinyl_dir = \"/home/user/tarantool_test\",\n"
#~ "    log       = \"/home/user/tarantool_test/log\",\n"
#~ "}\n"
#~ "instance_dir = \"/home/user/tarantool_test\""
#~ msgstr ""
#~ "default_cfg = {\n"
#~ "    pid_file  = \"/home/user/tarantool_test/my_app.pid\",\n"
#~ "    wal_dir   = \"/home/user/tarantool_test\",\n"
#~ "    snap_dir  = \"/home/user/tarantool_test\",\n"
#~ "    vinyl_dir = \"/home/user/tarantool_test\",\n"
#~ "    log       = \"/home/user/tarantool_test/log\",\n"
#~ "}\n"
#~ "instance_dir = \"/home/user/tarantool_test\""

#~ msgid "Specify a full path to the user's home directory instead of \"~/\"."
#~ msgstr "Указывайте полный путь к домашней директории пользователя вместо \"~/\"."

#~ msgid ""
#~ "Omit ``username`` parameter. ``tarantoolctl`` normally doesn't have "
#~ "permissions to switch current user when invoked by a local user. The "
#~ "instance will be running under 'admin'."
#~ msgstr ""
#~ "Опустите параметр ``username``. Обычно, когда запуск производит локальный  "
#~ "пользователь, у ``tarantoolctl`` нет разрешения на смену текущего "
#~ "пользователя. Экземпляр будет работать с пользователем 'admin'."

#~ msgid ""
#~ "Next, we create the instance file ``~/tarantool_test/my_app.lua``. Let the "
#~ "file contents be:"
#~ msgstr ""
#~ "Далее создадим файл экземпляра ``~/tarantool_test/my_app.lua``. Содержимое "
#~ "файла будет таким:"

#~ msgid ""
#~ "box.cfg{listen = 3301}\n"
#~ "box.schema.user.passwd('Gx5!')\n"
#~ "box.schema.user.grant('guest','read,write,execute','universe')\n"
#~ "fiber = require('fiber')\n"
#~ "box.schema.space.create('tester')\n"
#~ "box.space.tester:create_index('primary',{})\n"
#~ "i = 0\n"
#~ "while 0 == 0 do\n"
#~ "    fiber.sleep(5)\n"
#~ "    i = i + 1\n"
#~ "    print('insert ' .. i)\n"
#~ "    box.space.tester:insert{i, 'my_app tuple'}\n"
#~ "end"
#~ msgstr ""
#~ "box.cfg{listen = 3301}\n"
#~ "box.schema.user.passwd('Gx5!')\n"
#~ "box.schema.user.grant('guest','read,write,execute','universe')\n"
#~ "fiber = require('fiber')\n"
#~ "box.schema.space.create('tester')\n"
#~ "box.space.tester:create_index('primary',{})\n"
#~ "i = 0\n"
#~ "while 0 == 0 do\n"
#~ "    fiber.sleep(5)\n"
#~ "    i = i + 1\n"
#~ "    print('insert ' .. i)\n"
#~ "    box.space.tester:insert{i, 'my_app tuple'}\n"
#~ "end"

#~ msgid ""
#~ "Let’s verify our instance file by starting it without ``tarantoolctl`` "
#~ "first:"
#~ msgstr ""
#~ "Проверим наш файл экземпляра, сперва запустив его без ``tarantoolctl``:"

#~ msgid ""
#~ "$ cd ~/tarantool_test\n"
#~ "$ tarantool my_app.lua\n"
#~ "2017-04-06 10:42:15.762 [54085] main/101/my_app.lua C> version 1.7.3-489-gd86e36d5b\n"
#~ "2017-04-06 10:42:15.763 [54085] main/101/my_app.lua C> log level 5\n"
#~ "2017-04-06 10:42:15.764 [54085] main/101/my_app.lua I> mapping 268435456 bytes for tuple arena...\n"
#~ "2017-04-06 10:42:15.774 [54085] iproto/101/main I> binary: bound to [::]:3301\n"
#~ "2017-04-06 10:42:15.774 [54085] main/101/my_app.lua I> initializing an empty data directory\n"
#~ "2017-04-06 10:42:15.789 [54085] snapshot/101/main I> saving snapshot `./00000000000000000000.snap.inprogress'\n"
#~ "2017-04-06 10:42:15.790 [54085] snapshot/101/main I> done\n"
#~ "2017-04-06 10:42:15.791 [54085] main/101/my_app.lua I> vinyl checkpoint done\n"
#~ "2017-04-06 10:42:15.791 [54085] main/101/my_app.lua I> ready to accept requests\n"
#~ "insert 1\n"
#~ "insert 2\n"
#~ "insert 3\n"
#~ "<...>"
#~ msgstr ""
#~ "$ cd ~/tarantool_test\n"
#~ "$ tarantool my_app.lua\n"
#~ "2017-04-06 10:42:15.762 [54085] main/101/my_app.lua C> version 1.7.3-489-gd86e36d5b\n"
#~ "2017-04-06 10:42:15.763 [54085] main/101/my_app.lua C> log level 5\n"
#~ "2017-04-06 10:42:15.764 [54085] main/101/my_app.lua I> mapping 268435456 bytes for tuple arena...\n"
#~ "2017-04-06 10:42:15.774 [54085] iproto/101/main I> binary: bound to [::]:3301\n"
#~ "2017-04-06 10:42:15.774 [54085] main/101/my_app.lua I> initializing an empty data directory\n"
#~ "2017-04-06 10:42:15.789 [54085] snapshot/101/main I> saving snapshot `./00000000000000000000.snap.inprogress'\n"
#~ "2017-04-06 10:42:15.790 [54085] snapshot/101/main I> done\n"
#~ "2017-04-06 10:42:15.791 [54085] main/101/my_app.lua I> vinyl checkpoint done\n"
#~ "2017-04-06 10:42:15.791 [54085] main/101/my_app.lua I> ready to accept requests\n"
#~ "insert 1\n"
#~ "insert 2\n"
#~ "insert 3\n"
#~ "<...>"

#~ msgid "Now we tell ``tarantoolctl`` to start the Tarantool instance:"
#~ msgstr "Запустим экземпляр Tarantool с помощью ``tarantoolctl``:"

#~ msgid "$ tarantoolctl start my_app"
#~ msgstr "$ tarantoolctl start my_app"

#~ msgid "Expect to see messages indicating that the instance has started. Then:"
#~ msgstr ""
#~ "В консоли должны появиться сообщения о том, что экземпляр запущен. Затем "
#~ "выполним следующую команду:"

#~ msgid "$ ls -l ~/tarantool_test/my_app"
#~ msgstr "$ ls -l ~/tarantool_test/my_app"

#~ msgid "Expect to see the .snap file and the .xlog file. Then:"
#~ msgstr ""
#~ "В консоли должны появиться .snap-файл и .xlog-файл. Затем выполним следующую"
#~ " команду:"

#~ msgid "$ less ~/tarantool_test/log/my_app.log"
#~ msgstr "$ less ~/tarantool_test/log/my_app.log"

#~ msgid ""
#~ "Expect to see the contents of ``my_app``‘s log, including error messages, if"
#~ " any. Then:"
#~ msgstr ""
#~ "В консоли должно отобразиться содержимое файла журнала для приложения "
#~ "``my_app``, в том числе сообщения об ошибках, если они были. Затем выполним "
#~ "серию команд:"

#~ msgid ""
#~ "$ tarantoolctl enter my_app\n"
#~ "tarantool> box.cfg{}\n"
#~ "tarantool> console = require('console')\n"
#~ "tarantool> console.connect('localhost:3301')\n"
#~ "tarantool> box.space.tester:select({0}, {iterator = 'GE'})"
#~ msgstr ""
#~ "$ tarantoolctl enter my_app\n"
#~ "tarantool> box.cfg{}\n"
#~ "tarantool> console = require('console')\n"
#~ "tarantool> console.connect('localhost:3301')\n"
#~ "tarantool> box.space.tester:select({0}, {iterator = 'GE'})"

#~ msgid "Expect to see several tuples that ``my_app`` has created."
#~ msgstr ""
#~ "В консоли должны появиться несколько кортежей, которые создало приложение "
#~ "``my_app``."

#~ msgid ""
#~ "Stop now. A polite way to stop ``my_app`` is with ``tarantoolctl``, thus we "
#~ "say:"
#~ msgstr ""
#~ "Теперь остановим приложение ``my_app``. Корректный способ остановки -- это "
#~ "использовать``tarantoolctl``:"

#~ msgid "Finally, we make a cleanup."
#~ msgstr "Последний шаг -- удаление тестовых данных."
