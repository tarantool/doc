
msgid "Fix illegal type names when upgrading to 2.10.4"
msgstr ""

msgid ""
"This is an upgrade guide for fixing one specific problem which could happen "
"with field type names. It's only relevant when you're upgrading from a "
"Tarantool version <=2.10.3 to >=2.10.4."
msgstr ""

msgid ""
"Before :tarantool-issue:`5940` was fixed, the empty string, ``n``, ``nu``, "
"``s``, and ``st`` (that is, leading parts of ``num`` and ``str``) were "
"accepted as valid field types. Since 2.10.4, Tarantool doesn't accept these "
"strings and they must be replaced with correct values ``num`` and ``str``."
msgstr ""

msgid ""
"This instruction is also available on `GitHub "
"<https://github.com/tarantool/tarantool/wiki/Fix-illegal-field-type-in-a-"
"space-format-when-upgrading-to-2.10.4>`__."
msgstr ""

msgid "Check if your snapshots contain illegal type names"
msgstr ""

msgid ""
"A snapshot can be validated against the issue using the following script:"
msgstr ""

#, python-format
msgid ""
"#!/usr/bin/env tarantool\n"
"\n"
"local xlog = require('xlog')\n"
"local json = require('json')\n"
"\n"
"if arg[1] == nil then\n"
"    print(('Usage: %s xxxxxxxxxxxxxxxxxxxx.snap'):format(arg[0]))\n"
"    os.exit(1)\n"
"end\n"
"\n"
"local illegal_types = {\n"
"    [''] = true,\n"
"    ['n'] = true,\n"
"    ['nu'] = true,\n"
"    ['s'] = true,\n"
"    ['st'] = true,\n"
"}\n"
"\n"
"local function report_field_def(name, field_def)\n"
"    local msg = 'A field def in a _space entry %q contains an illegal type: %s'\n"
"    print(msg:format(name, json.encode(field_def)))\n"
"end\n"
"\n"
"local has_broken_format = false\n"
"\n"
"for _, record in xlog.pairs(arg[1]) do\n"
"    -- Filter inserts.\n"
"    if record.HEADER == nil or record.HEADER.type ~= 'INSERT' then\n"
"        goto continue\n"
"    end\n"
"    -- Filter _space records.\n"
"    if record.BODY == nil or record.BODY.space_id ~= 280 then\n"
"        goto continue\n"
"    end\n"
"\n"
"    local tuple = record.BODY.tuple\n"
"    local name = tuple[3]\n"
"    local format = tuple[7]\n"
"\n"
"    local is_format_broken = false\n"
"    for _, field_def in ipairs(format) do\n"
"        if illegal_types[field_def.type] ~= nil then\n"
"            report_field_def(name, field_def)\n"
"            is_format_broken = true\n"
"        end\n"
"\n"
"        if illegal_types[field_def[2]] ~= nil then\n"
"            report_field_def(name, field_def)\n"
"            is_format_broken = true\n"
"        end\n"
"\n"
"    end\n"
"\n"
"    if is_format_broken then\n"
"        has_broken_format = true\n"
"        local msg = 'The following _space entry contains illegal type(s): %s'\n"
"        print(msg:format(json.encode(record)))\n"
"    end\n"
"    ::continue::\n"
"end\n"
"\n"
"if has_broken_format then\n"
"    print('')\n"
"    print(('%s has an illegal type in a space format'):format(arg[1]))\n"
"    print('It is recommended to proceed with the upgrade instruction:')\n"
"    print('https://github.com/tarantool/tarantool/wiki/Fix-illegal-field-type-in-a-space-format-when-upgrading-to-2.10.4')\n"
"else\n"
"    print('Everything looks nice!')\n"
"end\n"
"\n"
"os.exit(has_broken_format and 2 or 0)"
msgstr ""

msgid ""
"If the snapshot contains the values that aren't valid in 2.10.4, you'll get "
"an output like the following:"
msgstr ""

msgid "Fix an application file"
msgstr ""

msgid ""
"To fix the application file that contains illegal type names, add the "
"following code in it **before** the "
"``box.cfg()``/``vshard.cfg()``/``cartridge.cfg()`` call."
msgstr ""

msgid "In Cartridge applications, the instance file is called ``init.lua``."
msgstr ""

#, python-format
msgid ""
"-- Convert illegal type names in a space format that were\n"
"-- allowed before tarantool 2.10.4.\n"
"\n"
"local log = require('log')\n"
"local json = require('json')\n"
"\n"
"local transforms = {\n"
"    [''] = 'num',\n"
"    ['n'] = 'num',\n"
"    ['nu'] = 'num',\n"
"    ['s'] = 'str',\n"
"    ['st'] = 'str',\n"
"}\n"
"\n"
"-- The helper for before_replace().\n"
"local function transform_field_def(name, field_def, field, new_type)\n"
"    local field_def_old_str = json.encode(field_def)\n"
"    field_def[field] = new_type\n"
"    local field_def_new_str = json.encode(field_def)\n"
"\n"
"    local msg = 'Transform a field def in a _space entry %q: %s -> %s'\n"
"    log.info(msg:format(name, field_def_old_str, field_def_new_str))\n"
"end\n"
"\n"
"-- _space trigger.\n"
"local function before_replace(_, tuple)\n"
"    if tuple == nil then return tuple end\n"
"\n"
"    local name = tuple[3]\n"
"    local format = tuple[7]\n"
"\n"
"    -- Update format if necessary.\n"
"    local is_format_changed = false\n"
"    for i, field_def in ipairs(format) do\n"
"        local new_type = transforms[field_def.type]\n"
"        if new_type ~= nil then\n"
"            transform_field_def(name, field_def, 'type', new_type)\n"
"            is_format_changed = true\n"
"        end\n"
"\n"
"        local new_type = transforms[field_def[2]]\n"
"        if new_type ~= nil then\n"
"            transform_field_def(name, field_def, 2, new_type)\n"
"            is_format_changed = true\n"
"        end\n"
"    end\n"
"\n"
"    -- No changed: skip.\n"
"    if not is_format_changed then return tuple end\n"
"\n"
"    -- Rebuild the tuple.\n"
"    local new_tuple = tuple:transform(7, 1, format)\n"
"    log.info(('Transformed _space entry %s to %s'):format(\n"
"        json.encode(tuple), json.encode(new_tuple)))\n"
"    return new_tuple\n"
"end\n"
"\n"
"-- on_schema_init trigger to set before_replace().\n"
"local function on_schema_init()\n"
"    box.space._space:before_replace(before_replace)\n"
"end\n"
"\n"
"-- Set the trigger on _space.\n"
"box.ctl.on_schema_init(on_schema_init)"
msgstr ""

msgid ""
"You can delete these triggers **after** the "
"``box.cfg()``/``vshard.cfg()``/``cartridge.cfg()`` call."
msgstr ""

msgid "An example for a Cartridge application:"
msgstr ""

msgid "The triggers will report the changes the make in the following form:"
msgstr ""
