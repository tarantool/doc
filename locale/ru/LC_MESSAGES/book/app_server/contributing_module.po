# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-06 14:05+0000\n"
"PO-Revision-Date: 2019-12-06 16:11+0300\n"
"Last-Translator: \n"
"Language: ru\n"
"Language-Team: \n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

msgid "Contributing a module"
msgstr "Добавление собственного модуля"

msgid ""
"We have already discussed :ref:`how to create a simple module in Lua for "
"local usage <app_server-modules>`. Now let's discuss how to create a more"
" advanced Tarantool module and then get it published on `Tarantool rocks "
"page <http://tarantool.org/rocks.html>`_ and included in `official "
"Tarantool images <http://github.com/tarantool/docker>`_ for Docker."
msgstr ""
"Мы уже обсуждали, :ref:`как создать простой модуль на языке Lua для "
"локального использования <app_server-modules>`.Теперь давайте обсудим, "
"как создать модуль более продвинутого уровня для Tarantool'а, а затем "
"разместить его на странице модулей Tarantool'а "
"<http://tarantool.org/rocks.html>`_ и включить его в `официальные образы "
"Tarantool'а <http://github.com/tarantool/docker>`_ для Docker."

msgid ""
"To help our contributors, we have created `modulekit "
"<http://github.com/tarantool/modulekit>`_, a set of templates for "
"creating Tarantool modules in Lua and C."
msgstr ""
"Чтобы помочь разработчикам, мы создали `modulekit "
"<http://github.com/tarantool/modulekit>`_, набор шаблонов для создания "
"Tarantool-модулей на Lua и C."

msgid ""
"As a prerequisite for using ``modulekit``, install ``tarantool-dev`` "
"package first. For example, in Ubuntu say:"
msgstr ""
"Чтобы использовать ``modulekit``, необходимо предварительно установить "
"пакет ``tarantool-dev``. Например, в Ubuntu выполните команду:"

msgid "$ sudo apt-get install tarantool-dev"
msgstr "$ sudo apt-get install tarantool-dev"

msgid "Contributing a module in Lua"
msgstr "Добавление собственного модуля на Lua"

msgid ""
"See `README in \"luakit\" branch of tarantool/modulekit repository "
"<http://github.com/tarantool/modulekit/blob/luakit/README.md>`_ for "
"detailed instructions and examples."
msgstr ""
"Подробную информацию и примеры см. в `README в ветке \"luakit\" "
"репозитория tarantool/modulekit "
"<http://github.com/tarantool/modulekit/blob/luakit/README.md>`_."

msgid "Contributing a module in C"
msgstr "Добавление собственного модуля на C"

msgid ""
"In some cases, you may want to create a Tarantool module in C rather than"
" in Lua. For example, to work with specific hardware or low-level system "
"interfaces."
msgstr ""
"В некоторых случаях может потребоваться создание Tarantool-модуля на C, а"
" не на Lua, например, для работы со специальным оборудованием или "
"низкоуровневыми системными интерфейсами."

msgid ""
"See `README in \"ckit\" branch of tarantool/modulekit repository "
"<http://github.com/tarantool/modulekit/blob/ckit/README.md>`_ for "
"detailed instructions and examples."
msgstr ""
"Подробную информацию и примеры см. в `README в ветке \"ckit\" репозитория"
" tarantool/modulekit "
"<http://github.com/tarantool/modulekit/blob/ckit/README.md>`_."

msgid ""
"You can also create modules with C++, provided that the code does not "
"throw exceptions."
msgstr ""
"Вы можете аналогичным образом создавать модули на C++ при условии, что в "
"их коде не будут выбрасываться исключения."
