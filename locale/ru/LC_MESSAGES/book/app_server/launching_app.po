
msgid "Launching an application"
msgstr "Запуск приложения"

msgid ""
"Using Tarantool as an application server, you can write your own "
"applications. Tarantool’s native language for writing applications is "
"`Lua <http://www.lua.org/about.html>`_, so a typical application would be"
" a file that contains your Lua script. But you can also write "
"applications in C or C++."
msgstr ""
"Используя Tarantool в качестве сервера приложений, вы можете написать "
"собственные приложения. Собственный язык Tarantool’а для приложений -- "
"`Lua <http://www.lua.org/about.html>`_, поэтому типовое приложение "
"представляет собой файл, который содержит Lua-скрипт. Однако вы также "
"можете писать приложения на C или C++."

msgid ""
"If you're new to Lua, we recommend going over the interactive Tarantool "
"tutorial before proceeding with this chapter. To launch the tutorial, say"
" ``tutorial()`` in Tarantool console:"
msgstr ""
"Если вы только осваиваете Lua, рекомендуем выполнить практическое задание"
" по Tarantool'у до работы с данной главой. Для запуска практического "
"задания, выполните команду ``tutorial()`` в консоли Tarantool'а:"

msgid ""
"tarantool> tutorial()\n"
"---\n"
"- |\n"
" Tutorial -- Screen #1 -- Hello, Moon\n"
" ====================================\n"
"\n"
" Welcome to the Tarantool tutorial.\n"
" It will introduce you to Tarantool’s Lua application server\n"
" and database server, which is what’s running what you’re seeing.\n"
" This is INTERACTIVE -- you’re expected to enter requests\n"
" based on the suggestions or examples in the screen’s text.\n"
" <...>"
msgstr ""
"tarantool> tutorial()\n"
"---\n"
"- |\n"
" Tutorial -- Screen #1 -- Hello, Moon\n"
" ====================================\n"
"\n"
" Welcome to the Tarantool tutorial.\n"
" It will introduce you to Tarantool’s Lua application server\n"
" and database server, which is what’s running what you’re seeing.\n"
" This is INTERACTIVE -- you’re expected to enter requests\n"
" based on the suggestions or examples in the screen’s text.\n"
" <...>"

msgid ""
"Let's create and launch our first Lua application for Tarantool. Here's a"
" simplest Lua application, the good old \"Hello, world!\":"
msgstr ""
"Создадим и запустим первое приложение на языке Lua для Tarantool'а -- "
"самое простое приложение, старую добрую программу \"Hello, world!\":"

msgid ""
"#!/usr/bin/env tarantool\n"
"print('Hello, world!')"
msgstr ""
"#!/usr/bin/env tarantool\n"
"print('Hello, world!')"

msgid "We save it in a file. Let it be ``myapp.lua`` in the current directory."
msgstr ""
"Сохраним приложение в файле. Пусть это будет ``myapp.lua`` в текущей "
"директории."

msgid "Now let's discuss how we can launch our application with Tarantool."
msgstr "Теперь рассмотрим, как можно запустить наше приложение с Tarantool'ом."

msgid "Launching in Docker"
msgstr "Запуск в Docker"

msgid ""
"If we run Tarantool in a :ref:`Docker container <getting_started-"
"using_docker>`, the following command will start Tarantool without any "
"application:"
msgstr ""

msgid ""
"$ # create a temporary container and run it in interactive mode\n"
"$ docker run --rm -t -i tarantool/tarantool:1"
msgstr ""
"$ # создать временный контейнер и запустить его в интерактивном режиме\n"
"$ docker run --rm -t -i tarantool/tarantool:1"

msgid "To run Tarantool with our application, we can say:"
msgstr "Чтобы запустить Tarantool с нашим приложением, можно выполнить команду:"

msgid ""
"$ # create a temporary container and\n"
"$ # launch Tarantool with our application\n"
"$ docker run --rm -t -i \\\n"
"             -v `pwd`/myapp.lua:/opt/tarantool/myapp.lua \\\n"
"             -v /data/dir/on/host:/var/lib/tarantool \\\n"
"             tarantool/tarantool:1 tarantool /opt/tarantool/myapp.lua"
msgstr ""
"$ # создать временный контейнер и\n"
"$ # запустить Tarantool с нашим приложением\n"
"$ docker run --rm -t -i \\\n"
"             -v `pwd`/myapp.lua:/opt/tarantool/myapp.lua \\\n"
"             -v /data/dir/on/host:/var/lib/tarantool \\\n"
"             tarantool/tarantool:1 tarantool /opt/tarantool/myapp.lua"

msgid "Here two resources on the host get mounted in the container:"
msgstr "Здесь два ресурса подключаются к серверу в контейнере:"

msgid "our application file (myapp.lua) and"
msgstr "наш файл с приложением (myapp.lua) и"

msgid "Tarantool data directory (``/data/dir/on/host``)."
msgstr "каталог данных Tarantool'а (``/data/dir/on/host``)."

msgid ""
"By convention, the directory for Tarantool application code inside a "
"container is ``/opt/tarantool``, and the directory for data is "
"``/var/lib/tarantool``."
msgstr ""
"Традиционно в контейнере директория ``/opt/tarantool`` используется для "
"кода приложения  Tarantool'а, а директория ``/var/lib/tarantool`` "
"используется для данных."

msgid "Launching a binary program"
msgstr "Запуск бинарной программы"

msgid ""
"If we run Tarantool from a :ref:`package <getting_started-"
"using_package_manager>` or from a :ref:`source build "
"<building_from_source>`, we can launch our application:"
msgstr ""
"При запуске Tarantool'а из :ref:`пакета <getting_started-"
"using_package_manager>` или при :ref:`сборке из исходников "
"<building_from_source>`, можно запустить наше приложение:"

msgid "in the script mode,"
msgstr "в режиме скрипта,"

msgid "as a server application, or"
msgstr "как серверное приложение или"

msgid "as a daemon service."
msgstr "как демон службы."

msgid "The simplest way is to pass the filename to Tarantool at start:"
msgstr "Самый простой способ -- передать имя файла в Tarantool при запуске:"

msgid ""
"$ tarantool myapp.lua\n"
"Hello, world!\n"
"$"
msgstr ""
"$ tarantool myapp.lua\n"
"Hello, world!\n"
"$"

msgid "Tarantool starts, executes our script in the **script mode** and exits."
msgstr ""
"Tarantool запускается, выполняет наш скрипт в **режиме скрипта** и "
"завершает работу."

msgid ""
"Now let’s turn this script into a **server application**. We use "
":doc:`box.cfg </reference/reference_lua/box_cfg>` from Tarantool’s built-"
"in Lua module to:"
msgstr ""
"Теперь превратим этот скрипт в **серверное приложение**. Используем "
":doc:`box.cfg </reference/reference_lua/box_cfg>` из встроенного в "
"Tarantool Lua-модуля, чтобы:"

msgid ""
"launch the database (a database has a persistent on-disk state, which "
"needs to be restored after we start an application) and"
msgstr ""
"запустить базу данных (данные в базе находятся в персистентном состоянии "
"на диске, которое следует восстановить после запуска приложения) и"

msgid "configure Tarantool as a server that accepts requests over a TCP port."
msgstr "настроить Tarantool как сервер, который принимает запросы по TCP-порту."

msgid ""
"We also add some simple database logic, using :doc:`space.create() "
"</reference/reference_lua/box_schema/space_create>` and "
":ref:`create_index() <box_space-create_index>` to create a space with a "
"primary index. We use the function :doc:`box.once() "
"</reference/reference_lua/box_once>` to make sure that our logic will be "
"executed only once when the database is initialized for the first time, "
"so we don't try to create an existing space or index on each invocation "
"of the script:"
msgstr ""
"Также добавим простую логику для базы данных, используя "
":doc:`space.create() </reference/reference_lua/box_schema/space_create>` "
"и :ref:`create_index() <box_space-create_index>` для создания спейса с "
"первичным индексом. Используем функцию :doc:`box.once() "
"</reference/reference_lua/box_once>`, чтобы обеспечить единовременное "
"выполнение логики после первоначальной инициализации базы данных, "
"поскольку мы не хотим создавать уже существующий спейс или индекс при "
"каждом обращении к скрипту:"

msgid ""
"#!/usr/bin/env tarantool\n"
"-- Configure database\n"
"box.cfg {\n"
"   listen = 3301\n"
"}\n"
"box.once(\"bootstrap\", function()\n"
"   box.schema.space.create('tweedledum')\n"
"   box.space.tweedledum:create_index('primary',\n"
"       { type = 'TREE', parts = {1, 'unsigned'}})\n"
"end)"
msgstr ""
"#!/usr/bin/env tarantool\n"
"-- настроить базу данных\n"
"box.cfg {\n"
"   listen = 3301\n"
"}\n"
"box.once(\"bootstrap\", function()\n"
"   box.schema.space.create('tweedledum')\n"
"   box.space.tweedledum:create_index('primary',\n"
"       { type = 'TREE', parts = {1, 'unsigned'}})\n"
"end)"

msgid "Now we launch our application in the same manner as before:"
msgstr "Далее запустим наше приложение, как делали ранее:"

msgid ""
"$ tarantool myapp.lua\n"
"Hello, world!\n"
"2017-08-11 16:07:14.250 [41436] main/101/myapp.lua C> version "
"2.1.0-429-g4e5231702\n"
"2017-08-11 16:07:14.250 [41436] main/101/myapp.lua C> log level 5\n"
"2017-08-11 16:07:14.251 [41436] main/101/myapp.lua I> mapping 1073741824 "
"bytes for tuple arena...\n"
"2017-08-11 16:07:14.255 [41436] main/101/myapp.lua I> recovery start\n"
"2017-08-11 16:07:14.255 [41436] main/101/myapp.lua I> recovering from "
"`./00000000000000000000.snap'\n"
"2017-08-11 16:07:14.271 [41436] main/101/myapp.lua I> recover from "
"`./00000000000000000000.xlog'\n"
"2017-08-11 16:07:14.271 [41436] main/101/myapp.lua I> done "
"`./00000000000000000000.xlog'\n"
"2017-08-11 16:07:14.272 [41436] main/102/hot_standby I> recover from "
"`./00000000000000000000.xlog'\n"
"2017-08-11 16:07:14.274 [41436] iproto/102/iproto I> binary: started\n"
"2017-08-11 16:07:14.275 [41436] iproto/102/iproto I> binary: bound to "
"[::]:3301\n"
"2017-08-11 16:07:14.275 [41436] main/101/myapp.lua I> done "
"`./00000000000000000000.xlog'\n"
"2017-08-11 16:07:14.278 [41436] main/101/myapp.lua I> ready to accept "
"requests"
msgstr ""
"$ tarantool myapp.lua\n"
"Hello, world!\n"
"2017-08-11 16:07:14.250 [41436] main/101/myapp.lua C> version "
"2.1.0-429-g4e5231702\n"
"2017-08-11 16:07:14.250 [41436] main/101/myapp.lua C> log level 5\n"
"2017-08-11 16:07:14.251 [41436] main/101/myapp.lua I> mapping 1073741824 "
"bytes for tuple arena...\n"
"2017-08-11 16:07:14.255 [41436] main/101/myapp.lua I> recovery start\n"
"2017-08-11 16:07:14.255 [41436] main/101/myapp.lua I> recovering from "
"`./00000000000000000000.snap'\n"
"2017-08-11 16:07:14.271 [41436] main/101/myapp.lua I> recover from "
"`./00000000000000000000.xlog'\n"
"2017-08-11 16:07:14.271 [41436] main/101/myapp.lua I> done "
"`./00000000000000000000.xlog'\n"
"2017-08-11 16:07:14.272 [41436] main/102/hot_standby I> recover from "
"`./00000000000000000000.xlog'\n"
"2017-08-11 16:07:14.274 [41436] iproto/102/iproto I> binary: started\n"
"2017-08-11 16:07:14.275 [41436] iproto/102/iproto I> binary: bound to "
"[::]:3301\n"
"2017-08-11 16:07:14.275 [41436] main/101/myapp.lua I> done "
"`./00000000000000000000.xlog'\n"
"2017-08-11 16:07:14.278 [41436] main/101/myapp.lua I> ready to accept "
"requests"

msgid ""
"This time, Tarantool executes our script and keeps working as a server, "
"accepting TCP requests on port 3301. We can see Tarantool in the current "
"session’s process list:"
msgstr ""
"На этот раз Tarantool выполняет скрипт и продолжает работать в качестве "
"сервера, принимая TCP-запросы на порт 3301. Можно увидеть Tarantool в "
"списке процессов текущей сессии:"

msgid ""
"$ ps | grep \"tarantool\"\n"
"  PID TTY           TIME CMD\n"
"41608 ttys001       0:00.47 tarantool myapp.lua <running>"
msgstr ""
"$ ps | grep \"tarantool\"\n"
"  PID TTY           TIME CMD\n"
"41608 ttys001       0:00.47 tarantool myapp.lua <running>"

msgid ""
"But the Tarantool instance will stop if we close the current terminal "
"window. To detach Tarantool and our application from the terminal window,"
" we can launch it in the **daemon mode**. To do so, we add some "
"parameters to ``box.cfg{}``:"
msgstr ""
"Однако экземпляр Tarantool'а завершит работу, если мы закроем окно "
"командной строки. Чтобы отделить Tarantool и приложение от окна командной"
" строки, можно запустить **режим демона**. Для этого добавим некоторые "
"параметры в ``box.cfg{}``:"

msgid ""
":ref:`background <cfg_basic-background>` = ``true`` that actually tells "
"Tarantool to work as a daemon service,"
msgstr ""
":ref:`background <cfg_basic-background>` = ``true``, который собственно "
"заставит Tarantool работать в качестве демона,"

msgid ""
":ref:`log <cfg_logging-log>` = ``'dir-name'`` that tells the Tarantool "
"daemon where to store its log file (other log settings are available in "
"Tarantool :ref:`log <log-module>` module), and"
msgstr ""
":ref:`log <cfg_logging-log>` = ``'dir-name'``, который укажет, где демон "
"Tarantool'а будет сохранять файл журнала (другие настройки журнала "
"находятся в модуле Tarantool'а :ref:`log <log-module>` module), а также"

msgid ""
":ref:`pid_file <cfg_basic-pid_file>` = ``'file-name'`` that tells the "
"Tarantool daemon where to store its pid file."
msgstr ""
":ref:`pid_file <cfg_basic-pid_file>` = ``'file-name'``, который укажет, "
"где демон Tarantool'а будет сохранять файл журнала pid-файл."

msgid "For example:"
msgstr "Например:"

msgid ""
"box.cfg {\n"
"   listen = 3301,\n"
"   background = true,\n"
"   log = '1.log',\n"
"   pid_file = '1.pid'\n"
"}"
msgstr ""
"box.cfg {\n"
"   listen = 3301,\n"
"   background = true,\n"
"   log = '1.log',\n"
"   pid_file = '1.pid'\n"
"}"

msgid "We launch our application in the same manner as before:"
msgstr "Запустим наше приложение, как делали ранее:"

msgid ""
"Tarantool executes our script, gets detached from the current shell "
"session (you won't see it with ``ps | grep \"tarantool\"``) and continues"
" working in the background as a daemon attached to the global session "
"(with SID = 0):"
msgstr ""
"Tarantool выполняет наш скрипт, отделяется от текущей сессии (он не "
"отображается при вводе ``ps | grep \"tarantool\"``) и продолжает работать"
" в фоновом режиме в качестве демона, прикрепленного к общей сессии (с SID"
" = 0):"

msgid ""
"$ ps -ef | grep \"tarantool\"\n"
"  PID SID     TIME  CMD\n"
"42178   0  0:00.72 tarantool myapp.lua <running>"
msgstr ""
"$ ps -ef | grep \"tarantool\"\n"
"  PID SID     TIME  CMD\n"
"42178   0  0:00.72 tarantool myapp.lua <running>"

msgid ""
"Now that we have discussed how to create and launch a Lua application for"
" Tarantool, let's dive deeper into programming practices."
msgstr ""
"Рассмотрев создание и запуск Lua-приложения для Tarantool'а, перейдем к "
"углубленному изложению методик программирования."
