
msgid "Storing data with memtx"
msgstr "Хранение данных с помощью memtx"

msgid ""
"The ``memtx`` storage engine is used in Tarantool by default. It keeps all "
"data in random-access memory (RAM), and therefore has very low read latency."
msgstr ""
"Движок базы данных ``memtx`` используется в Tarantool по умолчанию. Он "
"хранит все данные в оперативной памяти (RAM), поэтому значение задержки "
"чтения у него очень низкое."

msgid ""
"The obvious question here is: if all the data is stored in memory, how can "
"you prevent the data loss in case of emergency such as outage or Tarantool "
"instance failure?"
msgstr ""
"Очевидный вопрос: если все данные хранятся в памяти, как можно предотвратить"
" их потерю в случае чрезвычайной ситуации, например при отключении "
"электропитания или сбое экземпляра Tarantool?"

msgid ""
"First of all, Tarantool persists all data changes by writing requests to the"
" write-ahead log (WAL) that is stored on disk. Read more about that in the "
":ref:`memtx-persist` section. In case of a distributed application, there is"
" an option of synchronous replication that ensures keeping the data "
"consistent on a quorum of replicas. Although replication is not directly a "
"storage engine topic, it is a part of the answer regarding data safety. Read"
" more in the :ref:`memtx-replication` section."
msgstr ""
"Прежде всего, Tarantool сохраняет все изменения данных, записывая запросы в "
"журнал упреждающей записи (WAL), хранящийся на диске. Подробнее это описано "
"в разделе :ref:`memtx-persist`. В случае распределенного приложения возможна"
" синхронная репликация, которая обеспечивают согласованность данных в "
"кворуме реплик. Хотя репликация напрямую не относится к механизму хранения, "
"она отчасти способствует безопасности данных. Подробности можно найти в "
"разделе :ref:`memtx-replication`."

msgid ""
"In this chapter, the following topics are discussed in brief with the "
"references to other chapters that explain the subject matter in details."
msgstr ""
"Ниже указаны темы, которые обсуждаются в этой главе. В тексте вы также "
"найдете ссылки на главы с подробными сведениями по каждой из тем."

msgid "Memory model"
msgstr "Модель памяти"

msgid ""
"There is a fixed number of independent :ref:`execution threads <atomic-"
"threads_fibers_yields>`. The threads don't share state. Instead they "
"exchange data using low-overhead message queues. While this approach limits "
"the number of cores that the instance uses, it removes competition for the "
"memory bus and ensures peak scalability of memory access and network "
"throughput."
msgstr ""
"Есть фиксированное количество независимых :ref:`потоков выполнения <atomic-"
"threads_fibers_yields>`. У этих потоков нет общего состояния. Вместо этого "
"они обмениваются данными через очереди сообщений с низкими накладными "
"расходами. Хотя такой подход ограничивает количество ядер, которое может "
"использовать экземпляр, он устраняет конкуренцию за шину памяти и "
"обеспечивает максимальную масштабируемость доступа к памяти и пропускной "
"способности сети."

msgid ""
"Only one thread, namely, the **transaction processor thread** (further, **TX"
" thread**) can access the database, and there is only one TX thread for each"
" Tarantool instance. In this thread, transactions are executed in a strictly"
" consecutive order. Multi-statement transactions exist to provide isolation:"
" each transaction sees a consistent database state and commits all its "
"changes atomically. At commit time, a yield happens and all transaction "
"changes are written to :ref:`WAL <internals-wal>` in a single batch. In case"
" of errors during transaction execution, a transaction is rolled-back "
"completely. Read more in the following sections: :ref:`atomic-transactions`,"
" :ref:`atomic-transactional-manager`."
msgstr ""
"Обращаться к базе данных может только **поток обработчика транзакций** "
"(далее — **поток TX**). В каждом экземпляре Tarantool есть только один такой"
" поток. Транзакции в этом потоке выполняются строго последовательно. "
"Транзакции, состоящие из нескольких инструкций, обеспечивают изоляцию: "
"каждая транзакция видит согласованное состояние базы данных и применяет "
"коммит со всеми своими изменениями атомарно. Во время коммита происходит "
"передача управления, и все изменения транзакции записываются в :ref:`WAL-"
"файл <internals-wal>` одним пакетом. Если во время выполнения транзакции "
"произошли ошибки, она полностью отменяется. Подробности можно найти в "
"следующих разделах: :ref:`atomic-transactions`, :ref:`atomic-transactional-"
"manager`."

msgid ""
"Within the TX thread, there is a memory area allocated for Tarantool to "
"store data. It's called **Arena**."
msgstr ""
"Внутри потока TX есть область памяти, в которой Tarantool хранит данные. Эта"
" область называется **Arena**."

msgid ""
"Data is stored in :term:`spaces <space>`. Spaces contain database "
"records—:term:`tuples <tuple>`. To access and manipulate the data stored in "
"spaces and tuples, Tarantool builds :doc:`indexes </concepts/data_model/indexes>`."
msgstr ""
"Данные хранятся в :term:`спейсах <space>`. Спейсы содержат записи базы "
"данных — :term:`кортежи <tuple>`. Чтобы обращаться к данным, хранящимся в "
"спейсах и кортежах, и изменять их, Tarantool создаёт :doc:`индексы "
"</concepts/data_model/indexes>`."

msgid ""
"Special `allocators <https://github.com/tarantool/small>`__ manage memory "
"allocations for spaces, tuples, and indexes within the Arena. The slab "
"allocator is the main allocator used to store tuples. Tarantool has a built-"
"in module called ``box.slab`` which provides the slab allocator statistics "
"that can be used to monitor the total memory usage and memory fragmentation."
" For more details, see the ``box.slab`` module :doc:`reference "
"</reference/reference_lua/box_slab>`."
msgstr ""
"Распределением памяти для спейсов, кортежей и индексов внутри области Arena "
"управляют специальные `аллокаторы <https://github.com/tarantool/small>`__. "
"Для хранения кортежей главным образом используется аллокатор slab. В "
"Tarantool встроен модуль под названием ``box.slab``, предоставляющий "
"статистику распределения slab. С помощью этой статистики можно отслеживать "
"общее использование памяти и ее фрагментацию. Подробности см. в "
":doc:`руководстве </reference/reference_lua/box_slab>` по модулю "
"``box.slab``."

msgid ""
"Also inside the TX thread, there is an event loop. Within the event loop, "
"there are a number of :ref:`fibers <fiber-fibers>`. Fibers are cooperative "
"primitives that allows interaction with spaces, that is, reading and "
"writting the data. Fibers can interact with the event loop and between each "
"other directly or by using special primitives called channels. Due to the "
"usage of fibers and :ref:`cooperative multitasking <atomic-"
"cooperative_multitasking>`, the ``memtx`` engine is lock-free in typical "
"situations."
msgstr ""
"Внутри потока TX также есть цикл событий. Этот цикл содержит несколько "
":ref:`файберов <fiber-fibers>` — кооперативных примитивов, позволяющих "
"взаимодействовать со спейсами, то есть читать и записывать данные. Файберы "
"могут обращаться к циклу событий и друг к другу как напрямую, так и "
"посредством специальных примитивов, называемых каналами. Благодаря "
"использованию файберов и :ref:`кооперативной многозадачности <atomic-"
"cooperative_multitasking>` движок ``memtx``, как правило, свободен от "
"блокировок."

msgid ""
"To interact with external users, there is a separate :ref:`network thread "
"<atomic-threads_fibers_yields>` also called the **iproto thread**. The "
"iproto thread receives a request from the network, parses and checks the "
"statement, and transforms it into a special structure—a message containing "
"an executable statement and its options. Then the iproto thread ships this "
"message to the TX thread and runs the user's request in a separate fiber."
msgstr ""
"Чтобы взаимодействовать с внешними пользователями, используется отдельный "
":ref:`сетевой поток <atomic-threads_fibers_yields>`, называемый также "
"**поток iproto**. Поток iproto получает запрос из сети, разбирает и "
"проверяет инструкцию из него, а затем преобразует ее в специальную структуру"
" — сообщение, содержащее исполнимую инструкцию с параметрами. Затем iproto "
"доставляет это сообщение в поток TX и исполняет запрос пользователя в "
"отдельном файбере."

msgid "Data persistence"
msgstr "Персистентность данных"

msgid ""
"To ensure :ref:`data persistence <index-box_persistence>`, Tarantool does "
"two things."
msgstr ""
"Чтобы обеспечить :ref:`персистентность данных <index-box_persistence>`, "
"Tarantool выполняет следующие действия."

msgid ""
"After executing data change requests in memory, Tarantool writes each such "
"request to the :ref:`write-ahead log (WAL) <internals-wal>` files "
"(``.xlog``) that are stored on disk. Tarantool does this via a separate "
"thread called the **WAL thread**."
msgstr ""
"Исполнив в памяти запросы на изменение данных, Tarantool записывает все эти "
"запросы в файлы :ref:`журнала упреждающей записи (WAL) <internals-wal>` (с "
"расширением ``.xlog``), хранящиеся на диске. Это делается в отдельном "
"потоке, называемом **поток WAL**."

msgid ""
"Tarantool periodically takes the entire :doc:`database snapshot "
"</reference/reference_lua/box_snapshot>` and saves it on disk. It is "
"necessary for accelerating instance's restart because when there are too "
"many WAL files, it can be difficult for Tarantool to restart quickly."
msgstr ""
"Tarantool периодически делает :doc:`снимок всей базы данных "
"</reference/reference_lua/box_snapshot>` и сохраняет его на диск. Это "
"необходимо для ускорения перезапуска экземпляра, так как если файлов WAL "
"слишком много, то Tarantool не сможет быстро перезапуститься."

msgid ""
"To save a snapshot, there is a special fiber called the **snapshot daemon**."
" It reads the consistent content of the entire Arena and writes it on disk "
"into a snapshot file (``.snap``). Due of the cooperative multitasking, "
"Tarantool cannot write directly on disk because it is a locking operation. "
"That is why Tarantool interacts with disk via a separate pool of threads "
"from the :doc:`fio </reference/reference_lua/fio>` library."
msgstr ""
"Специальный файбер под названием **демон снимков** (**snapshot daemon**) "
"позволяет сохранять снимки. Он читает консистентное содержимое всей области "
"Arena и записывает его на диск в файл снимка (с расширением ``.snap``). Из-"
"за кооперативной многозадачности Tarantool не может записывать данные "
"непосредственно на диск, так как это блокирующая операция. Поэтому Tarantool"
" взаимодействует с диском через отдельный пул потоков из библиотеки "
":doc:`fio </reference/reference_lua/fio>`."

msgid ""
"So, even in emergency situations such as an outage or a Tarantool instance "
"failure, when the in-memory database is lost, the data can be restored fully"
" during Tarantool restart."
msgstr ""
"Таким образом, при перезапуске Tarantool данные можно полностью восстановить"
" даже в аварийных ситуациях, например при отключении питания или падении "
"экземпляра Tarantool, когда хранящаяся в оперативной памяти база данных "
"утеряна."

msgid "What happens during the restart:"
msgstr "Что происходит при перезапуске:"

msgid "Tarantool finds the latest snapshot file and reads it."
msgstr "Tarantool находит и читает последний файл снимка."

msgid ""
"Tarantool finds all the WAL files created after that snapshot and reads them"
" as well."
msgstr ""
"Tarantool также находит и читает все файлы WAL, созданные после этого "
"снимка."

msgid ""
"When the snapshot and WAL files have been read, there is a fully recovered "
"in-memory data set corresponding to the state when the Tarantool instance "
"stopped."
msgstr ""
"Как только снимок и файлы WAL будут прочитаны, набор данных в памяти будет "
"полностью восстановлен. Он будет соответствовать состоянию экземпляра "
"Tarantool на момент, когда тот прекратил работу."

msgid ""
"While reading the snapshot and WAL files, Tarantool is building the primary "
"indexes."
msgstr ""
"Во время чтения снимка и файлов WAL Tarantool строит первичные индексы."

msgid ""
"When all the data is in memory again, Tarantool is building the secondary "
"indexes."
msgstr "Когда все данные снова в памяти, Tarantool строит вторичные индексы."

msgid "Tarantool runs the application."
msgstr "Tarantool запускает приложение."

msgid "Accessing data"
msgstr "Доступ к данным"

msgid ""
"To access and manipulate the data stored in memory, Tarantool builds "
"indexes. Indexes are also stored in memory within the Arena."
msgstr ""
"Чтобы обращаться к данным, хранящимся в оперативной памяти, и работать с "
"ними, Tarantool строит индексы, которые хранятся внутри области памяти "
"Arena."

msgid ""
"Tarantool supports a number of :ref:`index types <index-types>` intended for"
" different usage scenarios. The possible types are TREE, HASH, BITSET, and "
"RTREE."
msgstr ""
"Tarantool поддерживает несколько :ref:`типов индексов <index-types>`: TREE, "
"HASH, BITSET, RTREE. Все они предназначены для разных сценариев "
"использования."

msgid ""
"Select query are possible against secondary index keys as well as primary "
"keys. Indexes can have multi-part keys."
msgstr ""
"Можно выполнять SELECT-запросы как по первичным, так и по вторичным ключам "
"индекса. Ключи могут быть составными."

msgid ""
"For detailed information about indexes, refer to the "
":doc:`/concepts/data_model/indexes` page."
msgstr ""
"Подробности про индексы можно найти на странице :doc:`/concepts/data_model/indexes`."

msgid "Replicating data"
msgstr "Репликация данных"

msgid ""
"Although this topic is not directly related to the ``memtx`` engine, it "
"completes the overall picture of how Tarantool works in case of a "
"distributed application."
msgstr ""
"Хотя эта тема не имеет прямого отношения к движку ``memtx``, она дополняет "
"общую картину того, как работает Tarantool, когда приложение распределенное."

msgid ""
"Replication allows multiple Tarantool instances to work on copies of the "
"same database. The copies are kept in sync because each instance can "
"communicate its changes to all the other instances. It is implemented via "
"WAL replication."
msgstr ""
"Репликация позволяет нескольким экземплярам Tarantool работать с копиями "
"одной и той же базы данных. Эти копии остаются синхронизированными благодаря"
" тому, что каждый экземпляр может сообщать другим экземплярам о совершенных "
"им изменениях. Для этого используется WAL-репликация."

msgid ""
"To send data to a replica, Tarantool runs another thread called **relay**. "
"Its purpose is to read the WAL files and send them to replicas. On a "
"replica, the fiber called **applier** is run. It receives the changes from a"
" remote node and applies them to the replica's Arena. All the changes are "
"being written to WAL files via the replica's WAL thread as if they are done "
"locally."
msgstr ""
"Чтобы отправить данные на реплику, Tarantool запускает еще один поток, "
"называемый **relay**. Этот поток читает файлы WAL и отправляет их репликам. "
"На каждой реплике выполняется файбер под названием **applier**. Он получает "
"изменения от удаленного узла и применяет их к области Arena реплики. Все "
"изменения записываются в файлы WAL через поток WAL реплики так же, как если "
"бы они были сделаны локально."

msgid ""
"By default, :ref:`replication <replication-architecture>` in Tarantool is "
"asynchronous: if a transaction is committed locally on a master node, it "
"does not mean it is replicated onto any replicas."
msgstr ""
"В Tarantool :ref:`репликация <replication-architecture>` по умолчанию "
"асинхронна: то, что транзакция проходит коммит локально на главном узле, не "
"означает, что она отправляется на какие-то другие реплики."

msgid ""
":ref:`Synchronous replication <repl_sync>` exists to solve this problem. "
"Synchronous transactions are not considered committed and are not responded "
"to a client until they are replicated onto some number of replicas."
msgstr ""
"Эту проблему решает :ref:`синхронная репликация <repl_sync>`. Каждая "
"синхронная транзакция проходит коммит лишь после репликации на некотором "
"количестве экземпляров, и только тогда клиенту приходит ответ о завершении "
"транзакции."

msgid ""
"For more information on replication, refer to the :doc:`corresponding "
"chapter </book/replication/index>`."
msgstr ""
"Более подробные сведения вы найдете в :doc:`главе о репликации "
"</book/replication/index>`."

msgid "Summary"
msgstr "Ключевые сведения"

msgid ""
"The main key points describing how the in-memory storage engine works can be"
" summarized in the following way:"
msgstr "Вот главные принципы, по которым работает движок:"

msgid "All data is in RAM."
msgstr "Все данные находятся в оперативной памяти."

msgid "Access to data is from one thread."
msgstr "Доступ к данным производится только из одного потока."

msgid "Tarantool writes all data change requests in WAL."
msgstr "Tarantool записывает все изменения данных в файлы WAL."

msgid "Data snapshots are taken periodically."
msgstr "Периодически создаются снимки данных."

msgid "Indexes are build to access the data."
msgstr "Для доступа к данным создаются индексы."

msgid "WAL can be replicated."
msgstr "Файлы WAL можно реплицировать."
