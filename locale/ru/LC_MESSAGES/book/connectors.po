
msgid "Connectors"
msgstr "Коннекторы"

msgid "This chapter documents APIs for various programming languages:"
msgstr "В этой главе описаны API для различных языков программирования:"

msgid ":doc:`C++ <connectors/cxx/tntcxx_api>`"
msgstr ":doc:`C++ <connectors/cxx/tntcxx_api>`"

msgid ":ref:`Java <index_connector_java>`"
msgstr ":ref:`Java <index_connector_java>`"

msgid ":ref:`Go <index_connector_go>`"
msgstr ":ref:`Go <index_connector_go>`"

msgid ":ref:`R <index_connector_r>`"
msgstr ":ref:`R <index_connector_r>`"

msgid ":ref:`Erlang <index_connector_erlang>`"
msgstr ":ref:`Erlang <index_connector_erlang>`"

msgid ":ref:`Perl <index_connector_perl>`"
msgstr ":ref:`Perl <index_connector_perl>`"

msgid ":ref:`PHP <index_connector_php>`"
msgstr ":ref:`PHP <index_connector_php>`"

msgid ":ref:`Python <index_connector_py>`"
msgstr ":ref:`Python <index_connector_py>`"

msgid ":ref:`Node.js <index_connector_nodejs>`"
msgstr ":ref:`Node.js <index_connector_nodejs>`"

msgid ":ref:`C# <index_connector_csharp>`"
msgstr ":ref:`C# <index_connector_csharp>`"

msgid ":ref:`C <index_connector_c>`"
msgstr ":ref:`C <index_connector_c>`"

msgid "Protocol"
msgstr "Протокол"

msgid ""
"Tarantool's binary protocol was designed with a focus on asynchronous I/O "
"and easy integration with proxies. Each client request starts with a "
"variable-length binary header, containing request id, request type, instance"
" id, log sequence number, and so on."
msgstr ""
"Бинарный протокол передачи данных в Tarantool был разработан с учетом "
"потребностей асинхронного ввода-вывода для облегчения интеграции с прокси-"
"серверами. Каждый клиентский запрос начинается с бинарного заголовка "
"переменной длины. В заголовке указывается идентификатор и тип запроса, "
"идентификатор экземпляра, номер записи в журнале и т.д."

msgid ""
"The mandatory length, present in request header simplifies client or proxy "
"I/O. A response to a request is sent to the client as soon as it is ready. "
"It always carries in its header the same type and id as in the request. The "
"id makes it possible to match a request to a response, even if the latter "
"arrived out of order."
msgstr ""
"Также в заголовке обязательно указывается длина запроса, что облегчает обмен"
" данными с клиентом или прокси. Ответ на запрос посылается по мере "
"готовности. В заголовке ответа указывается тот же идентификатор и тип "
"запроса, что и в изначальном запросе. По идентификатору легко соотнести "
"запрос с ответом, даже если ответы приходят в произвольном порядке."

msgid ""
"Unless implementing a client driver, you needn't concern yourself with the "
"complications of the binary protocol. Language-specific drivers provide a "
"friendly way to store domain language data structures in Tarantool. A "
"complete description of the binary protocol is maintained in annotated "
"Backus-Naur form in the source tree. For detailed examples and diagrams of "
"all binary-protocol requests and responses, see :ref:`Tarantool's binary "
"protocol <box_protocol-iproto_protocol>`."
msgstr ""
"Вдаваться в тонкости реализации бинарного протокола нужно, только если вы "
"разрабатываете новый коннектор для Tarantool. В остальных случаях достаточно"
" взять уже существующий коннектор для нужного вам языка программирования. "
"Такие коннекторы позволяют без труда хранить в формате Tarantool структуры "
"данных из разных языков. Полное описание бинарного протокола в Tarantool "
"хранится в дереве исходного кода в виде аннотированных форм Бэкуса --- Наура"
" (BNF-диаграмм). Подробные примеры и диаграммы всех запросов и ответов можно"
" найти в :ref:`описании бинарного протокола в Tarantool <box_protocol-"
"iproto_protocol>`."

msgid "Packet example"
msgstr "Пример пакета данных"

msgid ""
"The Tarantool API exists so that a client program can send a request packet "
"to a server instance, and receive a response. Here is an example of a what "
"the client would send for ``box.space[513]:insert{'A', 'BB'}``. The BNF "
"description of the components is on the page about :ref:`Tarantool's binary "
"protocol <box_protocol-iproto_protocol>`."
msgstr ""
"С помощью API Tarantool клиентские программы могут отправлять на адрес "
"экземпляра пакеты с запросами и получать на них ответы. Пример ниже "
"относится к клиентскому запросу ``box.space[513]:insert{'A', 'BB'}``. "
"Описания компонентов запроса, представленные в форме Бэкуса --- Наура, вы "
"найдете на странице о :ref:`бинарном протоколе Tarantool <box_protocol-"
"iproto_protocol>`."

msgid "Component"
msgstr "Компонент"

msgid "Byte #0"
msgstr "Байт 0"

msgid "Byte #1"
msgstr "Байт 1"

msgid "Byte #2"
msgstr "Байт 2"

msgid "Byte #3"
msgstr "Байт 3"

msgid "code for insert"
msgstr "код операции insert"

msgid "02"
msgstr "02"

msgid "rest of header"
msgstr "остальная часть заголовка"

msgid "..."
msgstr "..."

msgid "2-digit number: space id"
msgstr "двузначное число: ID спейса"

msgid "cd"
msgstr "cd"

msgid "01"
msgstr "01"

msgid "code for tuple"
msgstr "код кортежа"

msgid "21"
msgstr "21"

msgid "1-digit number: field count = 2"
msgstr "однозначное число: количество полей = 2"

msgid "92"
msgstr "92"

msgid "1-character string: field[1]"
msgstr "односимвольная строка: поле[1]"

msgid "a1"
msgstr "a1"

msgid "41"
msgstr "41"

msgid "2-character string: field[2]"
msgstr "двухсимвольная строка: поле[2]"

msgid "a2"
msgstr "a2"

msgid "42"
msgstr "42"

msgid ""
"Now, you could send that packet to the Tarantool instance, and interpret the"
" response (the page about :ref:`Tarantool's binary protocol <box_protocol-"
"iproto_protocol>` has a description of the packet format for responses as "
"well as requests). But it would be easier, and less error-prone, if you "
"could invoke a routine that formats the packet according to typed "
"parameters. Something like ``response = tarantool_routine(\"insert\", 513, "
"\"A\", \"B\");``. And that is why APIs exist for drivers for Perl, Python, "
"PHP, and so on."
msgstr ""
"Этот пакет можно отправить экземпляру Tarantool, а затем расшифровать ответ."
" Формат пакетов запроса и ответа также описан на странице о :ref:`бинарном "
"протоколе Tarantool <box_protocol-iproto_protocol>`. Однако проще и надежнее"
" вызвать процедуру, которая сформирует готовый пакет с заданными "
"параметрами. Например, она могла бы выглядеть так: ``response = "
"tarantool_routine(\"insert\", 513, \"A\", \"B\");``. Для этого и существуют "
"API для драйверов Perl, Python, PHP и т. д."

msgid "Setting up the server for connector examples"
msgstr "Настройка окружения для работы с примерами"

msgid ""
"This chapter has examples that show how to connect to a Tarantool instance "
"via the Perl, PHP, Python, node.js, and C connectors. The examples contain "
"hard code that will work if and only if the following conditions are met:"
msgstr ""
"В этой главе приводятся примеры того, как можно установить соединение с "
"сервером Tarantool с помощью коннекторов для языков Perl, PHP, Python, "
"Node.js и C. Примеры содержат фиксированные значения и будут корректно "
"работать только при следующих условиях:"

msgid ""
"the Tarantool instance (tarantool) is running on localhost (127.0.0.1) and "
"is listening on port 3301 (``box.cfg.listen = '3301'``),"
msgstr ""
"Экземпляр (tarantool) запущен на локальной машине (``localhost = "
"127.0.0.1``), а прослушивание для него настроено на порту 3301 "
"(``box.cfg.listen = '3301'``)."

msgid ""
"space ``examples`` has id = 999 (``box.space.examples.id = 999``) and has a "
"primary-key index for a numeric field "
"(``box.space[999].index[0].parts[1].type = \"unsigned\"``),"
msgstr ""
"В базе есть спейс ``examples`` с идентификатором 999 "
"(``box.space.examples.id = 999``). Первичный индекс этого спейса построен по"
" ключу числового типа (``box.space[999].index[0].parts[1].type = "
"\"unsigned\"``)."

msgid "user 'guest' has privileges for reading and writing."
msgstr "Пользователь 'guest' имеет разрешение на чтение и запись."

msgid ""
"It is easy to meet all the conditions by starting the instance and executing"
" this script:"
msgstr ""
"Можно легко соблюсти все условия, запустив экземпляр и выполнив следующий "
"скрипт:"

msgid ""
"box.cfg{listen=3301}\n"
"box.schema.space.create('examples',{id=999})\n"
"box.space.examples:create_index('primary', {type = 'hash', parts = {1, 'unsigned'}})\n"
"box.schema.user.grant('guest','read,write','space','examples')\n"
"box.schema.user.grant('guest','read','space','_space')"
msgstr ""
"box.cfg{listen=3301}\n"
"box.schema.space.create('examples',{id=999})\n"
"box.space.examples:create_index('primary', {type = 'hash', parts = {1, 'unsigned'}})\n"
"box.schema.user.grant('guest','read,write','space','examples')\n"
"box.schema.user.grant('guest','read','space','_space')"

msgid "Java"
msgstr "Java"

msgid "There are two Java connectors available:"
msgstr "В Tarantool доступны два Java-коннектора:"

msgid ""
"`cartridge-java <http://github.com/tarantool/cartridge-java/>`__ supports "
"both single Tarantool nodes and clusters, as well as applications built "
"using the :doc:`Cartridge framework </book/cartridge/index>` and its "
"modules. The Tarantool team actively updates this module with the newest "
"Tarantool features."
msgstr ""
"`cartridge-java <http://github.com/tarantool/cartridge-java/>`__ "
"поддерживает как отдельные узлы и кластеры Tarantool, так и приложения, "
"созданные с использованием :doc:`фреймворка Cartridge "
"</book/cartridge/index>` и его модулей. Команда Tarantool активно добавляет "
"в этот модуль новейшие функциональные возможности платформы."

msgid ""
"`tarantool-java <http://github.com/tarantool/tarantool-java/>`__ works with "
"early Tarantool versions (1.6 and later) and offers JDBC interface support "
"for single Tarantool nodes. This module *isn't currently maintained* and "
"does not support the newest 2.x Tarantool features or Tarantool clusters."
msgstr ""
"`tarantool-java <http://github.com/tarantool/tarantool-java/>`__ "
"предназначен для ранних версий Tarantool (1.6 и выше) и предоставляет "
"поддержку интерфейса JDBC для одиночных узлов Tarantool. Этот модуль *в "
"настоящее время не поддерживается* и не работает ни с новейшими "
"функциональными возможностями Tarantool 2.x, ни с кластерами Tarantool."

msgid "The following modules support Java libraries and frameworks:"
msgstr ""
"Для работы с библиотеками и фреймворками Java в Tarantool есть следующие "
"модули:"

msgid ""
"`TestContainers Tarantool module <http://github.com/tarantool/cartridge-"
"java-testcontainers/>`__ adds support for the popular `TestСontainers "
"framework <https://www.testcontainers.org/>`__ used for integration testing "
"of Java applications."
msgstr ""
"Модуль Tarantool `TestContainers <http://github.com/tarantool/cartridge-"
"java-testcontainers/>`__ добавляет поддержку популярного `фреймворка "
"TestСontainers <https://www.testcontainers.org/>`__, который используется "
"для интеграционного тестирования приложений Java."

msgid ""
"`Spring Data Tarantool module <http://github.com/tarantool/cartridge-"
"springdata/>`__ adds support for the `Spring framework "
"<https://projects.spring.io/spring-data/>`__."
msgstr ""
"`Модуль Tarantool Spring Data <http://github.com/tarantool/cartridge-"
"springdata/>`__ добавляет поддержку `фреймворка Spring "
"<https://projects.spring.io/spring-data/>`__."

msgid ""
"Check out the `Spring Pet Clinic project "
"<http://github.com/tarantool/spring-petclinic-tarantool/>`__ to get familiar"
" with using this module in real applications."
msgstr ""
"Чтобы узнать, как использовать этот модуль в реальных приложениях, "
"ознакомьтесь с `проектом Spring Pet Clinic "
"<http://github.com/tarantool/spring-petclinic-tarantool/>`__."

msgid "Go"
msgstr "Go"

msgid "The following connectors are available:"
msgstr "В Tarantool доступны следующие коннекторы для Go:"

msgid ""
"Tarantool-supported `go-tarantool <https://github.com/tarantool/go-"
"tarantool>`__"
msgstr ""
"`go-tarantool <https://github.com/tarantool/go-tarantool>`__, поддерживаемый"
" командой Tarantool."

msgid ""
"Community-supported `viciious/go-tarantool <https://github.com/viciious/go-"
"tarantool>`_"
msgstr ""
"`viciious/go-tarantool <https://github.com/viciious/go-tarantool>`_, "
"поддерживаемый сообществом разработчиков."

msgid ""
"Community-supported `FZambia/tarantool "
"<https://github.com/FZambia/tarantool>`_."
msgstr ""
"`FZambia/tarantool <https://github.com/FZambia/tarantool>`_, поддерживаемый "
"сообществом разработчиков."

msgid "Feature comparison"
msgstr "Сравнение функций"

msgid "Last update: January 2022"
msgstr "Последнее обновление: январь 2022"

msgid "`tarantool/go-tarantool <https://github.com/tarantool/go-tarantool>`_"
msgstr "`tarantool/go-tarantool <https://github.com/tarantool/go-tarantool>`_"

msgid "`viciious/go-tarantool <https://github.com/viciious/go-tarantool>`_"
msgstr "`viciious/go-tarantool <https://github.com/viciious/go-tarantool>`_"

msgid "`FZambia/tarantool <https://github.com/FZambia/tarantool>`_"
msgstr "`FZambia/tarantool <https://github.com/FZambia/tarantool>`_"

msgid "License"
msgstr "Лицензия"

msgid "BSD 2-Clause"
msgstr "BSD 2-Clause"

msgid "MIT"
msgstr "MIT"

msgid "Last update"
msgstr "Последнее обновление"

msgid "2022"
msgstr "2022"

msgid "2021"
msgstr "2021"

msgid "Documentation"
msgstr "Документация"

msgid "README with examples, API described in code comments"
msgstr "README с примерами, описание API в комментариях к коду"

msgid "README with examples, code comments"
msgstr "README с примерами, комментарии к коду"

msgid "README with examples"
msgstr "README с примерами"

msgid "Testing / CI / CD"
msgstr "Тестирование / CI / CD"

msgid "GitHub Actions"
msgstr "GitHub Actions"

msgid "Travis CI"
msgstr "Travis CI"

msgid "GitHub Stars"
msgstr "GitHub-звезды"

msgid "127"
msgstr "127"

msgid "43"
msgstr "43"

msgid "12"
msgstr "12"

msgid "Static analysis"
msgstr "Статический анализ"

msgid "No"
msgstr "Нет"

msgid "golint"
msgstr "golint"

msgid "golangci-lint"
msgstr "golangci-lint"

msgid "Packaging"
msgstr "Способ упаковки"

msgid "go get"
msgstr "go get"

msgid "Code coverage"
msgstr "Покрытие кода"

msgid "msgpack driver"
msgstr "Драйвер msgpack"

msgid ""
"`vmihailenco/msgpack/v2 <https://github.com/vmihailenco/msgpack/tree/v2>`_ "
"(`#124 <https://github.com/tarantool/go-tarantool/issues/124>`_)"
msgstr ""
"`vmihailenco/msgpack/v2 <https://github.com/vmihailenco/msgpack/tree/v2>`_ "
"(`#124 <https://github.com/tarantool/go-tarantool/issues/124>`_)"

msgid "`tinylib/msgp <https://github.com/tinylib/msgp>`_"
msgstr "`tinylib/msgp <https://github.com/tinylib/msgp>`_"

msgid ""
"`vmihailenco/msgpack/v5 <https://github.com/vmihailenco/msgpack/tree/v5>`_"
msgstr ""
"`vmihailenco/msgpack/v5 <https://github.com/vmihailenco/msgpack/tree/v5>`_"

msgid "Async work"
msgstr "Асинхронная работа"

msgid "Yes"
msgstr "Да"

msgid "Schema reload"
msgstr "Обновление схемы"

msgid "Yes (manual pull)"
msgstr "Есть (запускается вручную)"

msgid "Space / index names"
msgstr "Имена спейсов/индексов"

msgid "Tuples as structures"
msgstr "Кортежи как структуры"

msgid "Yes (structure and marshall functions must be predefined in Go code)"
msgstr ""
"Есть (структура и функции маршалинга должны быть предопределены в коде Go)"

msgid "Access tuple fields by names"
msgstr "Доступ к полям кортежей по именам"

msgid "Only if marshalled to structure"
msgstr "Только при маршалинге в структуру"

msgid ""
"`SQL <https://www.tarantool.io/en/doc/latest/reference/reference_sql/>`_ "
"support"
msgstr ""
"Поддержка `SQL "
"<https://www.tarantool.io/en/doc/latest/reference/reference_sql/>`_"

msgid "No (`#62 <https://github.com/tarantool/go-tarantool/issues/62>`_)"
msgstr "Нет (`#62 <https://github.com/tarantool/go-tarantool/issues/62>`_)"

msgid ""
"No (`#18 <https://github.com/viciious/go-tarantool/issues/18>`_, closed)"
msgstr ""
"Нет (`#18 <https://github.com/viciious/go-tarantool/issues/18>`_, тикет "
"закрыт)"

msgid ""
"`Interactive transactions "
"<https://www.tarantool.io/en/doc/latest/book/box/stream/>`_"
msgstr ""
"`Интерактивные транзакции "
"<https://www.tarantool.io/en/doc/latest/book/box/stream/>`_"

msgid "No (`#101 <https://github.com/tarantool/go-tarantool/issues/101>`_)"
msgstr "Нет (`#101 <https://github.com/tarantool/go-tarantool/issues/101>`_)"

msgid ""
"`Varbinary <https://www.tarantool.io/en/doc/latest/book/box/data_model/>`_ "
"support"
msgstr ""
"Поддержка `varbinary "
"<https://www.tarantool.io/en/doc/latest/book/box/data_model/>`_"

msgid "Yes (with in-built language tools)"
msgstr "Есть (встроенными инструментами языка)"

msgid ""
"Yes (decodes to string by default, see `#6 "
"<https://github.com/FZambia/tarantool/issues/6>`_)"
msgstr ""
"Есть (декодирование в строку по умолчанию, см. `#6 "
"<https://github.com/FZambia/tarantool/issues/6>`_)"

msgid ""
"`UUID <https://www.tarantool.io/en/doc/latest/book/box/data_model/>`_ "
"support"
msgstr ""
"Поддержка `UUID "
"<https://www.tarantool.io/en/doc/latest/book/box/data_model/>`_"

msgid "Decimal support"
msgstr "Поддержка decimal"

msgid "No (`#96 <https://github.com/tarantool/go-tarantool/issues/96>`_)"
msgstr "Нет (`#96 <https://github.com/tarantool/go-tarantool/issues/96>`_)"

msgid ""
"`EXT_ERROR "
"<https://www.tarantool.io/ru/doc/latest/dev_guide/internals/msgpack_extensions/#the-"
"error-type>`_ support"
msgstr ""
"Поддержка `EXT_ERROR "
"<https://www.tarantool.io/ru/doc/latest/dev_guide/internals/msgpack_extensions/#the-"
"error-type>`_"

msgid ""
"`Datetime <https://github.com/tarantool/tarantool/discussions/6244>`_ "
"support"
msgstr ""
"Поддержка `datetime "
"<https://github.com/tarantool/tarantool/discussions/6244>`_"

msgid "No (`#118 <https://github.com/tarantool/go-tarantool/issues/118>`_)"
msgstr "Нет (`#118 <https://github.com/tarantool/go-tarantool/issues/118>`_)"

msgid ""
"`box.session.push() responses "
"<https://www.tarantool.io/ru/doc/latest/reference/reference_lua/box_session/push/>`_"
msgstr ""
"`Возвращаемые значения box.session.push() "
"<https://www.tarantool.io/ru/doc/latest/reference/reference_lua/box_session/push/>`_"

msgid "No (`#67 <https://github.com/tarantool/go-tarantool/issues/67>`_)"
msgstr "Нет (`#67 <https://github.com/tarantool/go-tarantool/issues/67>`_)"

msgid "No (`#21 <https://github.com/viciious/go-tarantool/issues/21>`_)"
msgstr "Нет (`#21 <https://github.com/viciious/go-tarantool/issues/21>`_)"

msgid ""
"`Session settings "
"<https://www.tarantool.io/en/doc/latest/reference/reference_lua/box_space/_session_settings/>`_"
msgstr ""
"`Настройки сессии "
"<https://www.tarantool.io/en/doc/latest/reference/reference_lua/box_space/_session_settings/>`_"

msgid ""
"`Graceful shutdown <https://github.com/tarantool/tarantool/issues/5924>`_"
msgstr ""
"`Мягкое завершение <https://github.com/tarantool/tarantool/issues/5924>`_"

msgid ""
"`IPROTO_ID (feature discovering) "
"<https://github.com/tarantool/tarantool/issues/6253>`_"
msgstr ""
"`IPROTO_ID (обнаружение поддерживаемых функций) "
"<https://github.com/tarantool/tarantool/issues/6253>`_"

msgid "`tarantool/crud <https://github.com/tarantool/crud>`_ support"
msgstr "Поддержка `tarantool/crud <https://github.com/tarantool/crud>`_"

msgid "Connection pool"
msgstr "Пул соединений"

msgid ""
"Yes (round-robin failover, no balancing, master discovering planned in `#113"
" <https://github.com/tarantool/go-tarantool/issues/113>`_)"
msgstr ""
"Есть (циклическое восстановление после сбоев; без балансировки; обнаружение "
"мастера планируется в `#113 <https://github.com/tarantool/go-"
"tarantool/issues/113>`_)"

msgid "Transparent reconnecting"
msgstr "Прозрачное переподключение"

msgid ""
"Yes (see comments in `#129 <https://github.com/tarantool/go-"
"tarantool/issues/129>`_)"
msgstr ""
"Есть (см. комментарии к `#129 <https://github.com/tarantool/go-"
"tarantool/issues/129>`_)"

msgid ""
"No (handle reconnects explicitly, refer to `#11 "
"<https://github.com/viciious/go-tarantool/issues/11>`_)"
msgstr ""
"Нет (дескриптор переподключается явно, см. `#11 "
"<https://github.com/viciious/go-tarantool/issues/11>`_)"

msgid ""
"Yes (see comments in `#7 <https://github.com/FZambia/tarantool/issues/7>`_)"
msgstr ""
"Есть (см. комментарии к `#7 "
"<https://github.com/FZambia/tarantool/issues/7>`_)"

msgid "Transparent request retrying"
msgstr "Прозрачная переотправка запроса"

msgid "`Watchers <https://github.com/tarantool/tarantool/pull/6510>`_"
msgstr ""
"`Наблюдатели (watchers) <https://github.com/tarantool/tarantool/pull/6510>`_"

msgid "Language features"
msgstr "Возможности языка"

msgid "No  (`#48 <https://github.com/tarantool/go-tarantool/issues/48>`_)"
msgstr "Нет (`#48 <https://github.com/tarantool/go-tarantool/issues/48>`_)"

msgid "context"
msgstr "context"

msgid "Miscellaneous"
msgstr "Прочее"

msgid "Supports `tarantool/queue <https://github.com/tarantool/queue>`_ API"
msgstr "Поддержка API `tarantool/queue <https://github.com/tarantool/queue>`_"

msgid "Can mimic a Tarantool instance (also as replica)"
msgstr "Может имитировать экземпляр Tarantool (в том числе реплику)"

msgid "API is experimental and breaking changes may happen"
msgstr "API коннектора экспериментальный и может значительно измениться"

msgid "R"
msgstr "R"

msgid ""
"Use the `tarantoolr <https://github.com/thekvs/tarantoolr>`__ connector."
msgstr ""
"Используйте коннектор `tarantoolr <https://github.com/thekvs/tarantoolr>`__."

msgid "Erlang"
msgstr "Erlang"

msgid "Use the `Erlang tarantool driver <https://github.com/stofel/taran>`__."
msgstr ""
"Используйте `драйвер Tarantool на Erlang "
"<https://github.com/stofel/taran>`__."

msgid "Perl"
msgstr "Perl"

msgid ""
"The most commonly used Perl driver is `tarantool-perl "
"<https://github.com/tarantool/tarantool-perl>`__. It is not supplied as part"
" of the Tarantool repository; it must be installed separately. The most "
"common way to install it is by cloning from GitHub."
msgstr ""
"Самый распространенный драйвер для Perl --- `tarantool-perl "
"<https://github.com/tarantool/tarantool-perl>`_. Он не входит в репозиторий "
"Tarantool, его необходимо устанавливать отдельно. Проще всего установить "
"его, склонировав с GitHub."

msgid ""
"To avoid minor warnings that may appear the first time ``tarantool-perl`` is"
" installed, start with installing some other modules that ``tarantool-perl``"
" uses, with `CPAN, the Comprehensive Perl Archive Network "
"<https://en.wikipedia.org/wiki/Cpan>`__:"
msgstr ""
"Чтобы избежать нескольких незначительных предупреждений, которые может "
"выдать система после первой установки ``tarantool-perl``, начните установку "
"с модуля `CPAN (Comprehensive Perl Archive Network, Всеобъемлющая сеть "
"архивов Perl) <https://ru.wikipedia.org/wiki/CPAN>`__. Этот модуль необходим"
" для работы ``tarantool-perl``:"

msgid ""
"$ sudo cpan install AnyEvent\n"
"$ sudo cpan install Devel::GlobalDestruction"
msgstr ""
"$ sudo cpan install AnyEvent\n"
"$ sudo cpan install Devel::GlobalDestruction"

msgid "Then, to install ``tarantool-perl`` itself, say:"
msgstr "Затем установите ``tarantool-perl``:"

msgid ""
"$ git clone https://github.com/tarantool/tarantool-perl.git tarantool-perl\n"
"$ cd tarantool-perl\n"
"$ git submodule init\n"
"$ git submodule update --recursive\n"
"$ perl Makefile.PL\n"
"$ make\n"
"$ sudo make install"
msgstr ""
"$ git clone https://github.com/tarantool/tarantool-perl.git tarantool-perl\n"
"$ cd tarantool-perl\n"
"$ git submodule init\n"
"$ git submodule update --recursive\n"
"$ perl Makefile.PL\n"
"$ make\n"
"$ sudo make install"

msgid ""
"Here is a complete Perl program that inserts ``[99999,'BB']`` into "
"``space[999]`` via the Perl API. Before trying to run, check that the server"
" instance is listening at ``localhost:3301`` and that the space ``examples``"
" exists, as :ref:`described earlier <index-connector_setting>`. To run, "
"paste the code into a file named :file:`example.pl` and say :samp:`perl "
"example.pl`. The program will connect using an application-specific "
"definition of the space. The program will open a socket connection with the "
"Tarantool instance at ``localhost:3301``, then send an "
":ref:`space_object:INSERT <box_space-insert>` request, then — if all is well"
" — end without displaying any messages. If Tarantool is not running on "
"``localhost`` with :ref:`listen <cfg_basic-listen>` port = 3301, the program"
" will print “Connection refused”."
msgstr ""
"В следующем примере приводится полноценная программа на Perl, которая "
"осуществляет вставку кортежа ``[99999,'BB']`` в спейс ``space[999]`` с "
"помощью API для языка Perl. Перед запуском проверьте, что экземпляр "
"прослушивает порт ``localhost:3301``, а в базе создан спейс ``examples``, "
"как :ref:`предложено выше <index-connector_setting>`. Чтобы запустить "
"программу, сохраните код в файл :file:`example.pl` и выполните команду "
":samp:`perl example.pl`. Программа установит соединение, используя "
"определение спейса. Затем она откроет сокет для соединения с экземпляром по "
"адресу ``localhost:3301`` и отправит запрос "
":ref:`space_object:INSERT<box_space-insert>`. Если запрос будет выполнен "
"успешно, программа после этого закончит работу, не выводя никаких сообщений."
" Если Tarantool не запущен по адресу ``localhost`` и порт 3301 не "
":ref:`прослушивается <cfg_basic-listen>`, то программа выведет сообщение об "
"ошибке \"Connection refused\"."

msgid ""
"#!/usr/bin/perl\n"
"use DR::Tarantool ':constant', 'tarantool';\n"
"use DR::Tarantool ':all';\n"
"use DR::Tarantool::MsgPack::SyncClient;\n"
"\n"
"my $tnt = DR::Tarantool::MsgPack::SyncClient->connect(\n"
"  host    => '127.0.0.1',                      # look for tarantool on localhost\n"
"  port    => 3301,                             # on port 3301\n"
"  user    => 'guest',                          # username. for 'guest' we do not also say 'password=>...'\n"
"\n"
"  spaces  => {\n"
"    999 => {                                   # definition of space[999] ...\n"
"      name => 'examples',                      #   space[999] name = 'examples'\n"
"      default_type => 'STR',                   #   space[999] field type is 'STR' if undefined\n"
"      fields => [ {                            #   definition of space[999].fields ...\n"
"          name => 'field1', type => 'NUM' } ], #     space[999].field[1] name='field1',type='NUM'\n"
"      indexes => {                             #   definition of space[999] indexes ...\n"
"        0 => {\n"
"          name => 'primary', fields => [ 'field1' ] } } } } );\n"
"\n"
"$tnt->insert('examples' => [ 99999, 'BB' ]);"
msgstr ""
"#!/usr/bin/perl\n"
"use DR::Tarantool ':constant', 'tarantool';\n"
"use DR::Tarantool ':all';\n"
"use DR::Tarantool::MsgPack::SyncClient;\n"
"\n"
"my $tnt = DR::Tarantool::MsgPack::SyncClient->connect(\n"
"  host    => '127.0.0.1',                      # поиск сервера Tarantool по адресу localhost\n"
"  port    => 3301,                             # на порту 3301\n"
"  user    => 'guest',                          # имя пользователя; здесь же можно задать пароль через 'password=>...'\n"
"                                                        # для пользователя 'guest' пароль не задается\n"
"  spaces  => {\n"
"    999 => {                                   # определение спейса 'space[999]' ...\n"
"      name => 'examples',                      # имя спейса 'space[999]' = 'examples'\n"
"      default_type => 'STR',                   # если тип поля в 'space[999]' не задан, то = 'STR'\n"
"      fields => [ {                            # определение полей в спейсе 'space[999]' ...\n"
"          name => 'field1', type => 'NUM' } ], # имя поля space[999].field[1]='field1', тип ='NUM'\n"
"      indexes => {                             # определение индексов спейса 'space[999]' ...\n"
"        0 => {\n"
"          name => 'primary', fields => [ 'field1' ] } } } } );\n"
"\n"
"$tnt->insert('examples' => [ 99999, 'BB' ]);"

msgid ""
"The example program uses field type names 'STR' and 'NUM' instead of "
":ref:`'string' and 'unsigned' <box_space-create_index>`, due to a temporary "
"Perl limitation."
msgstr ""
"Из-за временных ограничений языка Perl вместо полей типа :ref:`'string' и "
"'unsigned' <box_space-create_index>` в тестовой программе используются поля "
"типа 'STR' и 'NUM'."

msgid ""
"The example program only shows one request and does not show all that's "
"necessary for good practice. For that, please see the `tarantool-perl "
"repository <https://github.com/tarantool/tarantool-perl>`__."
msgstr ""
"Эта программа --- пример отправки единственного запроса. Чтобы узнать больше"
" о том, как работать с Tarantool, пользуясь языком Perl, обратитесь к "
"документации в `репозитории tarantool-perl "
"<https://github.com/tarantool/tarantool-perl>`__."

msgid "PHP"
msgstr "PHP"

msgid ""
"`tarantool-php <https://github.com/tarantool/tarantool-php>`__ is the "
"official PHP connector for Tarantool. It is not supplied as part of the "
"Tarantool repository and must be installed separately (see `installation "
"instructions <https://github.com/tarantool/tarantool-php/#installing-and-"
"building>`__ in the connector's ``README`` file)."
msgstr ""
"`tarantool-php <https://github.com/tarantool/tarantool-php>`_ --- "
"официальный PHP-коннектор для Tarantool. Он не входит в репозиторий "
"Tarantool, так что его необходимо устанавливать отдельно. Прочитайте "
"`инструкции по установке <https://github.com/tarantool/tarantool-"
"php/#installing-and-building>`_ в файле коннектора :file:`README`."

msgid ""
"Here is a complete PHP program that inserts ``[99999,'BB']`` into a space "
"named ``examples`` via the PHP API."
msgstr ""
"В следующем примере приводится полноценная программа на языке PHP, которая "
"осуществляет вставку кортежа ``[99999,'BB']`` в спейс ``examples`` с помощью"
" API для языка PHP."

msgid ""
"Before trying to run, check that the server instance is :ref:`listening "
"<cfg_basic-listen>` at ``localhost:3301`` and that the space ``examples`` "
"exists, as :ref:`described earlier <index-connector_setting>`."
msgstr ""
"Перед запуском проверьте, что экземпляр :ref:`прослушивает <cfg_basic-"
"listen>` порт ``localhost:3301``, а в базе создан спейс ``examples``, как "
":ref:`предложено выше <index-connector_setting>`."

msgid "To run, paste the code into a file named :file:`example.php` and say:"
msgstr ""
"Чтобы запустить программу, сохраните код в файл :file:`example.php` и "
"выполните следующую команду:"

msgid "$ php -d extension=~/tarantool-php/modules/tarantool.so example.php"
msgstr "$ php -d extension=~/tarantool-php/modules/tarantool.so example.php"

msgid ""
"The program will open a socket connection with the Tarantool instance at "
"``localhost:3301``, then send an :ref:`INSERT <box_space-insert>` request, "
"then -- if all is well -- print \"Insert succeeded\"."
msgstr ""
"Программа откроет сокет для соединения с экземпляром по адресу "
"``localhost:3301`` и отправит :ref:`INSERT-запрос <box_space-insert>`. При "
"успешном выполнении запроса программа выведет сообщение \"Insert "
"succeeded\"."

msgid ""
"If the tuple already exists, the program will print \"Duplicate key exists "
"in unique index 'primary' in space 'examples'\"."
msgstr ""
"Если такой кортеж уже существует, то программа выведет сообщение об ошибке: "
"“Duplicate key exists in unique index 'primary' in space 'examples'”."

msgid ""
"<?php\n"
"$tarantool = new Tarantool('localhost', 3301);\n"
"\n"
"try {\n"
"    $tarantool->insert('examples', [99999, 'BB']);\n"
"    echo \"Insert succeeded\\n\";\n"
"} catch (Exception $e) {\n"
"    echo $e->getMessage(), \"\\n\";\n"
"}"
msgstr ""
"<?php\n"
"$tarantool = new Tarantool('localhost', 3301);\n"
"\n"
"try {\n"
"    $tarantool->insert('examples', [99999, 'BB']);\n"
"    echo \"Insert succeeded\\n\";\n"
"} catch (Exception $e) {\n"
"    echo $e->getMessage(), \"\\n\";\n"
"}"

msgid ""
"The example program only shows one request and does not show all that's "
"necessary for good practice. For that, please see `tarantool/tarantool-php "
"<https://github.com/tarantool/tarantool-php>`__ project at GitHub."
msgstr ""
"Эта программа --- пример отправки единственного запроса. Чтобы узнать больше"
" о том, как работать с Tarantool, пользуясь языком PHP, обратитесь к "
"документации `проекта tarantool-php на GitHub "
"<https://github.com/tarantool/tarantool-php>`_."

msgid ""
"Besides, there is another community-driven `tarantool-php GitHub project "
"<https://github.com/tarantool-php>`__ which includes an `alternative "
"connector <https://github.com/tarantool-php/client>`__ written in pure PHP, "
"an `object mapper <https://github.com/tarantool-php/mapper>`__, a `queue "
"<https://github.com/tarantool-php/queue>`__ and other packages."
msgstr ""
"Кроме того, сообщество разработчиков поддерживает несколько проектов на "
"GitHub. Среди них --- `проект tarantool-php <https://github.com/tarantool-"
"php>`_, который включает в себя `вариант коннектора "
"<https://github.com/tarantool-php/client>`_, написанный на чистом PHP, "
"`модуль сопоставления объектов <https://github.com/tarantool-php/mapper>`_, "
"`администратор очередей <https://github.com/tarantool-php/queue>`_ и другие "
"пакеты."

msgid "Python"
msgstr "Python"

msgid ""
"`tarantool-python <http://github.com/tarantool/tarantool-python>`__ is the "
"official Python connector for Tarantool. It is not supplied as part of the "
"Tarantool repository and must be installed separately (see below for "
"details)."
msgstr ""
"`tarantool-python <http://github.com/tarantool/tarantool-python>`_ --- "
"официальный Python-коннектор для Tarantool. Он не входит в репозиторий "
"Tarantool, так что его необходимо устанавливать отдельно (см. подробную "
"информацию ниже)."

msgid ""
"Here is a complete Python program that inserts ``[99999,'Value','Value']`` "
"into space ``examples`` via the high-level Python API."
msgstr ""
"В следующем примере приводится полноценная программа на языке Python, "
"которая осуществляет вставку кортежа ``[99999,'Value','Value']`` в спейс "
"``examples`` с помощью высокоуровневого API для языка Python."

msgid ""
"#!/usr/bin/python\n"
"from tarantool import Connection\n"
"\n"
"c = Connection(\"127.0.0.1\", 3301)\n"
"result = c.insert(\"examples\",(99999,'Value', 'Value'))\n"
"print result"
msgstr ""
"#!/usr/bin/python\n"
"from tarantool import Connection\n"
"\n"
"c = Connection(\"127.0.0.1\", 3301)\n"
"result = c.insert(\"examples\",(99999,'Value', 'Value'))\n"
"print result"

msgid ""
"To prepare, paste the code into a file named :file:`example.py` and install "
"the ``tarantool-python`` connector with either :samp:`pip install "
"tarantool\\>0.4` to install in :file:`/usr` (requires **root** privilege) or"
" :samp:`pip install tarantool\\>0.4 --user` to install in :file:`~` i.e. "
"user's default directory."
msgstr ""
"Перед запуском тестовой программы сохраните ее код в файл :file:`example.py`"
" и установите коннектор ``tarantool-python``. Чтобы установить его в "
"директорию :file:`/usr`, используйте команду :samp:`pip install "
"tarantool\\>0.4`. Для этого требуются права уровня **root**. Вместо этого вы"
" можете установить коннектор в директорию :file:`~`, т.е. в используемую по "
"умолчанию директорию текущего пользователя. Для этого выполните команду "
":samp:`pip install tarantool\\>0.4 --user`."

msgid ""
"Before trying to run, check that the server instance is :ref:`listening "
"<cfg_basic-listen>` at ``localhost:3301`` and that the space ``examples`` "
"exists, as :ref:`described earlier <index-connector_setting>`. To run the "
"program, say :samp:`python example.py`. The program will connect to the "
"Tarantool server, will send the :ref:`INSERT <box_space-insert>` request, "
"and will not throw any exception if all went well. If the tuple already "
"exists, the program will throw ``tarantool.error.DatabaseError: (3, "
"\"Duplicate key exists in unique index 'primary' in space 'examples'\")``."
msgstr ""
"Перед запуском проверьте, что экземпляр прослушивает порт "
"``localhost:3301``, а в базе создан спейс ``examples``, как :ref:`предложено"
" выше <index-connector_setting>`. Чтобы запустить тестовую программу, "
"выполните команду :samp:`python example.py`. Программа установит соединение "
"с сервером Tarantool и отправит запрос :ref:`INSERT<box_space-insert>`. Если"
" запрос будет выполнен успешно, программа не сгенерирует исключений. Если "
"окажется, что такой кортеж уже существует, то программа сгенерирует "
"исключение `tarantool.error.DatabaseError: (3, \"Duplicate key exists in "
"unique index 'primary' in space 'examples'\")`."

msgid ""
"The example program only shows one request and does not show all that's "
"necessary for good practice. For that, please see `tarantool-python "
"<http://github.com/tarantool/tarantool-python>`__ project at GitHub. For an "
"example of using Python API with `queue managers for Tarantool "
"<https://github.com/tarantool/queue>`__, see `queue-python "
"<https://github.com/tarantool/queue-python>`__ project at GitHub."
msgstr ""
"Эта программа --- пример отправки единственного запроса. Чтобы узнать больше"
" о том, как работать с Tarantool, пользуясь языком Python, обратитесь к "
"документации `проекта tarantool-python на GitHub "
"<http://github.com/tarantool/tarantool-python>`_. А на странице `проекта "
"queue-python на GitHub <https://github.com/tarantool/queue-python>`_ вы "
"найдете примеры использования Python API для работы с `очередями сообщений в"
" Tarantool <https://github.com/tarantool/queue>`_."

msgid "Also there are several community-driven Python connectors:"
msgstr ""
"Кроме того, сообщество разработчиков поддерживает следующие Python-"
"коннекторы:"

msgid ""
"`asynctnt <https://github.com/igorcoding/asynctnt>`__ with asyncio support"
msgstr ""
"`asynctnt <https://github.com/igorcoding/asynctnt>`_ с поддержкой asyncio"

msgid ""
"`aiotarantool <https://github.com/shveenkov/aiotarantool>`__ also with "
"asyncio support"
msgstr ""
"`aiotarantool <https://github.com/shveenkov/aiotarantool>`_, также с "
"поддержкой asyncio"

msgid ""
"`gtarantool <https://github.com/shveenkov/gtarantool>`__ with gevent "
"support, **no active maintenance**"
msgstr ""
"`gtarantool <https://github.com/shveenkov/gtarantool>`__ с поддержкой "
"gevent, **не обновляется**"

msgid ""
"The table below contains a feature comparison for asynctnt, gtarantool and "
"tarantool-python. aiotarantool is absent there because it is quite outdated "
"and unmaintained."
msgstr ""
"В этой таблице сравниваются функции коннекторов asynctnt, gtarantool и "
"tarantool-python. aiotarantool здесь отсутствует, так как он устарел и "
"больше не поддерживается."

msgid "Last update: February 2022"
msgstr "Последнее обновление: февраль 2022"

msgid "Parameter"
msgstr "Параметры"

msgid "`igorcoding/asynctnt <https://github.com/igorcoding/asynctnt>`__"
msgstr "`igorcoding/asynctnt <https://github.com/igorcoding/asynctnt>`__"

msgid "`shveenkov/gtarantool <https://github.com/shveenkov/gtarantool>`__"
msgstr "`shveenkov/gtarantool <https://github.com/shveenkov/gtarantool>`__"

msgid ""
"`tarantool/tarantool-python <https://github.com/tarantool/tarantool-"
"python>`__"
msgstr ""
"`tarantool/tarantool-python <https://github.com/tarantool/tarantool-"
"python>`__"

msgid "Apache License 2.0"
msgstr "Apache License 2.0"

msgid "LGPL"
msgstr "LGPL"

msgid "BSD-2"
msgstr "BSD-2"

msgid "Is maintained"
msgstr "Поддерживается"

msgid "No (last updated in 2018)"
msgstr "Нет (последнее обновление в 2018)"

msgid "Known Issues"
msgstr "Известные проблемы"

msgid ""
"`issue #18 <https://github.com/igorcoding/asynctnt/issues/18>`__ (no running"
" event loop)"
msgstr ""
"`тикет #18 <https://github.com/igorcoding/asynctnt/issues/18>`__ (нет "
"событийного цикла)"

msgid "None"
msgstr "Нет"

msgid ""
"`issue #105 <https://github.com/tarantool/tarantool-python/issues/105>`__ "
"(unpack of binary data)"
msgstr ""
"`тикет #105 <https://github.com/tarantool/tarantool-python/issues/105>`__ "
"(распаковка бинарных данных)"

msgid "Yes (`github.io <https://igorcoding.github.io/asynctnt/>`__)"
msgstr "Есть (`github.io <https://igorcoding.github.io/asynctnt/>`__)"

msgid ""
"Yes (`tarantool.io "
"<https://www.tarantool.io/en/doc/latest/getting_started/getting_started_python/>`__"
" and `readthedocs <https://tarantool-python.readthedocs.io/en/latest/quick-"
"start.en.html>`__ (`obsolete <https://github.com/tarantool/tarantool-"
"python/issues/67>`__))"
msgstr ""
"Есть (`tarantool.io "
"<https://www.tarantool.io/en/doc/latest/getting_started/getting_started_python/>`__"
" и `readthedocs <https://tarantool-python.readthedocs.io/en/latest/quick-"
"start.en.html>`__ (`неактуальна <https://github.com/tarantool/tarantool-"
"python/issues/67>`__))"

msgid "No (tests exist)"
msgstr "Нет (есть тесты)"

msgid "AppVeyor (only Windows)"
msgstr "AppVeyor (только на Windows)"

msgid "51"
msgstr "51"

msgid "17"
msgstr "17"

msgid "78"
msgstr "78"

msgid "Static Analysis"
msgstr "Статический анализ"

msgid "Yes (Flake8)"
msgstr "Есть (Flake8)"

msgid "`pip <https://pypi.org/project/asynctnt/>`__"
msgstr "`pip <https://pypi.org/project/asynctnt/>`__"

msgid "`pip <https://pypi.org/project/gtarantool/>`__"
msgstr "`pip <https://pypi.org/project/gtarantool/>`__"

msgid ""
"`deb, rpm, pip <https://github.com/tarantool/tarantool-python#download-and-"
"install>`__"
msgstr ""
"`deb, rpm, pip <https://github.com/tarantool/tarantool-python#download-and-"
"install>`__"

msgid "Support asynchronous mode"
msgstr "Поддержка асинхронного режима"

msgid "Yes, `asyncio <https://docs.python.org/3/library/asyncio.html>`__"
msgstr "Есть, `asyncio <https://docs.python.org/3/library/asyncio.html>`__"

msgid ""
"Yes (`gevent "
"<https://www.gevent.org/api/gevent.event.html#gevent.event.AsyncResult>`__, "
"example: `test_gevent.py "
"<https://github.com/shveenkov/gtarantool/blob/master/tests/test_gevent.py>`__)"
msgstr ""
"Есть, `gevent "
"<https://www.gevent.org/api/gevent.event.html#gevent.event.AsyncResult>`__ "
"(пример: `test_gevent.py "
"<https://github.com/shveenkov/gtarantool/blob/master/tests/test_gevent.py>`__)"

msgid "Batching support"
msgstr "Поддержка пакетной обработки"

msgid ""
"No (`issue #55 <https://github.com/tarantool/tarantool-python/issues/55>`__)"
msgstr ""
"Нет (`тикет #55 <https://github.com/tarantool/tarantool-"
"python/issues/55>`__)"

msgid ""
"Yes (automatically, see `auto_refetch_schema "
"<https://igorcoding.github.io/asynctnt/api.html>`__)"
msgstr ""
"Автоматическое (см. `auto_refetch_schema "
"<https://igorcoding.github.io/asynctnt/api.html>`__)"

msgid "Yes (automatically)"
msgstr "Автоматическое"

msgid ""
"`SQL support "
"<https://www.tarantool.io/en/doc/latest/reference/reference_sql/>`__"
msgstr ""
"`Поддержка SQL "
"<https://www.tarantool.io/en/doc/latest/reference/reference_sql/>`__"

msgid "Yes (tests/test_op_sql.py)"
msgstr "Есть (tests/test_op_sql.py)"

msgid "Yes (tarantool/connection.py)"
msgstr "Есть (tarantool/connection.py)"

msgid ""
"`Interactive transactions "
"<https://www.tarantool.io/en/doc/latest/book/box/stream/>`__"
msgstr ""
"`Интерактивные транзакции "
"<https://www.tarantool.io/en/doc/latest/book/box/stream/>`__"

msgid ""
"No (`issue #163 <https://github.com/tarantool/tarantool-"
"python/issues/163>`__)"
msgstr ""
"Нет (`тикет #163 <https://github.com/tarantool/tarantool-"
"python/issues/163>`__)"

msgid ""
"`Varbinary support "
"<https://www.tarantool.io/en/doc/latest/book/box/data_model/>`__"
msgstr ""
"`Поддержка varbinary "
"<https://www.tarantool.io/en/doc/latest/book/box/data_model/>`__"

msgid ""
"Yes (`issue #105 <https://github.com/tarantool/tarantool-"
"python/issues/105>`__)"
msgstr ""
"Есть (`тикет #105 <https://github.com/tarantool/tarantool-"
"python/issues/105>`__)"

msgid ""
"`UUID support "
"<https://www.tarantool.io/en/doc/latest/book/box/data_model/>`__"
msgstr ""
"`Поддержка UUID "
"<https://www.tarantool.io/en/doc/latest/book/box/data_model/>`__"

msgid ""
"`Decimal support "
"<https://www.tarantool.io/en/doc/latest/book/box/data_model/>`__"
msgstr ""
"`Поддержка decimal "
"<https://www.tarantool.io/en/doc/latest/book/box/data_model/>`__"

msgid "Almost (v2 branch)"
msgstr "Частично (в ветке v2)"

msgid ""
"`EXT_ERROR support "
"<https://www.tarantool.io/ru/doc/latest/dev_guide/internals/msgpack_extensions/#the-"
"error-type>`__"
msgstr ""
"`Поддержка EXT_ERROR "
"<https://www.tarantool.io/ru/doc/latest/dev_guide/internals/msgpack_extensions/#the-"
"error-type>`__"

msgid ""
"`Datetime support "
"<https://github.com/tarantool/tarantool/discussions/6244>`__"
msgstr ""
"`Поддержка datetime "
"<https://github.com/tarantool/tarantool/discussions/6244>`__"

msgid ""
"`box.session.push() responses "
"<https://www.tarantool.io/ru/doc/latest/reference/reference_lua/box_session/push/>`__"
msgstr ""
"`Возвращаемые значения box.session.push() "
"<https://www.tarantool.io/ru/doc/latest/reference/reference_lua/box_session/push/>`__"

msgid "Yes (see push_subscribe option and docs/pushes.rst)"
msgstr "Есть (см. push_subscribe option и docs/pushes.rst)"

msgid ""
"`Session settings "
"<https://www.tarantool.io/en/doc/latest/reference/reference_lua/box_space/_session_settings/>`__"
msgstr ""
"`Настройки сессии "
"<https://www.tarantool.io/en/doc/latest/reference/reference_lua/box_space/_session_settings/>`__"

msgid ""
"`Graceful shutdown <https://github.com/tarantool/tarantool/issues/5924>`__"
msgstr ""
"`Мягкое завершение <https://github.com/tarantool/tarantool/issues/5924>`__"

msgid ""
"`IPROTO_ID (feature discovering) "
"<https://github.com/tarantool/doc/issues/2419>`__"
msgstr ""
"`IPROTO_ID (обнаружение поддерживаемых функций) "
"<https://github.com/tarantool/doc/issues/2419>`__"

msgid "Support `CRUD <https://github.com/tarantool/crud>`__"
msgstr "Поддержка `CRUD <https://github.com/tarantool/crud>`__"

msgid "Autoreconnect"
msgstr "Автоматическое переподключение"

msgid "Yes (reconnect_max_attempts, reconnect_delay)"
msgstr "Есть (reconnect_max_attempts, reconnect_delay)"

msgid ""
"Yes (reconnect_max_attempts, reconnect_delay), checking of connection "
"liveness"
msgstr ""
"Есть (reconnect_max_attempts, reconnect_delay), проверка состояния "
"соединения"

msgid "Yes (round robin failover)"
msgstr "Есть (циклическое восстановление после сбоев)"

msgid ""
"Support of `PEP 249 -- Python Database API Specification v2.0 "
"<https://www.python.org/dev/peps/pep-0249/>`__"
msgstr ""
"Поддержка `PEP 249 --- Python Database API Specification v2.0 "
"<https://www.python.org/dev/peps/pep-0249/>`__"

msgid ""
"`Yes <https://github.com/tarantool/tarantool-python/wiki/PEP-249-Database-"
"API>`__"
msgstr ""
"`Есть <https://github.com/tarantool/tarantool-python/wiki/PEP-249-Database-"
"API>`__"

msgid "Node.js"
msgstr "Node.js"

msgid ""
"The most commonly used node.js driver is the `Node Tarantool driver "
"<https://github.com/KlonD90/node-tarantool-driver>`_. It is not supplied as "
"part of the Tarantool repository; it must be installed separately. The most "
"common way to install it is with `npm <https://www.sitepoint.com/beginners-"
"guide-node-package-manager/>`_. For example, on Ubuntu, the installation "
"could look like this after npm has been installed:"
msgstr ""
"Самый распространенный драйвер для Node.js --- `Node Tarantool driver "
"<https://github.com/KlonD90/node-tarantool-driver>`_. Он не входит в "
"репозиторий Tarantool, так что его необходимо устанавливать отдельно. Проще "
"всего установить его с помощью `npm <https://www.sitepoint.com/beginners-"
"guide-node-package-manager/>`_. Например, на Ubuntu установка драйвера будет"
" выглядеть следующим образом (в этом примере менеджер пакетов npm уже "
"установлен):"

msgid "$ npm install tarantool-driver --global"
msgstr "$ npm install tarantool-driver --global"

msgid ""
"Here is a complete node.js program that inserts ``[99999,'BB']`` into "
"``space[999]`` via the node.js API. Before trying to run, check that the "
"server instance is :ref:`listening <cfg_basic-listen>` at ``localhost:3301``"
" and that the space ``examples`` exists, as :ref:`described earlier <index-"
"connector_setting>`. To run, paste the code into a file named "
":file:`example.rs` and say ``node example.rs``. The program will connect "
"using an application-specific definition of the space. The program will open"
" a socket connection with the Tarantool instance at ``localhost:3301``, then"
" send an :ref:`INSERT <box_space-insert>` request, then — if all is well — "
"end after saying \"Insert succeeded\". If Tarantool is not running on "
"``localhost`` with listen port = 3301, the program will print “Connect "
"failed”. If :ref:`the 'guest' user <box_space-user>` does not have "
"authorization to connect, the program will print \"Auth failed\". If the "
"insert request fails for any reason, for example because the tuple already "
"exists, the program will print \"Insert failed\"."
msgstr ""
"В следующем примере приводится полноценная программа, написанная с "
"использованием Node.js. Эта программа осуществляет вставку кортежа "
"``[99999,'BB']`` в спейс ``space[999]`` с помощью API для Node.js. Перед "
"запуском проверьте, что экземпляр :ref:`прослушивает <cfg_basic-listen>` "
"порт ``localhost:3301``, а в базе создан спейс ``examples``, как "
":ref:`предложено выше <index-connector_setting>`. Чтобы запустить программу,"
" сохраните код в файл :file:`example.rs` и выполните команду ``node "
"example.rs``. Программа установит соединение, используя определение спейса. "
"Затем она откроет сокет для соединения с экземпляром по адресу "
"``localhost:3301`` и отправит :ref:`INSERT-запрос <box_space-insert>`. Если "
"запрос будет выполнен успешно, программа выведет сообщение \"Insert "
"succeeded\". Если Tarantool не запущен по адресу ``localhost`` и порт 3301 "
"не прослушивается, то программа выведет сообщение об ошибке “Connect "
"failed”. Если у :ref:`пользователя 'guest' <box_space-user>` нет прав на "
"установку соединения, программа выведет сообщение об ошибке \"Auth failed\"."
" Если запрос на вставку по какой-либо причине не сработает (например, такой "
"кортеж уже существует), то программа выведет сообщение об ошибке \"Insert "
"failed\"."

msgid ""
"var TarantoolConnection = require('tarantool-driver');\n"
"var conn = new TarantoolConnection({port: 3301});\n"
"var insertTuple = [99999, \"BB\"];\n"
"conn.connect().then(function() {\n"
"    conn.auth(\"guest\", \"\").then(function() {\n"
"        conn.insert(999, insertTuple).then(function() {\n"
"            console.log(\"Insert succeeded\");\n"
"            process.exit(0);\n"
"    }, function(e) { console.log(\"Insert failed\");  process.exit(1); });\n"
"    }, function(e) { console.log(\"Auth failed\");    process.exit(1); });\n"
"    }, function(e) { console.log(\"Connect failed\"); process.exit(1); });"
msgstr ""
"var TarantoolConnection = require('tarantool-driver');\n"
"var conn = new TarantoolConnection({port: 3301});\n"
"var insertTuple = [99999, \"BB\"];\n"
"conn.connect().then(function() {\n"
"    conn.auth(\"guest\", \"\").then(function() {\n"
"        conn.insert(999, insertTuple).then(function() {\n"
"            console.log(\"Insert succeeded\");\n"
"            process.exit(0);\n"
"    }, function(e) { console.log(\"Insert failed\");  process.exit(1); });\n"
"    }, function(e) { console.log(\"Auth failed\");    process.exit(1); });\n"
"    }, function(e) { console.log(\"Connect failed\"); process.exit(1); });"

msgid ""
"The example program only shows one request and does not show all that's "
"necessary for good practice. For that, please see  `The node.js driver "
"repository <https://github.com/KlonD90/node-tarantool-driver>`_."
msgstr ""
"Эта программа --- пример отправки единственного запроса. Чтобы узнать больше"
" о том, как работать с Tarantool, пользуясь Node.js, обратитесь к "
"документации в `репозитории драйвера для Node.js "
"<https://github.com/KlonD90/node-tarantool-driver>`_."

msgid "C#"
msgstr "C#"

msgid ""
"The most commonly used C# driver is `progaudi.tarantool "
"<https://github.com/progaudi/progaudi.tarantool>`__, previously named "
"``tarantool-csharp``. It is not supplied as part of the Tarantool "
"repository; it must be installed separately. The makers recommend `cross-"
"platform installation using Nuget "
"<https://www.nuget.org/packages/progaudi.tarantool>`__."
msgstr ""
"Самый распространенный драйвер для C# --- `progaudi.tarantool "
"<https://github.com/progaudi/progaudi.tarantool>`_, который раньше назывался"
" ``tarantool-csharp``. Он не входит в репозиторий Tarantool, так что его "
"необходимо устанавливать отдельно. Создатели драйвера рекомендуют "
"`кроссплатформенную установку с помощью Nuget "
"<https://www.nuget.org/packages/progaudi.tarantool>`__."

msgid ""
"To be consistent with the other instructions in this chapter, here is a way "
"to install the driver directly on Ubuntu 16.04."
msgstr ""
"По аналогии с остальными инструкциями в главе приводится способ установки "
"драйвера напрямую на Ubuntu 16.04."

msgid ""
"Install .net core from Microsoft. Follow `.net core installation "
"instructions <https://dotnet.microsoft.com/download>`__."
msgstr ""
"Установите среду .NET Core от Microsoft. Следуйте `инструкциям по установке "
".NET Core <https://dotnet.microsoft.com/download>`__."

msgid ""
"Mono will not work, nor will .Net from xbuild. Only .net core supported on "
"Linux and Mac."
msgstr ""
"Так как на Linux и macOS поддерживается только .NET Core, установить "
"коннектор с помощью Mono или .NET от xbuild невозможно."

msgid ""
"Read the Microsoft End User License Agreement first, because it is not an "
"ordinary open-source agreement and there will be a message during "
"installation saying \"This software may collect information about you and "
"your use of the software, and send that to Microsoft.\" Still you can `set "
"environment variables <https://docs.microsoft.com/en-"
"us/dotnet/core/tools/telemetry>`__ to opt out from telemetry."
msgstr ""
"Прочитайте Условия лицензионного соглашения Microsoft, поскольку оно не "
"похоже на обычные соглашения для ПО с открытым кодом. Во время установки "
"появится сообщение, что ПО может собирать информацию о вас и о том, как вы "
"используете программу: \"This software may collect information about you and"
" your use of the software, and send that to Microsoft\". Тем не менее вы "
"можете `задать переменные окружения <https://docs.microsoft.com/en-"
"us/dotnet/core/tools/telemetry>`_, чтобы не участвовать в сборе "
"телеметрических данных."

msgid "Create a new console project."
msgstr "Создайте новый проект консольного приложения:"

msgid ""
"$ cd ~\n"
"$ mkdir progaudi.tarantool.test\n"
"$ cd progaudi.tarantool.test\n"
"$ dotnet new console"
msgstr ""
"$ cd ~\n"
"$ mkdir progaudi.tarantool.test\n"
"$ cd progaudi.tarantool.test\n"
"$ dotnet new console"

msgid "Add ``progaudi.tarantool`` reference."
msgstr "Добавьте пакет ``progaudi.tarantool``:"

msgid "$ dotnet add package progaudi.tarantool"
msgstr "$ dotnet add package progaudi.tarantool"

msgid "Change code in ``Program.cs``."
msgstr "Замените код в ``Program.cs`` на следующий:"

msgid ""
"$ cat <<EOT > Program.cs\n"
"using System;\n"
"using System.Threading.Tasks;\n"
"using ProGaudi.Tarantool.Client;\n"
"\n"
"public class HelloWorld\n"
"{\n"
"  static public void Main ()\n"
"  {\n"
"    Test().GetAwaiter().GetResult();\n"
"  }\n"
"  static async Task Test()\n"
"  {\n"
"    var box = await Box.Connect(\"127.0.0.1:3301\");\n"
"    var schema = box.GetSchema();\n"
"    var space = await schema.GetSpace(\"examples\");\n"
"    await space.Insert((99999, \"BB\"));\n"
"  }\n"
"}\n"
"EOT"
msgstr ""
"$ cat <<EOT > Program.cs\n"
"using System;\n"
"using System.Threading.Tasks;\n"
"using ProGaudi.Tarantool.Client;\n"
"\n"
"public class HelloWorld\n"
"{\n"
"  static public void Main ()\n"
"  {\n"
"    Test().GetAwaiter().GetResult();\n"
"  }\n"
"  static async Task Test()\n"
"  {\n"
"    var box = await Box.Connect(\"127.0.0.1:3301\");\n"
"    var schema = box.GetSchema();\n"
"    var space = await schema.GetSpace(\"examples\");\n"
"    await space.Insert((99999, \"BB\"));\n"
"  }\n"
"}\n"
"EOT"

msgid "Build and run your application."
msgstr "Соберите и запустите приложение."

msgid ""
"Before trying to run, check that the server is listening at "
"``localhost:3301`` and that the space ``examples`` exists, as "
":ref:`described earlier <index-connector_setting>`."
msgstr ""
"Перед запуском проверьте, что экземпляр прослушивает порт "
"``localhost:3301``, а в базе создан спейс ``examples``, как :ref:`предложено"
" выше <index-connector_setting>`."

msgid ""
"$ dotnet restore\n"
"$ dotnet run"
msgstr ""
"$ dotnet restore\n"
"$ dotnet run"

msgid "The program will:"
msgstr "Программа выполнит следующие действия:"

msgid "connect using an application-specific definition of the space,"
msgstr "Установит соединение, используя определение спейса."

msgid ""
"open a socket connection with the Tarantool server at ``localhost:3301``,"
msgstr ""
"Откроет сокет для соединения с сервером Tarantool по адресу "
"``localhost:3301``."

msgid ""
"send an INSERT request, and — if all is well — end without saying anything."
msgstr ""
"Отправит INSERT-запрос. Если он будет выполнен успешно, программа закончит "
"работу, не выводя сообщений."

msgid ""
"If Tarantool is not running on localhost with listen port = 3301, or if user"
" 'guest' does not have authorization to connect, or if the INSERT request "
"fails for any reason, the program will print an error message, among other "
"things (stacktrace, etc)."
msgstr ""
"Если Tarantool не запущен по адресу ``localhost``, порт 3301 не "
"прослушивается, у пользователя 'guest' нет прав на установку соединения или "
"запрос на вставку по какой-либо причине не сработал, то программа выведет "
"сообщение об ошибке и сопутствующую информацию (в частности, трассировку "
"стека)."

msgid ""
"The example program only shows one request and does not show all that’s "
"necessary for good practice. For that, please see the `progaudi.tarantool "
"driver repository <https://github.com/progaudi/progaudi.tarantool>`__."
msgstr ""
"Эта программа --- пример отправки единственного запроса. Чтобы узнать больше"
" о том, как работать с Tarantool, пользуясь PHP API, обратитесь к "
"документации `проекта tarantool-php на GitHub "
"<https://github.com/tarantool/tarantool-php>`__."

msgid "Here follow two examples of using Tarantool's high-level C API."
msgstr ""
"В этом разделе приведены два примера использования высокоуровневого API "
"Tarantool для языка C."

msgid "Example 1"
msgstr "Пример 1"

msgid ""
"Here is a complete C program that inserts :code:`[99999,'B']` into space "
":code:`examples` via the high-level C API."
msgstr ""
"В следующем примере приводится полноценная программа на языке C, которая "
"осуществляет вставку кортежа :code:``[99999,'B']`` в спейс :code:`examples` "
"с помощью высокоуровневого API для языка C."

msgid ""
"#include <stdio.h>\n"
"#include <stdlib.h>\n"
"\n"
"#include <tarantool/tarantool.h>\n"
"#include <tarantool/tnt_net.h>\n"
"#include <tarantool/tnt_opt.h>\n"
"\n"
"void main() {\n"
"   struct tnt_stream *tnt = tnt_net(NULL);          /* See note = SETUP */\n"
"   tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");\n"
"   if (tnt_connect(tnt) < 0) {                      /* See note = CONNECT */\n"
"       printf(\"Connection refused\\n\");\n"
"       exit(-1);\n"
"   }\n"
"   struct tnt_stream *tuple = tnt_object(NULL);     /* See note = MAKE REQUEST */\n"
"   tnt_object_format(tuple, \"[%d%s]\", 99999, \"B\");\n"
"   tnt_insert(tnt, 999, tuple);                     /* See note = SEND REQUEST */\n"
"   tnt_flush(tnt);\n"
"   struct tnt_reply reply;  tnt_reply_init(&reply); /* See note = GET REPLY */\n"
"   tnt->read_reply(tnt, &reply);\n"
"   if (reply.code != 0) {\n"
"       printf(\"Insert failed %lu.\\n\", reply.code);\n"
"   }\n"
"   tnt_close(tnt);                                  /* See below = TEARDOWN */\n"
"   tnt_stream_free(tuple);\n"
"   tnt_stream_free(tnt);\n"
"}"
msgstr ""
"#include <stdio.h>\n"
"#include <stdlib.h>\n"
"\n"
"#include <tarantool/tarantool.h>\n"
"#include <tarantool/tnt_net.h>\n"
"#include <tarantool/tnt_opt.h>\n"
"\n"
"void main() {\n"
"   struct tnt_stream *tnt = tnt_net(NULL);          /* См. раздел \"Настройка\" ниже */\n"
"   tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");\n"
"   if (tnt_connect(tnt) < 0) {                      /* См. раздел \"Соединение\" ниже */\n"
"       printf(\"Connection refused\\n\");\n"
"       exit(-1);\n"
"   }\n"
"   struct tnt_stream *tuple = tnt_object(NULL);     /* См. раздел \"Формирование запроса\" ниже */\n"
"   tnt_object_format(tuple, \"[%d%s]\", 99999, \"B\");\n"
"   tnt_insert(tnt, 999, tuple);                     /* См. раздел \"Отправка запроса\" ниже */\n"
"   tnt_flush(tnt);\n"
"   struct tnt_reply reply;  tnt_reply_init(&reply); /* См. раздел \"Получение ответа\" ниже */\n"
"   tnt->read_reply(tnt, &reply);\n"
"   if (reply.code != 0) {\n"
"       printf(\"Insert failed %lu.\\n\", reply.code);\n"
"   }\n"
"   tnt_close(tnt);                                  /* См. раздел \"Завершение\" ниже */\n"
"   tnt_stream_free(tuple);\n"
"   tnt_stream_free(tnt);\n"
"}"

msgid ""
"Paste the code into a file named :file:`example.c` and install "
"``tarantool-c``. One way to install ``tarantool-c`` (using Ubuntu) is:"
msgstr ""
"Скопируйте код программы в файл :file:`example.c` и установите коннектор "
"``tarantool-c``. Вот один из способов установки ``tarantool-c`` (на Ubuntu):"

msgid ""
"$ git clone git://github.com/tarantool/tarantool-c.git ~/tarantool-c\n"
"$ cd ~/tarantool-c\n"
"$ git submodule init\n"
"$ git submodule update\n"
"$ cmake .\n"
"$ make\n"
"$ make install"
msgstr ""
"$ git clone git://github.com/tarantool/tarantool-c.git ~/tarantool-c\n"
"$ cd ~/tarantool-c\n"
"$ git submodule init\n"
"$ git submodule update\n"
"$ cmake .\n"
"$ make\n"
"$ make install"

msgid "To compile and link the program, run:"
msgstr ""
"Чтобы скомпилировать и слинковать программу, выполните следующую команду:"

msgid ""
"$ # sometimes this is necessary:\n"
"$ export LD_LIBRARY_PATH=/usr/local/lib\n"
"$ gcc -o example example.c -ltarantool"
msgstr ""
"$ # иногда это необходимо:\n"
"$ export LD_LIBRARY_PATH=/usr/local/lib\n"
"$ gcc -o example example.c -ltarantool"

msgid ""
"Before trying to run, check that a server instance is listening at "
"``localhost:3301`` and that the space ``examples`` exists, as "
":ref:`described earlier <index-connector_setting>`. To run the program, say "
":samp:`./example`. The program will connect to the Tarantool instance, and "
"will send the request. If Tarantool is not running on localhost with listen "
"address = 3301, the program will print “Connection refused”. If the insert "
"fails, the program will print \"Insert failed\" and an error number (see all"
" error codes in the source file `/src/box/errcode.h "
"<https://github.com/tarantool/tarantool/blob/2.1/src/box/errcode.h>`__)."
msgstr ""
"Перед запуском проверьте, что экземпляр прослушивает порт "
"``localhost:3301``, а в базе создан спейс ``examples``, как :ref:`предложено"
" выше <index-connector_setting>`. Чтобы запустить программу, выполните "
"команду :samp:`./example`. Программа установит соединение с экземпляром "
"Tarantool и отправит запрос. Если Tarantool не запущен по адресу "
"``localhost`` и порт 3301 не прослушивается, то программа выведет сообщение "
"об ошибке “Connection refused”. Если запрос на вставку не будет выполнен, "
"программа выведет сообщение \"Insert failed\" и код ошибки. Все коды ошибок "
"можно найти в исходном файле `/src/box/errcode.h "
"<https://github.com/tarantool/tarantool/blob/2.1/src/box/errcode.h>`__."

msgid "Here are notes corresponding to comments in the example program."
msgstr "Ниже вы найдете подробные комментарии к коду тестовой программы."

msgid "SETUP"
msgstr "**Настройка**"

msgid "The setup begins by creating a stream."
msgstr "Настройка начинается с создания потока."

msgid ""
"struct tnt_stream *tnt = tnt_net(NULL);\n"
"tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");"
msgstr ""
"struct tnt_stream *tnt = tnt_net(NULL);\n"
"tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");"

msgid ""
"In this program, the stream will be named ``tnt``. Before connecting on the "
"``tnt`` stream, some options may have to be set. The most important option "
"is TNT_OPT_URI. In this program, the :ref:`URI <index-uri>` is "
"``localhost:3301``, since that is where the Tarantool instance is supposed "
"to be listening."
msgstr ""
"В нашей программе поток назван ``tnt``. Перед установкой соединения с "
"потоком ``tnt`` нужно задать ряд опций. Самая важная из них --- TNT_OPT_URI."
" Для этой опции указан :ref:`URI <index-uri>` ``localhost:3301``: по этому "
"адресу должно быть настроено прослушивание на стороне экземпляра Tarantool."

msgid "Function description:"
msgstr "Описание функции:"

msgid ""
"struct tnt_stream *tnt_net(struct tnt_stream *s)\n"
"int tnt_set(struct tnt_stream *s, int option, variant option-value)"
msgstr ""
"struct tnt_stream *tnt_net(struct tnt_stream *s)\n"
"int tnt_set(struct tnt_stream *s, int option, variant option-value)"

msgid "CONNECT"
msgstr "**Соединение**"

msgid ""
"Now that the stream named ``tnt`` exists and is associated with a URI, this "
"example program can connect to a server instance."
msgstr ""
"Теперь, когда мы создали поток ``tnt`` и связали его с конкретным URI, наша "
"программа может установить соединение с экземпляром."

msgid ""
"if (tnt_connect(tnt) < 0)\n"
"   { printf(\"Connection refused\\n\"); exit(-1); }"
msgstr ""
"if (tnt_connect(tnt) < 0)\n"
"   { printf(\"Connection refused\\n\"); exit(-1); }"

msgid "int tnt_connect(struct tnt_stream *s)"
msgstr "int tnt_connect(struct tnt_stream *s)"

msgid ""
"The connection might fail for a variety of reasons, such as: the server is "
"not running, or the URI contains an invalid :ref:`password<authentication-"
"passwords>`. If the connection fails, the return value will be -1."
msgstr ""
"Попытка соединения может оказаться неудачной по разным причинам, например "
"если Tarantool-сервер не запущен или в строке URI указан неверный "
":ref:`пароль <authentication-passwords>`. В случае неудачи функция вернет "
"-1."

msgid "MAKE REQUEST"
msgstr "**Создание запроса**"

msgid ""
"Most requests require passing a structured value, such as the contents of a "
"tuple."
msgstr ""
"В большинстве запросов требуется передавать структурированные данные, "
"например содержимое кортежа."

msgid ""
"struct tnt_stream *tuple = tnt_object(NULL);\n"
"tnt_object_format(tuple, \"[%d%s]\", 99999, \"B\");"
msgstr ""
"struct tnt_stream *tuple = tnt_object(NULL);\n"
"tnt_object_format(tuple, \"[%d%s]\", 99999, \"B\");"

msgid ""
"In this program, the request will be an :ref:`INSERT<box_space-insert>`, and"
" the tuple contents will be an integer and a string. This is a simple serial"
" set of values, that is, there are no sub-structures or arrays. Therefore it"
" is easy in this case to format what will be passed using the same sort of "
"arguments that one would use with a C ``printf()`` function: ``%d`` for the "
"integer, ``%s`` for the string, then the integer value, then a pointer to "
"the string value."
msgstr ""
"В этом примере программы формируется запрос :ref:`INSERT<box_space-insert>`,"
" а кортеж содержит целое число и строку. Это простой набор значений без "
"каких-либо вложенных структур или массивов. Так что передаваемые значения "
"можно указать самым простым образом --- аналогично тому, как это сделано в "
"стандартной C-функции ``printf()``: целое число ``%d``, строка ``%s``, "
"числовое значение, указатель на строковое значение."

msgid "ssize_t tnt_object_format(struct tnt_stream *s, const char *fmt, ...)"
msgstr "ssize_t tnt_object_format(struct tnt_stream *s, const char *fmt, ...)"

msgid "SEND REQUEST"
msgstr "**Отправка запроса**"

msgid ""
"The database-manipulation requests are analogous to the requests in the box "
"library."
msgstr ""
"Отправка запросов на изменение данных в базе выполняется аналогично тому, "
"как это реализовано в библиотеке Tarantool ``box``."

msgid ""
"tnt_insert(tnt, 999, tuple);\n"
"tnt_flush(tnt);"
msgstr ""
"tnt_insert(tnt, 999, tuple);\n"
"tnt_flush(tnt);"

msgid ""
"In this program, the choice is to do an INSERT request, so the program "
"passes the ``tnt_stream`` that was used for connection (``tnt``) and the "
"``tnt_stream`` that was set up with :c:func:`tarantoolc:tnt_object_format` "
"(``tuple``)."
msgstr ""
"В этом примере выполняется INSERT-запрос. Передается поток ``tnt``, который "
"использовался для установки соединения, и поток ``tuple``, ранее настроенный"
" с помощью функции :c:func:`tarantoolc:tnt_object_format`."

msgid ""
"ssize_t tnt_insert(struct tnt_stream *s, uint32_t space, struct tnt_stream *tuple)\n"
"ssize_t tnt_replace(struct tnt_stream *s, uint32_t space, struct tnt_stream *tuple)\n"
"ssize_t tnt_select(struct tnt_stream *s, uint32_t space, uint32_t index,\n"
"                   uint32_t limit, uint32_t offset, uint8_t iterator,\n"
"                   struct tnt_stream *key)\n"
"ssize_t tnt_update(struct tnt_stream *s, uint32_t space, uint32_t index,\n"
"                   struct tnt_stream *key, struct tnt_stream *ops)"
msgstr ""
"ssize_t tnt_insert(struct tnt_stream *s, uint32_t space, struct tnt_stream *tuple)\n"
"ssize_t tnt_replace(struct tnt_stream *s, uint32_t space, struct tnt_stream *tuple)\n"
"ssize_t tnt_select(struct tnt_stream *s, uint32_t space, uint32_t index,\n"
"                   uint32_t limit, uint32_t offset, uint8_t iterator,\n"
"                   struct tnt_stream *key)\n"
"ssize_t tnt_update(struct tnt_stream *s, uint32_t space, uint32_t index,\n"
"                   struct tnt_stream *key, struct tnt_stream *ops)"

msgid "GET REPLY"
msgstr "**Получение ответа**"

msgid ""
"For most requests, the client will receive a reply containing some "
"indication whether the result was successful, and a set of tuples."
msgstr ""
"В большинстве случаев ответ клиенту содержит информацию о том, был ли запрос"
" выполнен успешно, а также набор кортежей."

msgid ""
"struct tnt_reply reply;  tnt_reply_init(&reply);\n"
"tnt->read_reply(tnt, &reply);\n"
"if (reply.code != 0)\n"
"   { printf(\"Insert failed %lu.\\n\", reply.code); }"
msgstr ""
"struct tnt_reply reply;  tnt_reply_init(&reply);\n"
"tnt->read_reply(tnt, &reply);\n"
"if (reply.code != 0)\n"
"   { printf(\"Insert failed %lu.\\n\", reply.code); }"

msgid ""
"This program checks for success but does not decode the rest of the reply."
msgstr ""
"Эта программа проверяет, был ли запрос выполнен успешно, но никак не "
"интерпретирует оставшуюся часть ответа."

msgid ""
"struct tnt_reply *tnt_reply_init(struct tnt_reply *r)\n"
"tnt->read_reply(struct tnt_stream *s, struct tnt_reply *r)\n"
"void tnt_reply_free(struct tnt_reply *r)"
msgstr ""
"struct tnt_reply *tnt_reply_init(struct tnt_reply *r)\n"
"tnt->read_reply(struct tnt_stream *s, struct tnt_reply *r)\n"
"void tnt_reply_free(struct tnt_reply *r)"

msgid "TEARDOWN"
msgstr "**Завершение**"

msgid ""
"When a session ends, the connection that was made with "
":c:func:`tarantoolc:tnt_connect` should be closed, and the objects that were"
" made in the setup should be destroyed."
msgstr ""
"По окончании сессии необходимо завершить соединение, созданное с помощью "
"функции :c:func:`tarantoolc:tnt_connect()`, и удалить объекты, созданные на "
"этапе настройки."

msgid ""
"tnt_close(tnt);\n"
"tnt_stream_free(tuple);\n"
"tnt_stream_free(tnt);"
msgstr ""
"tnt_close(tnt);\n"
"tnt_stream_free(tuple);\n"
"tnt_stream_free(tnt);"

msgid ""
"void tnt_close(struct tnt_stream *s)\n"
"void tnt_stream_free(struct tnt_stream *s)"
msgstr ""
"void tnt_close(struct tnt_stream *s)\n"
"void tnt_stream_free(struct tnt_stream *s)"

msgid "Example 2"
msgstr "Пример 2"

msgid ""
"Here is a complete C program that selects, using index key ``[99999]``, from"
" space ``examples`` via the high-level C API. To display the results, the "
"program uses functions in the `MsgPuck "
"<https://github.com/tarantool/msgpuck>`__ library which allow decoding of "
"`MessagePack <https://en.wikipedia.org/wiki/MessagePack>`__  arrays."
msgstr ""
"В следующем примере приводится полноценная программа на языке C, которая "
"осуществляет выборку по индекс-ключу ``[99999]`` из спейса ``examples`` с "
"помощью высокоуровневого API для языка C. Результаты выводятся с помощью "
"функций из библиотеки `MsgPuck <https://github.com/tarantool/msgpuck>`__, "
"позволяющих декодировать массивы значений в формате `MessagePack "
"<https://en.wikipedia.org/wiki/MessagePack>`__."

msgid ""
"#include <stdio.h>\n"
"#include <stdlib.h>\n"
"#include <tarantool/tarantool.h>\n"
"#include <tarantool/tnt_net.h>\n"
"#include <tarantool/tnt_opt.h>\n"
"\n"
"#define MP_SOURCE 1\n"
"#include <msgpuck.h>\n"
"\n"
"void main() {\n"
"    struct tnt_stream *tnt = tnt_net(NULL);\n"
"    tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");\n"
"    if (tnt_connect(tnt) < 0) {\n"
"        printf(\"Connection refused\\n\");\n"
"        exit(1);\n"
"    }\n"
"    struct tnt_stream *tuple = tnt_object(NULL);\n"
"    tnt_object_format(tuple, \"[%d]\", 99999); /* tuple = search key */\n"
"    tnt_select(tnt, 999, 0, (2^32) - 1, 0, 0, tuple);\n"
"    tnt_flush(tnt);\n"
"    struct tnt_reply reply; tnt_reply_init(&reply);\n"
"    tnt->read_reply(tnt, &reply);\n"
"    if (reply.code != 0) {\n"
"        printf(\"Select failed.\\n\");\n"
"        exit(1);\n"
"    }\n"
"    char field_type;\n"
"    field_type = mp_typeof(*reply.data);\n"
"    if (field_type != MP_ARRAY) {\n"
"        printf(\"no tuple array\\n\");\n"
"        exit(1);\n"
"    }\n"
"    long unsigned int row_count;\n"
"    uint32_t tuple_count = mp_decode_array(&reply.data);\n"
"    printf(\"tuple count=%u\\n\", tuple_count);\n"
"    unsigned int i, j;\n"
"    for (i = 0; i < tuple_count; ++i) {\n"
"        field_type = mp_typeof(*reply.data);\n"
"        if (field_type != MP_ARRAY) {\n"
"            printf(\"no field array\\n\");\n"
"            exit(1);\n"
"        }\n"
"        uint32_t field_count = mp_decode_array(&reply.data);\n"
"        printf(\"  field count=%u\\n\", field_count);\n"
"        for (j = 0; j < field_count; ++j) {\n"
"            field_type = mp_typeof(*reply.data);\n"
"            if (field_type == MP_UINT) {\n"
"                uint64_t num_value = mp_decode_uint(&reply.data);\n"
"                printf(\"    value=%lu.\\n\", num_value);\n"
"            } else if (field_type == MP_STR) {\n"
"                const char *str_value;\n"
"                uint32_t str_value_length;\n"
"                str_value = mp_decode_str(&reply.data, &str_value_length);\n"
"                printf(\"    value=%.*s.\\n\", str_value_length, str_value);\n"
"            } else {\n"
"                printf(\"wrong field type\\n\");\n"
"                exit(1);\n"
"            }\n"
"        }\n"
"    }\n"
"    tnt_close(tnt);\n"
"    tnt_stream_free(tuple);\n"
"    tnt_stream_free(tnt);\n"
"}"
msgstr ""
"#include <stdio.h>\n"
"#include <stdlib.h>\n"
"#include <tarantool/tarantool.h>\n"
"#include <tarantool/tnt_net.h>\n"
"#include <tarantool/tnt_opt.h>\n"
"\n"
"#define MP_SOURCE 1\n"
"#include <msgpuck.h>\n"
"\n"
"void main() {\n"
"    struct tnt_stream *tnt = tnt_net(NULL);\n"
"    tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");\n"
"    if (tnt_connect(tnt) < 0) {\n"
"        printf(\"Connection refused\\n\");\n"
"        exit(1);\n"
"    }\n"
"    struct tnt_stream *tuple = tnt_object(NULL);\n"
"    tnt_object_format(tuple, \"[%d]\", 99999); /* кортеж tuple = ключ для поиска */\n"
"    tnt_select(tnt, 999, 0, (2^32) - 1, 0, 0, tuple);\n"
"    tnt_flush(tnt);\n"
"    struct tnt_reply reply; tnt_reply_init(&reply);\n"
"    tnt->read_reply(tnt, &reply);\n"
"    if (reply.code != 0) {\n"
"        printf(\"Select failed.\\n\");\n"
"        exit(1);\n"
"    }\n"
"    char field_type;\n"
"    field_type = mp_typeof(*reply.data);\n"
"    if (field_type != MP_ARRAY) {\n"
"        printf(\"no tuple array\\n\");\n"
"        exit(1);\n"
"    }\n"
"    long unsigned int row_count;\n"
"    uint32_t tuple_count = mp_decode_array(&reply.data);\n"
"    printf(\"tuple count=%u\\n\", tuple_count);\n"
"    unsigned int i, j;\n"
"    for (i = 0; i < tuple_count; ++i) {\n"
"        field_type = mp_typeof(*reply.data);\n"
"        if (field_type != MP_ARRAY) {\n"
"            printf(\"no field array\\n\");\n"
"            exit(1);\n"
"        }\n"
"        uint32_t field_count = mp_decode_array(&reply.data);\n"
"        printf(\"  field count=%u\\n\", field_count);\n"
"        for (j = 0; j < field_count; ++j) {\n"
"            field_type = mp_typeof(*reply.data);\n"
"            if (field_type == MP_UINT) {\n"
"                uint64_t num_value = mp_decode_uint(&reply.data);\n"
"                printf(\"    value=%lu.\\n\", num_value);\n"
"            } else if (field_type == MP_STR) {\n"
"                const char *str_value;\n"
"                uint32_t str_value_length;\n"
"                str_value = mp_decode_str(&reply.data, &str_value_length);\n"
"                printf(\"    value=%.*s.\\n\", str_value_length, str_value);\n"
"            } else {\n"
"                printf(\"wrong field type\\n\");\n"
"                exit(1);\n"
"            }\n"
"        }\n"
"    }\n"
"    tnt_close(tnt);\n"
"    tnt_stream_free(tuple);\n"
"    tnt_stream_free(tnt);\n"
"}"

msgid ""
"Similarly to the first example, paste the code into a file named "
":file:`example2.c`."
msgstr ""
"Как и в первом примере, сохраните исходный код программы в файле "
":file:`example2.c`."

msgid "To compile and link the program, say:"
msgstr ""
"Чтобы скомпилировать и слинковать программу, выполните следующую команду:"

msgid "$ gcc -o example2 example2.c -ltarantool"
msgstr "$ gcc -o example2 example2.c -ltarantool"

msgid "To run the program, say :samp:`./example2`."
msgstr "Чтобы запустить программу, выполните команду :samp:`./example2`."

msgid ""
"The two example programs only show a few requests and do not show all that's"
" necessary for good practice. See more in the `tarantool-c documentation at "
"GitHub <http://github.com/tarantool/tarantool-c>`__."
msgstr ""
"Эти две программы представляют собой примеры отправки двух запросов. Чтобы "
"узнать больше о том, как работать с Tarantool, пользуясь API для языка C, "
"обратитесь к документации `проекта tarantool-c на GitHub "
"<http://github.com/tarantool/tarantool-c>`__."

msgid "Interpreting function return values"
msgstr "Интерпретация возвращаемых значений"

msgid ""
"For all connectors, calling a function via Tarantool causes a return in the "
"MsgPack format. If the function is called using the connector's API, some "
"conversions may occur. All scalar values are returned as tuples (with a "
"MsgPack type-identifier followed by a value); all non-scalar values are "
"returned as a group of tuples (with a MsgPack array-identifier followed by "
"the scalar values). If the function is called via the binary protocol "
"command layer -- \"eval\" -- rather than via the connector's API, no "
"conversions occur."
msgstr ""
"При работе с любым Tarantool-коннектором функции, вызванные Tarantool, "
"возвращают значения в формате MsgPack. Для функций, вызываемых через API "
"коннектора, формат возвращаемых значений следующий: скалярные значения "
"возвращаются в виде кортежей (идентификатор типа в формате MsgPack, затем "
"значение); все прочие (не скалярные) значения возвращаются в виде групп "
"кортежей (идентификатор массива в формате MsgPack, затем скалярные "
"значения). Если функция вызывается в рамках бинарного протокола (с помощью "
"команды ``eval``), а не через API коннектора, формат возвращаемых ею "
"значений не меняется."

msgid ""
"In the following example, a Lua function will be created. Since it will be "
"accessed externally by a :ref:`'guest' user<box_space-user>`, a :doc:`grant "
"</reference/reference_lua/box_schema/user_grant>` of an execute privilege "
"will be necessary. The function returns an empty array, a scalar string, two"
" booleans, and a short integer. The values are the ones described in the "
"table :ref:`Common Types and MsgPack Encodings <msgpack-"
"common_types_and_msgpack_encodings>`."
msgstr ""
"В примере ниже создается Lua-функция. Поскольку эту функцию будет вызывать "
"внешний пользователь :ref:`'guest' user<box_space-user>`, необходимо с "
"помощью :doc:`grant </reference/reference_lua/box_schema/user_grant>` "
"настроить права на исполнение. Функция возвращает пустой массив, строку-"
"скаляр, два логических значения и короткое целое число. Значения "
"соответствуют приведенным в таблице :ref:`стандартных типов в MsgPack-"
"кодировке <msgpack-common_types_and_msgpack_encodings>`."

msgid ""
"tarantool> box.cfg{listen=3301}\n"
"2016-03-03 18:45:52.802 [27381] main/101/interactive I> ready to accept requests\n"
"---\n"
"...\n"
"tarantool> function f() return {},'a',false,true,127; end\n"
"---\n"
"...\n"
"tarantool> box.schema.func.create('f')\n"
"---\n"
"...\n"
"tarantool> box.schema.user.grant('guest','execute','function','f')\n"
"---\n"
"..."
msgstr ""
"tarantool> box.cfg{listen=3301}\n"
"2016-03-03 18:45:52.802 [27381] main/101/interactive I> ready to accept requests\n"
"---\n"
"...\n"
"tarantool> function f() return {},'a',false,true,127; end\n"
"---\n"
"...\n"
"tarantool> box.schema.func.create('f')\n"
"---\n"
"...\n"
"tarantool> box.schema.user.grant('guest','execute','function','f')\n"
"---\n"
"..."

msgid ""
"Here is a C program which calls the function. Although C is being used for "
"the example, the result would be precisely the same if the calling program "
"was written in Perl, PHP, Python, Go, or Java."
msgstr ""
"Следующая программа на C вызывает эту функцию. Хотя в примере приводится код"
" на C, результат будет одинаковым, на каком бы языке ни была написана "
"программа: Perl, PHP, Python, Go или Java."

msgid ""
"#include <stdio.h>\n"
"#include <stdlib.h>\n"
"#include <tarantool/tarantool.h>\n"
"#include <tarantool/tnt_net.h>\n"
"#include <tarantool/tnt_opt.h>\n"
"void main() {\n"
"  struct tnt_stream *tnt = tnt_net(NULL);              /* SETUP */\n"
"  tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");\n"
"   if (tnt_connect(tnt) < 0) {                         /* CONNECT */\n"
"       printf(\"Connection refused\\n\");\n"
"       exit(-1);\n"
"   }\n"
"   struct tnt_stream *arg; arg = tnt_object(NULL);     /* MAKE REQUEST */\n"
"   tnt_object_add_array(arg, 0);\n"
"   struct tnt_request *req1 = tnt_request_call(NULL);  /* CALL function f() */\n"
"   tnt_request_set_funcz(req1, \"f\");\n"
"   uint64_t sync1 = tnt_request_compile(tnt, req1);\n"
"   tnt_flush(tnt);                                     /* SEND REQUEST */\n"
"   struct tnt_reply reply;  tnt_reply_init(&reply);    /* GET REPLY */\n"
"   tnt->read_reply(tnt, &reply);\n"
"   if (reply.code != 0) {\n"
"     printf(\"Call failed %lu.\\n\", reply.code);\n"
"     exit(-1);\n"
"   }\n"
"   const unsigned char *p= (unsigned char*)reply.data; /* PRINT REPLY */\n"
"   while (p < (unsigned char *) reply.data_end)\n"
"   {\n"
"     printf(\"%x \", *p);\n"
"     ++p;\n"
"   }\n"
"   printf(\"\\n\");\n"
"   tnt_close(tnt);                                     /* TEARDOWN */\n"
"   tnt_stream_free(arg);\n"
"   tnt_stream_free(tnt);\n"
"}"
msgstr ""
"#include <stdio.h>\n"
"#include <stdlib.h>\n"
"#include <tarantool/tarantool.h>\n"
"#include <tarantool/tnt_net.h>\n"
"#include <tarantool/tnt_opt.h>\n"
"void main() {\n"
"  struct tnt_stream *tnt = tnt_net(NULL);              /* Настройка */\n"
"  tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");\n"
"   if (tnt_connect(tnt) < 0) {                         /* Соединение */\n"
"       printf(\"Connection refused\\n\");\n"
"       exit(-1);\n"
"   }\n"
"   struct tnt_stream *arg; arg = tnt_object(NULL);     /* Формирование запроса */\n"
"   tnt_object_add_array(arg, 0);\n"
"   struct tnt_request *req1 = tnt_request_call(NULL);  /* Вызов функции f() */\n"
"   tnt_request_set_funcz(req1, \"f\");\n"
"   uint64_t sync1 = tnt_request_compile(tnt, req1);\n"
"   tnt_flush(tnt);                                     /* Отправка запроса */\n"
"   struct tnt_reply reply;  tnt_reply_init(&reply);    /* Получение ответа */\n"
"   tnt->read_reply(tnt, &reply);\n"
"   if (reply.code != 0) {\n"
"     printf(\"Call failed %lu.\\n\", reply.code);\n"
"     exit(-1);\n"
"   }\n"
"   const unsigned char *p= (unsigned char*)reply.data; /* Вывод ответа */\n"
"   while (p < (unsigned char *) reply.data_end)\n"
"   {\n"
"     printf(\"%x \", *p);\n"
"     ++p;\n"
"   }\n"
"   printf(\"\\n\");\n"
"   tnt_close(tnt);                                     /* Завершение */\n"
"   tnt_stream_free(arg);\n"
"   tnt_stream_free(tnt);\n"
"}"

msgid "When this program is executed, it will print:"
msgstr "По завершении программа выведет на экран следующие значения:"

msgid "dd 0 0 0 5 90 91 a1 61 91 c2 91 c3 91 7f"
msgstr "dd 0 0 0 5 90 91 a1 61 91 c2 91 c3 91 7f"

msgid ""
"The first five bytes --- ``dd 0 0 0 5`` --- are the MsgPack encoding for "
"\"32-bit array header with value 5\" (see `MsgPack specification "
"<http://github.com/msgpack/msgpack/blob/master/spec.md>`__). The rest are as"
" described in the table :ref:`Common Types and MsgPack Encodings <msgpack-"
"common_types_and_msgpack_encodings>`."
msgstr ""
"Первые пять байт, ``dd 0 0 0 5``, представляют собой фрагмент данных в "
"формате MsgPack и обозначают 32-битный заголовок массива со значением 5 (см."
" `спецификацию формата MsgPack "
"<http://github.com/msgpack/msgpack/blob/master/spec.md>`_). Остальные "
"значения описаны в таблице :ref:`стандартных типов в MsgPack-кодировке "
"<msgpack-common_types_and_msgpack_encodings>`."
