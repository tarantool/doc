
msgid "C"
msgstr "C"

msgid "Here follow two examples of using Tarantool's high-level C API."
msgstr ""
"В этом разделе даны два примера использования высокоуровневого API для "
"Tarantool и языка C."

msgid "Example 1"
msgstr "Пример 1"

msgid ""
"Here is a complete C program that inserts :code:`[99999,'B']` into space "
":code:`examples` via the high-level C API."
msgstr ""
"Далее приводится пример полноценной программы на языке C, которая "
"осуществляет вставку кортежа ``[99999,'B']`` в спейс :code:`examples` с "
"помощью высокоуровневого API для языка C."

#, python-format
msgid ""
"#include <stdio.h>\n"
"#include <stdlib.h>\n"
"\n"
"#include <tarantool/tarantool.h>\n"
"#include <tarantool/tnt_net.h>\n"
"#include <tarantool/tnt_opt.h>\n"
"\n"
"void main() {\n"
"   struct tnt_stream *tnt = tnt_net(NULL);          /* See note = SETUP */\n"
"   tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");\n"
"   if (tnt_connect(tnt) < 0) {                      /* See note = CONNECT */\n"
"       printf(\"Connection refused\\n\");\n"
"       exit(-1);\n"
"   }\n"
"   struct tnt_stream *tuple = tnt_object(NULL);     /* See note = MAKE REQUEST */\n"
"   tnt_object_format(tuple, \"[%d%s]\", 99999, \"B\");\n"
"   tnt_insert(tnt, 999, tuple);                     /* See note = SEND REQUEST */\n"
"   tnt_flush(tnt);\n"
"   struct tnt_reply reply;  tnt_reply_init(&reply); /* See note = GET REPLY */\n"
"   tnt->read_reply(tnt, &reply);\n"
"   if (reply.code != 0) {\n"
"       printf(\"Insert failed %lu.\\n\", reply.code);\n"
"   }\n"
"   tnt_close(tnt);                                  /* See below = TEARDOWN */\n"
"   tnt_stream_free(tuple);\n"
"   tnt_stream_free(tnt);\n"
"}"
msgstr ""
"#include <stdio.h>\n"
"#include <stdlib.h>\n"
"\n"
"#include <tarantool/tarantool.h>\n"
"#include <tarantool/tnt_net.h>\n"
"#include <tarantool/tnt_opt.h>\n"
"\n"
"void main() {\n"
"   struct tnt_stream *tnt = tnt_net(NULL);          /* См. ниже = НАСТРОЙКА */\n"
"   tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");\n"
"   if (tnt_connect(tnt) < 0) {                      /* См. ниже = СОЕДИНЕНИЕ */\n"
"       printf(\"Connection refused\\n\");\n"
"       exit(-1);\n"
"   }\n"
"   struct tnt_stream *tuple = tnt_object(NULL);     /* См. ниже = СОЗДАНИЕ ЗАПРОСА */\n"
"   tnt_object_format(tuple, \"[%d%s]\", 99999, \"B\");\n"
"   tnt_insert(tnt, 999, tuple);                     /* См. ниже = ОТПРАВКА ЗАПРОСА */\n"
"   tnt_flush(tnt);\n"
"   struct tnt_reply reply;  tnt_reply_init(&reply); /* См. ниже = ПОЛУЧЕНИЕ ОТВЕТА */\n"
"   tnt->read_reply(tnt, &reply);\n"
"   if (reply.code != 0) {\n"
"       printf(\"Insert failed %lu.\\n\", reply.code);\n"
"   }\n"
"   tnt_close(tnt);                                  /* См. ниже = ЗАВЕРШЕНИЕ */\n"
"   tnt_stream_free(tuple);\n"
"   tnt_stream_free(tnt);\n"
"}"

msgid ""
"Paste the code into a file named :file:`example.c` and install "
"``tarantool-c``. One way to install ``tarantool-c`` (using Ubuntu) is:"
msgstr ""
"Скопируйте исходный код программы в файл с именем :file:`example.c` и "
"установите коннектор ``tarantool-c``. Вот один из способов установки "
"``tarantool-c`` (под Ubuntu):"

msgid ""
"$ git clone git://github.com/tarantool/tarantool-c.git ~/tarantool-c\n"
"$ cd ~/tarantool-c\n"
"$ git submodule init\n"
"$ git submodule update\n"
"$ cmake .\n"
"$ make\n"
"$ make install"
msgstr ""
"$ git clone git://github.com/tarantool/tarantool-c.git ~/tarantool-c\n"
"$ cd ~/tarantool-c\n"
"$ git submodule init\n"
"$ git submodule update\n"
"$ cmake .\n"
"$ make\n"
"$ make install"

#, fuzzy
msgid "To compile and link the program, run:"
msgstr ""
"Чтобы скомпилировать и слинковать тестовую программу, выполните следующую  "
"команду:"

msgid ""
"$ # sometimes this is necessary:\n"
"$ export LD_LIBRARY_PATH=/usr/local/lib\n"
"$ gcc -o example example.c -ltarantool"
msgstr ""
"$ # иногда это необходимо:\n"
"$ export LD_LIBRARY_PATH=/usr/local/lib\n"
"$ gcc -o example example.c -ltarantool"

#, fuzzy
msgid ""
"Before trying to run, check that a server instance is listening at "
"``localhost:3301`` and that the space ``examples`` exists, as "
":ref:`described earlier <index-connector_setting>`. To run the program, say "
":samp:`./example`. The program will connect to the Tarantool instance, and "
"will send the request. If Tarantool is not running on localhost with listen "
"address = 3301, the program will print “Connection refused”. If the insert "
"fails, the program will print \"Insert failed\" and an error number (see all"
" error codes in the source file `/src/box/errcode.h "
"<https://github.com/tarantool/tarantool/blob/2.1/src/box/errcode.h>`__)."
msgstr ""
"Перед запуском проверьте, что у экземпляра задан порт для прослушивания "
"на``localhost:3301``, и в базе создан спейс ``examples``, как :ref:`описано "
"выше <index-connector_setting>`. Чтобы запустить программу, выполните "
"команду :samp:`./example`. Программа установит соединение с экземпляром "
"Tarantool и отправит запрос. Если Tarantool не запущен на localhost на "
"прослушивание по порту 3301, то программа выдаст сообщение об ошибке "
"“Connection refused”. Если вставка не сработает, программа выдаст сообщение "
"об ошибке \"Insert failed\" и код ошибки (все коды ошибок см. в исходном "
"файле `/src/box/errcode.h "
"<https://github.com/tarantool/tarantool/blob/2.1/src/box/errcode.h>`_)."

msgid "Here are notes corresponding to comments in the example program."
msgstr ""
"Далее следуют примечания, на которые мы ссылались в комментариях к исходному"
" коду тестовой программы."

msgid "SETUP"
msgstr ""

#, fuzzy
msgid "The setup begins by creating a stream."
msgstr ""
"**НАСТРОЙКА:** Настройка начинается с создания потока (``tnt_stream``)."

msgid ""
"struct tnt_stream *tnt = tnt_net(NULL);\n"
"tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");"
msgstr ""
"struct tnt_stream *tnt = tnt_net(NULL);\n"
"tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");"

msgid ""
"In this program, the stream will be named ``tnt``. Before connecting on the "
"``tnt`` stream, some options may have to be set. The most important option "
"is TNT_OPT_URI. In this program, the :ref:`URI <index-uri>` is "
"``localhost:3301``, since that is where the Tarantool instance is supposed "
"to be listening."
msgstr ""
"В нашей программе поток назван ``tnt``. Перед установкой соединения с "
"потоком ``tnt`` нужно задать ряд опций. Самая важная из них -- TNT_OPT_URI. "
"Для этой опции указан :ref:`URI <index-uri>` ``localhost:3301``, т.е. адрес,"
" по которому должно быть настроено прослушивание на стороне экземпляра "
"Tarantool."

msgid "Function description:"
msgstr "Описание функции:"

msgid ""
"struct tnt_stream *tnt_net(struct tnt_stream *s)\n"
"int tnt_set(struct tnt_stream *s, int option, variant option-value)"
msgstr ""
"struct tnt_stream *tnt_net(struct tnt_stream *s)\n"
"int tnt_set(struct tnt_stream *s, int option, variant option-value)"

msgid "CONNECT"
msgstr ""

#, fuzzy
msgid ""
"Now that the stream named ``tnt`` exists and is associated with a URI, this "
"example program can connect to a server instance."
msgstr ""
"**СОЕДИНЕНИЕ:** Теперь когда мы создали поток с именем ``tnt`` и связали его"
" с конкретным URI, наша программа может устанавливать соединение с "
"экземпляром."

msgid ""
"if (tnt_connect(tnt) < 0)\n"
"   { printf(\"Connection refused\\n\"); exit(-1); }"
msgstr ""
"if (tnt_connect(tnt) < 0)\n"
"   { printf(\"Connection refused\\n\"); exit(-1); }"

msgid "int tnt_connect(struct tnt_stream *s)"
msgstr "int tnt_connect(struct tnt_stream *s)"

msgid ""
"The connection might fail for a variety of reasons, such as: the server is "
"not running, or the URI contains an invalid :ref:`password<authentication-"
"passwords>`. If the connection fails, the return value will be -1."
msgstr ""
"Попытка соединения может и не удаться по разным причинам, например если "
"Tarantool-сервер не запущен или в URI-строке указан неверный :ref:`пароль "
"<authentication-passwords>`. В случае неудачи функция вернет -1."

msgid "MAKE REQUEST"
msgstr ""

#, fuzzy
msgid ""
"Most requests require passing a structured value, such as the contents of a "
"tuple."
msgstr ""
"**СОЗДАНИЕ ЗАПРОСА:** В большинстве запросов требуется передавать "
"структурированные данные, например содержимое кортежа."

#, python-format
msgid ""
"struct tnt_stream *tuple = tnt_object(NULL);\n"
"tnt_object_format(tuple, \"[%d%s]\", 99999, \"B\");"
msgstr ""
"struct tnt_stream *tuple = tnt_object(NULL);\n"
"tnt_object_format(tuple, \"[%d%s]\", 99999, \"B\");"

#, python-format
msgid ""
"In this program, the request will be an :ref:`INSERT<box_space-insert>`, and"
" the tuple contents will be an integer and a string. This is a simple serial"
" set of values, that is, there are no sub-structures or arrays. Therefore it"
" is easy in this case to format what will be passed using the same sort of "
"arguments that one would use with a C ``printf()`` function: ``%d`` for the "
"integer, ``%s`` for the string, then the integer value, then a pointer to "
"the string value."
msgstr ""
"В данной программе мы используем запрос :ref:`INSERT<box_space-insert>`, а "
"кортеж содержит целое число и строку.  Это простой набор значений без каких-"
"либо вложенных структур или массивов. И передаваемые значения мы можем "
"указать самым простым образом -- аналогично тому, как это сделано в "
"стандартной C-функции ``printf()``: ``%d`` для обозначения целого числа, "
"``%s`` для обозначения строки, затем числовое значение, затем указатель на "
"строковое значение."

msgid "ssize_t tnt_object_format(struct tnt_stream *s, const char *fmt, ...)"
msgstr "ssize_t tnt_object_format(struct tnt_stream *s, const char *fmt, ...)"

msgid "SEND REQUEST"
msgstr ""

#, fuzzy
msgid ""
"The database-manipulation requests are analogous to the requests in the box "
"library."
msgstr ""
"**ОТПРАВКА ЗАПРОСА:** Отправка запросов на изменение данных в базе делается "
"аналогично тому, как это делается в Tarantool-библиотеке ``box``."

msgid ""
"tnt_insert(tnt, 999, tuple);\n"
"tnt_flush(tnt);"
msgstr ""
"tnt_insert(tnt, 999, tuple);\n"
"tnt_flush(tnt);"

msgid ""
"In this program, the choice is to do an INSERT request, so the program "
"passes the ``tnt_stream`` that was used for connection (``tnt``) and the "
"``tnt_stream`` that was set up with :c:func:`tarantoolc:tnt_object_format` "
"(``tuple``)."
msgstr ""
"В данной программе мы делаем INSERT-запрос. В этом запросе мы передаем поток"
" ``tnt``, который ранее использовали для установки соединения, и поток "
":code:`tuple`, который также ранее настроили с помощью функции "
":c:func:`tarantoolc:tnt_object_format`."

msgid ""
"ssize_t tnt_insert(struct tnt_stream *s, uint32_t space, struct tnt_stream *tuple)\n"
"ssize_t tnt_replace(struct tnt_stream *s, uint32_t space, struct tnt_stream *tuple)\n"
"ssize_t tnt_select(struct tnt_stream *s, uint32_t space, uint32_t index,\n"
"                   uint32_t limit, uint32_t offset, uint8_t iterator,\n"
"                   struct tnt_stream *key)\n"
"ssize_t tnt_update(struct tnt_stream *s, uint32_t space, uint32_t index,\n"
"                   struct tnt_stream *key, struct tnt_stream *ops)"
msgstr ""
"ssize_t tnt_insert(struct tnt_stream *s, uint32_t space, struct tnt_stream *tuple)\n"
"ssize_t tnt_replace(struct tnt_stream *s, uint32_t space, struct tnt_stream *tuple)\n"
"ssize_t tnt_select(struct tnt_stream *s, uint32_t space, uint32_t index,\n"
"                   uint32_t limit, uint32_t offset, uint8_t iterator,\n"
"                   struct tnt_stream *key)\n"
"ssize_t tnt_update(struct tnt_stream *s, uint32_t space, uint32_t index,\n"
"                   struct tnt_stream *key, struct tnt_stream *ops)"

msgid "GET REPLY"
msgstr ""

#, fuzzy
msgid ""
"For most requests, the client will receive a reply containing some "
"indication whether the result was successful, and a set of tuples."
msgstr ""
"**ПОЛУЧЕНИЕ ОТВЕТА:** На большинство запросов клиент получает ответ, который"
" содержит информацию о том, был ли данный запрос успешно выполнен,  а также "
"содержит набор кортежей."

#, python-format
msgid ""
"struct tnt_reply reply;  tnt_reply_init(&reply);\n"
"tnt->read_reply(tnt, &reply);\n"
"if (reply.code != 0)\n"
"   { printf(\"Insert failed %lu.\\n\", reply.code); }"
msgstr ""
"struct tnt_reply reply;  tnt_reply_init(&reply);\n"
"tnt->read_reply(tnt, &reply);\n"
"if (reply.code != 0)\n"
"   { printf(\"Insert failed %lu.\\n\", reply.code); }"

msgid ""
"This program checks for success but does not decode the rest of the reply."
msgstr ""
"Данная программа проверяет, был ли запрос выполнен успешно, но никак не "
"интерпретирует оставшуюся часть ответа."

msgid ""
"struct tnt_reply *tnt_reply_init(struct tnt_reply *r)\n"
"tnt->read_reply(struct tnt_stream *s, struct tnt_reply *r)\n"
"void tnt_reply_free(struct tnt_reply *r)"
msgstr ""
"struct tnt_reply *tnt_reply_init(struct tnt_reply *r)\n"
"tnt->read_reply(struct tnt_stream *s, struct tnt_reply *r)\n"
"void tnt_reply_free(struct tnt_reply *r)"

msgid "TEARDOWN"
msgstr ""

#, fuzzy
msgid ""
"When a session ends, the connection that was made with "
":c:func:`tarantoolc:tnt_connect` should be closed, and the objects that were"
" made in the setup should be destroyed."
msgstr ""
"**ЗАВЕРШЕНИЕ:** По окончании сессии нам нужно закрыть соединение, созданное "
"с помощью функции :c:func:`tarantoolc:tnt_connect()`, и удалить  объекты, "
"созданные на этапе настройки."

msgid ""
"tnt_close(tnt);\n"
"tnt_stream_free(tuple);\n"
"tnt_stream_free(tnt);"
msgstr ""
"tnt_close(tnt);\n"
"tnt_stream_free(tuple);\n"
"tnt_stream_free(tnt);"

msgid ""
"void tnt_close(struct tnt_stream *s)\n"
"void tnt_stream_free(struct tnt_stream *s)"
msgstr ""
"void tnt_close(struct tnt_stream *s)\n"
"void tnt_stream_free(struct tnt_stream *s)"

msgid "Example 2"
msgstr "Пример 2"

#, fuzzy
msgid ""
"Here is a complete C program that selects, using index key ``[99999]``, from"
" space ``examples`` via the high-level C API. To display the results, the "
"program uses functions in the `MsgPuck "
"<https://github.com/tarantool/msgpuck>`__ library which allow decoding of "
"`MessagePack <https://en.wikipedia.org/wiki/MessagePack>`__  arrays."
msgstr ""
"Далее приводится пример полноценной программы на языке C, которая "
"осуществляет выборку по индекс-ключу ``[99999]`` из спейса ``examples`` с "
"помощью высокоуровневого API для языка C. Для вывода результатов в этой "
"программе используются функции из библиотеки `MsgPuck "
"<https://github.com/tarantool/msgpuck>`_, которые нужны для декодирования "
"массивов значений в формате `MessagePack "
"<https://en.wikipedia.org/wiki/MessagePack>`_."

#, python-format
msgid ""
"#include <stdio.h>\n"
"#include <stdlib.h>\n"
"#include <tarantool/tarantool.h>\n"
"#include <tarantool/tnt_net.h>\n"
"#include <tarantool/tnt_opt.h>\n"
"\n"
"#define MP_SOURCE 1\n"
"#include <msgpuck.h>\n"
"\n"
"void main() {\n"
"    struct tnt_stream *tnt = tnt_net(NULL);\n"
"    tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");\n"
"    if (tnt_connect(tnt) < 0) {\n"
"        printf(\"Connection refused\\n\");\n"
"        exit(1);\n"
"    }\n"
"    struct tnt_stream *tuple = tnt_object(NULL);\n"
"    tnt_object_format(tuple, \"[%d]\", 99999); /* tuple = search key */\n"
"    tnt_select(tnt, 999, 0, (2^32) - 1, 0, 0, tuple);\n"
"    tnt_flush(tnt);\n"
"    struct tnt_reply reply; tnt_reply_init(&reply);\n"
"    tnt->read_reply(tnt, &reply);\n"
"    if (reply.code != 0) {\n"
"        printf(\"Select failed.\\n\");\n"
"        exit(1);\n"
"    }\n"
"    char field_type;\n"
"    field_type = mp_typeof(*reply.data);\n"
"    if (field_type != MP_ARRAY) {\n"
"        printf(\"no tuple array\\n\");\n"
"        exit(1);\n"
"    }\n"
"    long unsigned int row_count;\n"
"    uint32_t tuple_count = mp_decode_array(&reply.data);\n"
"    printf(\"tuple count=%u\\n\", tuple_count);\n"
"    unsigned int i, j;\n"
"    for (i = 0; i < tuple_count; ++i) {\n"
"        field_type = mp_typeof(*reply.data);\n"
"        if (field_type != MP_ARRAY) {\n"
"            printf(\"no field array\\n\");\n"
"            exit(1);\n"
"        }\n"
"        uint32_t field_count = mp_decode_array(&reply.data);\n"
"        printf(\"  field count=%u\\n\", field_count);\n"
"        for (j = 0; j < field_count; ++j) {\n"
"            field_type = mp_typeof(*reply.data);\n"
"            if (field_type == MP_UINT) {\n"
"                uint64_t num_value = mp_decode_uint(&reply.data);\n"
"                printf(\"    value=%lu.\\n\", num_value);\n"
"            } else if (field_type == MP_STR) {\n"
"                const char *str_value;\n"
"                uint32_t str_value_length;\n"
"                str_value = mp_decode_str(&reply.data, &str_value_length);\n"
"                printf(\"    value=%.*s.\\n\", str_value_length, str_value);\n"
"            } else {\n"
"                printf(\"wrong field type\\n\");\n"
"                exit(1);\n"
"            }\n"
"        }\n"
"    }\n"
"    tnt_close(tnt);\n"
"    tnt_stream_free(tuple);\n"
"    tnt_stream_free(tnt);\n"
"}"
msgstr ""
"#include <stdio.h>\n"
"#include <stdlib.h>\n"
"#include <tarantool/tarantool.h>\n"
"#include <tarantool/tnt_net.h>\n"
"#include <tarantool/tnt_opt.h>\n"
"\n"
"#define MP_SOURCE 1\n"
"#include <msgpuck.h>\n"
"\n"
"void main() {\n"
"    struct tnt_stream *tnt = tnt_net(NULL);\n"
"    tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");\n"
"    if (tnt_connect(tnt) < 0) {\n"
"        printf(\"Connection refused\\n\");\n"
"        exit(1);\n"
"    }\n"
"    struct tnt_stream *tuple = tnt_object(NULL);\n"
"    tnt_object_format(tuple, \"[%d]\", 99999); /* кортеж tuple = ключ для поиска */\n"
"    tnt_select(tnt, 999, 0, (2^32) - 1, 0, 0, tuple);\n"
"    tnt_flush(tnt);\n"
"    struct tnt_reply reply; tnt_reply_init(&reply);\n"
"    tnt->read_reply(tnt, &reply);\n"
"    if (reply.code != 0) {\n"
"        printf(\"Select failed.\\n\");\n"
"        exit(1);\n"
"    }\n"
"    char field_type;\n"
"    field_type = mp_typeof(*reply.data);\n"
"    if (field_type != MP_ARRAY) {\n"
"        printf(\"no tuple array\\n\");\n"
"        exit(1);\n"
"    }\n"
"    long unsigned int row_count;\n"
"    uint32_t tuple_count = mp_decode_array(&reply.data);\n"
"    printf(\"tuple count=%u\\n\", tuple_count);\n"
"    unsigned int i, j;\n"
"    for (i = 0; i < tuple_count; ++i) {\n"
"        field_type = mp_typeof(*reply.data);\n"
"        if (field_type != MP_ARRAY) {\n"
"            printf(\"no field array\\n\");\n"
"            exit(1);\n"
"        }\n"
"        uint32_t field_count = mp_decode_array(&reply.data);\n"
"        printf(\"  field count=%u\\n\", field_count);\n"
"        for (j = 0; j < field_count; ++j) {\n"
"            field_type = mp_typeof(*reply.data);\n"
"            if (field_type == MP_UINT) {\n"
"                uint64_t num_value = mp_decode_uint(&reply.data);\n"
"                printf(\"    value=%lu.\\n\", num_value);\n"
"            } else if (field_type == MP_STR) {\n"
"                const char *str_value;\n"
"                uint32_t str_value_length;\n"
"                str_value = mp_decode_str(&reply.data, &str_value_length);\n"
"                printf(\"    value=%.*s.\\n\", str_value_length, str_value);\n"
"            } else {\n"
"                printf(\"wrong field type\\n\");\n"
"                exit(1);\n"
"            }\n"
"        }\n"
"    }\n"
"    tnt_close(tnt);\n"
"    tnt_stream_free(tuple);\n"
"    tnt_stream_free(tnt);\n"
"}"

msgid ""
"Similarly to the first example, paste the code into a file named "
":file:`example2.c`."
msgstr ""
"Аналогично первому примеру, сохраните исходный код программы в файле с "
"именем :file:`example2.c`."

msgid "To compile and link the program, say:"
msgstr ""
"Чтобы скомпилировать и слинковать тестовую программу, выполните следующую  "
"команду:"

msgid "$ gcc -o example2 example2.c -ltarantool"
msgstr "$ gcc -o example2 example2.c -ltarantool"

msgid "To run the program, say :samp:`./example2`."
msgstr "Для запуска программы выполните команду :samp:`./example2`."

#, fuzzy
msgid ""
"The two example programs only show a few requests and do not show all that's"
" necessary for good practice. See more in the `tarantool-c documentation at "
"GitHub <http://github.com/tarantool/tarantool-c>`__."
msgstr ""
"В этих двух программах мы привели пример использования лишь двух запросов. "
"Для полноценной работы с Tarantool с помощью C API, пожалуйста, обратитесь к"
" документации из `проекта tarantool-c на GitHub "
"<http://github.com/tarantool/tarantool-c>`_."
