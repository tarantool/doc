
msgid "Connectors"
msgstr "Коннекторы"

msgid "This chapter documents APIs for various programming languages:"
msgstr "В этой главе описаны API для различных языков программирования:"

msgid ":doc:`C++ <cxx/tntcxx_api>`"
msgstr ":doc:`C++ <cxx/tntcxx_api>`"

msgid ":ref:`Java <index_connector_java>`"
msgstr ":ref:`Java <index_connector_java>`"

msgid ":ref:`Go <index_connector_go>`"
msgstr ":ref:`Go <index_connector_go>`"

msgid ":ref:`R <index_connector_r>`"
msgstr ":ref:`R <index_connector_r>`"

msgid ":ref:`Erlang <index_connector_erlang>`"
msgstr ":ref:`Erlang <index_connector_erlang>`"

msgid ":ref:`Perl <index_connector_perl>`"
msgstr ":ref:`Perl <index_connector_perl>`"

msgid ":ref:`PHP <index_connector_php>`"
msgstr ":ref:`PHP <index_connector_php>`"

msgid ":ref:`Python <index_connector_py>`"
msgstr ":ref:`Python <index_connector_py>`"

msgid ":ref:`Node.js <index_connector_nodejs>`"
msgstr ":ref:`Node.js <index_connector_nodejs>`"

msgid ":ref:`C# <index_connector_csharp>`"
msgstr ":ref:`C# <index_connector_csharp>`"

msgid ":ref:`C <index_connector_c>`"
msgstr ":ref:`C <index_connector_c>`"

msgid "Protocol"
msgstr "Протокол"

msgid ""
"Tarantool's binary protocol was designed with a focus on asynchronous I/O "
"and easy integration with proxies. Each client request starts with a "
"variable-length binary header, containing request id, request type, instance"
" id, log sequence number, and so on."
msgstr ""
"Бинарный протокол для передачи данных в Tarantool был разработан с учетом "
"потребностей асинхронного ввода-вывода для облегчения интеграции с прокси-"
"серверами. Каждый клиентский запрос начинается с бинарного заголовка "
"переменной длины. В заголовке указывается идентификатор и тип запроса, "
"идентификатор экземпляра, номер записи в журнале и т.д."

msgid ""
"The mandatory length, present in request header simplifies client or proxy "
"I/O. A response to a request is sent to the client as soon as it is ready. "
"It always carries in its header the same type and id as in the request. The "
"id makes it possible to match a request to a response, even if the latter "
"arrived out of order."
msgstr ""
"Также в заголовке обязательно указывается длина запроса, что облегчает "
"обработку данных. Ответ на запрос посылается по мере готовности. В заголовке"
" ответа указывается тот же идентификатор и тип запроса, что и в изначальном "
"запросе. По идентификатору можно легко соотнести запрос с ответом, даже если"
" ответ был получен не в порядке отсылки запросов."

msgid ""
"Unless implementing a client driver, you needn't concern yourself with the "
"complications of the binary protocol. Language-specific drivers provide a "
"friendly way to store domain language data structures in Tarantool. A "
"complete description of the binary protocol is maintained in annotated "
"Backus-Naur form in the source tree. For detailed examples and diagrams of "
"all binary-protocol requests and responses, see :ref:`Tarantool's binary "
"protocol <box_protocol-iproto_protocol>`."
msgstr ""
"Вдаваться в тонкости реализации Tarantool-протокола нужно только при "
"разработке нового коннектора для Tarantool. В остальных случаях достаточно "
"взять уже существующий коннектор для нужного вам языка программирования. "
"Такие коннекторы позволяют легко хранить структуры данных из разных языков в"
" формате Tarantool. Полное описание бинарного протокола в Tarantool хранится"
" в виде аннотированных BNF-диаграмм (Backus-Naur Form) в дереве исходного "
"кода. Подробные примеры и диаграммы всех запросов и ответов бинарного "
"протокола см. в описании :ref:`бинарного протокола в Tarantool "
"<box_protocol-iproto_protocol>`."

msgid "Packet example"
msgstr "Пример пакета данных"

msgid ""
"The Tarantool API exists so that a client program can send a request packet "
"to a server instance, and receive a response. Here is an example of a what "
"the client would send for ``box.space[513]:insert{'A', 'BB'}``. The BNF "
"description of the components is on the page about :ref:`Tarantool's binary "
"protocol <box_protocol-iproto_protocol>`."
msgstr ""
"С помощью API Tarantool клиентские программы могут отправлять пакеты с "
"запросами в адрес экземпляра и получать на них ответы. Вот пример для "
"запроса :code:`box.space[513]:insert{'A', 'BB'}`. Описания компонентов "
"запроса (в виде BNF-диаграмм) вы найдете на странице о :ref:`бинарном "
"протоколе в Tarantool <box_protocol-iproto_protocol>`."

msgid "Component"
msgstr "Компонент"

msgid "Byte #0"
msgstr "Байт #0"

msgid "Byte #1"
msgstr "Байт #1"

msgid "Byte #2"
msgstr "Байт #2"

msgid "Byte #3"
msgstr "Байт #3"

msgid "code for insert"
msgstr "код для вставки"

msgid "02"
msgstr "02"

msgid "rest of header"
msgstr "остаток заголовка"

msgid "..."
msgstr "..."

msgid "2-digit number: space id"
msgstr "число из 2 цифр: ID спейса"

msgid "cd"
msgstr "cd"

msgid "01"
msgstr "01"

msgid "code for tuple"
msgstr "код для кортежа"

msgid "21"
msgstr "21"

msgid "1-digit number: field count = 2"
msgstr "число из 1 цифры: количество полей = 2"

msgid "92"
msgstr "92"

msgid "1-character string: field[1]"
msgstr "строка из 1 символа: поле[1]"

msgid "a1"
msgstr "a1"

msgid "41"
msgstr "41"

msgid "2-character string: field[2]"
msgstr "строка из 2 символов: поле[2]"

msgid "a2"
msgstr "a2"

msgid "42"
msgstr "42"

msgid ""
"Now, you could send that packet to the Tarantool instance, and interpret the"
" response (the page about :ref:`Tarantool's binary protocol <box_protocol-"
"iproto_protocol>` has a description of the packet format for responses as "
"well as requests). But it would be easier, and less error-prone, if you "
"could invoke a routine that formats the packet according to typed "
"parameters. Something like ``response = tarantool_routine(\"insert\", 513, "
"\"A\", \"B\");``. And that is why APIs exist for drivers for Perl, Python, "
"PHP, and so on."
msgstr ""
"Теперь получившийся пакет можно послать в адрес экземпляра Tarantool и затем"
" расшифровать ответ (описания формата пакета ответов и вопросов вы найдете "
"на той же странице о :ref:`бинарном протоколе в Tarantool <box_protocol-"
"iproto_protocol>`). Но более простым и верным способом будет вызвать "
"процедуру, которая сформирует готовый пакет с заданными параметрами. Что-то "
"вроде ``response = tarantool_routine(\"insert\", 513, \"A\", \"B\");``. Для "
"этого и существуют API для драйверов для Perl, Python, PHP и т.д."

msgid "Setting up the server for connector examples"
msgstr "Настройка окружения для примеров работы с коннекторами"

msgid ""
"This chapter has examples that show how to connect to a Tarantool instance "
"via the Perl, PHP, Python, node.js, and C connectors. The examples contain "
"hard code that will work if and only if the following conditions are met:"
msgstr ""
"В этой главе приводятся примеры того, как можно установить соединение с "
"Tarantool-сервером с помощью коннекторов для языков Perl, PHP, Python, "
"node.js и C. Обратите внимание, что в примерах указаны фиксированные "
"значения, поэтому для корректной работы всех примеров нужно соблюсти "
"следующие условия:"

msgid ""
"the Tarantool instance (tarantool) is running on localhost (127.0.0.1) and "
"is listening on port 3301 (``box.cfg.listen = '3301'``),"
msgstr ""
"экземпляр (Tarantool) запущен на локальной машине (``localhost = "
"127.0.0.1``),  а прослушивание для него настроено на порту 3301 "
"(``box.cfg.listen = '3301'``),"

msgid ""
"space ``examples`` has id = 999 (``box.space.examples.id = 999``) and has a "
"primary-key index for a numeric field "
"(``box.space[999].index[0].parts[1].type = \"unsigned\"``),"
msgstr ""
"в базе есть спейс``examples`` с идентификатором 999 (``box.space.examples.id"
" = 999``), и у него есть первичный индекс, построенный по ключу числового "
"типа (``box.space[999].index[0].parts[1].type = \"unsigned\"``),"

msgid "user 'guest' has privileges for reading and writing."
msgstr "для пользователя 'guest' настроены права на чтение и запись."

msgid ""
"It is easy to meet all the conditions by starting the instance and executing"
" this script:"
msgstr ""
"Можно легко соблюсти все условия, запустив экземпляр и выполнив следующий "
"скрипт:"

msgid ""
"box.cfg{listen=3301}\n"
"box.schema.space.create('examples',{id=999})\n"
"box.space.examples:create_index('primary', {type = 'hash', parts = {1, 'unsigned'}})\n"
"box.schema.user.grant('guest','read,write','space','examples')\n"
"box.schema.user.grant('guest','read','space','_space')"
msgstr ""
"box.cfg{listen=3301}\n"
"box.schema.space.create('examples',{id=999})\n"
"box.space.examples:create_index('primary', {type = 'hash', parts = {1, 'unsigned'}})\n"
"box.schema.user.grant('guest','read,write','space','examples')\n"
"box.schema.user.grant('guest','read','space','_space')"

msgid "Go"
msgstr "Go"

msgid "Please see https://github.com/mialinx/go-tarantool."
msgstr "См. https://github.com/mialinx/go-tarantool."

msgid "Interpreting function return values"
msgstr "Интерпретация возвращаемых значений"

msgid ""
"For all connectors, calling a function via Tarantool causes a return in the "
"MsgPack format. If the function is called using the connector's API, some "
"conversions may occur. All scalar values are returned as tuples (with a "
"MsgPack type-identifier followed by a value); all non-scalar values are "
"returned as a group of tuples (with a MsgPack array-identifier followed by "
"the scalar values). If the function is called via the binary protocol "
"command layer -- \"eval\" -- rather than via the connector's API, no "
"conversions occur."
msgstr ""
"При работе с любым Tarantool-коннектором функции, вызванные с помощью "
"Tarantool, возвращают значения в формате MsgPack. Если функция была вызвана "
"через API коннектора, то формат возвращаемых значений будет следующим: "
"скалярные значения возвращаются в виде кортежей (сначала идет идентификатор "
"типа из формата MsgPack, а затем идет значение); все прочие  (не скалярные) "
"значения возвращаются в виде групп кортежей (сначала идет  идентификатор "
"массива в формате MsgPack, а затем идут скалярные значения). Но если функция"
" была вызвана в рамках бинарного протокола (с помощью команды ``eval``), а "
"не через API коннектора, то подобных изменений формата возвращаемых значений"
" не происходит."

msgid ""
"In the following example, a Lua function will be created. Since it will be "
"accessed externally by a :ref:`'guest' user<box_space-user>`, a :doc:`grant "
"</reference/reference_lua/box_schema/user_grant>` of an execute privilege "
"will be necessary. The function returns an empty array, a scalar string, two"
" booleans, and a short integer. The values are the ones described in the "
"table :ref:`Common Types and MsgPack Encodings <msgpack-"
"common_types_and_msgpack_encodings>`."
msgstr ""
"Далее приводится пример создания Lua-функции. Поскольку эту функцию будет  "
"вызывать внешний пользователь :ref:`'guest' user<box_space-user>`, то нужно "
"настроить права на исполнение с помощью :doc:`grant "
"</reference/reference_lua/box_schema/user_grant>`. Эта функция возвращает "
"пустой массив, строку-скаляр, два логических значения и короткое целое "
"число. Значение будут теми же, что описаны в разделе про MsgPack в таблице "
":ref:`Стандартные типы в MsgPack-кодировке <msgpack-"
"common_types_and_msgpack_encodings>`."

msgid ""
"tarantool> box.cfg{listen=3301}\n"
"2016-03-03 18:45:52.802 [27381] main/101/interactive I> ready to accept requests\n"
"---\n"
"...\n"
"tarantool> function f() return {},'a',false,true,127; end\n"
"---\n"
"...\n"
"tarantool> box.schema.func.create('f')\n"
"---\n"
"...\n"
"tarantool> box.schema.user.grant('guest','execute','function','f')\n"
"---\n"
"..."
msgstr ""
"tarantool> box.cfg{listen=3301}\n"
"2016-03-03 18:45:52.802 [27381] main/101/interactive I> ready to accept requests\n"
"---\n"
"...\n"
"tarantool> function f() return {},'a',false,true,127; end\n"
"---\n"
"...\n"
"tarantool> box.schema.func.create('f')\n"
"---\n"
"...\n"
"tarantool> box.schema.user.grant('guest','execute','function','f')\n"
"---\n"
"..."

msgid ""
"Here is a C program which calls the function. Although C is being used for "
"the example, the result would be precisely the same if the calling program "
"was written in Perl, PHP, Python, Go, or Java."
msgstr ""
"Далее идет пример программы на C, из который мы вызываем эту Lua-функцию.  "
"Хотя в примере использован код на C, результат будет одинаковым, на каком бы"
" языке ни была написана вызываемая программа: Perl, PHP, Python, Go или "
"Java."

msgid ""
"#include <stdio.h>\n"
"#include <stdlib.h>\n"
"#include <tarantool/tarantool.h>\n"
"#include <tarantool/tnt_net.h>\n"
"#include <tarantool/tnt_opt.h>\n"
"void main() {\n"
"  struct tnt_stream *tnt = tnt_net(NULL);              /* SETUP */\n"
"  tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");\n"
"   if (tnt_connect(tnt) < 0) {                         /* CONNECT */\n"
"       printf(\"Connection refused\\n\");\n"
"       exit(-1);\n"
"   }\n"
"   struct tnt_stream *arg; arg = tnt_object(NULL);     /* MAKE REQUEST */\n"
"   tnt_object_add_array(arg, 0);\n"
"   struct tnt_request *req1 = tnt_request_call(NULL);  /* CALL function f() */\n"
"   tnt_request_set_funcz(req1, \"f\");\n"
"   uint64_t sync1 = tnt_request_compile(tnt, req1);\n"
"   tnt_flush(tnt);                                     /* SEND REQUEST */\n"
"   struct tnt_reply reply;  tnt_reply_init(&reply);    /* GET REPLY */\n"
"   tnt->read_reply(tnt, &reply);\n"
"   if (reply.code != 0) {\n"
"     printf(\"Call failed %lu.\\n\", reply.code);\n"
"     exit(-1);\n"
"   }\n"
"   const unsigned char *p= (unsigned char*)reply.data; /* PRINT REPLY */\n"
"   while (p < (unsigned char *) reply.data_end)\n"
"   {\n"
"     printf(\"%x \", *p);\n"
"     ++p;\n"
"   }\n"
"   printf(\"\\n\");\n"
"   tnt_close(tnt);                                     /* TEARDOWN */\n"
"   tnt_stream_free(arg);\n"
"   tnt_stream_free(tnt);\n"
"}"
msgstr ""
"#include <stdio.h>\n"
"#include <stdlib.h>\n"
"#include <tarantool/tarantool.h>\n"
"#include <tarantool/tnt_net.h>\n"
"#include <tarantool/tnt_opt.h>\n"
"void main() {\n"
"  struct tnt_stream *tnt = tnt_net(NULL);              /* НАСТРОЙКА */\n"
"  tnt_set(tnt, TNT_OPT_URI, \"localhost:3301\");\n"
"   if (tnt_connect(tnt) < 0) {                         /* СОЕДИНЕНИЕ */\n"
"       printf(\"Connection refused\\n\");\n"
"       exit(-1);\n"
"   }\n"
"   struct tnt_stream *arg; arg = tnt_object(NULL);     /* СОЗДАНИЕ ЗАПРОСА */\n"
"   tnt_object_add_array(arg, 0);\n"
"   struct tnt_request *req1 = tnt_request_call(NULL);  /* ВЫЗОВ функции f() */\n"
"   tnt_request_set_funcz(req1, \"f\");\n"
"   uint64_t sync1 = tnt_request_compile(tnt, req1);\n"
"   tnt_flush(tnt);                                     /* ОТПРАВКА ЗАПРОСА */\n"
"   struct tnt_reply reply;  tnt_reply_init(&reply);    /* ПОЛУЧЕНИЕ ОТВЕТА */\n"
"   tnt->read_reply(tnt, &reply);\n"
"   if (reply.code != 0) {\n"
"     printf(\"Call failed %lu.\\n\", reply.code);\n"
"     exit(-1);\n"
"   }\n"
"   const unsigned char *p= (unsigned char*)reply.data; /* ВЫВОД ОТВЕТА */\n"
"   while (p < (unsigned char *) reply.data_end)\n"
"   {\n"
"     printf(\"%x \", *p);\n"
"     ++p;\n"
"   }\n"
"   printf(\"\\n\");\n"
"   tnt_close(tnt);                                     /* ЗАВЕРШЕНИЕ */\n"
"   tnt_stream_free(arg);\n"
"   tnt_stream_free(tnt);\n"
"}"

msgid "When this program is executed, it will print:"
msgstr "По завершении программа выведет на экран следующие значения:"

msgid "dd 0 0 0 5 90 91 a1 61 91 c2 91 c3 91 7f"
msgstr "dd 0 0 0 5 90 91 a1 61 91 c2 91 c3 91 7f"

msgid ""
"The first five bytes -- ``dd 0 0 0 5`` -- are the MsgPack encoding for "
"\"32-bit array header with value 5\" (see `MsgPack specification "
"<http://github.com/msgpack/msgpack/blob/master/spec.md>`_). The rest are as "
"described in the table :ref:`Common Types and MsgPack Encodings <msgpack-"
"common_types_and_msgpack_encodings>`."
msgstr ""
"Первые пять байт -- ``dd 0 0 0 5`` -- это фрагмент данных в формате MsgPack,"
" означающий \"32-битный заголовок массива со значением 5\" (см. "
"`спецификацию на формат MsgPack "
"<http://github.com/msgpack/msgpack/blob/master/spec.md>`_). Остальные "
"значения описаны в таблице :ref:`Стандартные типы в MsgPack-кодировке "
"<msgpack-common_types_and_msgpack_encodings>`."
