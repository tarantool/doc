
msgid "Node.js"
msgstr "Node.js"

msgid ""
"The most commonly used node.js driver is the `Node Tarantool driver "
"<https://github.com/KlonD90/node-tarantool-driver>`_. It is not supplied as "
"part of the Tarantool repository; it must be installed separately. The most "
"common way to install it is with `npm <https://www.sitepoint.com/beginners-"
"guide-node-package-manager/>`_. For example, on Ubuntu, the installation "
"could look like this after npm has been installed:"
msgstr ""
"Самый используемый драйвер для node.js -- `Node Tarantool driver "
"<https://github.com/KlonD90/node-tarantool-driver>`_. Он не входит в "
"репозиторий Tarantool, его необходимо устанавливать отдельно. Проще всего "
"установить его вместе с `npm <https://www.sitepoint.com/beginners-guide-"
"node-package-manager/>`_. Например, на Ubuntu, когда npm уже установлен, "
"установка драйвера будет выглядеть следующим образом:"

msgid "$ npm install tarantool-driver --global"
msgstr "$ npm install tarantool-driver --global"

msgid ""
"Here is a complete node.js program that inserts ``[99999,'BB']`` into "
"``space[999]`` via the node.js API. Before trying to run, check that the "
"server instance is :ref:`listening <cfg_basic-listen>` at ``localhost:3301``"
" and that the space ``examples`` exists, as :ref:`described earlier <index-"
"connector_setting>`. To run, paste the code into a file named "
":file:`example.rs` and say ``node example.rs``. The program will connect "
"using an application-specific definition of the space. The program will open"
" a socket connection with the Tarantool instance at ``localhost:3301``, then"
" send an :ref:`INSERT <box_space-insert>` request, then — if all is well — "
"end after saying \"Insert succeeded\". If Tarantool is not running on "
"``localhost`` with listen port = 3301, the program will print “Connect "
"failed”. If :ref:`the 'guest' user <box_space-user>` does not have "
"authorization to connect, the program will print \"Auth failed\". If the "
"insert request fails for any reason, for example because the tuple already "
"exists, the program will print \"Insert failed\"."
msgstr ""
"Далее приводится пример полноценной программы на языке node.js, которая "
"осуществляет вставку кортежа ``[99999,'BB']`` в спейс ``space[999]`` с "
"помощью API для языка node.js. Перед запуском проверьте, что у экземпляра "
"задан порт для :ref:`прослушивания <cfg_basic-listen>` на "
"``localhost:3301``, и в базе создан спейс ``examples``, как :ref:`описано "
"выше <index-connector_setting>`. Чтобы запустить программу, сохраните код в "
"файл с именем :file:`example.rs` и выполните команду ``node example.rs``. "
"Программа установит соединение, используя определение спейса для этой цели, "
"откроет сокет для соединения с экземпляром по ``localhost:3301``, отправит "
":ref:`INSERT-запрос <box_space-insert>`, а затем -- если всё хорошо -- "
"выдаст сообщение \"Insert succeeded\". Если Tarantool не запущен на "
"``localhost`` на прослушивание по порту = 3301, то программа выдаст "
"сообщение об ошибке “Connect failed”. Если у :ref:`пользователя 'guest' "
"<box_space-user>` нет прав на соединение, программа выдаст сообщение об "
"ошибке \"Auth failed\". Если запрос вставки по какой-либо причине не "
"сработает, например поскольку такой кортеж уже существует, то программа "
"выдаст сообщение об ошибке \"Insert failed\"."

msgid ""
"var TarantoolConnection = require('tarantool-driver');\n"
"var conn = new TarantoolConnection({port: 3301});\n"
"var insertTuple = [99999, \"BB\"];\n"
"conn.connect().then(function() {\n"
"    conn.auth(\"guest\", \"\").then(function() {\n"
"        conn.insert(999, insertTuple).then(function() {\n"
"            console.log(\"Insert succeeded\");\n"
"            process.exit(0);\n"
"    }, function(e) { console.log(\"Insert failed\");  process.exit(1); });\n"
"    }, function(e) { console.log(\"Auth failed\");    process.exit(1); });\n"
"    }, function(e) { console.log(\"Connect failed\"); process.exit(1); });"
msgstr ""
"var TarantoolConnection = require('tarantool-driver');\n"
"var conn = new TarantoolConnection({port: 3301});\n"
"var insertTuple = [99999, \"BB\"];\n"
"conn.connect().then(function() {\n"
"    conn.auth(\"guest\", \"\").then(function() {\n"
"        conn.insert(999, insertTuple).then(function() {\n"
"            console.log(\"Insert succeeded\");\n"
"            process.exit(0);\n"
"    }, function(e) { console.log(\"Insert failed\");  process.exit(1); });\n"
"    }, function(e) { console.log(\"Auth failed\");    process.exit(1); });\n"
"    }, function(e) { console.log(\"Connect failed\"); process.exit(1); });"

msgid ""
"The example program only shows one request and does not show all that's "
"necessary for good practice. For that, please see  `The node.js driver "
"repository <https://github.com/KlonD90/node-tarantool-driver>`_."
msgstr ""
"В этой программе мы привели пример использования лишь одного запроса. Для "
"полноценной работы с Tarantool обратитесь к документации из `репозитория "
"драйвера для node.js <https://github.com/KlonD90/node-tarantool-driver>`_."
