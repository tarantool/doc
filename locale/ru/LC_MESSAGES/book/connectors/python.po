
msgid "Python"
msgstr "Python"

msgid ""
"`tarantool-python <http://github.com/tarantool/tarantool-python>`_ is the "
"official Python connector for Tarantool. It is not supplied as part of the "
"Tarantool repository and must be installed separately (see below for "
"details)."
msgstr ""
"`tarantool-python <https://github.com/tarantool/tarantool-python>`_ -- это "
"официальный Python-коннектор для Tarantool. Он не входит в репозиторий "
"Tarantool, его необходимо устанавливать отдельно (см. ниже подробную "
"информацию)."

msgid ""
"Here is a complete Python program that inserts ``[99999,'Value','Value']`` "
"into space ``examples`` via the high-level Python API."
msgstr ""
"Далее приводится пример полноценной программы на языке Python, которая "
"осуществляет вставку ``[99999,'Value','Value']`` в спейс ``examples`` с "
"помощью высокоуровневого API для языка Python."

msgid ""
"#!/usr/bin/python\n"
"from tarantool import Connection\n"
"\n"
"c = Connection(\"127.0.0.1\", 3301)\n"
"result = c.insert(\"examples\",(99999,'Value', 'Value'))\n"
"print result"
msgstr ""
"#!/usr/bin/python\n"
"from tarantool import Connection\n"
"\n"
"c = Connection(\"127.0.0.1\", 3301)\n"
"result = c.insert(\"examples\",(99999,'Value', 'Value'))\n"
"print result"

msgid ""
"To prepare, paste the code into a file named :file:`example.py` and install "
"the ``tarantool-python`` connector with either :samp:`pip install "
"tarantool\\>0.4` to install in :file:`/usr` (requires **root** privilege) or"
" :samp:`pip install tarantool\\>0.4 --user` to install in :file:`~` i.e. "
"user's default directory."
msgstr ""
"Чтобы запустить тестовую программу, сохраните ее исходный код в файл с "
"именем :file:`example.py` и установите коннектор ``tarantool-python``. Для "
"установки коннектора воспользуйтесь либо командой :samp:`pip install "
"tarantool\\>0.4` (для установки в директорию :file:`/usr`; вам потребуются "
"права уровня  **root**), либо командой :samp:`pip install tarantool\\>0.4 "
"--user` (для установки в директорию :file:`~`, т.е. в используемую по "
"умолчанию директорию текущего пользователя)."

msgid ""
"Before trying to run, check that the server instance is :ref:`listening "
"<cfg_basic-listen>` at ``localhost:3301`` and that the space ``examples`` "
"exists, as :ref:`described earlier <index-connector_setting>`. To run the "
"program, say :samp:`python example.py`. The program will connect to the "
"Tarantool server, will send the :ref:`INSERT<box_space-insert>` request, and"
" will not throw any exception if all went well. If the tuple already exists,"
" the program will throw ``tarantool.error.DatabaseError: (3, \"Duplicate key"
" exists in unique index 'primary' in space 'examples'\")``."
msgstr ""
"Перед запуском данной программы проверьте, что у Tarantool-сервера задан "
"порт ``localhost:3301`` для :ref:`прослушивания <cfg_basic-listen>` и в базе"
" создан спейс ``examples``), как :ref:`описано выше <index-"
"connector_setting>`. Чтобы запустить тестовую программу, выполните команду "
":samp:`python example.py`. Программа установит соединение с Tarantool-"
"сервером, пошлет запрос :ref:`INSERT<box_space-insert>` и не сгенерирует "
"никакого исключения, если всё прошло хорошо. Если окажется, что такой кортеж"
" уже существует, то программа сгенерирует исключение "
"`tarantool.error.DatabaseError: (3, \"Duplicate key exists in unique index "
"'primary' in space 'examples'\")`."

msgid ""
"The example program only shows one request and does not show all that's "
"necessary for good practice. For that, please see `tarantool-python "
"<http://github.com/tarantool/tarantool-python>`_ project at GitHub. For an "
"example of using Python API with `queue managers for Tarantool "
"<https://github.com/tarantool/queue>`_, see `queue-python "
"<https://github.com/tarantool/queue-python>`_ project at GitHub."
msgstr ""
"В этой программе мы привели пример использования лишь одного запроса. Для "
"полноценной работы с Tarantool обратитесь к документации из `проекта "
"tarantool-python на GitHub <http://github.com/tarantool/tarantool-python>`_."
" А на странице `проекта queue-python на GitHub "
"<https://github.com/tarantool/queue-python>`_ вы сможете найти примеры "
"использования Python API для работы с `очередями сообщений в Tarantool "
"<https://github.com/tarantool/queue>`_."

msgid "Also there are several community-driven Python connectors:"
msgstr ""
"Кроме того, сообщество разработчиков поддерживает другие Python-коннекторы:"

msgid ""
"`asynctnt <https://github.com/igorcoding/asynctnt>`_ with asyncio support"
msgstr ""
"`asynctnt <https://github.com/igorcoding/asynctnt>`_ с поддержкой asyncio"

msgid ""
"`aiotarantool <https://github.com/shveenkov/aiotarantool>`_ also with "
"asyncio support"
msgstr ""
"`aiotarantool <https://github.com/shveenkov/aiotarantool>`_ также с "
"поддержкой asyncio"

msgid ""
"`gtarantool <https://github.com/shveenkov/gtarantool>`_ with gevent support "
"**no active maintenance**"
msgstr ""
"`gtarantool <https://github.com/shveenkov/gtarantool>`_ с поддержкой gevent "
"**не обновляется**"
