# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-12 09:14+0000\n"
"PO-Revision-Date: 2020-03-12 17:18+0300\n"
"Last-Translator: \n"
"Language: ru\n"
"Language-Team: \n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<12 || n%100>14) ? 1 : 2)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

msgid "Connecting from your favorite language"
msgstr "Подключаемся к базе из разных языков программирования"

msgid ""
"Now that you have a Tarantool database, let's see how to connect to it "
"from Python, PHP and Go."
msgstr ""
"Итак, мы создали базу данных в Tarantool. Теперь давайте посмотрим, как к"
" ней можно подключиться из Python, PHP и Go."

msgid "Connecting from Python"
msgstr "Подключение из Python"

msgid "Pre-requisites"
msgstr "Подготовка"

msgid "Before we proceed:"
msgstr "Перед тем как идти дальше, выполним следующие действия:"

msgid ""
"`Install <https://github.com/tarantool/tarantool-python#download-and-"
"install>`_ the ``tarantool-python`` library. We recommend using "
"``python3`` and ``pip3``."
msgstr ""
"`Установим <https://github.com/tarantool/tarantool-python#download-and-"
"install>`_ библиотеку ``tarantool-python``. Рекомендуется использовать "
"``python3`` и ``pip3``."

msgid ""
":ref:`Start <getting_started_db>` Tarantool (locally or in Docker) and "
"make sure that you have created and populated a database as we suggested "
":ref:`earlier <creating-db-locally>`."
msgstr ""
":ref:`Запустим <getting_started_db>` Tarantool (локально или в Docker) и "
"обязательно создадим базу данных с тестовыми данными, как показано в "
":ref:`предыдущем разделе <creating-db-locally>`."

msgid ""
"Please do not close the terminal window where Tarantool is running -- "
"you'll need it soon."
msgstr ""
"Не закрывайте окно терминала с запущенным Tarantool -- оно пригодится нам"
" позднее."

msgid ""
"In order to connect to Tarantool as an administrator, reset the password "
"for the ``admin`` user:"
msgstr ""
"Чтобы иметь возможность подключаться к Tarantool в качестве "
"администратора, сменим пароль пользователя ``admin``:"

msgid "box.schema.user.passwd('pass')"
msgstr "box.schema.user.passwd('pass')"

msgid "Connecting to Tarantool"
msgstr "Подключение к Tarantool"

msgid "To get connected to the Tarantool server, say this:"
msgstr "Для подключения к серверу достаточно выполнить следующее:"

msgid ""
">>> import tarantool\n"
">>> connection = tarantool.connect(\"localhost\", 3301)"
msgstr ""
">>> import tarantool\n"
">>> connection = tarantool.connect(\"localhost\", 3301)"

msgid "You can also specify the user name and password, if needed:"
msgstr "Также при необходимости можно указать имя пользователя и пароль:"

msgid ""
">>> tarantool.connect(\"localhost\", 3301, user=username, "
"password=password)"
msgstr ""
">>> tarantool.connect(\"localhost\", 3301, user=username, "
"password=password)"

msgid "The default user is ``guest``."
msgstr "По умолчанию используется пользователь ``guest``."

msgid "Manipulating the data"
msgstr "Работа с данными"

msgid ""
"A **space** is a container for **tuples**. To access a space as a named "
"object, use ``connection.space``:"
msgstr ""
"**Спейс** -- это контейнер для **кортежей**. Чтобы обратиться к спейсу "
"как к именованному объекту, воспользуемся функцией ``connection.space``:"

msgid ">>> tester = connection.space('tester')"
msgstr ">>> tester = connection.space('tester')"

msgid "Inserting data"
msgstr "Вставка данных"

msgid "To insert a tuple into a space, use ``insert``:"
msgstr "Для вставки нового кортежа в спейс воспользуемся функцией ``insert``:"

msgid ""
">>> tester.insert((4, 'ABBA', 1972))\n"
"[4, 'ABBA', 1972]"
msgstr ""
">>> tester.insert((4, 'ABBA', 1972))\n"
"[4, 'ABBA', 1972]"

msgid "Querying data"
msgstr "Получение данных"

msgid ""
"Let's start with selecting a tuple by the primary key (in our example, "
"this is the index named ``primary``, based on the ``id`` field of each "
"tuple). Use ``select``:"
msgstr ""
"Сначала выберем кортеж по первичному ключу (в нашем примере первичный "
"индекс –--это индекс ``primary``, построенный по полю ``id`` в каждом "
"кортеже). Воспользуемся функцией ``select``:"

msgid ""
">>> tester.select(4)\n"
"[4, 'ABBA', 1972]"
msgstr ""
">>> tester.select(4)\n"
"[4, 'ABBA', 1972]"

msgid ""
"Next, select tuples by a secondary key. For this purpose, you need to "
"specify the number *or* name of the index."
msgstr ""
"Теперь поищем кортежи по вторичному ключу. Для этого нужно указать номер "
"*или* имя вторичного индекса."

msgid "First off, select tuples using the index number:"
msgstr "Сначала сделаем запрос по номеру индекса:"

msgid ""
">>> tester.select('Scorpions', index=1)\n"
"[2, 'Scorpions', 2015]"
msgstr ""
">>> tester.select('Scorpions', index=1)\n"
"[2, 'Scorpions', 2015]"

msgid ""
"Now make a similar query by the index name and make sure that the result "
"is the same:"
msgstr ""
"Теперь сделаем аналогичный запрос по имени индекса и получим тот же "
"результат:"

msgid ""
">>> tester.select('Scorpions', index='secondary')\n"
"[2, 'Scorpions', 2015]"
msgstr ""
">>> tester.select('Scorpions', index='secondary')\n"
"[2, 'Scorpions', 2015]"

msgid ""
"Finally, select all the tuples in a space via a ``select`` with no "
"arguments:"
msgstr "А чтобы выбрать все кортежи из спейса, вызовем ``select`` без аргументов:"

msgid ">>> tester.select()"
msgstr ">>> tester.select()"

msgid "Updating data"
msgstr "Обновление данных"

msgid "Update a field value using ``update``:"
msgstr "Обновим значение поля с помощью ``update``:"

msgid ">>> tester.update(4, [('=', 1, 'New group'), ('+', 2, 2)])"
msgstr ">>> tester.update(4, [('=', 1, 'New group'), ('+', 2, 2)])"

msgid ""
"This updates the value of field ``1`` and increases the value of field "
"``2`` in the tuple with ``id`` = 4. If a tuple with this ``id`` doesn't "
"exist, Tarantool will return an error."
msgstr ""
"Здесь мы обновляем значение поля ``1`` и увеличиваем значение поля ``2`` "
"для кортежа с ``id`` = 4. Если кортежа с таким ``id`` нет, то Tarantool "
"вернет ошибку."

msgid ""
"Now use ``replace`` to totally replace the tuple that matches the primary"
" key. If a tuple with this primary key doesn't exist, Tarantool will do "
"nothing."
msgstr ""
"Теперь с помощью функции ``replace`` мы полностью заменим кортеж с "
"совпадающим первичным ключом. Если кортежа с указанным первичным ключом "
"не существует, то эта операция ни к чему не приведет."

msgid ">>> tester.replace((4, 'New band', 2015))"
msgstr ">>> tester.replace((4, 'New band', 2015))"

msgid ""
"You can also update the data using ``upsert`` that works similarly to "
"``update``, but creates a new tuple if the old one was not found."
msgstr ""
"Также мы можем обновлять данные с помощью функции ``upsert``, которая "
"работает аналогично ``update``, но создает новый кортеж, если старый не "
"был найден."

msgid ">>> tester.upsert((4, 'Another band', 2000), [('+', 2, 5)])"
msgstr ">>> tester.upsert((4, 'Another band', 2000), [('+', 2, 5)])"

msgid ""
"This increases by 5 the value of field ``2`` in the tuple with ``id`` = "
"4, -- or inserts the tuple ``(4, \"Another band\", 2000)`` if a tuple "
"with this ``id`` doesn't exist."
msgstr ""
"Здесь мы увеличиваем на 5 значение поля ``2`` в кортеже с ``id`` = 4 -- "
"или же вставляем кортеж ``(4, \"Another band\", 2000)``, если такого нет."

msgid "Deleting data"
msgstr "Удаление данных"

msgid "To delete a tuple, use ``delete(primary_key)``:"
msgstr "Чтобы удалить кортеж, нужно использовать ``delete(primary_key)``:"

msgid ""
">>> tester.delete(4)\n"
"[4, 'New group', 2012]"
msgstr ""
">>> tester.delete(4)\n"
"[4, 'New group', 2012]"

msgid ""
"To delete all tuples in a space (or to delete an entire space), use "
"``call``. We'll focus on this function in more detail in the :ref:`next "
"<getting_started-python-stored-procs>` section."
msgstr ""
"Для удаления всех кортежей в спейсе (или всего спейса целиком) нужно "
"воспользоваться функцией ``call``. Мы поговорим о ней подробнее в "
":ref:`следующем разделе <getting_started-python-stored-procs>`."

msgid "To delete all tuples in a space, call ``space:truncate``:"
msgstr ""
"Чтобы удалить все кортежи в спейсе, нужно вызвать функцию "
"``space:truncate``:"

msgid ">>> connection.call('box.space.tester:truncate', ())"
msgstr ">>> connection.call('box.space.tester:truncate', ())"

msgid ""
"To delete an entire space, call ``space:drop``. This requires connecting "
"to Tarantool as the ``admin`` user:"
msgstr ""
"Чтобы удалить весь спейс, нужно вызвать функцию ``space:drop``. Для "
"выполнения следующей команды необходимо подключиться из-под пользователя "
"``admin``:"

msgid ">>> connection.call('box.space.tester:drop', ())"
msgstr ">>> connection.call('box.space.tester:drop', ())"

msgid "Executing stored procedures"
msgstr "Исполнение хранимых процедур"

msgid "Switch to the terminal window where Tarantool is running."
msgstr "Перейдем в терминал с запущенным Tarantool."

msgid ""
"If you don't have a terminal window with remote connection to Tarantool, "
"check out these guides:"
msgstr ""
"О том, как установить удаленное подключение к Tarantool, можно прочитать "
"здесь:"

msgid ":ref:`connecting to a local Tarantool instance <connecting-remotely>`"
msgstr ""
":ref:`как подключиться к Tarantool, запущенному локально <connecting-"
"remotely>`"

msgid ""
":ref:`attaching to a Tarantool instance that runs in a Docker container "
"<getting_started-docker-attaching>`"
msgstr ""
":ref:`как подключиться к Tarantool, запущенному в Docker-контейнере "
"<getting_started-docker-attaching>`"

msgid "Define a simple Lua function:"
msgstr "Напишем простую функцию на Lua:"

msgid ""
"function sum(a, b)\n"
"    return a + b\n"
"end"
msgstr ""
"function sum(a, b)\n"
"    return a + b\n"
"end"

msgid ""
"Now we have a Lua function defined in Tarantool. To invoke this function "
"from ``python``, use ``call``:"
msgstr ""
"Итак, теперь у нас есть функция, описанная в Tarantool. Чтобы вызвать ее "
"из ``python``, нам нужна функция ``call``:"

msgid ""
">>> connection.call('sum', (3, 2))\n"
"5"
msgstr ""
">>> connection.call('sum', (3, 2))\n"
"5"

msgid "To send bare Lua code for execution, use ``eval``:"
msgstr ""
"Также мы можем передать на выполнение любой Lua-код. Для этого "
"воспользуемся функцией ``eval``:"

msgid ""
">>> connection.eval('return 4 + 5')\n"
"9"
msgstr ""
">>> connection.eval('return 4 + 5')\n"
"9"

msgid "Connecting from PHP"
msgstr "Подключение из PHP"

msgid ""
"`Install <https://github.com/tarantool-php/client#installation>`_ the "
"``tarantool-php`` library."
msgstr ""
"`Установим <https://github.com/tarantool-php/client#installation>`_ "
"библиотеку ``tarantool-php``."

msgid ""
"require_once __DIR__.'/vendor/autoload.php';\n"
"use Tarantool\\Client\\Client;\n"
"$client = Client::fromDefaults();"
msgstr ""
"require_once __DIR__.'/vendor/autoload.php';\n"
"use Tarantool\\Client\\Client;\n"
"$client = Client::fromDefaults();"

msgid ""
"$client = Client::fromOptions([\n"
"    'uri' => 'tcp://127.0.0.1:3301',\n"
"    'username' => '<username>',\n"
"    'password' => '<password>'\n"
"]);"
msgstr ""
"$client = Client::fromOptions([\n"
"    'uri' => 'tcp://127.0.0.1:3301',\n"
"    'username' => '<username>',\n"
"    'password' => '<password>'\n"
"]);"

msgid ""
"A **space** is a container for **tuples**. To access a space as a named "
"object, use ``getSpace``:"
msgstr ""
"**Спейс** -- это контейнер для **кортежей**. Чтобы обратиться к спейсу "
"как к именованному объекту, воспользуемся функцией ``getSpace``:"

msgid "$tester = $client->getSpace('tester');"
msgstr "$tester = $client->getSpace('tester');"

msgid "$result = $tester->insert([4, 'ABBA', 1972]);"
msgstr "$result = $tester->insert([4, 'ABBA', 1972]);"

msgid ""
"use Tarantool\\Client\\Schema\\Criteria;\n"
"\n"
"$result = $tester->select(Criteria::key([4]));\n"
"printf(json_encode($result));\n"
"```\n"
"```\n"
"[[4, 'ABBA', 1972]]"
msgstr ""
"use Tarantool\\Client\\Schema\\Criteria;\n"
"\n"
"$result = $tester->select(Criteria::key([4]));\n"
"printf(json_encode($result));\n"
"```\n"
"```\n"
"[[4, 'ABBA', 1972]]"

msgid ""
"$result = $tester->select(Criteria::index(1)->andKey(['Scorpions']));\n"
"printf(json_encode($result));"
msgstr ""
"$result = $tester->select(Criteria::index(1)->andKey(['Scorpions']));\n"
"printf(json_encode($result));"

msgid "[2, 'Scorpions', 2015]"
msgstr "[2, 'Scorpions', 2015]"

msgid ""
"$result = "
"$tester->select(Criteria::index('secondary')->andKey(['Scorpions']));\n"
"printf(json_encode($result));"
msgstr ""
"$result = "
"$tester->select(Criteria::index('secondary')->andKey(['Scorpions']));\n"
"printf(json_encode($result));"

msgid "$result = $tester->select(Criteria::AllIterator());"
msgstr "$result = $tester->select(Criteria::AllIterator());"

msgid ""
"use Tarantool\\Client\\Schema\\Operations;\n"
"\n"
"$result = $tester->update([4], Operations::set(1, 'New group')->andAdd(2,"
" 2));"
msgstr ""
"use Tarantool\\Client\\Schema\\Operations;\n"
"\n"
"$result = $tester->update([4], Operations::set(1, 'New group')->andAdd(2,"
" 2));"

msgid "$result = $tester->replace([4, 'New band', 2015]);"
msgstr "$result = $tester->replace([4, 'New band', 2015]);"

msgid ""
"use Tarantool\\Client\\Schema\\Operations;\n"
"\n"
"$tester->upsert([4, 'Another band', 2000], Operations::add(2, 5));"
msgstr ""
"use Tarantool\\Client\\Schema\\Operations;\n"
"\n"
"$tester->upsert([4, 'Another band', 2000], Operations::add(2, 5));"

msgid "$result = $tester->delete([4]);"
msgstr "$result = $tester->delete([4]);"

msgid ""
"To delete all tuples in a space (or to delete an entire space), use "
"``call``. We'll focus on this function in more detail in the :ref:`next "
"<getting_started-php-stored-procs>` section."
msgstr ""
"Для удаления всех кортежей в спейсе (или всего спейса целиком) нужно "
"воспользоваться функцией ``call``. Мы поговорим о ней подробнее в "
":ref:`следующем разделе <getting_started-php-stored-procs>`."

msgid "$result = $client->call('box.space.tester:truncate');"
msgstr "$result = $client->call('box.space.tester:truncate');"

msgid "$result = $client->call('box.space.tester:drop');"
msgstr "$result = $client->call('box.space.tester:drop');"

msgid ""
"Now we have a Lua function defined in Tarantool. To invoke this function "
"from ``php``, use ``call``:"
msgstr ""
"Итак, теперь у нас есть функция, описанная в Tarantool. Чтобы вызвать ее "
"из ``php``, нам нужна функция ``call``:"

msgid "$result = $client->call('sum', 3, 2);"
msgstr "$result = $client->call('sum', 3, 2);"

msgid "$result = $client->evaluate('return 4 + 5');"
msgstr "$result = $client->evaluate('return 4 + 5');"

msgid "Connecting from Go"
msgstr "Подключение из Go"

msgid ""
"`Install <https://github.com/tarantool/go-tarantool#installation>`_ the "
"``go-tarantool`` library."
msgstr ""
"`Установим <https://github.com/tarantool/go-tarantool#installation>`_ "
"библиотеку ``go-tarantool``."

msgid "To get connected to the Tarantool server, write a simple Go program:"
msgstr "Простая программа, выполняющая подключение к серверу, будет выглядеть так:"

msgid ""
"package main\n"
"\n"
"import (\n"
"    \"fmt\"\n"
"\n"
"    \"github.com/tarantool/go-tarantool\"\n"
")\n"
"\n"
"func main() {\n"
"    conn, err := tarantool.Connect(\"127.0.0.1:3301\", tarantool.Opts{})\n"
"\n"
"    if err != nil {\n"
"        fmt.Println(\"Connection refused\")\n"
"    }\n"
"\n"
"    defer conn.Close()\n"
"\n"
"    // Your logic for interacting with the database\n"
"}"
msgstr ""
"package main\n"
"\n"
"import (\n"
"    \"fmt\"\n"
"\n"
"    \"github.com/tarantool/go-tarantool\"\n"
")\n"
"\n"
"func main() {\n"
"    conn, err := tarantool.Connect(\"127.0.0.1:3301\", tarantool.Opts{})\n"
"\n"
"    if err != nil {\n"
"        fmt.Println(\"Connection refused\")\n"
"    }\n"
"\n"
"    defer conn.Close()\n"
"\n"
"    // Ваш код общения с базой\n"
"}"

msgid ""
"opts := tarantool.Opts{User: \"username\", Pass: \"password\"}\n"
"conn, err := tarantool.Connect(\"127.0.0.1:3301\", opts)\n"
"..."
msgstr ""
"opts := tarantool.Opts{User: \"username\", Pass: \"password\"}\n"
"conn, err := tarantool.Connect(\"127.0.0.1:3301\", opts)\n"
"..."

msgid "resp, err = conn.Insert(\"tester\", []interface{}{4, \"ABBA\", 1972})"
msgstr "resp, err = conn.Insert(\"tester\", []interface{}{4, \"ABBA\", 1972})"

msgid ""
"This inserts the tuple ``(4, \"ABBA\", 1972)`` into a space named "
"``tester``."
msgstr ""
"В этом примере в спейс ``tester`` вставляется кортеж ``(4, \"ABBA\", "
"1972)``."

msgid ""
"The response code and data are available in the ``tarantool.Response`` "
"structure:"
msgstr "Код ответа и данные можно получить из структуры ``tarantool.Response``:"

msgid ""
"code := resp.Code\n"
"data := resp.Data"
msgstr ""
"code := resp.Code\n"
"data := resp.Data"

msgid "To select a tuple from a space, use ``Select``:"
msgstr "Чтобы выбрать кортеж из спейса, воспользуемся функцией ``Select``:"

msgid ""
"resp, err = conn.Select(\"tester\", \"primary\", 0, 1, tarantool.IterEq, "
"[]interface{}{4})"
msgstr ""
"resp, err = conn.Select(\"tester\", \"primary\", 0, 1, tarantool.IterEq, "
"[]interface{}{4})"

msgid ""
"This selects a tuple by the primary key with ``offset`` = 0 and ``limit``"
" = 1 from a space named ``tester`` (in our example, this is the index "
"named ``primary``, based on the ``id`` field of each tuple)."
msgstr ""
"В этом примере мы ищем кортеж по первичному ключу с ``offset`` = 0 и "
"``limit`` = 1 в спейсе ``tester`` (первичный индекс в нашем примере -- "
"это индекс ``primary``, построенный по полю ``id`` в каждом кортеже)."

msgid "Next, select tuples by a secondary key."
msgstr "Теперь поищем по вторичному ключу:"

msgid ""
"resp, err = conn.Select(\"tester\", \"secondary\", 0, 1, "
"tarantool.IterEq, []interface{}{\"ABBA\"})"
msgstr ""
"resp, err = conn.Select(\"tester\", \"secondary\", 0, 1, "
"tarantool.IterEq, []interface{}{\"ABBA\"})"

msgid "Finally, select all the tuples in a space:"
msgstr "А теперь выберем все кортежи из спейса:"

msgid ""
"resp, err = conn.Select(\"tester\", \"primary\", 0, tarantool.KeyLimit, "
"tarantool.IterAll, []interface{}{})"
msgstr ""
"resp, err = conn.Select(\"tester\", \"primary\", 0, tarantool.KeyLimit, "
"tarantool.IterAll, []interface{}{})"

msgid "Update a field value using ``Update``:"
msgstr "Обновим значение поля с помощью ``Update``:"

msgid ""
"resp, err = conn.Update(\"tester\", \"primary\", []interface{}{4}, "
"[]interface{}{[]interface{}{\"+\", 2, 3}})"
msgstr ""
"resp, err = conn.Update(\"tester\", \"primary\", []interface{}{4}, "
"[]interface{}{[]interface{}{\"+\", 2, 3}})"

msgid ""
"This increases by 3 the value of field ``2`` in the tuple with ``id`` = "
"4. If a tuple with this ``id`` doesn't exist, Tarantool will return an "
"error."
msgstr ""
"Здесь мы увеличиваем на 3 значение поля ``2`` для кортежа с ``id`` = 4. "
"Если кортежа с таким ``id`` нет, то Tarantool вернет ошибку."

msgid ""
"Now use ``Replace`` to totally replace the tuple that matches the primary"
" key. If a tuple with this primary key doesn't exist, Tarantool will do "
"nothing."
msgstr ""
"Теперь с помощью функции ``Replace`` мы полностью заменим кортеж с "
"совпадающим первичным ключом. Если кортежа с указанным первичным ключом "
"не существует, то эта операция ни к чему не приведет."

msgid "resp, err = conn.Replace(\"tester\", []interface{}{4, \"New band\", 2011})"
msgstr "resp, err = conn.Replace(\"tester\", []interface{}{4, \"New band\", 2011})"

msgid ""
"You can also update the data using ``Upsert`` that works similarly to "
"``Update``, but creates a new tuple if the old one was not found."
msgstr ""
"Также мы можем обновлять данные с помощью функции ``Upsert``, которая "
"работает аналогично ``Update``, но создает новый кортеж, если старый не "
"был найден."

msgid ""
"resp, err = conn.Upsert(\"tester\", []interface{}{4, \"Another band\", "
"2000}, []interface{}{[]interface{}{\"+\", 2, 5}})"
msgstr ""
"resp, err = conn.Upsert(\"tester\", []interface{}{4, \"Another band\", "
"2000}, []interface{}{[]interface{}{\"+\", 2, 5}})"

msgid ""
"This increases by 5 the value of the third field in the tuple with ``id``"
" = 4, -- or inserts the tuple ``(4, \"Another band\", 2000)`` if a tuple "
"with this ``id`` doesn't exist."
msgstr ""
"Здесь мы увеличиваем на 5 значение третьего поля в кортеже с ``id`` = 4 "
"-- или же вставляем кортеж ``(4, \"Another band\", 2000)``, если такого "
"нет."

msgid "To delete a tuple, use ``сonnection.Delete``:"
msgstr "Чтобы удалить кортеж, воспользуемся функцией ``сonnection.Delete``:"

msgid "resp, err = conn.Delete(\"tester\", \"primary\", []interface{}{4})"
msgstr "resp, err = conn.Delete(\"tester\", \"primary\", []interface{}{4})"

msgid ""
"To delete all tuples in a space (or to delete an entire space), use "
"``Call``. We'll focus on this function in more detail in the :ref:`next "
"<getting_started-go-stored-procs>` section."
msgstr ""
"Для удаления всех кортежей в спейсе (или всего спейса целиком), нужно "
"воспользоваться функцией ``Call``. Мы поговорим о ней подробнее в "
":ref:`следующем разделе <getting_started-go-stored-procs>`."

msgid "resp, err = conn.Call(\"box.space.tester:truncate\", []interface{}{})"
msgstr "resp, err = conn.Call(\"box.space.tester:truncate\", []interface{}{})"

msgid "resp, err = conn.Call(\"box.space.tester:drop\", []interface{}{})"
msgstr "resp, err = conn.Call(\"box.space.tester:drop\", []interface{}{})"

msgid ""
"Now we have a Lua function defined in Tarantool. To invoke this function "
"from ``go``, use ``Call``:"
msgstr ""
"Итак, теперь у нас есть функция, описанная в Tarantool. Чтобы вызвать ее "
"из ``go``, нам нужна функция ``Call``:"

msgid "resp, err = conn.Call(\"sum\", []interface{}{2, 3})"
msgstr "resp, err = conn.Call(\"sum\", []interface{}{2, 3})"

msgid "To send bare Lua code for execution, use ``Eval``:"
msgstr ""
"Также мы можем передать на выполнение любой Lua-код. Для этого "
"воспользуемся функцией ``Eval``:"

msgid "resp, err = connection.Eval(\"return 4 + 5\", []interface{}{})"
msgstr "resp, err = connection.Eval(\"return 4 + 5\", []interface{}{})"
