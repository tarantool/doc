# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-06 14:05+0000\n"
"PO-Revision-Date: 2019-12-06 16:11+0300\n"
"Last-Translator: \n"
"Language: ru\n"
"Language-Team: \n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

msgid "Preventing duplicate actions"
msgstr "Предотвращение дублирующихся действий"

msgid ""
"Tarantool guarantees that every update is applied only once on every "
"replica. However, due to the asynchronous nature of replication, the "
"order of updates is not guaranteed. We now analyze this problem with more"
" details, provide examples of replication going out of sync, and suggest "
"solutions."
msgstr ""
"Tarantool гарантирует, что все обновления применяются однократно на "
"каждой реплике. Однако, поскольку репликация носит асинхронный характер, "
"порядок обновлений не гарантируется. Сейчас мы проанализируем данную "
"проблему более подробно с примерами рассинхронизации репликации и "
"предложим соответствующие решения."

msgid "Replication stops"
msgstr "Остановка репликации"

msgid ""
"In a replica set of two masters, suppose master #1 tries to do something "
"that master #2 has already done. For example, try to insert a tuple with "
"the same unique key:"
msgstr ""
"Предположим, что в наборе реплик с двумя мастерами мастер №1 пытается "
"сделать что-то, что уже было сделано мастером №2. Например, попробуйте "
"вставить кортеж с одинаковым уникальным ключом:"

msgid "tarantool> box.space.tester:insert{1, 'data'}"
msgstr "tarantool> box.space.tester:insert{1, 'data'}"

msgid ""
"This would cause an error saying ``Duplicate key exists in unique index "
"'primary' in space 'tester'`` and the replication would be stopped. (This"
" is the behavior when the :ref:`replication_skip_conflict "
"<cfg_replication-replication_skip_conflict>` configuration parameter has "
"its default recommended value, ``false``.)"
msgstr ""
"Это вызовет сообщение об ошибке дубликата ключа (``Duplicate key exists "
"in unique index 'primary' in space 'tester'``), и репликация остановится."
" Такое поведение системы обеспечивается использованием рекомендуемого "
"значения ``false`` (по умолчанию) для конфигурационного параметра "
":ref:`replication_skip_conflict <cfg_replication-"
"replication_skip_conflict>`."

msgid ""
"$ # error messages from master #1\n"
"2017-06-26 21:17:03.233 [30444] main/104/applier/rep_user@100.96.166.1 I>"
" can't read row\n"
"2017-06-26 21:17:03.233 [30444] main/104/applier/rep_user@100.96.166.1 "
"memtx_hash.cc:226 E> ER_TUPLE_FOUND:\n"
"Duplicate key exists in unique index 'primary' in space 'tester'\n"
"2017-06-26 21:17:03.233 [30444] relay/[::ffff:100.96.166.178]/101/main I>"
" the replica has closed its socket, exiting\n"
"2017-06-26 21:17:03.233 [30444] relay/[::ffff:100.96.166.178]/101/main C>"
" exiting the relay loop\n"
"\n"
"$ # error messages from master #2\n"
"2017-06-26 21:17:03.233 [30445] main/104/applier/rep_user@100.96.166.1 I>"
" can't read row\n"
"2017-06-26 21:17:03.233 [30445] main/104/applier/rep_user@100.96.166.1 "
"memtx_hash.cc:226 E> ER_TUPLE_FOUND:\n"
"Duplicate key exists in unique index 'primary' in space 'tester'\n"
"2017-06-26 21:17:03.234 [30445] relay/[::ffff:100.96.166.178]/101/main I>"
" the replica has closed its socket, exiting\n"
"2017-06-26 21:17:03.234 [30445] relay/[::ffff:100.96.166.178]/101/main C>"
" exiting the relay loop"
msgstr ""
"$ # сообщения об ошибках от мастера №1\n"
"2017-06-26 21:17:03.233 [30444] main/104/applier/rep_user@100.96.166.1 I>"
" can't read row\n"
"2017-06-26 21:17:03.233 [30444] main/104/applier/rep_user@100.96.166.1 "
"memtx_hash.cc:226 E> ER_TUPLE_FOUND:\n"
"Duplicate key exists in unique index 'primary' in space 'tester'\n"
"2017-06-26 21:17:03.233 [30444] relay/[::ffff:100.96.166.178]/101/main I>"
" the replica has closed its socket, exiting\n"
"2017-06-26 21:17:03.233 [30444] relay/[::ffff:100.96.166.178]/101/main C>"
" exiting the relay loop\n"
"\n"
"$ # сообщения об ошибках от мастера №2\n"
"2017-06-26 21:17:03.233 [30445] main/104/applier/rep_user@100.96.166.1 I>"
" can't read row\n"
"2017-06-26 21:17:03.233 [30445] main/104/applier/rep_user@100.96.166.1 "
"memtx_hash.cc:226 E> ER_TUPLE_FOUND:\n"
"Duplicate key exists in unique index 'primary' in space 'tester'\n"
"2017-06-26 21:17:03.234 [30445] relay/[::ffff:100.96.166.178]/101/main I>"
" the replica has closed its socket, exiting\n"
"2017-06-26 21:17:03.234 [30445] relay/[::ffff:100.96.166.178]/101/main C>"
" exiting the relay loop"

msgid ""
"If we check replication statuses with ``box.info``, we will see that "
"replication at master #1 is stopped (``1.upstream.status = stopped``). "
"Additionally, no data is replicated from that master (section "
"``1.downstream`` is missing in the report), because the downstream has "
"encountered the same error:"
msgstr ""
"Если мы проверим статус репликации с помощью ``box.info``, то увидим, что"
" репликация на мастере №1 остановлена (``1.upstream.status = stopped``). "
"Кроме того, данные с этого мастера не реплицируются (группа "
"``1.downstream`` отсутствует в отчете), поскольку встречается та же "
"ошибка:"

msgid ""
"# replication statuses (report from master #3)\n"
"tarantool> box.info\n"
"---\n"
"- version: 1.7.4-52-g980d30092\n"
"  id: 3\n"
"  ro: false\n"
"  vclock: {1: 9, 2: 1000000, 3: 3}\n"
"  uptime: 557\n"
"  lsn: 3\n"
"  vinyl: []\n"
"  cluster:\n"
"    uuid: 34d13b1a-f851-45bb-8f57-57489d3b3c8b\n"
"  pid: 30445\n"
"  status: running\n"
"  signature: 1000012\n"
"  replication:\n"
"    1:\n"
"      id: 1\n"
"      uuid: 7ab6dee7-dc0f-4477-af2b-0e63452573cf\n"
"      lsn: 9\n"
"      upstream:\n"
"        peer: replicator@192.168.0.101:3301\n"
"        lag: 0.00050592422485352\n"
"        status: stopped\n"
"        idle: 445.8626639843\n"
"        message: Duplicate key exists in unique index 'primary' in space "
"'tester'\n"
"    2:\n"
"      id: 2\n"
"      uuid: 9afbe2d9-db84-4d05-9a7b-e0cbbf861e28\n"
"      lsn: 1000000\n"
"      upstream:\n"
"        status: follow\n"
"        idle: 201.99915885925\n"
"        peer: replicator@192.168.0.102:3301\n"
"        lag: 0.0015020370483398\n"
"      downstream:\n"
"        vclock: {1: 8, 2: 1000000, 3: 3}\n"
"    3:\n"
"      id: 3\n"
"      uuid: e826a667-eed7-48d5-a290-64299b159571\n"
"      lsn: 3\n"
"  uuid: e826a667-eed7-48d5-a290-64299b159571\n"
"..."
msgstr ""
"# статусы репликации (отчет от мастера №3)\n"
"tarantool> box.info\n"
"---\n"
"- version: 1.7.4-52-g980d30092\n"
"  id: 3\n"
"  ro: false\n"
"  vclock: {1: 9, 2: 1000000, 3: 3}\n"
"  uptime: 557\n"
"  lsn: 3\n"
"  vinyl: []\n"
"  cluster:\n"
"    uuid: 34d13b1a-f851-45bb-8f57-57489d3b3c8b\n"
"  pid: 30445\n"
"  status: running\n"
"  signature: 1000012\n"
"  replication:\n"
"    1:\n"
"      id: 1\n"
"      uuid: 7ab6dee7-dc0f-4477-af2b-0e63452573cf\n"
"      lsn: 9\n"
"      upstream:\n"
"        peer: replicator@192.168.0.101:3301\n"
"        lag: 0.00050592422485352\n"
"        status: stopped\n"
"        idle: 445.8626639843\n"
"        message: Duplicate key exists in unique index 'primary' in space "
"'tester'\n"
"    2:\n"
"      id: 2\n"
"      uuid: 9afbe2d9-db84-4d05-9a7b-e0cbbf861e28\n"
"      lsn: 1000000\n"
"      upstream:\n"
"        status: follow\n"
"        idle: 201.99915885925\n"
"        peer: replicator@192.168.0.102:3301\n"
"        lag: 0.0015020370483398\n"
"      downstream:\n"
"        vclock: {1: 8, 2: 1000000, 3: 3}\n"
"    3:\n"
"      id: 3\n"
"      uuid: e826a667-eed7-48d5-a290-64299b159571\n"
"      lsn: 3\n"
"  uuid: e826a667-eed7-48d5-a290-64299b159571\n"
"..."

msgid "When replication is later manually resumed:"
msgstr "Когда позднее репликация возобновлена вручную:"

msgid ""
"# resuming stopped replication (at all masters)\n"
"tarantool> original_value = box.cfg.replication\n"
"tarantool> box.cfg{replication={}}\n"
"tarantool> box.cfg{replication=original_value}"
msgstr ""
"# возобновление остановленной репликации (на всех мастерах)\n"
"tarantool> original_value = box.cfg.replication\n"
"tarantool> box.cfg{replication={}}\n"
"tarantool> box.cfg{replication=original_value}"

msgid "... the faulty row in the write-ahead-log files is skipped."
msgstr "... запись с ошибкой в журнале упреждающей записи пропущена."

msgid "Replication runs out of sync"
msgstr "Рассинхронизация репликации"

msgid ""
"In a master-master cluster of two instances, suppose we make the "
"following operation:"
msgstr ""
"Предположим, что мы выполняем следующую операцию в кластере из двух "
"экземпляров с конфигурацией мастер-мастер:"

msgid "tarantool> box.space.tester:upsert({1}, {{'=', 2, box.info.uuid}})"
msgstr "tarantool> box.space.tester:upsert({1}, {{'=', 2, box.info.uuid}})"

msgid "When this operation is applied on both instances in the replica set:"
msgstr "Когда эта операция применяется на обоих экземплярах в наборе реплик:"

msgid ""
"# at master #1\n"
"tarantool> box.space.tester:upsert({1}, {{'=', 2, box.info.uuid}})\n"
"# at master #2\n"
"tarantool> box.space.tester:upsert({1}, {{'=', 2, box.info.uuid}})"
msgstr ""
"# на мастере №1\n"
"tarantool> box.space.tester:upsert({1}, {{'=', 2, box.info.uuid}})\n"
"# на мастере №2\n"
"tarantool> box.space.tester:upsert({1}, {{'=', 2, box.info.uuid}})"

msgid ""
"... we can have the following results, depending on the order of "
"execution:"
msgstr "... можно получить следующие результаты в зависимости порядка выполнения:"

msgid "each master’s row contains the UUID from master #1,"
msgstr "каждая строка мастера содержит UUID из мастера №1,"

msgid "each master’s row contains the UUID from master #2,"
msgstr "каждая строка мастера содержит UUID из мастера №2,"

msgid "master #1 has the UUID of master #2, and vice versa."
msgstr "у мастера №1 UUID мастера №2, и наоборот."

msgid "Commutative changes"
msgstr "Коммутативные изменения"

msgid ""
"The cases described in the previous paragraphs represent examples of "
"**non-commutative** operations, i.e. operations whose result depends on "
"the execution order. On the contrary, for **commutative operations**, the"
" execution order does not matter."
msgstr ""
"Случаи, описанные в предыдущих абзацах, представляют собой примеры "
"**некоммутативных** операций, т.е. операций, результат которых зависит от"
" порядка их выполнения. Для **коммутативных операций** порядок выполнения"
" значения не имеет."

msgid "Consider for example the following command:"
msgstr "Рассмотрим, например, следующую команду:"

msgid "tarantool> box.space.tester:upsert{{1, 0}, {{'+', 2, 1)}"
msgstr "tarantool> box.space.tester:upsert{{1, 0}, {{'+', 2, 1)}"

msgid ""
"This operation is commutative: we get the same result no matter in which "
"order the update is applied on the other masters."
msgstr ""
"Эта операция коммутативна: получаем одинаковый результат, независимо от "
"порядка, в котором обновление применяется на других мастерах."
