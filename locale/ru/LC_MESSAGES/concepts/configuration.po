
msgid "Configuration"
msgstr ""

msgid ""
"Tarantool provides the ability to configure the full topology of a cluster "
"and set parameters specific for concrete instances, such as connection "
"settings, memory used to store data, logging, and snapshot settings. Each "
"instance uses this configuration during :ref:`startup "
"<configuration_run_instance>` to organize the cluster."
msgstr ""

msgid "There are two approaches to configuring Tarantool:"
msgstr ""

msgid "*Since version 3.0*: In the YAML format."
msgstr ""

msgid ""
"YAML configuration allows you to provide the full cluster topology and "
"specify all configuration options. You can use local configuration in a YAML"
" file for each instance or store configuration data in one reliable place "
"using :ref:`etcd <configuration_etcd_overview>`."
msgstr ""

msgid ""
"*In version 2.11 and earlier*: :ref:`In code <configuration_code>` using the"
" ``box.cfg`` API."
msgstr ""

msgid ""
"In this case, configuration is provided in a Lua initialization script."
msgstr ""

msgid ""
"Starting with the 3.0 version, configuring Tarantool in code is considered a"
" legacy approach."
msgstr ""

msgid "Configuration overview"
msgstr ""

msgid ""
"YAML configuration describes the full topology of a Tarantool cluster. A "
"cluster's topology includes the following elements, starting from the lower "
"level:"
msgstr ""

msgid ""
"groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        instances:\n"
"          instance001:\n"
"            # ...\n"
"          instance002:\n"
"            # ..."
msgstr ""

msgid "``instances``"
msgstr ""

msgid ""
"An *instance* represents a single running Tarantool instance. It stores data"
" or might act as a router for handling CRUD requests in a :ref:`sharded "
"<sharding>` cluster."
msgstr ""

msgid "``replicasets``"
msgstr ""

msgid ""
"A *replica set* is a pack of instances that operate on same data sets. "
":ref:`Replication <replication>` provides redundancy and increases data "
"availability."
msgstr ""

msgid "``groups``"
msgstr ""

msgid ""
"A *group* provides the ability to organize replica sets. For example, in a "
"sharded cluster, one group can contain :ref:`storage <vshard-architecture-"
"storage>` instances and another group can contain :ref:`routers <vshard-"
"architecture-router>` used to handle CRUD requests."
msgstr ""

msgid ""
"You can flexibly configure a cluster's settings on different levels: from "
"global settings applied to all groups to parameters specific for concrete "
"instances."
msgstr ""

msgid "Configuration in a file"
msgstr ""

msgid ""
"This section provides an overview on how to configure Tarantool in a YAML "
"file."
msgstr ""

msgid "Basic instance configuration"
msgstr ""

msgid ""
"The example below shows a sample configuration of a single Tarantool "
"instance:"
msgstr ""

msgid ""
"groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        instances:\n"
"          instance001:\n"
"            iproto:\n"
"              listen: \"3301\""
msgstr ""

msgid ""
"The ``instances`` section includes only one instance named *instance001*. "
"The ``iproto.listen`` option sets a port used to listen for incoming "
"requests."
msgstr ""

msgid ""
"The ``replicasets`` section contains one replica set named *replicaset001*."
msgstr ""

msgid "The ``groups`` section contains one group named *group001*."
msgstr ""

msgid "Configuration scopes"
msgstr ""

msgid ""
"This section shows how to control a scope the specified configuration option"
" is applied to. Most of the configuration options can be applied to a "
"specific instance, replica set, group, or to all instances globally."
msgstr ""

msgid "*Instance*"
msgstr ""

msgid ""
"To apply specific configuration options to a concrete instance, specify such"
" options for this instance only. In the example below, ``iproto.listen`` is "
"applied to *instance001* only."
msgstr ""

msgid "*Replica set*"
msgstr ""

msgid ""
"In this example, ``iproto.listen`` is in effect for all instances in "
"*replicaset001*."
msgstr ""

msgid ""
"groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        iproto:\n"
"          listen: \"3301\"\n"
"        instances:\n"
"          instance001: {}"
msgstr ""

msgid "*Group*"
msgstr ""

msgid ""
"In this example, ``iproto.listen`` is in effect for all instances in "
"*group001*."
msgstr ""

msgid ""
"groups:\n"
"  group001:\n"
"    iproto:\n"
"      listen: \"3301\"\n"
"    replicasets:\n"
"      replicaset001:\n"
"        instances:\n"
"          instance001: {}"
msgstr ""

msgid "*Global*"
msgstr ""

msgid ""
"In this example, ``iproto.listen`` is applied to all instances of the "
"cluster."
msgstr ""

msgid ""
"iproto:\n"
"  listen: \"3301\"\n"
"\n"
"groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        instances:\n"
"          instance001: {}"
msgstr ""

msgid ""
"The :ref:`Configuration reference <configuration_reference>` contains "
"information about scopes to which each configuration option can be applied."
msgstr ""

msgid "Configuration scopes: Replica set example"
msgstr ""

msgid ""
"The example below shows how specific configuration options work in different"
" configuration scopes for a replica set with a manual failover. You can "
"learn more about configuring replication from :ref:`Replication tutorials "
"<how-to-replication>`."
msgstr ""

msgid ""
"credentials:\n"
"  users:\n"
"    replicator:\n"
"      password: 'topsecret'\n"
"      roles: [replication]\n"
"\n"
"iproto:\n"
"  advertise:\n"
"    peer: replicator@\n"
"\n"
"replication:\n"
"  failover: manual\n"
"\n"
"groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        leader: instance001\n"
"        instances:\n"
"          instance001:\n"
"            iproto:\n"
"              listen: 127.0.0.1:3301\n"
"          instance002:\n"
"            iproto:\n"
"              listen: 127.0.0.1:3302\n"
"          instance003:\n"
"            iproto:\n"
"              listen: 127.0.0.1:3303\n"
"\n"
msgstr ""

msgid "``credentials`` (*global*)"
msgstr ""

msgid ""
"This section is used to create the *replicator* user and assign it the "
"specified role. These options are applied globally to all instances."
msgstr ""

msgid "``iproto`` (*global*, *instance*)"
msgstr ""

msgid ""
"The ``iproto`` section is specified on both global and instance levels. The "
"``iproto.advertise.peer`` option specifies a URI used by an instance to "
"connect to another instance as a replica. In the example above, the URI "
"includes a user name only. A host value is taken from ``iproto.listen`` that"
" is set on the instance level."
msgstr ""

msgid "``replication``: (*global*)"
msgstr ""

msgid ""
"The ``replication.failover`` global option sets a manual failover for all "
"replica sets."
msgstr ""

msgid "``leader``: (*replica set*)"
msgstr ""

msgid ""
"The ``<replicaset-name>.leader`` option sets a :ref:`master <replication-"
"roles>` instance for *replicaset001*."
msgstr ""

msgid "Loading an application"
msgstr ""

msgid ""
"Using Tarantool as an application server, you can run your own Lua "
"applications. In the ``app`` section, you can load the application and "
"provide a custom application configuration in the ``cfg`` section."
msgstr ""

msgid ""
"In the example below, the application is loaded from the ``myapp.lua`` file "
"placed next to the YAML configuration file:"
msgstr ""

msgid ""
"app:\n"
"  file: 'myapp.lua'\n"
"  cfg:\n"
"    greeting: 'Hello'\n"
"\n"
"groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        instances:\n"
"          instance001:\n"
"            iproto:\n"
"              listen: \"3301\""
msgstr ""

msgid ""
"To get a value of the custom ``greeting`` property in the application code, "
"use the ``config:get()`` function provided by the :ref:`config <config-"
"module>` module."
msgstr ""

#, python-format
msgid ""
"-- myapp.lua --\n"
"local log = require('log').new(\"myapp\")\n"
"local config = require('config')\n"
"log.info(\"%s from app, %s!\", config:get('app.cfg.greeting'), box.info.name)\n"
msgstr ""

msgid ""
"As a result of :ref:`starting <configuration_run_instance>` the "
"*instance001*, a log should contain the following line:"
msgstr ""

msgid "main/103/interactive/myapp I> Hello from app, instance001!"
msgstr ""

msgid ""
"The ``app`` section can be placed in any :ref:`configuration scope "
"<configuration_scopes>`. As an example use case, you can provide different "
"applications for storages and routers in a sharded cluster:"
msgstr ""

msgid ""
"groups:\n"
"  storages:\n"
"    app:\n"
"      module: storage\n"
"      # ...\n"
"  routers:\n"
"    app:\n"
"      module: router\n"
"      # ..."
msgstr ""

msgid ""
"Learn more about using Tarantool as the application server from "
":ref:`Developing applications with Tarantool <how-to-app-server>`."
msgstr ""

msgid "Predefined variables"
msgstr ""

msgid ""
"In a configuration file, you can use the following predefined variables that"
" are replaced with actual values at runtime:"
msgstr ""

msgid "``instance_name``"
msgstr ""

msgid "``replicaset_name``"
msgstr ""

msgid "``group_name``"
msgstr ""

msgid ""
"To reference these variables in a configuration file, enclose them in double"
" curly braces with whitespaces. In the example below, ``{{ instance_name "
"}}`` is replaced with *instance001*."
msgstr ""

msgid ""
"groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        instances:\n"
"          instance001:\n"
"            snapshot:\n"
"              dir: ./var/{{ instance_name }}/snapshots\n"
"            wal:\n"
"              dir: ./var/{{ instance_name }}/wals"
msgstr ""

msgid ""
"As a result, the :ref:`paths to snapshots and write-ahead logs "
"<configuration_options_directories>` differ for different instances."
msgstr ""

msgid "Environment variables"
msgstr ""

msgid ""
"For each configuration parameter, Tarantool provides two sets of predefined "
"environment variables:"
msgstr ""

msgid ""
"``TT_<CONFIG_PARAMETER>``. These variables are used to substitute parameters"
" specified in a configuration file. This means that these variables have a "
"higher :ref:`priority <configuration_precedence>` than the options specified"
" in a configuration file."
msgstr ""

msgid ""
"``TT_<CONFIG_PARAMETER>_DEFAULT``. These variables are used to specify "
"default values for parameters missing in a configuration file. These "
"variables have a lower :ref:`priority <configuration_precedence>` than the "
"options specified in a configuration file."
msgstr ""

msgid ""
"For example, ``TT_IPROTO_LISTEN`` and ``TT_IPROTO_LISTEN_DEFAULT`` "
"correspond to the ``iproto.listen`` option. ``TT_SNAPSHOT_DIR`` and "
"``TT_SNAPSHOT_DIR_DEFAULT`` correspond to the ``snapshot.dir`` option. To "
"see all the supported environment variables, execute the ``tarantool`` "
"command with the ``--help-env-list`` :ref:`option "
"<configuration_command_options>`."
msgstr ""

msgid "$ tarantool --help-env-list"
msgstr ""

msgid ""
"Below are a few examples that show how to set environment variables of "
"different types, like *string*, *number*, *array*, or *map*:"
msgstr ""

msgid ""
"String. In the example below, ``TT_IPROTO_LISTEN`` is used to specify a "
":ref:`listening host and port <configuration_options_connection>` values:"
msgstr ""

msgid "$ export TT_IPROTO_LISTEN='127.0.0.1:3311'"
msgstr ""

msgid ""
"To specify several listening addresses, separate them by a comma without "
"space:"
msgstr ""

msgid "$ export TT_IPROTO_LISTEN='127.0.0.1:3311,127.0.0.1:3312'"
msgstr ""

msgid ""
"Number. In this example, ``TT_LOG_LEVEL`` is used to set a logging level to "
"3 (``CRITICAL``):"
msgstr ""

msgid "$ export TT_LOG_LEVEL=3"
msgstr ""

msgid ""
"Array. The examples below show how to set the ``TT_SHARDING_ROLES`` variable"
" that accepts an array value. Arrays can be passed in two ways: using a "
"*simple* ..."
msgstr ""

msgid "$ export TT_SHARDING_ROLES=router,storage"
msgstr ""

msgid "... or *JSON* format:"
msgstr ""

msgid "$ export TT_SHARDING_ROLES='[\"router\", \"storage\"]'"
msgstr ""

msgid ""
"The *simple* format is applicable only to arrays containing scalar values."
msgstr ""

msgid ""
"Map. To assign map values to environment variables, you can also use "
"*simple* or *JSON* formats. In the example below, ``TT_LOG_MODULES`` sets "
"different logging levels for different modules using a *simple* format:"
msgstr ""

msgid "$ export TT_LOG_MODULES=module1=info,module2=error"
msgstr ""

msgid ""
"In the next example, ``TT_APP_CFG`` is used to specify the value of a custom"
" configuration property for a :ref:`loaded application "
"<configuration_application>` using a *JSON* format:"
msgstr ""

msgid "$ export TT_APP_CFG='{\"greeting\":\"Hi\"}'"
msgstr ""

msgid ""
"The *simple* format is applicable only to maps containing scalar values."
msgstr ""

msgid ""
"There are also special ``TT_INSTANCE_NAME`` and ``TT_CONFIG`` environment "
"variables that can be used to :ref:`start "
"<configuration_run_instance_tarantool>` the specified Tarantool instance "
"with configuration from the given file."
msgstr ""

msgid "Configuration in etcd"
msgstr ""

msgid "Enterprise Edition"
msgstr ""

msgid ""
"Storing configuration in etcd is supported by the `Enterprise Edition "
"<https://www.tarantool.io/compare/>`_ only."
msgstr ""

msgid ""
"Tarantool enables you to store configuration data in one reliable place "
"using `etcd <https://etcd.io/>`_. To achieve this, you need to:"
msgstr ""

msgid ""
"Provide a local YAML configuration with an etcd endpoint address and key "
"prefix in the ``config`` section:"
msgstr ""

msgid ""
"config:\n"
"  etcd:\n"
"    endpoints:\n"
"      - http://localhost:2379\n"
"    prefix: /example"
msgstr ""

msgid "Publish a cluster's configuration to an etcd server."
msgstr ""

msgid ""
"Learn more from the following guide: :ref:`Storing configuration in etcd "
"<configuration_etcd>`."
msgstr ""

msgid "Configuration precedence"
msgstr ""

msgid ""
"Tarantool configuration options are applied from multiple sources with the "
"following precedence, from highest to lowest:"
msgstr ""

msgid ""
"`TT_*` :ref:`environment variables <configuration_environment_variable>`."
msgstr ""

msgid "Configuration from a :ref:`local YAML file <configuration_file>`."
msgstr ""

msgid ""
":ref:`Centralized configuration <configuration_etcd_overview>` stored in "
"etcd."
msgstr ""

msgid ""
"`TT_*_DEFAULT` :ref:`environment variables "
"<configuration_environment_variable>`."
msgstr ""

msgid ""
"If the same option is defined in two or more locations, the option with the "
"highest precedence is applied."
msgstr ""

msgid "Configuration options overview"
msgstr ""

msgid ""
"This section gives an overview of some useful configuration options. All the"
" available options are documented in the :ref:`Configuration reference "
"<configuration_reference>`."
msgstr ""

msgid "Connection settings"
msgstr ""

msgid ""
"To configure an address used to listen for incoming requests, use the "
"``iproto.listen`` option. Below are a few examples on how to do this:"
msgstr ""

msgid "Set a listening port to ``3301``:"
msgstr ""

msgid ""
"iproto:\n"
"  listen: \"3301\""
msgstr ""

msgid "Set a listening address to ``127.0.0.1:3301``:"
msgstr ""

msgid ""
"iproto:\n"
"  listen: \"127.0.0.1:3301\""
msgstr ""

msgid "Configure several listening addresses:"
msgstr ""

msgid ""
"iproto:\n"
"  listen: \"127.0.0.1:3301,127.0.0.1:3303\""
msgstr ""

msgid ""
"Enables :ref:`traffic encryption <enterprise-iproto-encryption>` for a "
"connection using corresponding URI parameters:"
msgstr ""

msgid ""
"iproto:\n"
"  listen: \"127.0.0.1:3301?transport=ssl&ssl_key_file=localhost.key&ssl_cert_file=localhost.crt&ssl_ca_file=ca.crt\""
msgstr ""

msgid ""
"Note that traffic encryption is supported by the `Enterprise Edition "
"<https://www.tarantool.io/compare/>`_ only."
msgstr ""

msgid "Use a Unix domain socket:"
msgstr ""

msgid ""
"iproto:\n"
"  listen: \"unix/:./var/run/{{ instance_name }}/tarantool.iproto\""
msgstr ""

msgid "Access control"
msgstr ""

msgid ""
"The ``credentials`` section allows you to create users and grant them the "
"specified privileges. In the example below, there are two users:"
msgstr ""

msgid ""
"The *replicator* user is used for replication and has a corresponding role."
msgstr ""

msgid ""
"The *storage* user has the ``super`` role and can perform any action on "
"Tarantool instances."
msgstr ""

msgid ""
"credentials:\n"
"  users:\n"
"    replicator:\n"
"      password: 'topsecret'\n"
"      roles: [replication]\n"
"    storage:\n"
"      password: 'secret'\n"
"      roles: [super]\n"
msgstr ""

msgid "To learn more, see the :ref:`Access control <authentication>` section."
msgstr ""

msgid "Memory"
msgstr ""

msgid ""
"The ``memtx.memory`` option specifies how much :ref:`memory <engines-memtx>`"
" Tarantool allocates to actually store data."
msgstr ""

msgid ""
"memtx:\n"
"  memory: 100000000"
msgstr ""

msgid ""
"When the limit is reached, ``INSERT`` or ``UPDATE`` requests fail with "
":ref:`ER_MEMORY_ISSUE <admin-troubleshoot-memory-issues>`."
msgstr ""

msgid "Snapshots and write-ahead logs"
msgstr ""

msgid ""
"The ``snapshot.dir`` and ``wal.dir`` options can be used to configure "
"directories for storing snapshots and write-ahead logs. For example, you can"
" place snapshots and write-ahead logs on different hard drives for better "
"reliability."
msgstr ""

msgid ""
"instance001:\n"
"  snapshot:\n"
"    dir: '/media/drive1/snapshots'\n"
"  wal:\n"
"    dir: '/media/drive2/wals'"
msgstr ""

msgid ""
"To learn more about the persistence mechanism in Tarantool, see the "
":ref:`Persistence <concepts-data_model-persistence>` section."
msgstr ""
