
msgid "Configuration in code"
msgstr ""

msgid ""
"Starting with the 3.0 version, the recommended way of configuring Tarantool "
"is using a :ref:`configuration file <configuration_file>`. Configuring "
"Tarantool in code is considered a legacy approach."
msgstr ""

msgid ""
"This topic covers the specifics of configuring Tarantool in code using the "
"``box.cfg`` API. In this case, a configuration is stored in an "
":ref:`initialization file <index-init_label>` - a Lua script with the "
"specified configuration options. You can find all the available options in "
"the :ref:`Configuration reference <box-cfg-params-ref>`."
msgstr ""

msgid "Initialization file"
msgstr ""

msgid ""
"If the command to :ref:`start Tarantool "
"<configuration_code_run_instance_tarantool>` includes an instance file, then"
" Tarantool begins by invoking the Lua program in the file, which may have "
"the name ``init.lua``. The Lua program may get further arguments from the "
"command line or may use operating-system functions, such as ``getenv()``. "
"The Lua program almost always begins by invoking ``box.cfg()``, if the "
"database server will be used or if ports need to be opened. For example, "
"suppose ``init.lua`` contains the lines"
msgstr ""

msgid ""
"#!/usr/bin/env tarantool\n"
"box.cfg{\n"
"    listen              = os.getenv(\"LISTEN_URI\"),\n"
"    memtx_memory        = 33554432,\n"
"    pid_file            = \"tarantool.pid\",\n"
"    wal_max_size        = 2500\n"
"}\n"
"print('Starting ', arg[1])"
msgstr ""

msgid ""
"and suppose the environment variable ``LISTEN_URI`` contains 3301, and "
"suppose the command line is ``tarantool init.lua ARG``. Then the screen "
"might look like this:"
msgstr ""

msgid ""
"$ export LISTEN_URI=3301\n"
"$ tarantool init.lua ARG\n"
"... main/101/init.lua C> Tarantool 2.8.3-0-g01023dbc2\n"
"... main/101/init.lua C> log level 5\n"
"... main/101/init.lua I> mapping 33554432 bytes for memtx tuple arena...\n"
"... main/101/init.lua I> recovery start\n"
"... main/101/init.lua I> recovering from './00000000000000000000.snap'\n"
"... main/101/init.lua I> set 'listen' configuration option to \"3301\"\n"
"... main/102/leave_local_hot_standby I> ready to accept requests\n"
"Starting  ARG\n"
"... main C> entering the event loop"
msgstr ""

msgid ""
"If you wish to start an interactive session on the same terminal after "
"initialization is complete, you can pass the ``-i`` :ref:`command-line "
"option <configuration_command_options>`."
msgstr ""

msgid "Environment variables"
msgstr ""

msgid ""
"Starting from version :doc:`2.8.1 </release/2.8.1>`, you can specify "
"configuration parameters via special environment variables. The name of a "
"variable should have the following pattern: ``TT_<NAME>``, where ``<NAME>`` "
"is the uppercase name of the corresponding :ref:`box.cfg parameter <box-cfg-"
"params-ref>`."
msgstr ""

msgid "For example:"
msgstr ""

msgid ""
"``TT_LISTEN`` -- corresponds to the :ref:`box.cfg.listen <cfg_basic-listen>`"
" option."
msgstr ""

msgid ""
"``TT_MEMTX_DIR`` -- corresponds to the :ref:`box.cfg.memtx_dir <cfg_basic-"
"memtx_dir>` option."
msgstr ""

msgid ""
"In case of an array value, separate the array elements by a comma without "
"space:"
msgstr ""

msgid "export TT_REPLICATION=\"localhost:3301,localhost:3302\""
msgstr ""

msgid ""
"If you need to pass :ref:`additional parameters for URI <index-uri-several-"
"params>`, use the ``?`` and ``&`` delimiters:"
msgstr ""

msgid "export TT_LISTEN=\"localhost:3301?param1=value1&param2=value2\""
msgstr ""

msgid ""
"An empty variable (``TT_LISTEN=``) has the same effect as an unset one, "
"meaning that the corresponding configuration parameter won't be set when "
"calling ``box.cfg{}``."
msgstr ""

msgid "Configuration parameters"
msgstr ""

msgid "Configuration parameters have the form:"
msgstr ""

msgid ""
":extsamp:`{**{box.cfg}**}{[{*{key = value}*} [, {*{key = value ...}*}]]}`"
msgstr ""

msgid ""
"Configuration parameters can be set in a Lua :ref:`initialization file "
"<index-init_label>`, which is specified on the Tarantool command line."
msgstr ""

msgid ""
"Most configuration parameters are for allocating resources, opening ports, "
"and specifying database behavior. All parameters are optional. Most of the "
"parameters are dynamic, that is, they can be changed at runtime by calling "
"``box.cfg{}`` a second time. For example, the command below sets the "
":ref:`listen port <cfg_basic-listen>` to ``3301``."
msgstr ""

msgid ""
"tarantool> box.cfg{ listen = 3301 }\n"
"2023-05-10 13:28:54.667 [31326] main/103/interactive I> tx_binary: stopped\n"
"2023-05-10 13:28:54.667 [31326] main/103/interactive I> tx_binary: bound to [::]:3301\n"
"2023-05-10 13:28:54.667 [31326] main/103/interactive/box.load_cfg I> set 'listen' configuration option to 3301\n"
"---\n"
"..."
msgstr ""

msgid ""
"To see all the non-null parameters, execute ``box.cfg`` (no parentheses)."
msgstr ""

msgid ""
"tarantool> box.cfg\n"
"---\n"
"- replication_skip_conflict: false\n"
"  wal_queue_max_size: 16777216\n"
"  feedback_host: https://feedback.tarantool.io\n"
"  memtx_dir: .\n"
"  memtx_min_tuple_size: 16\n"
"  -- other parameters --\n"
"..."
msgstr ""

msgid ""
"To see a particular parameter value, call a corresponding ``box.cfg`` "
"option. For example, ``box.cfg.listen`` shows the specified :ref:`listen "
"address <cfg_basic-listen>`."
msgstr ""

msgid ""
"tarantool> box.cfg.listen\n"
"---\n"
"- 3301\n"
"..."
msgstr ""

msgid "Listen URI"
msgstr ""

msgid ""
"Some configuration parameters and some functions depend on a URI (Universal "
"Resource Identifier). The URI string format is similar to the `generic "
"syntax for a URI schema "
"<https://en.wikipedia.org/wiki/List_of_URI_schemes>`_. It may contain (in "
"order):"
msgstr ""

msgid "user name for login"
msgstr ""

msgid "password"
msgstr ""

msgid "host name or host IP address"
msgstr ""

msgid "port number"
msgstr ""

msgid "query parameters"
msgstr ""

msgid ""
"Only a port number is always mandatory. A password is mandatory if a user "
"name is specified unless the user name is 'guest'."
msgstr ""

msgid ""
"Formally, the URI syntax is ``[host:]port`` or "
"``[username:password@]host:port``. If a host is omitted, then \"0.0.0.0\" or"
" \"[::]\" is assumed, meaning respectively any IPv4 address or any IPv6 "
"address on the local machine. If ``username:password`` is omitted, then the "
"\"guest\" user is assumed. Some examples:"
msgstr ""

msgid "URI fragment"
msgstr ""

msgid "Example"
msgstr ""

msgid "port"
msgstr ""

msgid "3301"
msgstr ""

msgid "host:port"
msgstr ""

msgid "127.0.0.1:3301"
msgstr ""

msgid "username:password@host:port"
msgstr ""

msgid "notguest:sesame@mail.ru:3301"
msgstr ""

msgid ""
"In code, the URI value can be passed as a number (if only a port is "
"specified) or a string:"
msgstr ""

msgid ""
"box.cfg { listen = 3301 }\n"
"\n"
"box.cfg { listen = \"127.0.0.1:3301\" }"
msgstr ""

msgid ""
"In certain circumstances, a Unix domain socket may be used where a URI is "
"expected, for example, ``unix/:/tmp/unix_domain_socket.sock`` or simply "
"``/tmp/unix_domain_socket.sock``."
msgstr ""

msgid ""
"The :ref:`uri <uri-module>` module provides functions that convert URI "
"strings into their components or turn components into URI strings."
msgstr ""

msgid "Specifying several URIs"
msgstr ""

msgid ""
"Starting from version 2.10.0, a user can open several listening iproto "
"sockets on a Tarantool instance and, consequently, can specify several URIs "
"in the configuration parameters such as :ref:`box.cfg.listen <cfg_basic-"
"listen>` and :ref:`box.cfg.replication <cfg_replication-replication>`."
msgstr ""

msgid "URI values can be set in a number of ways:"
msgstr ""

msgid "As a string with URI values separated by commas."
msgstr ""

msgid "box.cfg { listen = \"127.0.0.1:3301, /unix.sock, 3302\" }"
msgstr ""

msgid "As a table that contains URIs in the string format."
msgstr ""

msgid "box.cfg { listen = {\"127.0.0.1:3301\", \"/unix.sock\", \"3302\"} }"
msgstr ""

msgid "As an array of tables with the ``uri`` field."
msgstr ""

msgid ""
"box.cfg { listen = {\n"
"        {uri = \"127.0.0.1:3301\"},\n"
"        {uri = \"/unix.sock\"},\n"
"        {uri = 3302}\n"
"    }\n"
"}"
msgstr ""

msgid ""
"In a combined way -- an array that contains URIs in both the string and the "
"table formats."
msgstr ""

msgid ""
"box.cfg { listen = {\n"
"        \"127.0.0.1:3301\",\n"
"        { uri = \"/unix.sock\" },\n"
"        { uri = 3302 }\n"
"    }\n"
"}"
msgstr ""

msgid ""
"Also, starting from version 2.10.0, it is possible to specify additional "
"parameters for URIs. You can do this in different ways:"
msgstr ""

msgid "Using the ``?`` delimiter when URIs are specified in a string format."
msgstr ""

msgid ""
"box.cfg { listen = \"127.0.0.1:3301?p1=value1&p2=value2, "
"/unix.sock?p3=value3\" }"
msgstr ""

msgid ""
"Using the ``params`` table: a URI is passed in a table with additional "
"parameters in the \"params\" table. Parameters in the \"params\" table "
"overwrite the ones from a URI string (\"value2\" overwrites \"value1\" for "
"``p1`` in the example below)."
msgstr ""

msgid ""
"box.cfg { listen = {\n"
"        \"127.0.0.1:3301?p1=value1\",\n"
"        params = {p1 = \"value2\", p2 = \"value3\"}\n"
"    }\n"
"}"
msgstr ""

msgid ""
"Using the ``default_params`` table for specifying default parameter values."
msgstr ""

msgid ""
"In the example below, two URIs are passed in a table. The default value for "
"the ``p3`` parameter is defined in the ``default_params`` table and used if "
"this parameter is not specified in URIs. Parameters in the "
"``default_params`` table are applicable to all the URIs passed in a table."
msgstr ""

msgid ""
"box.cfg { listen = {\n"
"        \"127.0.0.1:3301?p1=value1\",\n"
"        { uri = \"/unix.sock\", params = { p2 = \"value2\" } },\n"
"        default_params = { p3 = \"value3\" }\n"
"    }\n"
"}"
msgstr ""

msgid ""
"The recommended way for specifying URI with additional parameters is the "
"following:"
msgstr ""

msgid ""
"box.cfg { listen = {\n"
"        {uri = \"127.0.0.1:3301\", params = {p1 = \"value1\"}},\n"
"        {uri = \"/unix.sock\", params = {p2 = \"value2\"}},\n"
"        {uri = 3302, params = {p3 = \"value3\"}}\n"
"    }\n"
"}"
msgstr ""

msgid "In case of a single URI, the following syntax also works:"
msgstr ""

msgid ""
"box.cfg { listen = {\n"
"        uri = \"127.0.0.1:3301\",\n"
"        params = { p1 = \"value1\", p2 = \"value2\" }\n"
"    }\n"
"}"
msgstr ""

msgid "Starting a Tarantool instance"
msgstr ""

msgid ""
"Below is the syntax for starting a Tarantool instance configured in a Lua "
"initialization script:"
msgstr ""

msgid "$ tarantool LUA_INITIALIZATION_FILE [OPTION ...]"
msgstr ""

msgid ""
"The ``tarantool`` command also provides a set of :ref:`options "
"<configuration_command_options>` that might be helpful for development "
"purposes."
msgstr ""

msgid ""
"The command below starts a Tarantool instance configured in the ``init.lua``"
" file:"
msgstr ""

msgid "$ tarantool init.lua"
msgstr ""
