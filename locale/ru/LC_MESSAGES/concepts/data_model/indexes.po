
msgid "Indexes"
msgstr "Индексы"

msgid ""
"Read the full information about indexes on page :doc:`Indexes "
"</book/box/indexes>`."
msgstr ""
"Всю информацию про индексы можно найти на странице :doc:`Индексы "
"</book/box/indexes>`."

msgid "An **index** is a group of key values and pointers."
msgstr "**Индекс** — это совокупность значений ключей и указателей."

msgid ""
"As with spaces, you should specify the index **name** and let Tarantool come"
" up with a unique **numeric identifier** (\"index id\")."
msgstr ""
"Как и для спейсов, для индексов следует указать **имена**, а Tarantool "
"определит уникальный **числовой идентификатор** (\"ID индекса\")."

msgid ""
"An index always has a **type**. The default index type is :ref:`TREE "
"<indexes-tree>`. TREE indexes are provided by all Tarantool engines, can "
"index unique and non-unique values, support partial key searches, "
"comparisons, and ordered results. Additionally, the memtx engine supports "
":ref:`HASH <indexes-hash>`, :ref:`RTREE <indexes-rtree>` and :ref:`BITSET "
"<indexes-bitset>` indexes."
msgstr ""
"У индекса всегда есть определенный **тип**. Тип индекса по умолчанию — "
":ref:`TREE <indexes-tree>`. TREE-индексы поддерживаются обоими движками "
"Tarantool, могут индексировать уникальные и неуникальные значения, "
"поддерживают поиск по компонентам ключа, сравнение ключей и упорядочивание "
"результатов. Движок memtx поддерживает и другие типы индексов: :ref:`HASH "
"<indexes-hash>`, :ref:`RTREE <indexes-rtree>` и :ref:`BITSET <indexes-"
"bitset>`."

msgid ""
"An index may be **multi-part**, that is, you can declare that an index key "
"value is composed of two or more fields in the tuple, in any order. For "
"example, for an ordinary TREE index, the maximum number of parts is 255."
msgstr ""
"Индекс может быть **многокомпонентным**, то есть можно объявить, что ключ "
"индекса состоит из двух или более полей в кортеже в любом порядке. Например,"
" для обычного TREE-индекса максимальное количество частей равно 255."

msgid ""
"An index may be **unique**, that is, you can declare that it would be "
"illegal to have the same key value twice."
msgstr ""
"Индекс может быть **уникальным**, то есть можно объявить, что недопустимо "
"дважды задавать одно значение ключа."

msgid ""
"The first index defined on a space is called the **primary key index**, and "
"it must be unique. All other indexes are called **secondary indexes**, and "
"they may be non-unique."
msgstr ""
"Первый индекс, определенный для спейса, называется **первичный индекс**. Он "
"должен быть уникальным. Все остальные индексы называются **вторичными "
"индексами**, они могут строиться по неуникальным значениям."

msgid "Indexed field types"
msgstr "Типы индексированных полей"

msgid ""
"Indexes restrict values that Tarantool can store with MsgPack. This is why, "
"for example, ``'unsigned'`` and ``'integer'`` are different field types, "
"although in MsgPack they are both stored as integer values. An "
"``'unsigned'`` index contains only *non-negative* integer values, while an "
"``‘integer’`` index contains *any* integer values."
msgstr ""
"Индексы ограничивают значения, которые Tarantool может хранить в формате "
"MsgPack. Вот почему, например, есть отдельные типы полей ``'unsigned'`` "
"(число без знака) и ``'integer'`` (целое число), хотя в MsgPack они оба "
"хранятся как целочисленные значения. Индекс типа ``'unsigned'`` содержит "
"только *неотрицательные* целочисленные значения, а индекс типа ``'integer'``"
" содержит *любые* целочисленные значения."

msgid ""
"Here again are the field types described in :ref:`Field Type Details "
"<index_box_field_type_details>`, and the index types they can fit in. The "
"default field type is ``'unsigned'`` and the default index type is TREE. "
"Although ``'nil'`` is not a legal indexed field type, indexes may contain "
"`nil` :ref:`as a non-default option <box_space-is_nullable>`. Full "
"information is in section :ref:`Details about index field types "
"<details_about_index_field_types>`."
msgstr ""
"Здесь снова приводятся типы полей, описанные в :ref:`Описании типов полей "
"<index_box_field_type_details>`, а также типы индексов, где их можно "
"использовать. По умолчанию, тип поля — ``'unsigned'``, тип индекса — TREE. "
"Хотя в качестве типа индексированого поля ``'nil'`` использовать нельзя, "
"индексы могут содержать `nil` как :ref:`опцию, которая не используется по "
"умолчанию <box_space-is_nullable>`. Более подробную информацию см. в разделе"
" :ref:`Описание типов индексированных полей "
"<details_about_index_field_types>`."

msgid "Field type name string"
msgstr "Имя типа поля"

msgid "Field type |br|"
msgstr "Тип поля |br|"

msgid "Index type"
msgstr "Тип индекса"

msgid "``'boolean'``"
msgstr "``'boolean'``"

msgid ":ref:`boolean <index-box_boolean>`"
msgstr ":ref:`boolean <index-box_boolean>`"

msgid ":ref:`TREE or HASH <box_index-type>`"
msgstr ":ref:`TREE или HASH <box_index-type>`"

msgid "``'integer'`` (may also be called ``‘int’``)"
msgstr "``'integer'`` (также может называться ``‘int’``)"

msgid ":ref:`integer <index-box_integer>`, which may include unsigned values"
msgstr ""
":ref:`integer <index-box_integer>`, может включать в себя значения unsigned "
"(без знака)"

msgid "TREE or HASH"
msgstr "TREE или HASH"

msgid ""
"``'unsigned'`` (may also be called ``'uint'`` or ``'num'``, but ``'num'`` is"
" deprecated)"
msgstr ""
"``'unsigned'`` (без знака, также может называться ``'uint'`` или ``'num'``, "
"но ``'num'`` объявлен устаревшим)"

msgid ":ref:`unsigned <index-box_unsigned>`"
msgstr ":ref:`unsigned <index-box_unsigned>`"

msgid "TREE, BITSET, or HASH"
msgstr "TREE, BITSET или HASH"

msgid "``'double'``"
msgstr "``'double'``"

msgid ":ref:`double <index-box_double>`"
msgstr ":ref:`double <index-box_double>`"

msgid "``'number'``"
msgstr "``'number'``"

msgid ""
":ref:`number <index-box_number>`, which may include :ref:`integer <index-"
"box_integer>`, :ref:`double <index-box_double>`, or :ref:`decimal <index-box_decimal>` values"
msgstr ""
":ref:`number <index-box_number>`, может включать в себя значения типа "
":ref:`integer <index-box_integer>`, :ref:`double <index-box_double>` или :ref:`decimal <index-box_decimal>`"

msgid "``'decimal'``"
msgstr "``'decimal'``"

msgid ":ref:`decimal <index-box_decimal>`"
msgstr ":ref:`decimal <index-box_decimal>`"

msgid "``'string'`` (may also be called ``'str'``)"
msgstr "``'string'`` (строка, также может называться ``'str'``)"

msgid ":ref:`string <index-box_string>`"
msgstr ":ref:`string <index-box_string>`"

msgid "``'varbinary'``"
msgstr "``'varbinary'``"

msgid ":ref:`varbinary <index-box_bin>`"
msgstr ":ref:`varbinary <index-box_bin>`"

msgid "TREE, HASH, or BITSET (since version 2.7)"
msgstr "TREE, HASH или BITSET (с версии 2.7)"

msgid "``'uuid'``"
msgstr "``'uuid'``"

msgid ":ref:`uuid <index-box_uuid>`"
msgstr ":ref:`uuid <index-box_uuid>`"

msgid "``'array'``"
msgstr "``'array'``"

msgid ":ref:`array <index-box_array>`"
msgstr ":ref:`array <index-box_array>`"

msgid ":ref:`RTREE <box_index-rtree>`"
msgstr ":ref:`RTREE <box_index-rtree>`"

msgid "``'scalar'``"
msgstr "``'scalar'``"

msgid ""
"may include :ref:`nil <index-box_nil>`, :ref:`boolean <index-box_boolean>`, "
":ref:`integer <index-box_integer>`, :ref:`unsigned <index-box_unsigned>`, "
":ref:`number <index-box_number>`, :ref:`decimal <index-box_decimal>`, "
":ref:`string <index-box_string>`, :ref:`varbinary <index-box_bin>`, or "
":ref:`uuid <index-box_uuid>` values"
msgstr ""
"может содержать значения :ref:`nil <index-box_nil>`, :ref:`boolean <index-"
"box_boolean>`, :ref:`integer <index-box_integer>`, :ref:`unsigned <index-"
"box_unsigned>`, :ref:`number <index-box_number>`, :ref:`decimal <index-"
"box_decimal>`, :ref:`string <index-box_string>` или :ref:`varbinary <index-"
"box_bin>`"

msgid ""
"When a scalar field contains values of different underlying types, the key "
"order is: nils, then booleans, then numbers, then strings, then varbinaries,"
" then uuids."
msgstr ""
"Когда поле типа scalar содержит значения различных базовых типов, то порядок"
" ключей следующий: nil, затем boolean, затем number, затем string, затем "
"varbinary, затем uuid."

msgid "Sequences"
msgstr "Последовательности"

msgid "A **sequence** is a generator of ordered integer values."
msgstr ""
"**Последовательность** -- это генератор упорядоченных значений целых чисел."

msgid ""
"As with spaces and indexes, you should specify the sequence **name** and let"
" Tarantool generate a unique numeric identifier (sequence ID)."
msgstr ""
"Как и для спейсов и индексов, для последовательности вы должны указать "
"**имя**, а Tarantool создаст уникальный для неё числовой идентификатор (\"ID"
" последовательности)."

msgid ""
"As well, you can specify several options when creating a new sequence. The "
"options determine what value will be generated whenever the sequence is "
"used."
msgstr ""
"Кроме того, можно указать несколько параметров при создании новой "
"последовательности. Параметры определяют, какое значение будет "
"генерироваться при использовании последовательности."

msgid "Options for box.schema.sequence.create()"
msgstr "Параметры для box.schema.sequence.create()"

msgid "Option name"
msgstr "Имя параметра"

msgid "Type and meaning"
msgstr "Тип и значение"

msgid "Default"
msgstr "Значение по умолчанию"

msgid "Examples"
msgstr "Примеры"

msgid "**start**"
msgstr "**start**"

msgid "Integer. The value to generate the first time a sequence is used"
msgstr ""
"Integer. Значение генерируется, когда последовательность используется "
"впервые"

msgid "1"
msgstr "1"

msgid "start=0"
msgstr "start=0"

msgid "**min**"
msgstr "**min**"

msgid "Integer. Values smaller than this cannot be generated"
msgstr "Integer. Значения, ниже указанного, генерироваться не могут"

msgid "min=-1000"
msgstr "min=-1000"

msgid "**max**"
msgstr "**max**"

msgid "Integer. Values larger than this cannot be generated"
msgstr "Integer. Значения, выше указанного, генерироваться не могут"

msgid "9223372036854775807"
msgstr "9223372036854775807"

msgid "max=0"
msgstr "max=0"

msgid "**cycle**"
msgstr "**cycle**"

msgid "Boolean. Whether to start again when values cannot be generated"
msgstr ""
"Логическое значение. Если значения не могут быть сгенерированы, начинать ли "
"заново"

msgid "false"
msgstr "false"

msgid "cycle=true"
msgstr "cycle=true"

msgid "**cache**"
msgstr "**cache**"

msgid "Integer. The number of values to store in a cache"
msgstr "Integer. Количество значений, которые будут храниться в кэше"

msgid "0"
msgstr "0"

msgid "cache=0"
msgstr "cache=0"

msgid "**step**"
msgstr "**step**"

msgid ""
"Integer. What to add to the previous generated value, when generating a new "
"value"
msgstr ""
"Integer. Что добавить к предыдущему сгенерированному значению, когда "
"генерируется новое значение"

msgid "step=-1"
msgstr "step=-1"

msgid "**if_not_exists**"
msgstr "**if_not_exists** (если отсутствует)"

msgid ""
"Boolean. If this is true and a sequence with this name exists already, "
"ignore other options and use the existing values"
msgstr ""
"Логическое значение. Если выставлено в true (истина) и существует "
"последовательность с таким именем, то игнорировать другие опции и "
"использовать текущие значения"

msgid "if_not_exists=true"
msgstr "if_not_exists=true"

msgid ""
"Once a sequence exists, it can be altered, dropped, reset, forced to "
"generate the next value, or associated with an index."
msgstr ""
"Существующую последовательность можно изменять, удалять, сбрасывать, "
"заставить сгенерировать новое значение или ассоциировать с индексом."

msgid "For an initial example, we generate a sequence named 'S'."
msgstr ""
"Для первоначального примера сгенерируем последовательность под названием "
"'S'."

msgid ""
"tarantool> box.schema.sequence.create('S',{min=5, start=5})\n"
"---\n"
"- step: 1\n"
"  id: 5\n"
"  min: 5\n"
"  cache: 0\n"
"  uid: 1\n"
"  max: 9223372036854775807\n"
"  cycle: false\n"
"  name: S\n"
"  start: 5\n"
"..."
msgstr ""
"tarantool> box.schema.sequence.create('S',{min=5, start=5})\n"
"---\n"
"- step: 1\n"
"  id: 5\n"
"  min: 5\n"
"  cache: 0\n"
"  uid: 1\n"
"  max: 9223372036854775807\n"
"  cycle: false\n"
"  name: S\n"
"  start: 5\n"
"..."

msgid ""
"The result shows that the new sequence has all default values, except for "
"the two that were specified, ``min`` and ``start``."
msgstr ""
"В результате видим, что в новой последовательность есть все значения по "
"умолчанию, за исключением указанных ``min`` и ``start``."

msgid "Then we get the next value, with the ``next()`` function."
msgstr "Затем получаем следующее значение с помощью функции ``next()``."

msgid ""
"tarantool> box.sequence.S:next()\n"
"---\n"
"- 5\n"
"..."
msgstr ""
"tarantool> box.sequence.S:next()\n"
"---\n"
"- 5\n"
"..."

msgid ""
"The result is the same as the start value. If we called ``next()`` again, we"
" would get 6 (because the previous value plus the step value is 6), and so "
"on."
msgstr ""
"Результат точно такой же, как и начальное значение. Если мы снова вызовем "
"``next()``, то получим 6 (потому что предыдущее значение плюс значение шага "
"составит 6) и так далее."

msgid ""
"Then we create a new table and specify that its primary key should be "
"generated from the sequence."
msgstr ""
"Затем мы создаём новую таблицу и определяем, что ее первичный ключ должен "
"быть получен из последовательности."

msgid ""
"tarantool> s=box.schema.space.create('T')\n"
"---\n"
"...\n"
"tarantool> s:create_index('I',{sequence='S'})\n"
"---\n"
"- parts:\n"
"  - type: unsigned\n"
"    is_nullable: false\n"
"    fieldno: 1\n"
"  sequence_id: 1\n"
"  id: 0\n"
"  space_id: 520\n"
"  unique: true\n"
"  type: TREE\n"
"  sequence_fieldno: 1\n"
"  name: I\n"
"...\n"
"---\n"
"..."
msgstr ""
"tarantool> s=box.schema.space.create('T')\n"
"---\n"
"...\n"
"tarantool> s:create_index('I',{sequence='S'})\n"
"---\n"
"- parts:\n"
"  - type: unsigned\n"
"    is_nullable: false\n"
"    fieldno: 1\n"
"  sequence_id: 1\n"
"  id: 0\n"
"  space_id: 520\n"
"  unique: true\n"
"  type: TREE\n"
"  sequence_fieldno: 1\n"
"  name: I\n"
"...\n"
"---\n"
"..."

msgid "Then we insert a tuple without specifying a value for the primary key."
msgstr "Затем вставляем кортеж, не указывая значение первичного ключа."

msgid ""
"tarantool> box.space.T:insert{nil,'other stuff'}\n"
"---\n"
"- [6, 'other stuff']\n"
"..."
msgstr ""
"tarantool> box.space.T:insert{nil,'other stuff'}\n"
"---\n"
"- [6, 'other stuff']\n"
"..."

msgid ""
"The result is a new tuple where the first field has a value of 6. This "
"arrangement, where the system automatically generates the values for a "
"primary key, is sometimes called \"auto-incrementing\" or \"identity\"."
msgstr ""
"В результате имеем новый кортеж со значением 6 в первом поле. Такой способ "
"организации данных, когда система автоматически генерирует значения для "
"первичного ключа, иногда называется \"автоинкрементным\" (т.е. с "
"автоматическим увеличением) или \"по идентификатору\"."

msgid ""
"For syntax and implementation details, see the reference for "
":doc:`box.schema.sequence </reference/reference_lua/box_schema_sequence>`."
msgstr ""
"Для получения подробной информации о синтаксисе и методах реализации см. "
"справочник по :doc:`box.schema.sequence "
"</reference/reference_lua/box_schema_sequence>`."
