
msgid "Data storage"
msgstr "Хранение данных"

msgid "Tuples"
msgstr "Кортежи"

msgid "Tarantool operates data in the form of tuples."
msgstr "Tarantool обрабатывает данные в виде кортежей."

msgid "tuple"
msgstr "кортеж"

msgid ""
"A tuple is a group of data values in Tarantool's memory. Think of it as a "
"\"database record\" or a \"row\". The data values in the tuple are called "
":term:`fields <field>`."
msgstr ""
"Кортеж — это группа значений данных в памяти Tarantool. По сути, это "
"\"запись в базе данных\" или \"строка\". Значения данных в кортеже "
"называются :term:`полями <field>`."

msgid ""
"When Tarantool returns a tuple value in the console, by default, it uses "
":ref:`YAML <interactive_console>` format, for example: ``[3, 'Ace of Base', "
"1993]``."
msgstr ""
"Когда Tarantool выводит значение кортежа в консоль, по умолчанию "
"используется формат :ref:`YAML <interactive_console>`, например: ``[3, 'Ace "
"of Base', 1993]``."

msgid ""
"Internally, Tarantool stores tuples as `MsgPack "
"<https://en.wikipedia.org/wiki/MessagePack>`_ arrays."
msgstr ""
"В Tarantool кортежи хранятся в виде массивов в формате `MsgPack "
"<https://en.wikipedia.org/wiki/MessagePack>`_."

msgid "field"
msgstr "поле"

msgid ""
"Fields are distinct data values, contained in a tuple. They play the same "
"role as \"row columns\" or \"record fields\" in relational databases, with a"
" few improvements:"
msgstr ""
"Поля — это отдельные значения данных, которые содержатся в кортеже. Они "
"играют ту же роль, что и \"столбцы\" или \"поля записи\" в реляционных базах"
" данных, но несколько усовершенствованы:"

msgid "fields can be composite structures, such as arrays or maps,"
msgstr ""
"поля могут представлять собой композитные структуры, такие как таблицы типа "
"массива или ассоциативного массива,"

msgid "fields don't need to have names."
msgstr "полям не нужны имена."

msgid ""
"A given tuple may have any number of fields, and the fields may be of "
"different :ref:`types <index-box_data-types>`."
msgstr ""
"В кортеже может быть любое количество полей, и это могут быть поля разных "
":ref:`типов <index-box_data-types>`."

msgid ""
"The field's number is the identifier of the field. Numbers are counted from "
"base 1 in Lua and other 1-based languages, or from base 0 in languages like "
"PHP or C/C++. So, ``1`` or ``0`` can be used in some contexts to refer to "
"the first field of a tuple."
msgstr ""
"Номер поля служит его идентификатором. В Lua и некоторых других языках "
"нумерация начинается с 1, в других — с 0 (например, в PHP или C/C++). Таким "
"образом, в некоторых контекстах у первого поля кортежа будет индекс ``1`` "
"или ``0``."

msgid "Spaces"
msgstr "Спейсы"

#, fuzzy
msgid "Tarantool stores tuples in containers called spaces."
msgstr ""
"Tarantool хранит кортежи в контейнерах, называемых спейсами (space). Спейс в"
" примере выше называется ``tester``."

msgid "space"
msgstr "спейс"

msgid ""
"In Tarantool, a space is a primary container that stores data. It is "
"analogous to tables in relational databases. Spaces contain :term:`tuples "
"<tuple>` -- the Tarantool name for database records. The number of tuples in"
" a space is unlimited."
msgstr ""
"В Tarantool спейс — это первичный контейнер, хранящий данные. Он похож на "
"таблицы в реляционных базах данных. Спейсы содержат :term:`кортежи <tuple>` "
"— так в Tarantool называются записи в базе данных. Количество кортежей в "
"спейсе не ограничено."

msgid ""
"At least one space is required to store data with Tarantool. Each space has "
"the following attributes:"
msgstr ""
"Для хранения данных с помощью Tarantool требуется хотя бы один спейс. У "
"каждого спейса есть следующие атрибуты:"

msgid "a unique **name** specified by the user,"
msgstr "уникальное **имя**, указанное пользователем;"

msgid ""
"a unique **numeric identifier** which can be specified by the user, but "
"usually is assigned automatically by Tarantool,"
msgstr ""
"уникальный **числовой идентификатор**, обычно Tarantool назначает его "
"автоматически, но пользователь может его указать сам, если посчитает нужным;"

msgid ""
"an **engine**: *memtx* (default) --- in-memory engine, fast but limited in "
"size, or *vinyl* --- on-disk engine for huge data sets."
msgstr ""
"**движок**: *memtx* (по умолчанию) — движок «in-memory», быстрый, но "
"ограниченный в размере, или *vinyl* — дисковый движок для огромных наборов "
"данных."

msgid ""
"To be functional, a space also needs to have a :ref:`primary index <index-"
"box_index>`. It can also have secondary indexes."
msgstr ""
"Для работы спейсу нужен :ref:`первичный индекс <index-box_index>`. Также он может\n"
"использовать вторичные индексы."

msgid "Data types"
msgstr "Типы данных"

msgid ""
"Tarantool is both a database manager and an application server. Therefore a "
"developer often deals with two type sets: the types of the programming "
"language (such as Lua) and the types of the Tarantool storage format "
"(MsgPack)."
msgstr ""
"Tarantool представляет собой систему управления базой данных и сервер "
"приложений одновременно. Поэтому разработчику часто приходится работать с "
"двумя системами типов данных: типы языка программирования (например, Lua) и "
"типы формата хранения данных Tarantool (MsgPack)."

msgid "Lua versus MsgPack"
msgstr "Lua в сравнении с MsgPack"

msgid "Scalar / compound"
msgstr "Скалярный / составной"

#, fuzzy
msgid "MsgPack type"
msgstr "MsgPack-тип |nbsp|"

msgid "Lua type"
msgstr "Lua-тип"

msgid "Example value"
msgstr "Пример значения"

msgid "scalar"
msgstr "скалярный"

msgid "nil"
msgstr "nil"

#, fuzzy
msgid "`cdata`_"
msgstr "\"`cdata`_\""

msgid ":ref:`box.NULL <box-null>`"
msgstr ""

msgid "boolean"
msgstr "boolean"

#, fuzzy
msgid "`boolean`_"
msgstr "\"`boolean`_\" (логическое значение)"

msgid "``true``"
msgstr "``true``"

msgid "string"
msgstr "string"

#, fuzzy
msgid "`string`_"
msgstr "\"`string`_\""

msgid "``'A B C'``"
msgstr "``'A B C'``"

msgid "integer"
msgstr "integer"

#, fuzzy
msgid "`number`_"
msgstr "\"`number`_\""

msgid "``12345``"
msgstr "``12345``"

#, fuzzy
msgid "float64 (double)"
msgstr "float 64 (double)"

msgid "``1.2345``"
msgstr "``1.2345``"

msgid "binary"
msgstr "binary"

msgid "``[!!binary 3t7e]``"
msgstr "``[!!binary 3t7e]``"

#, fuzzy
msgid "ext (for Tarantool ``decimal``)"
msgstr "ext (для decimal в Tarantool)"

msgid "``1.2``"
msgstr "``1.2``"

#, fuzzy
msgid "ext (for Tarantool ``datetime``)"
msgstr "ext (для decimal в Tarantool)"

msgid "``'2021-08-20T16:21:25.122999906 Europe/Berlin'``"
msgstr ""

#, fuzzy
msgid "ext (for Tarantool ``interval``)"
msgstr "ext (для decimal в Tarantool)"

msgid "``+1 months, 1 days``"
msgstr ""

#, fuzzy
msgid "ext (for Tarantool ``uuid``)"
msgstr "ext (для uuid в Tarantool)"

#, fuzzy
msgid "``12a34b5c-de67-8f90-123g-h4567ab8901``"
msgstr "``12a34b5c-de67-8f90-`` |br| ``123g-h4567ab8901``"

msgid "compound"
msgstr "составной"

msgid "map"
msgstr "map (ассоциативный массив)"

#, fuzzy
msgid "`table`_ (with string keys)"
msgstr "\"`table`_\" (таблица со строковыми ключами)"

msgid "``{'a': 5, 'b': 6}``"
msgstr "``{'a': 5, 'b': 6}``"

msgid "array"
msgstr "array (массив)"

#, fuzzy
msgid "`table`_ (with integer keys)"
msgstr "\"`table`_\" (таблица с целочисленными ключами)"

msgid "``[1, 2, 3, 4, 5]``"
msgstr "``[1, 2, 3, 4, 5]``"

#, fuzzy
msgid "tuple (`cdata`_)"
msgstr "tuple (\"`cdata`_\") (кортеж)"

msgid "``[12345, 'A B C']``"
msgstr "``[12345, 'A B C']``"

msgid ""
"MsgPack values have variable lengths. So, for example, the smallest number "
"requires only one byte, but the largest number requires nine bytes."
msgstr ""
"Данные в формате MsgPack имеют переменный размер. Так, например, для "
"наименьшего значения number потребуется только один байт, a для наибольшего "
"потребуется девять байтов."

msgid ""
"The Lua `nil <http://www.lua.org/pil/2.1.html>`_ type is encoded as MsgPack "
"``nil`` but decoded as :ref:`msgpack.NULL <box-null>`."
msgstr ""

msgid "Field type details"
msgstr "Описание типов полей"

#, fuzzy
msgid ""
"In Lua, the nil type has only one possible value, also called ``nil``. "
"Tarantool displays it as ``null`` when using the default :ref:`YAML "
"<interactive_console>` format. Nil may be compared to values of any types "
"with == (is-equal) or ~= (is-not-equal), but other comparison operations "
"will not work. Nil may not be used in Lua tables; the workaround is to use "
":ref:`box.NULL <box-null>` because ``nil == box.NULL`` is true. **Example:**"
" ``nil``."
msgstr ""
"**nil**. В языке Lua у типа nil есть только одно значение, также называемое "
"``nil``. Tarantool отображает его как ``null`` при использовании формата по "
"умолчанию :ref:`YAML <interactive_console>`. Значение nil можно сравнивать "
"со значениями любых типов данных с помощью операторов == (равно) или ~= (не "
"равно), но никакие другие операции сравнения к nil не применимы. Значение "
"nil также нельзя использовать в Lua-таблицах — в качестве обходного пути "
"вместо nil в таком случае можно указать :ref:`box.NULL <box-null>`, "
"поскольку условие ``nil == box.NULL`` является истинным. Пример: ``nil``."

#, fuzzy
msgid "A boolean is either ``true`` or ``false``."
msgstr ""
"**boolean**. Логический тип данных boolean принимает значения ``true`` или "
"``false``. Пример: ``true``."

msgid "**Example:** ``true``."
msgstr ""

#, fuzzy
msgid ""
"The Tarantool integer type is for integers between -9223372036854775808 and "
"18446744073709551615, which is about 18 quintillion. This type corresponds "
"to the number type in Lua and to the integer type in MsgPack."
msgstr ""
"**integer**. В Tarantool тип полей integer используется для целых чисел от "
"−9 223 372 036 854 775 808 до 18 446 744 073 709 551 615, то есть до "
"примерно 18 квинтиллионов. Такой тип данных соответствует типам number в Lua"
" и integer в MsgPack. Пример: ``-2^63``."

msgid "**Example:** ``-2^63``."
msgstr ""

msgid "unsigned"
msgstr ""

#, fuzzy
msgid ""
"The Tarantool unsigned type is for integers between 0 and "
"18446744073709551615. So it is a subset of integer."
msgstr ""
"**unsigned**. Тип unsigned в Tarantool используется для целых чисел от 0 до "
"18 446 744 073 709 551 615. Он представляет собой подмножество типа integer."
" Пример: ``123456``."

msgid "**Example:** ``123456``."
msgstr ""

msgid "double"
msgstr ""

#, fuzzy
msgid ""
"The double field type exists mainly to be equivalent to Tarantool/SQL's "
":ref:`DOUBLE data type <sql_data_type_double>`. In `msgpuck.h "
"<https://github.com/rtsisyk/msgpuck>`_ (Tarantool's interface to MsgPack), "
"the storage type is ``MP_DOUBLE`` and the size of the encoded value is "
"always 9 bytes. In Lua, fields of the double type can only contain non-"
"integer numeric values and cdata values with double floating-point numbers."
msgstr ""
"**double**. Поле типа double существует главным образом для соответствия "
"типу :ref:`DOUBLE data type <sql_data_type_double>` в Tarantool/SQL . В "
"`msgpuck.h <https://github.com/rtsisyk/msgpuck>`_ (интерфейс Tarantool к "
"MsgPack) тип в хранилище — ``MP_DOUBLE``, а размер закодированного значения "
"всегда составляет 9 байтов. В Lua поля типа double могут содержать только не"
" целые числовые значения и значения cdata с числами с плавающей точкой "
"двойной точности (double). Примеры: ``1.234``, ``-44``, ``1.447e+44``."

msgid "**Examples:** ``1.234``, ``-44``, ``1.447e+44``."
msgstr ""

#, fuzzy
msgid ""
"To avoid using the wrong kind of values inadvertently, use ``ffi.cast()`` "
"when searching or changing ``double`` fields. For example, instead of "
":samp:`{space_object}:insert`:code:`{`:samp:`{value}`:code:`}` use ``ffi = "
"require('ffi') ...`` "
":samp:`{space_object}:insert`:code:`({ffi.cast('double',`:samp:`{value}`:code:`)})`."
msgstr ""
"Чтобы избежать случайного использования неправильного типа значений, "
"используйте явное преобразование типа ``ffi.cast()``, когда вы ищете или "
"изменяете поля типа ``double``. Например, вместо "
":samp:`{space_object}:insert`:code:`{`:samp:`{value}`:code:`}` используйте "
"``ffi = require('ffi') ...`` "
":samp:`{space_object}:insert`:code:`({ffi.cast('double',`:samp:`{value}`:code:`)})`."
" Пример:"

msgid "**Example:**"
msgstr ""

msgid ""
"s = box.schema.space.create('s', {format = {{'d', 'double'}}})\n"
"s:create_index('ii')\n"
"s:insert({1.1})\n"
"ffi = require('ffi')\n"
"s:insert({ffi.cast('double', 1)})\n"
"s:insert({ffi.cast('double', tonumber('123'))})\n"
"s:select(1.1)\n"
"s:select({ffi.cast('double', 1)})"
msgstr ""
"s = box.schema.space.create('s', {format = {{'d', 'double'}}})\n"
"s:create_index('ii')\n"
"s:insert({1.1})\n"
"ffi = require('ffi')\n"
"s:insert({ffi.cast('double', 1)})\n"
"s:insert({ffi.cast('double', tonumber('123'))})\n"
"s:select(1.1)\n"
"s:select({ffi.cast('double', 1)})"

msgid ""
"Arithmetic with cdata ``double`` will not work reliably, so for Lua, it is "
"better to use the ``number`` type. This warning does not apply for "
"Tarantool/SQL because Tarantool/SQL does :ref:`implicit casting "
"<sql_data_type_conversion>`."
msgstr ""
"Арифметические операции с cdata формата ``double`` работают ненадёжно, "
"поэтому для Lua лучше использовать тип ``number``. Это не относится к "
"Tarantool/SQL, так как Tarantool/SQL применяет :ref:`неявное приведение "
"типов <sql_data_type_conversion>`."

#, fuzzy
msgid "number"
msgstr "\"`number`_\""

#, fuzzy
msgid ""
"The Tarantool number field may have both integer and floating-point values, "
"although in Lua a ``number`` is a double-precision floating-point."
msgstr ""
"**number**. Поле number в Tarantool может содержать значения как целые, так "
"и с плавающей точкой, хотя в Lua тип ``number`` означает число с плавающей "
"точкой двойной точности."

msgid ""
"Tarantool will try to store a Lua number as floating-point if the value "
"contains a decimal point or is very large (greater than 100 trillion = "
"1e14), otherwise Tarantool will store it as an integer. To ensure that even "
"very large numbers are stored as integers, use the :ref:`tonumber64 <other-"
"tonumber64>` function, or the LL (Long Long) suffix, or the ULL (Unsigned "
"Long Long) suffix. Here are examples of numbers using regular notation, "
"exponential notation, the ULL suffix and the ``tonumber64`` function: "
"``-55``, ``-2.7e+20``, ``100000000000000ULL``, "
"``tonumber64('18446744073709551615')``."
msgstr ""
"Tarantool по возможности сохраняет числа языка Lua в виде чисел с плавающей "
"запятой, если числовое значение содержит десятичную запятую или если оно "
"очень велико (более 100 триллионов = 1e14). В противном случае Tarantool "
"сохраняет такое значение в виде целого числа. Чтобы даже очень большие "
"величины гарантированно сохранялись как целые числа, используйте функцию "
":ref:`tonumber64 <other-tonumber64>` или приписывайте в конце суффикс LL "
"(Long Long) или ULL (Unsigned Long Long). Вот примеры записи чисел в обычном"
" представлении, экспоненциальном, с суффиксом ULL и с использованием функции"
" ``tonumber64``: ``−55``, ``−2.7e+20``, ``100000000000000ULL``, "
"``tonumber64('18446744073709551615')``."

msgid ""
"You can also use the ``ffi`` module to specify a C type to cast the number "
"to. In this case, the number will be stored as `cdata`_."
msgstr ""

msgid "decimal"
msgstr ""

#, fuzzy
msgid ""
"The Tarantool decimal type is stored as a :ref:`MsgPack ext <msgpack_ext-"
"decimal>` (Extension). Values with the decimal type are not floating-point "
"values although they may contain decimal points. They are exact with up to "
"38 digits of precision."
msgstr ""
"**decimal**. Тип данных decimal в Tarantool хранится в формате MsgPack ext "
"(Extension). Значения с типом decimal не являются числами с плавающей "
"запятой, хотя могут содержать десятичную запятую. Они представляют собой "
"числа с точностью до 38 знаков. Пример: значение, которое возвращает функция"
" в модуле :ref:`decimal <decimal>`."

msgid ""
"**Example:** a value returned by a function in the :ref:`decimal <decimal>` "
"module."
msgstr ""

msgid "datetime"
msgstr ""

msgid ""
"Introduced in :tarantool-release:`2.10.0`. The Tarantool ``datetime`` type "
"facilitates operations with date and time, accounting for leap years or the "
"varying number of days in a month. It is stored as a :ref:`MsgPack ext "
"<msgpack_ext-datetime>` (Extension). Operations with this data type use code"
" from `c-dt <https://github.com/tarantool/c-dt>`_, a third-party library."
msgstr ""

msgid ""
"For more information, see :doc:`Module datetime "
"</reference/reference_lua/datetime>`."
msgstr ""

#, fuzzy
msgid "interval"
msgstr "integer"

msgid "**Since:** :tarantool-release:`2.10.0`"
msgstr ""

msgid ""
"The Tarantool ``interval`` type represents periods of time. They can be "
"added to or subtracted from ``datetime`` values or each other. Operations "
"with this data type use code from `c-dt "
"<https://github.com/tarantool/c-dt>`_, a third-party library. The type is "
"stored as a :ref:`MsgPack ext <msgpack_ext-interval>` (Extension). For more "
"information, see :doc:`Module datetime </reference/reference_lua/datetime>`."
msgstr ""

#, fuzzy
msgid ""
"A string is a variable-length sequence of bytes, usually represented with "
"alphanumeric characters inside single quotes. In both Lua and MsgPack, "
"strings are treated as binary data, with no attempts to determine a string's"
" character set or to perform any string conversion -- unless there is an "
"optional :ref:`collation <index-collation>`. So, usually, string sorting and"
" comparison are done byte-by-byte, without any special collation rules "
"applied. For example, numbers are ordered by their point on the number line,"
" so 2345 is greater than 500; meanwhile, strings are ordered by the encoding"
" of the first byte, then the encoding of the second byte, and so on, so "
"``'2345'`` is less than ``'500'``."
msgstr ""
"**string**. Строка (string) представляет собой последовательность байтов "
"переменной длины. Обычно она записывается буквенно-цифровыми символами в "
"одинарных кавычках. Как Lua, так и MsgPack рассматривают строки как двоичные"
" данные, не пытаясь определить кодировку строки или как-то её преобразовать,"
" кроме случаев, когда указаны необязательные :ref:`правила сравнения "
"символов <index-collation>`. Таким образом, обычно сортировка и сравнение "
"строк выполняются побайтово, а дополнительные правила сравнения символов не "
"применяются. Например, числа упорядочены по их положению на числовой прямой,"
" поэтому 2345 больше, чем 500. Строки же упорядочены сначала по кодировке "
"первого байта, затем по кодировке второго байта и так далее, так что "
"``'2345'`` меньше ``'500'``. Пример: ``'A, B, C'``."

msgid "**Example:** ``'A, B, C'``."
msgstr ""

#, fuzzy
msgid "bin"
msgstr "binary"

#, fuzzy
msgid ""
"A bin (binary) value is not directly supported by Lua but there is a "
"Tarantool type ``varbinary`` which is encoded as MsgPack binary. For an "
"(advanced) example showing how to insert varbinary into a database, see the "
"Cookbook Recipe for :ref:`ffi_varbinary_insert <cookbook-"
"ffi_varbinary_insert>`."
msgstr ""
"**bin**. Значения типа bin (двоичные значения) не поддерживаются "
"непосредственно в Lua, но в Tarantool есть тип ``varbinary``, который "
"кодируется в тип binary из MsgPack. Пример вставки varbinary в базу данных "
"см. в рекомендациях по разработке :ref:`ffi_varbinary_insert <cookbook-"
"ffi_varbinary_insert>` (продвинутого уровня). Пример: ``\"\\65 \\66 "
"\\67\"``."

msgid "**Example:** ``\"\\65 \\66 \\67\"``."
msgstr ""

msgid "uuid"
msgstr ""

#, fuzzy
msgid ""
"The Tarantool uuid type is used for :ref:`Universally Unique Identifiers "
"<uuid-module>`. Since version :doc:`2.4.1 </release/2.4.1>` Tarantool stores"
" ``uuid`` values as a :ref:`MsgPack ext <msgpack_ext-uuid>` (Extension)."
msgstr ""
"**uuid**. Тип uuid в Tarantool используется для :ref:`универсальных "
"уникальных идентификаторов (UUID) <uuid-module>`. Начиная с версии "
":doc:`2.4.1 </release/2.4.1>`, Tarantool хранит значения ``uuid`` в формате "
":ref:`MsgPack ext <msgpack_ext-uuid>` (Extension)."

#, fuzzy
msgid "**Example:** ``64d22e4d-ac92-4a23-899a-e5934af5479``."
msgstr "Пример: ``64d22e4d-ac92-4a23-899a-e5934af5479``."

#, fuzzy
msgid ""
"An array is represented in Lua with ``{...}`` (`braces "
"<https://www.lua.org/pil/11.1.html>`_)."
msgstr ""
"**array**. В Lua массив (array) обозначается ``{...}`` (`фигурными скобками "
"<https://www.lua.org/pil/11.1.html>`_). Примеры: списки чисел, которые "
"обозначают точки геометрической фигуры: ``{10, 11}``, ``{3, 5, 9, 10}``."

#, fuzzy
msgid ""
"**Examples:** lists of numbers representing points in geometric figures: "
"``{10, 11}``, ``{3, 5, 9, 10}``."
msgstr ""
"**array**. В Lua массив (array) обозначается ``{...}`` (`фигурными скобками "
"<https://www.lua.org/pil/11.1.html>`_). Примеры: списки чисел, которые "
"обозначают точки геометрической фигуры: ``{10, 11}``, ``{3, 5, 9, 10}``."

#, fuzzy
msgid "table"
msgstr "кортеж"

#, fuzzy
msgid ""
"Lua tables with string keys are stored as MsgPack maps; Lua tables with "
"integer keys starting with 1 are stored as MsgPack arrays. Nils may not be "
"used in Lua tables; the workaround is to use :ref:`box.NULL <box-null>`."
msgstr ""
"**table**. Lua-таблицы со строковыми ключами хранятся в виде ассоциативных "
"массивов MsgPack map. Lua-таблицы с целочисленными ключами, начиная с 1, "
"хранятся в виде массивов MsgPack array. В Lua-таблицах нельзя использовать "
"nil; вместо этого можно использовать :ref:`box.NULL <box-null>`. Пример: "
"запрос ``box.space.tester:select()`` вернет Lua-таблицу."

msgid ""
"**Example:** a ``box.space.tester:select()`` request will return a Lua "
"table."
msgstr ""

#, fuzzy
msgid ""
"A tuple is a light reference to a MsgPack array stored in the database. It "
"is a special type (cdata) to avoid conversion to a Lua table on retrieval. A"
" few functions may return tables with multiple tuples. For tuple examples, "
"see :ref:`box.tuple <box_tuple>`."
msgstr ""
"**tuple**. Кортеж (tuple) представляет собой легкую ссылку на массив типа "
"MsgPack array, который хранится в базе данных. Это особый тип (cdata), "
"который создан во избежание конвертации в Lua-таблицу при выборке данных. "
"Некоторые функции могут возвращать таблицы с множеством кортежей. Примеры с "
"кортежами см. в разделе :ref:`box.tuple <box_tuple>`."

#, fuzzy
msgid ""
"Values in a scalar field can be boolean, integer, unsigned, double, number, "
"decimal, string, uuid, or varbinary; but not array, map, or tuple."
msgstr ""
"**scalar**. Значения в поле типа scalar могут быть следующих типов: boolean,"
" integer, unsigned, double, number, decimal, string, uuid, varbinary. Они не"
" могут иметь тип array, map или tuple. Примеры: ``true``, ``1``, ``'xxx'``."

msgid "**Examples:** ``true``, ``1``, ``'xxx'``."
msgstr ""

msgid "any"
msgstr ""

#, fuzzy
msgid ""
"Values in a field of this type can be boolean, integer, unsigned, double, "
"number, decimal, string, uuid, varbinary, array, map, or tuple."
msgstr ""
"**any**. Значения в поле типа any могут быть следующих типов: boolean, "
"integer, unsigned, double, number, decimal, string, uuid, varbinary, array, "
"map, tuple. Примеры: ``true``, ``1``, ``'xxx'``, ``{box.NULL, 0}``."

msgid "**Examples:** ``true``, ``1``, ``'xxx'``, ``{box.NULL, 0}``."
msgstr ""

#, fuzzy
msgid "Examples"
msgstr "Пример значения"

msgid "Examples of insert requests with different field types:"
msgstr "Примеры запросов вставки с разными типами полей:"

msgid ""
"tarantool> box.space.K:insert{1,nil,true,'A B C',12345,1.2345}\n"
"---\n"
"- [1, null, true, 'A B C', 12345, 1.2345]\n"
"...\n"
"tarantool> box.space.K:insert{2,{['a']=5,['b']=6}}\n"
"---\n"
"- [2, {'a': 5, 'b': 6}]\n"
"...\n"
"tarantool> box.space.K:insert{3,{1,2,3,4,5}}\n"
"---\n"
"- [3, [1, 2, 3, 4, 5]]\n"
"..."
msgstr ""
"tarantool> box.space.K:insert{1,nil,true,'A B C',12345,1.2345}\n"
"---\n"
"- [1, null, true, 'A B C', 12345, 1.2345]\n"
"...\n"
"tarantool> box.space.K:insert{2,{['a']=5,['b']=6}}\n"
"---\n"
"- [2, {'a': 5, 'b': 6}]\n"
"...\n"
"tarantool> box.space.K:insert{3,{1,2,3,4,5}}\n"
"---\n"
"- [3, [1, 2, 3, 4, 5]]\n"
"..."

msgid "Indexed field types"
msgstr "Типы индексированных полей"

msgid ""
"To learn more about what values can be stored in indexed fields, read the "
":ref:`Indexes <index-box_indexed-field-types>` section."
msgstr ""
"О том, какие значения можно хранить в индексированных полях, читайте в "
"разделе :ref:`об индексах <index-box_indexed-field-types>`\""

msgid "Collations"
msgstr "Сортировка"

msgid ""
"By default, when Tarantool compares strings, it uses the so-called **binary "
"collation**. It only considers the numeric value of each byte in a string. "
"For example, the encoding of ``'A'`` (what used to be called the \"ASCII "
"value\") is 65, the encoding of ``'B'`` is 66, and the encoding of ``'a'`` "
"is 98. Therefore, if the string is encoded with ASCII or UTF-8, then ``'A' <"
" 'B' < 'a'``."
msgstr ""
"Когда Tarantool сравнивает строки, по умолчанию он использует **двоичные "
"параметры сортировки** (**binary collation**). При этом он учитывает только "
"числовое значение каждого байта в строке. Например, код символа ``'A'`` "
"(раньше называлась \"значение ASCII\") — число 65, код ``'B'`` — число 66, а"
" код ``'a'`` -- число 98. Поэтому ``'A' < 'B' < 'a'``, если строка "
"закодирована в ASCII или UTF-8."

msgid ""
"Binary collation is the best choice for fast deterministic simple "
"maintenance and searching with Tarantool indexes."
msgstr ""
"Двоичная сортировка — лучший выбор для быстрого детерминированного простого "
"обслуживания и поиска с использованием индексов Tarantool."

msgid ""
"But if you want the ordering that you see in phone books and dictionaries, "
"then you need Tarantool's optional collations, such as ``unicode`` and "
"``unicode_ci``, which allow for ``'a' < 'A' < 'B'`` and ``'a' == 'A' < 'B'``"
" respectively."
msgstr ""
"Но если вы хотите такое упорядочение, как в телефонных справочниках и "
"словарях, то вам нужна одна из дополнительных сортировок Tarantool: "
"``unicode`` или ``unicode_ci``. Они обеспечивают ``'a' < 'A' < 'B'`` и ``'a'"
" == 'A' < 'B'`` соответственно."

msgid ""
"**The unicode and unicode_ci optional collations** use the ordering "
"according to the `Default Unicode Collation Element Table (DUCET) "
"<http://unicode.org/reports/tr10/#Default_Unicode_Collation_Element_Table>`_"
" and the rules described in `Unicode® Technical Standard #10 Unicode "
"Collation Algorithm (UTS #10 UCA) <http://unicode.org/reports/tr10>`_. The "
"only difference between the two collations is about `weights "
"<https://unicode.org/reports/tr10/#Weight_Level_Defn>`_:"
msgstr ""
"Дополнительные виды сортировки **unicode и unicode_ci** обеспечивают "
"упорядочение в соответствии с `Таблицей сортировки символов Юникода по "
"умолчанию (DUCET) "
"<http://unicode.org/reports/tr10/#Default_Unicode_Collation_Element_Table>`_"
" и правилами, указанными в `Техническом стандарте Юникода №10 -- Алгоритм "
"сортировки по Юникоду (Unicode® Technical Standard #10 Unicode Collation "
"Algorithm (UTS #10 UCA)) <http://unicode.org/reports/tr10>`_. Единственное "
"отличие между двумя видами сортировки — `вес "
"<https://unicode.org/reports/tr10/#Weight_Level_Defn>`_:"

msgid ""
"``unicode`` collation observes L1, L2, and L3 weights (strength = "
"'tertiary');"
msgstr ""
"сортировка ``unicode`` принимает во внимание уровни веса L1, L2 и L3 "
"(уровень = 'tertiary', третичный);"

msgid ""
"``unicode_ci`` collation observes only L1 weights (strength = 'primary'), so"
" for example ``'a' == 'A' == 'á' == 'Á'``."
msgstr ""
"сортировка ``unicode_ci`` принимает во внимание только вес L1 (уровень = "
"'primary', первичный), поэтому, например, ``'a' == 'A' == 'á' == 'Á'``."

msgid "As an example, take some Russian words:"
msgstr "Для примера возьмем некоторые русские слова:"

msgid ""
"'ЕЛЕ'\n"
"'елейный'\n"
"'ёлка'\n"
"'еловый'\n"
"'елозить'\n"
"'Ёлочка'\n"
"'ёлочный'\n"
"'ЕЛь'\n"
"'ель'"
msgstr ""
"'ЕЛЕ'\n"
"'елейный'\n"
"'ёлка'\n"
"'еловый'\n"
"'елозить'\n"
"'Ёлочка'\n"
"'ёлочный'\n"
"'ЕЛь'\n"
"'ель'"

msgid "...and show the difference in ordering and selecting by index:"
msgstr "...и покажем разницу в упорядочении и выборке по индексу:"

msgid "with ``unicode`` collation:"
msgstr "с сортировкой по ``unicode``:"

msgid ""
"tarantool> box.space.T:create_index('I', {parts = {{field = 1, type = 'str', collation='unicode'}}})\n"
"...\n"
"tarantool> box.space.T.index.I:select()\n"
"---\n"
"- - ['ЕЛЕ']\n"
"  - ['елейный']\n"
"  - ['ёлка']\n"
"  - ['еловый']\n"
"  - ['елозить']\n"
"  - ['Ёлочка']\n"
"  - ['ёлочный']\n"
"  - ['ель']\n"
"  - ['ЕЛь']\n"
"...\n"
"tarantool> box.space.T.index.I:select{'ЁлКа'}\n"
"---\n"
"- []\n"
"..."
msgstr ""
"tarantool> box.space.T:create_index('I', {parts = {{field = 1, type = 'str', collation='unicode'}}})\n"
"...\n"
"tarantool> box.space.T.index.I:select()\n"
"---\n"
"- - ['ЕЛЕ']\n"
"  - ['елейный']\n"
"  - ['ёлка']\n"
"  - ['еловый']\n"
"  - ['елозить']\n"
"  - ['Ёлочка']\n"
"  - ['ёлочный']\n"
"  - ['ель']\n"
"  - ['ЕЛь']\n"
"...\n"
"tarantool> box.space.T.index.I:select{'ЁлКа'}\n"
"---\n"
"- []\n"
"..."

msgid "with ``unicode_ci`` collation:"
msgstr "с сортировкой по ``unicode_ci``:"

msgid ""
"tarantool> box.space.T:create_index('I', {parts = {{field = 1, type ='str', collation='unicode_ci'}}})\n"
"...\n"
"tarantool> box.space.T.index.I:select()\n"
"---\n"
"- - ['ЕЛЕ']\n"
"  - ['елейный']\n"
"  - ['ёлка']\n"
"  - ['еловый']\n"
"  - ['елозить']\n"
"  - ['Ёлочка']\n"
"  - ['ёлочный']\n"
"  - ['ЕЛь']\n"
"...\n"
"tarantool> box.space.T.index.I:select{'ЁлКа'}\n"
"---\n"
"- - ['ёлка']\n"
"..."
msgstr ""
"tarantool> box.space.T:create_index('I', {parts = {{field = 1, type ='str', collation='unicode_ci'}}})\n"
"...\n"
"tarantool> box.space.T.index.I:select()\n"
"---\n"
"- - ['ЕЛЕ']\n"
"  - ['елейный']\n"
"  - ['ёлка']\n"
"  - ['еловый']\n"
"  - ['елозить']\n"
"  - ['Ёлочка']\n"
"  - ['ёлочный']\n"
"  - ['ЕЛь']\n"
"...\n"
"tarantool> box.space.T.index.I:select{'ЁлКа'}\n"
"---\n"
"- - ['ёлка']\n"
"..."

msgid ""
"In all, collation involves much more than these simple examples of upper "
"case / lower case and accented / unaccented equivalence in alphabets. We "
"also consider variations of the same character, non-alphabetic writing "
"systems, and special rules that apply for combinations of characters."
msgstr ""
"Сортировка включает в себя ещё множество аспектов, кроме показанного в этом "
"примере сопоставления букв верхнего и нижнего регистра, с диакритическими "
"знаками и без них, и с учётом алфавита. Учитываются также вариации одного и "
"того же символа, системы неалфавитного письма и применяются специальные "
"правила для комбинаций символов."

msgid ""
"For English, Russian, and most other languages and use cases, use the "
"\"unicode\" and \"unicode_ci\" collations. If you need Cyrillic letters 'Е' "
"and 'Ё' to have the same level-1 weights, try the Kyrgyz collation."
msgstr ""
"Для английского, русского и большинства других языков используйте "
"\"unicode\" и \"unicode_ci\". Если вам нужно, чтобы у кириллических букв 'Е'"
" и 'Ё' веса 1 уровня были одинаковыми, попробуйте киргизскую сортировку."

msgid ""
"**The tailored optional collations**: for other languages, Tarantool "
"supplies tailored collations for every modern language that has more than a "
"million native speakers, and for specialized situations such as the "
"difference between dictionary order and telephone book order. Run "
"``box.space._collation:select()`` to see the complete list."
msgstr ""
"**Специализированные дополнительные виды сортировки**: Для других языков "
"Tarantool предлагает специализированные виды сортировки для любого "
"современного языка, на котором говорят более миллиона человек. Кроме того, "
"специализированные дополнительные виды сортировки возможны для особых "
"случаев, когда слова в словаре упорядочиваются не так, как в телефонном "
"справочнике. Чтобы увидеть полный список, выполните команду "
"``box.space._collation:select()``."

msgid ""
"The tailored collation names have the form ``unicode_[language "
"code]_[strength]``, where language code is a standard 2-character or "
"3-character language abbreviation, and strength is ``s1`` for \"primary "
"strength\" (level-1 weights), ``s2`` for \"secondary\", ``s3`` for "
"\"tertiary\". Tarantool uses the same language codes as the ones in the "
"\"list of tailorable locales\" on man pages of `Ubuntu "
"<http://manpages.ubuntu.com/manpages/bionic/man3/Unicode::Collate::Locale.3perl.html>`_"
" and `Fedora "
"<http://www.polarhome.com/service/man/?qf=Unicode%3A%3ACollate%3A%3ALocale&af=0&tf=2&of=Fedora>`_."
" Charts explaining the precise differences from DUCET order are in the "
"`Common Language Data Repository "
"<https://unicode.org/cldr/charts/30/collation>`_."
msgstr ""
"Названия специализированных видов сортировки имеют вид ``unicode_[language "
"code]_[strength]``], где language code — это стандартный код языка из 2 или "
"3 символов, а значение strength может быть ``s1`` для уровня \"primary\" "
"(вес уровня 1), ``s2`` для уровня \"secondary\", ``s3`` для уровня "
"\"tertiary\". Tarantool использует те же коды языков, что указаны в списке "
"специализированных вариантов языковых настроек на страницах руководств по "
"`Ubuntu "
"<http://manpages.ubuntu.com/manpages/bionic/man3/Unicode::Collate::Locale.3perl.html>`_"
" и `Fedora "
"<http://www.polarhome.com/service/man/?qf=Unicode%3A%3ACollate%3A%3ALocale&af=0&tf=2&of=Fedora>`_."
" Схемы, в деталях объясняющие отличия от упорядочения по DUCET, можно найти "
"в `Общем репозитории языковых данных (Common Language Data Repository) "
"<https://unicode.org/cldr/charts/30/collation>`_."

msgid "Constraints"
msgstr ""

msgid ""
"For better control over stored data, Tarantool supports **constraints** – "
"user-defined limitations on the values of certain fields or entire tuples. "
"Together with data types, constraints allow limiting the ranges of available"
" field values both syntactically and semantically."
msgstr ""

msgid ""
"For example, the field ``age`` typically has the ``number`` type, so it "
"cannot store strings or boolean values. However, it can still have values "
"that don't make sense, such as negative numbers. This is where constraints "
"come to help."
msgstr ""

#, fuzzy
msgid "Constraint types"
msgstr "Типы данных"

msgid "There are two types of constraints in Tarantool:"
msgstr ""

msgid ""
"*Field constraints* check that the value being assigned to a field satisfies"
" a given condition. For example, ``age`` must be non-negative."
msgstr ""

msgid ""
"*Tuple constraints* check complex conditions that can involve all fields of "
"a tuple. For example, a tuple contains a date in three fields: ``year``, "
"``month``, and ``day``. You can validate ``day`` values based on the "
"``month`` value (and even ``year`` if you consider leap years)."
msgstr ""

msgid ""
"Field constraints work faster, while tuple constraints allow implementing a "
"wider range of limitations."
msgstr ""

msgid "Constraint functions"
msgstr ""

msgid ""
"Constraints use stored Lua functions or :ref:`SQL expressions "
"<sql_expressions>`, which must return ``true`` when the constraint is "
"satisfied. Other return values (including ``nil``) and exceptions make the "
"check fail and prevent tuple insertion or modification."
msgstr ""

msgid ""
"To create a constraint function, call :ref:`box.schema.func.create() "
"<box_schema-func_create>` with the function definition specified in the "
"``body`` attribute."
msgstr ""

msgid "Constraint functions take two parameters:"
msgstr ""

msgid "The tuple and the constraint name for tuple constraints."
msgstr ""

msgid ""
"-- Define a tuple constraint function --\n"
"box.schema.func.create('check_person', {\n"
"    language = 'LUA',\n"
"    is_deterministic = true,\n"
"    body = 'function(t, c) return (t.age >= 0 and #(t.name) > 3) end'\n"
"})\n"
msgstr ""

msgid ""
"Tarantool doesn't check field names used in tuple constraint functions. If a"
" field referenced in a tuple constraint gets renamed, this constraint will "
"break and prevent further insertions and modifications in the space."
msgstr ""

msgid "The field value and the constraint name for field constraints."
msgstr ""

msgid ""
"-- Define a field constraint function --\n"
"box.schema.func.create('check_age', {\n"
"    language = 'LUA',\n"
"    is_deterministic = true,\n"
"    body = 'function(f, c) return (f >= 0 and f < 150) end'\n"
"})\n"
msgstr ""

msgid "Creating constraints"
msgstr ""

msgid ""
"To create a constraint in a space, specify the corresponding function's name"
" in the ``constraint`` parameter:"
msgstr ""

msgid "Tuple constraints: when creating or altering a space."
msgstr ""

msgid ""
"-- Create a space with a tuple constraint --\n"
"customers = box.schema.space.create('customers', {constraint = 'check_person'})\n"
msgstr ""

msgid "Field constraints: when setting up the space format."
msgstr ""

msgid ""
"-- Specify format with a field constraint --\n"
"box.space.customers:format({\n"
"    {name = 'id', type = 'number'},\n"
"    {name = 'name', type = 'string'},\n"
"    {name = 'age',  type = 'number', constraint = 'check_age'},\n"
"})\n"
msgstr ""

msgid ""
"In both cases, ``constraint`` can contain multiple function names passed as "
"a tuple. Each constraint can have an optional name:"
msgstr ""

msgid ""
"-- Create one more tuple constraint --\n"
"box.schema.func.create('another_constraint',\n"
"    {language = 'LUA', is_deterministic = true, body = 'function(t, c) return true end'})\n"
"\n"
"-- Set two constraints with optional names --\n"
"box.space.customers:alter{\n"
"    constraint = { check1 = 'check_person', check2 = 'another_constraint'}\n"
"}\n"
msgstr ""

msgid ""
"When adding a constraint to an existing space with data, Tarantool checks it"
" against the stored data. If there are fields or tuples that don't satisfy "
"the constraint, it won't be applied to the space."
msgstr ""

msgid "Foreign keys"
msgstr ""

msgid ""
"**Foreign keys** provide links between related fields, therefore maintaining"
" the `referential integrity "
"<https://en.wikipedia.org/wiki/Referential_integrity>`_ of the database."
msgstr ""

msgid ""
"Fields can contain values that exist only in other fields. For example, a "
"shop order always belongs to a customer. Hence, all values of the "
"``customer`` field of the ``orders`` space must also exist in the ``id`` "
"field of the ``customers`` space. In this case, ``customers`` is a **parent "
"space** for ``orders`` (its **child space**). When two spaces are linked "
"with a foreign key, each time a tuple is inserted or modified in the child "
"space, Tarantool checks that a corresponding value is present in the parent "
"space."
msgstr ""

msgid ""
"A foreign key can link a field to another field in the same space. In this "
"case, the child field must be nullable. Otherwise, it is impossible to "
"insert the first tuple in such a space because there is no parent tuple to "
"which it can link."
msgstr ""

msgid "Foreign key types"
msgstr ""

msgid "There are two types of foreign keys in Tarantool:"
msgstr ""

msgid ""
"*Field foreign keys* check that the value being assigned to a field is "
"present in a particular field of another space. For example, the "
"``customer`` value in a tuple from the ``orders`` space must match an ``id``"
" stored in the ``customers`` space."
msgstr ""

msgid ""
"*Tuple foreign keys* check that multiple fields of a tuple have a match in "
"another space. For example, if the ``orders`` space has fields "
"``customer_id`` and ``customer_name``, a tuple foreign key can check that "
"the ``customers`` space contains a tuple with both these values in the "
"corresponding fields."
msgstr ""

msgid ""
"Field foreign keys work faster while tuple foreign keys allow implementing "
"more strict references."
msgstr ""

msgid "Creating foreign keys"
msgstr ""

msgid ""
"For each foreign key, there must exist a parent space index that includes "
"all its fields."
msgstr ""

msgid ""
"To create a foreign key in a space, specify the parent space and linked "
"fields in the ``foreign_key`` parameter. Parent spaces can be referenced by "
"name or by id. When linking to the same space, the space can be omitted. "
"Fields can be referenced by name or by number:"
msgstr ""

msgid "Field foreign keys: when setting up the space format."
msgstr ""

msgid ""
"-- Create a space with a field foreign key --\n"
"box.schema.space.create('orders')\n"
"\n"
"box.space.orders:format({\n"
"    {name = 'id',   type = 'number'},\n"
"    {name = 'customer_id', foreign_key = {space = 'customers', field = 'id'}},\n"
"    {name = 'price_total', type = 'number'},\n"
"})\n"
msgstr ""

msgid ""
"Tuple foreign keys: when creating or altering a space. Note that for foreign"
" keys with multiple fields there must exist an index that includes all these"
" fields."
msgstr ""

msgid ""
"-- Create a space with a tuple foreign key --\n"
"box.schema.space.create(\"orders\", {\n"
"    foreign_key = {\n"
"        space = 'customers',\n"
"        field = {customer_id = 'id', customer_name = 'name'}\n"
"    }\n"
"})\n"
"\n"
"box.space.orders:format({\n"
"    {name = \"id\", type = \"number\"},\n"
"    {name = \"customer_id\" },\n"
"    {name = \"customer_name\"},\n"
"    {name = \"price_total\", type = \"number\"},\n"
"})\n"
msgstr ""

msgid ""
"Type can be omitted for foreign key fields because it's defined in the "
"parent space."
msgstr ""

msgid "Foreign keys can have an optional name."
msgstr ""

msgid ""
"-- Set a foreign key with an optional name --\n"
"box.space.orders:alter{\n"
"    foreign_key = {\n"
"        customer = {\n"
"            space = 'customers',\n"
"            field = { customer_id = 'id', customer_name = 'name'}\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

msgid ""
"A space can have multiple tuple foreign keys. In this case, they all must "
"have names."
msgstr ""

msgid ""
"-- Set two foreign keys: names are mandatory --\n"
"box.space.orders:alter{\n"
"    foreign_key = {\n"
"        customer = {\n"
"            space = 'customers',\n"
"            field = {customer_id = 'id', customer_name = 'name'}\n"
"        },\n"
"        item = {\n"
"            space = 'items',\n"
"            field = {item_id = 'id'}\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

msgid ""
"Tarantool performs integrity checks upon data modifications in parent "
"spaces. If you try to remove a tuple referenced by a foreign key or an "
"entire parent space, you will get an error."
msgstr ""

msgid ""
"Renaming parent spaces or referenced fields may break the corresponding "
"foreign keys and prevent further insertions or modifications in the child "
"spaces."
msgstr ""

#~ msgid "\"`nil`_\""
#~ msgstr "\"`nil`_\""

#~ msgid "``nil``"
#~ msgstr "``nil``"
