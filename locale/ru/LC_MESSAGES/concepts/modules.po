
msgid "Modules"
msgstr ""

msgid ""
"Any logic that is used in Tarantool can be packaged as an application or a "
"reusable **module**. A module is an optional library that extends Tarantool "
"functionality. It can be used by Tarantool applications or other modules. "
"Modules allow for easier code management and hot code reload without "
"restarting the Tarantool instance. Like applications, modules in Tarantool "
"can be written in Lua, C, or C++. Lua modules are also referred to as "
"\"rocks\"."
msgstr ""

msgid ""
"For example, here is a Lua module named ``mymodule.lua`` that exports one "
"function named ``myfun``:"
msgstr ""

msgid ""
"local exports = {}\n"
"exports.myfun = function(input_string)\n"
"   print('Hello', input_string)\n"
"end\n"
"return exports"
msgstr ""

msgid ""
"To launch the function ``myfun()`` -- from another module, from a Lua "
"application, or from Tarantool itself, -- save this module as a file, then "
"load this module with the ``require()`` directive and call the exported "
"function."
msgstr ""

msgid ""
"For example, here's a Lua application that uses ``myfun()`` from "
"``mymodule.lua``:"
msgstr ""

msgid ""
"-- loading the module\n"
"local mymodule = require('mymodule')\n"
"\n"
"-- calling myfun() from within test()\n"
"local test = function()\n"
"  mymodule.myfun()\n"
"end"
msgstr ""

msgid ""
"Tarantool provides an `extensive library "
"<https://www.tarantool.io/en/download/rocks>`_ of compatible modules. "
"Install them using Tarantool's CLI utility :ref:`tt <tt-cli>`. Some modules "
"are also included in the Tarantool repository and can be installed via your "
"operating system's package manager."
msgstr ""

msgid "Learn how to:"
msgstr ""

msgid ":ref:`install a module <app_server-installing_module>`"
msgstr ""

msgid ":ref:`contribute a module <app_server-contributing_module>`"
msgstr ""
