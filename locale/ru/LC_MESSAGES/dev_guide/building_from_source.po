# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-06 14:05+0000\n"
"PO-Revision-Date: 2019-11-14 20:46+0300\n"
"Last-Translator: \n"
"Language: ru\n"
"Language-Team: \n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

msgid "Building from source"
msgstr "Сборка из исходных файлов"

msgid ""
"For downloading Tarantool source and building it, the platforms can "
"differ and the preferences can differ. But strategically the steps are "
"always the same."
msgstr ""
"При загрузке исходных файлов и сборке Tarantool'а могут отличаться "
"платформы и настройки, но в целом предпринимаются одинаковые действия."

msgid "Get tools and libraries that will be necessary for building and testing."
msgstr ""
"Найдите средства и библиотеки, которые будут нужны для сборки и "
"тестирования."

msgid "The absolutely necessary ones are:"
msgstr "Абсолютно необходимы следующие:"

msgid ""
"A program for downloading source repositories. |br| For all platforms, "
"this is ``git``. It allows downloading the latest complete set of source "
"files from the Tarantool repository on GitHub."
msgstr ""
"Программа для скачивания репозиториев исходного кода. |br| Для всех "
"платформ это будет ``git``. Программа позволяет скачивать самый "
"актуальный набор исходных файлов из репозитория Tarantool'а на GitHub."

msgid ""
"A C/C++ compiler. |br| Ordinarily, this is ``gcc`` and ``g++`` version "
"4.6 or later. On Mac OS X, this is ``Clang`` version 3.2+."
msgstr ""
"Компилятор C/C++. |br| Как правило, это ``gcc`` и ``g++`` версии 4.6 или "
"более новой. На Mac OS X это ``Clang`` версии 3.2+."

msgid ""
"A program for managing the build process. |br| For all platforms, this is"
" ``CMake`` version 2.8+."
msgstr ""
"Программа для управления процессом сборки. |br| Для всех платформ это "
"будет ``CMake`` версии 2.8+."

msgid "A build automation tool. |br| For all platforms this is ``GNU Make``."
msgstr "Средство автоматизации сборок. |br| На всех платформах это``GNU Make``."

msgid "`ReadLine <http://www.gnu.org/software/readline/>`_ library, any version"
msgstr ""
"библиотека `ReadLine <http://www.gnu.org/software/readline/>`_ любой "
"версии"

msgid "`ncurses <https://www.gnu.org/software/ncurses/>`_ library, any version"
msgstr "библиотека `ncurses <https://www.gnu.org/software/ncurses/>`_ любой версии"

msgid "`OpenSSL <https://www.openssl.org>`_ library, version 1.0.1+"
msgstr "библиотека `OpenSSL <https://www.openssl.org>`_ версии 1.0.1+"

msgid "`LibYAML <http://pyyaml.org/wiki/LibYAML>`_ library, version 0.1.4+"
msgstr "библиотека `LibYAML <http://pyyaml.org/wiki/LibYAML>`_ версии 0.1.4+"

msgid "`ICU <http://site.icu-project.org/download>`_ library, recent version"
msgstr "библиотека `ICU <http://site.icu-project.org/download>`_ последней версии"

msgid "`Autoconf <https://www.gnu.org/software/autoconf/>`_ library, any version"
msgstr ""
"библиотека `Autoconf <https://www.gnu.org/software/autoconf/>`_ любой "
"версии"

msgid "`Automake <https://www.gnu.org/software/automake/>`_ library, any version"
msgstr ""
"библиотека `Automake <https://www.gnu.org/software/automake/>`_ любой "
"версии"

msgid "`Libtool <https://www.gnu.org/software/libtool/>`_ library, any version"
msgstr "библиотека `Libtool <https://www.gnu.org/software/libtool/>`_ любой версии"

msgid "`Zlib-devel <https://www.zlib.net/>`_ library, any version"
msgstr "библиотека `Zlib-devel <https://www.zlib.net/>`_ любой версии"

msgid ""
"Python and modules. |br| Python interpreter is not necessary for building"
" Tarantool itself, unless you intend to use the \"Run the test suite\" "
"option in step 5. For all platforms, this is ``python`` version 2.7+ (but"
" not 3.x). You need the following Python modules:"
msgstr ""
"Python и его модули. |br| Интерпретатор для Python не нужен для сборки "
"самого Tarantool'а, если вы не планируете проводить тестирование из шага "
"5. Для всех платформ это будет ``python`` версии 2.7+ (но не 3.x). "
"Необходимы следующие модули Python:"

msgid "`pyyaml <https://pypi.python.org/pypi/PyYAML>`_ version 3.10"
msgstr "`pyyaml <https://pypi.python.org/pypi/PyYAML>`_ версии 3.10"

msgid "`argparse <https://pypi.python.org/pypi/argparse>`_ version 1.1"
msgstr "`argparse <https://pypi.python.org/pypi/argparse>`_ версии 1.1"

msgid ""
"`msgpack-python <https://pypi.python.org/pypi/msgpack-python>`_ version "
"0.4.6"
msgstr ""
"`msgpack-python <https://pypi.python.org/pypi/msgpack-python>`_ версии "
"0.4.6"

msgid "`gevent <https://pypi.python.org/pypi/gevent>`_ version 1.1.2"
msgstr "`gevent <https://pypi.python.org/pypi/gevent>`_ версии 1.1.2"

msgid "`six <https://pypi.python.org/pypi/six>`_ version 1.8.0"
msgstr "`six <https://pypi.python.org/pypi/six>`_ версии 1.8.0"

msgid "To install all required dependencies, follow the instructions for your OS:"
msgstr ""
"Чтобы установить все необходимые зависимости, следуйте инструкциям для "
"вашей ОС:"

msgid "For Debian/Ubuntu, say:"
msgstr "Если вы используете Debian/Ubuntu, выполните команду:"

msgid ""
"$ apt install -y build-essential cmake make coreutils sed \\\n"
"      autoconf automake libtool zlib1g-dev \\\n"
"      libreadline-dev libncurses5-dev libyaml-dev libssl-dev \\\n"
"      libunwind-dev libicu-dev \\\n"
"      python python-pip python-setuptools python-dev \\\n"
"      python-msgpack python-yaml python-argparse python-six python-gevent"
msgstr ""
"$ apt install -y build-essential cmake make coreutils sed \\\n"
"      autoconf automake libtool zlib1g-dev \\\n"
"      libreadline-dev libncurses5-dev libyaml-dev libssl-dev \\\n"
"      libunwind-dev libicu-dev \\\n"
"      python python-pip python-setuptools python-dev \\\n"
"      python-msgpack python-yaml python-argparse python-six python-gevent"

msgid "For RHEL/CentOS/Fedora, say:"
msgstr "Если вы используете RHEL/CentOS/Fedora, выполните команду:"

msgid ""
"$ yum install -y gcc gcc-c++ cmake make coreutils sed \\\n"
"      autoconf automake libtool zlib-devel \\\n"
"      readline-devel ncurses-devel libyaml-devel openssl-devel \\\n"
"      libunwind-devel libicu-devel \\\n"
"      python python-pip python-setuptools python-devel \\\n"
"      python-msgpack python-yaml python-argparse python-six python-gevent"
msgstr ""
"$ yum install -y gcc gcc-c++ cmake make coreutils sed \\\n"
"      autoconf automake libtool zlib-devel \\\n"
"      readline-devel ncurses-devel libyaml-devel openssl-devel \\\n"
"      libunwind-devel libicu-devel \\\n"
"      python python-pip python-setuptools python-devel \\\n"
"      python-msgpack python-yaml python-argparse python-six python-gevent"

msgid "For Mac OS X (instructions below are for OS X El Capitan):"
msgstr "Если вы используете Mac OS X (команды для OS X El Capitan):"

msgid "If you're using Homebrew as your package manager, say:"
msgstr ""
"Если вы пользуетесь Homebrew в качестве менеджера пакетов, выполните "
"команду:"

msgid ""
"$ brew install cmake make autoconf binutils zlib \\\n"
"       autoconf automake libtool \\\n"
"       readline ncurses libyaml openssl libunwind-headers icu4c \\\n"
"       && pip install python-daemon \\\n"
"       msgpack-python pyyaml configargparse six gevent"
msgstr ""
"$ brew install cmake make autoconf binutils zlib \\\n"
"       autoconf automake libtool \\\n"
"       readline ncurses libyaml openssl libunwind-headers icu4c \\\n"
"       && pip install python-daemon \\\n"
"       msgpack-python pyyaml configargparse six gevent"

msgid ""
"You can not install `zlib-devel <https://www.zlib.net/>`_  package this "
"way."
msgstr ""
"Таким образом невозможно установить пакет `zlib-devel "
"<https://www.zlib.net/>`_."

msgid "Alternatively, download Apple's default Xcode toolset:"
msgstr "Либо загрузите стандартный пакет Xcode для разработки:"

msgid ""
"$ xcode-select --install\n"
"$ xcode-select -switch /Applications/Xcode.app/Contents/Developer"
msgstr ""
"$ xcode-select --install\n"
"$ xcode-select -switch /Applications/Xcode.app/Contents/Developer"

msgid "For FreeBSD (instructions below are for FreeBSD 10.1+ release), say:"
msgstr ""
"Если вы используете FreeBSD (дальнейшие инструкции работают для FreeBSD "
"10.1+), выполните команду:"

msgid ""
"$ pkg install -y sudo git cmake gmake gcc coreutils \\\n"
"      autoconf automake libtool \\\n"
"      readline ncurses libyaml openssl libunwind icu \\\n"
"      python27 py27-pip py27-setuptools py27-daemon \\\n"
"      py27-msgpack py27-yaml py27-argparse py27-six py27-gevent"
msgstr ""
"$ pkg install -y sudo git cmake gmake gcc coreutils \\\n"
"      autoconf automake libtool \\\n"
"      readline ncurses libyaml openssl libunwind icu \\\n"
"      python27 py27-pip py27-setuptools py27-daemon \\\n"
"      py27-msgpack py27-yaml py27-argparse py27-six py27-gevent"

msgid ""
"If some Python modules are not available in a repository, it is best to "
"set up the modules by getting a tarball and doing the setup with ``python"
" setup.py`` like this:"
msgstr ""
"Если некоторые модули Python недоступны в репозитории, лучше всего "
"произвести настройку модулей, скачав пакет в формате TAR и выполнив "
"установку с помощью ``python setup.py`` следующим образом:"

msgid ""
"$ # On some machines, this initial command may be necessary:\n"
"$ wget https://bootstrap.pypa.io/ez_setup.py -O - | sudo python\n"
"\n"
"$ # Python module for parsing YAML (pyYAML), for test suite:\n"
"$ # (If wget fails, check at http://pyyaml.org/wiki/PyYAML\n"
"$ # what the current version is.)\n"
"$ cd ~\n"
"$ wget http://pyyaml.org/download/pyyaml/PyYAML-3.10.tar.gz\n"
"$ tar -xzf PyYAML-3.10.tar.gz\n"
"$ cd PyYAML-3.10\n"
"$ sudo python setup.py install"
msgstr ""
"$ # На некоторых машинах может потребоваться такая начальная команда:\n"
"$ wget https://bootstrap.pypa.io/ez_setup.py -O - | sudo python\n"
"\n"
"$ # Модуль Python для анализа YAML (pyYAML) для набора тестов:\n"
"$ # (Если wget не работает, проверьте на сайте "
"http://pyyaml.org/wiki/PyYAML\n"
"$ # актуальность версии.)\n"
"$ cd ~\n"
"$ wget http://pyyaml.org/download/pyyaml/PyYAML-3.10.tar.gz\n"
"$ tar -xzf PyYAML-3.10.tar.gz\n"
"$ cd PyYAML-3.10\n"
"$ sudo python setup.py install"

msgid ""
"Finally, use Python ``pip`` to bring in Python packages that may not be "
"up-to-date in the distro repositories. (On CentOS 7, it will be necessary"
" to install ``pip`` first, with :code:`sudo yum install epel-release` "
"followed by :code:`sudo yum install python-pip`.)"
msgstr ""
"Наконец, используйте ``pip`` в Python, чтобы импортировать пакеты Python,"
" которые могут быть неактуальны в репозиториях дистрибутивов.  (В CentOS "
"7 будет необходимо сначала установить ``pip`` так: :code:`sudo yum "
"install epel-release`, а затем :code:`sudo yum install python-pip`.)"

msgid ""
"$ pip install -r \\\n"
"      https://raw.githubusercontent.com/tarantool/test-"
"run/master/requirements.txt \\\n"
"      --user"
msgstr ""
"$ pip install -r \\\n"
"      https://raw.githubusercontent.com/tarantool/test-"
"run/master/requirements.txt \\\n"
"      --user"

msgid "This step is only necessary once, the first time you do a download."
msgstr "Это действие следует выполнить только один раз при первой загрузке."

msgid ""
"Use ``git`` to download the latest Tarantool source code from the GitHub "
"repository ``tarantool/tarantool``, branch 1.10, to a local directory "
"named ``~/tarantool``, for example:"
msgstr ""
"Используйте ``git``, чтобы загрузить последний исходный код Tarantool'а "
"из репозитория  на GitHub ``tarantool/tarantool`` (ветка 1.10) в "
"локальную директорию ``~/tarantool``, например:"

msgid ""
"$ git clone --recursive https://github.com/tarantool/tarantool.git -b "
"1.10 ~/tarantool"
msgstr ""
"$ git clone --recursive https://github.com/tarantool/tarantool.git -b "
"1.10 ~/tarantool"

msgid ""
"On rare occasions, the submodules need to be updated again with the "
"command:"
msgstr ""
"В редких случаях вложенные модули необходимо снова обновить с помощью "
"команды:"

msgid ""
"cd ~/tarantool\n"
"$ git submodule update --init --recursive"
msgstr ""
"cd ~/tarantool\n"
"$ git submodule update --init --recursive"

msgid "Use CMake to initiate the build."
msgstr "Используйте CMake, чтобы начать сборку."

msgid ""
"$ cd ~/tarantool\n"
"$ make clean         # unnecessary, added for good luck\n"
"$ rm CMakeCache.txt  # unnecessary, added for good luck\n"
"$ cmake .            # start initiating with build type=Debug"
msgstr ""
"$ cd ~/tarantool\n"
"$ make clean         # необязательно, добавлено на удачу\n"
"$ rm CMakeCache.txt  # необязательно, добавлено на удачу\n"
"$ cmake .            # начать с типом сборки = Debug (отладка)"

msgid ""
"On some platforms, it may be necessary to specify the C and C++ versions,"
" for example:"
msgstr ""
"На некоторых платформах может потребоваться указать версии C и C++, "
"например:"

msgid "$ CC=gcc-4.8 CXX=g++-4.8 cmake ."
msgstr "$ CC=gcc-4.8 CXX=g++-4.8 cmake ."

msgid ""
"The CMake option for specifying build type is "
":samp:`-DCMAKE_BUILD_TYPE={type}`, where :samp:`{type}` can be:"
msgstr ""
"Чтобы указать тип сборки в CMake используется опция "
":samp:`-DCMAKE_BUILD_TYPE={type}`, где :samp:`{type}` может быть:"

msgid "``Debug`` -- used by project maintainers"
msgstr "``Debug`` -- отладка, используется эксплуатационным персоналом на проекте"

msgid "``Release`` -- used only if the highest performance is required"
msgstr ""
"``Release`` -- релиз, используется только при необходимости высокой "
"производительности"

msgid ""
"``RelWithDebInfo`` -- used for production, also provides debugging "
"capabilities"
msgstr ""
"``RelWithDebInfo`` -- используется для сборки в эксплуатации, также "
"предоставляет возможности отладки"

msgid ""
"The CMake option for hinting that the result will be distributed is "
":code:`-DENABLE_DIST=ON`. If this option is on, then later ``make "
"install`` will install ``tarantoolctl`` files in addition to "
"``tarantool`` files."
msgstr ""
"Чтобы указать в CMake, что результат будет распределен, используется "
"опция :code:`-DENABLE_DIST=ON`. При наличии такой опции ``make install`` "
"в дальнейшем установит файлы ``tarantoolctl`` в дополнение к файлам "
"``tarantool``."

msgid "Use ``make`` to complete the build."
msgstr "Используйте ``make`` для завершения сборки."

msgid "$ make"
msgstr "$ make"

msgid "For FreeBSD, use ``gmake`` instead."
msgstr "В FreeBSD используйте вместо этого ``gmake``."

msgid "This creates the 'tarantool' executable in the ``src/`` directory."
msgstr "При этом создается исполняемый файл 'tarantool' в директории ``src/``."

msgid ""
"If you encounter a ``curl`` or ``OpenSSL`` errors on this step try "
"installing ``openssl111`` package of the specific ``1.1.1d`` version."
msgstr ""
"Если на данном шаге вы сталкиваетесь с ошибками ``curl`` или ``OpenSSL``,"
" попробуйте установить пакет ``openssl111`` версии ``1.1.1d``."

msgid ""
"Next, it's highly recommended to say ``make install`` to install "
"Tarantool to the ``/usr/local`` directory and keep your system clean. "
"However, it is possible to run the Tarantool executable without "
"installation."
msgstr ""
"Далее настоятельно рекомендуется выполнить команду ``make install`` для "
"установки Tarantool'а в директорию ``/usr/local`` и поддержания порядка в"
" системе. Однако, можно запустить исполняемый файл и без установки."

msgid "Run the test suite."
msgstr "Проведите тестирование."

msgid ""
"This step is optional. Tarantool's developers always run the test suite "
"before they publish new versions. You should run the test suite too, if "
"you make any changes in the code. Assuming you downloaded to "
"``~/tarantool``, the principal steps are:"
msgstr ""
"Это необязательное действие. Разработчики Tarantool'а всегда проводят "
"тестирование до публикации новых версий. Следует проводить тестирование, "
"если внесены изменения в код. Итак, после загрузки в ``~/tarantool`` "
"основные действия:"

msgid ""
"$ # make a subdirectory named `bin`\n"
"$ mkdir ~/tarantool/bin\n"
"\n"
"$ # link Python to bin (this may require superuser privileges)\n"
"$ ln /usr/bin/python ~/tarantool/bin/python\n"
"\n"
"$ # get to the test subdirectory\n"
"$ cd ~/tarantool/test\n"
"\n"
"$ # run tests using Python\n"
"$ PATH=~/tarantool/bin:$PATH ./test-run.py"
msgstr ""
"$ # создание поддиректории под названием `bin`\n"
"$ mkdir ~/tarantool/bin\n"
"\n"
"$ # привязка Python к bin (могут потребовать права пользователя "
"superuser)\n"
"$ ln /usr/bin/python ~/tarantool/bin/python\n"
"\n"
"$ # переход в поддиректорию с тестами\n"
"$ cd ~/tarantool/test\n"
"\n"
"$ # проведение тестирования с помощью Python\n"
"$ PATH=~/tarantool/bin:$PATH ./test-run.py"

msgid "The output should contain reassuring reports, for example:"
msgstr "Вывод должен включать в себя обнадеживающие результаты, например:"

msgid ""
"======================================================================\n"
"TEST                                            RESULT\n"
"------------------------------------------------------------\n"
"box/bad_trigger.test.py                         [ pass ]\n"
"box/call.test.py                                [ pass ]\n"
"box/iproto.test.py                              [ pass ]\n"
"box/xlog.test.py                                [ pass ]\n"
"box/admin.test.lua                              [ pass ]\n"
"box/auth_access.test.lua                        [ pass ]\n"
"... etc."
msgstr ""
"======================================================================\n"
"TEST                                            RESULT\n"
"------------------------------------------------------------\n"
"box/bad_trigger.test.py                         [ pass ]\n"
"box/call.test.py                                [ pass ]\n"
"box/iproto.test.py                              [ pass ]\n"
"box/xlog.test.py                                [ pass ]\n"
"box/admin.test.lua                              [ pass ]\n"
"box/auth_access.test.lua                        [ pass ]\n"
"... etc."

msgid "To prevent later confusion, clean up what's in the ``bin`` subdirectory:"
msgstr "Во избежание путаницы очистите поддиректорию ``bin``:"

msgid ""
"$ rm ~/tarantool/bin/python\n"
"$ rmdir ~/tarantool/bin"
msgstr ""
"$ rm ~/tarantool/bin/python\n"
"$ rmdir ~/tarantool/bin"

msgid "Make RPM and Debian packages."
msgstr "Создайте пакеты RPM и Debian."

msgid ""
"This step is optional. It's only for people who want to redistribute "
"Tarantool. We highly recommend to use official packages from the "
"`tarantool.org <https://tarantool.org/download.html>`_ web-site. However,"
" you can build RPM and Debian packages using `PackPack "
"<https://github.com/packpack/packpack>`_ or using the ``dpkg-"
"buildpackage`` or ``rpmbuild`` tools. Please consult ``dpkg`` or "
"``rpmbuild`` documentation for details."
msgstr ""
"Это необязательное действие, которое следует выполнить только тем, кто "
"хочет перераспределить Tarantool. Мы настоятельно рекомендуем "
"использовать официальные пакеты с сайта `tarantool.org "
"<https://tarantool.org/download.html>`_. Однако, можно собрать пакеты RPM"
" и Debian с помощью `PackPack <https://github.com/packpack/packpack>`_ "
"или путем использования средств ``dpkg-buildpackage`` или ``rpmbuild``. "
"Для получения более подробной информации обратитесь к документации по "
"``dpkg`` или ``rpmbuild``."

msgid "Verify your Tarantool installation."
msgstr "Проверьте установку Tarantool'а."

msgid ""
"$ # if you installed tarantool locally after build\n"
"$ tarantool\n"
"$ # - OR -\n"
"$ # if you didn't install tarantool locally after build\n"
"$ ./src/tarantool"
msgstr ""
"$ # если tarantool установлен локально после сборки\n"
"$ tarantool\n"
"$ # - ИЛИ -\n"
"$ # если tarantool не установлен локально после сборки\n"
"$ ./src/tarantool"

msgid "This starts Tarantool in the interactive mode."
msgstr "Tarantool запустится в интерактивном режиме."

msgid "See also:"
msgstr "См. также:"

msgid ""
"`Tarantool README.md "
"<https://github.com/tarantool/tarantool/blob/1.10/README.md>`_"
msgstr ""
"`Tarantool README.md "
"<https://github.com/tarantool/tarantool/blob/1.10/README.md>`_"
