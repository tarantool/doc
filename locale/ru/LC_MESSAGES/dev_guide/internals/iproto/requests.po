
msgid "Requests"
msgstr "Запросы"

msgid ""
"A request has a size, a :ref:`header <box_protocol-header>` that contains "
"the IPROTO key, and a body as described here."
msgstr ""
"Запрос содержит размер, :ref:`заголовок <box_protocol-header>`, который "
"содержит ключ IPROTO, и тело сообщения, как описано в этом разделе."

msgid "IPROTO_SELECT = 0x01"
msgstr "IPROTO_SELECT = 0x01"

msgid ""
"See :ref:`space_object:select() <box_space-select>`. The body is a 6-item "
"map."
msgstr ""
"См. :ref:`space_object:select() <box_space-select>`. Тело сообщения "
"представляет собой ассоциативный массив из 6 элементов."

msgid ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_SELECT,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_SPACE_ID: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_INDEX_ID: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_LIMIT: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_OFFSET: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_ITERATOR: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_KEY: :samp:`{{MP_ARRAY array of key values}}`\n"
"})"
msgstr ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_SELECT,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_SPACE_ID: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_INDEX_ID: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_LIMIT: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_OFFSET: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_ITERATOR: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_KEY: :samp:`{{MP_ARRAY array of key values}}`\n"
"})"

msgid "Example"
msgstr "Пример"

msgid ""
"If the id of 'tspace' is 512 and this is the fifth message, |br| "
":samp:`{conn}.`:code:`space.tspace:select({0},{iterator='GT',offset=1,limit=2})`"
" will cause:"
msgstr ""
"Если ID спейса 'tspace' = 512 и это пятое сообщение, |br| "
":samp:`{conn}.`:code:`space.tspace:select({0},{iterator='GT',offset=1,limit=2})`"
" вызовет:"

msgid ""
"<size>\n"
"msgpack(21)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_SYNC: 5,\n"
"    IPROTO_REQUEST_TYPE: IPROTO_SELECT\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_SPACE_ID: 512,\n"
"    IPROTO_INDEX_ID: 0,\n"
"    IPROTO_ITERATOR: 6,\n"
"    IPROTO_OFFSET: 1,\n"
"    IPROTO_LIMIT: 2,\n"
"    IPROTO_KEY: [1]\n"
"})"
msgstr ""
"<size>\n"
"msgpack(21)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_SYNC: 5,\n"
"    IPROTO_REQUEST_TYPE: IPROTO_SELECT\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_SPACE_ID: 512,\n"
"    IPROTO_INDEX_ID: 0,\n"
"    IPROTO_ITERATOR: 6,\n"
"    IPROTO_OFFSET: 1,\n"
"    IPROTO_LIMIT: 2,\n"
"    IPROTO_KEY: [1]\n"
"})"

msgid ""
"In the :ref:`examples <box_protocol-illustration>`, "
"you can find actual byte codes of an IPROTO_SELECT message."
msgstr ""
"Байт-коды сообщения IPROTO_SELECT рассмотрены в разделе :ref:`Примеры <box_protocol-illustration>`.


msgid "IPROTO_INSERT = 0x02"
msgstr "IPROTO_INSERT = 0x02"

msgid ""
"See :ref:`space_object:insert()  <box_space-insert>`. The body is a 2-item "
"map:"
msgstr ""
"См. :ref:`space_object:insert()  <box_space-insert>`. Тело сообщения "
"представляет собой ассоциативный массив из 2 элементов:"

msgid ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_INSERT,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_SPACE_ID: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_TUPLE: :samp:`{{MP_ARRAY array of field values}}`\n"
"})"
msgstr ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_INSERT,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_SPACE_ID: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_TUPLE: :samp:`{{MP_ARRAY array of field values}}`\n"
"})"

msgid ""
"If the id of 'tspace' is 512 and this is the fifth message, |br| "
":samp:`{conn}.`:code:`space.tspace:insert{1, 'AAA'}` will cause:"
msgstr ""
"Если ID спейса 'tspace' = 512 и это пятое сообщение, |br| "
":samp:`{conn}.`:code:`space.tspace:insert{1, 'AAA'}` вызовет:"

msgid ""
"# <size>\n"
"msgpack(17)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_INSERT,\n"
"    IPROTO_SYNC: 5\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_SPACE_ID: 512,\n"
"    IPROTO_TUPLE: [1, 'AAA']\n"
"})"
msgstr ""
"# <size>\n"
"msgpack(17)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_INSERT,\n"
"    IPROTO_SYNC: 5\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_SPACE_ID: 512,\n"
"    IPROTO_TUPLE: [1, 'AAA']\n"
"})"

msgid "IPROTO_REPLACE = 0x03"
msgstr "IPROTO_REPLACE = 0x03"

msgid ""
"See :ref:`space_object:replace()  <box_space-replace>`. The body is a 2-item"
" map, the same as for IPROTO_INSERT:"
msgstr ""
"См. :ref:`space_object:replace()  <box_space-replace>`. Тело сообщения "
"представляет собой ассоциативный массив из 2 элементов, как и в случае "
"IPROTO_INSERT:"

msgid ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_REPLACE,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_SPACE_ID: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_TUPLE: :samp:`{{MP_ARRAY array of field values}}`\n"
"})"
msgstr ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_REPLACE,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_SPACE_ID: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_TUPLE: :samp:`{{MP_ARRAY array of field values}}`\n"
"})"

msgid "IPROTO_UPDATE = 0x04"
msgstr "IPROTO_UPDATE = 0x04"

msgid "See :ref:`space_object:update()  <box_space-update>`."
msgstr "См. :ref:`space_object:update()  <box_space-update>`."

msgid "The body is usually a 4-item map:"
msgstr ""
"Тело сообщения обычно представляет собой ассоциативный массив из 4 "
"элементов:"

msgid ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_UPDATE,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_SPACE_ID: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_INDEX_ID: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_KEY: :samp:`{{MP_ARRAY array of index keys}}`,\n"
"    IPROTO_TUPLE: :samp:`{{MP_ARRAY array of update operations}}`\n"
"})"
msgstr ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_UPDATE,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_SPACE_ID: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_INDEX_ID: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_KEY: :samp:`{{MP_ARRAY array of index keys}}`,\n"
"    IPROTO_TUPLE: :samp:`{{MP_ARRAY array of update operations}}`\n"
"})"

msgid ""
"If the operation specifies no values, then IPROTO_TUPLE is a 2-item array: "
"|br| :samp:`[{MP_STR OPERATOR = '#', {MP_INT FIELD_NO = field number "
"starting with 1}]`. Normally field numbers start with 1."
msgstr ""
"Если в операции не указаны значения, то IPROTO_TUPLE — это массив из 2 "
"элементов: |br| :samp:`[{MP_STR OPERATOR = '#', {MP_INT FIELD_NO = номер "
"поля, начиная с 1}]`. Обычно номера полей начинаются с 1."

msgid ""
"If the operation specifies one value, then IPROTO_TUPLE is a 3-item array: "
"|br| :samp:`[{MP_STR string OPERATOR = '+' or '-' or '^' or '^' or '|' or "
"'!' or '='}, {MP_INT FIELD_NO}, {MP_OBJECT VALUE}]`. |br|"
msgstr ""
"Если в операции задано одно значение, то IPROTO_TUPLE — это массив из трех "
"элементов: |br| :samp:`[{MP_STR string OPERATOR = '+' or '-' or '^' or '^' "
"or '|' or '!' or '='}, {MP_INT FIELD_NO}, {MP_OBJECT VALUE}]`. |br|"

msgid ""
"Otherwise IPROTO_TUPLE is a 5-item array: |br| :samp:`[{MP_STR string "
"OPERATOR = ':'}, {MP_INT integer FIELD_NO}, {MP_INT POSITION}, {MP_INT "
"OFFSET}, {MP_STR VALUE}]`. |br|"
msgstr ""
"В остальных случаях IPROTO_TUPLE — это массив из 5 элементов: |br| "
":samp:`[{MP_STR string OPERATOR = ':'}, {MP_INT integer FIELD_NO}, {MP_INT "
"POSITION}, {MP_INT OFFSET}, {MP_STR VALUE}]`. |br|"

msgid ""
"If the id of 'tspace' is 512 and this is the fifth message, |br| "
":samp:`{conn}.`:code:`space.tspace:update(999, {{'=', 2, 'B'}})` will cause:"
msgstr ""
"Если ID спейса 'tspace' = 512 и это пятое сообщение, br| "
":samp:`{conn}.`:code:`space.tspace:update(999, {{'=', 2, 'B'}})` вызовет:"

msgid ""
"# <size>\n"
"msgpack(17)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_UPDATE,\n"
"    IPROTO_SYNC: 5\n"
"})\n"
"# <body> ... the map-item IPROTO_INDEX_BASE is optional\n"
"msgpack({\n"
"    IPROTO_SPACE_ID: 512,\n"
"    IPROTO_INDEX_ID: 0,\n"
"    IPROTO_INDEX_BASE: 1,\n"
"    IPROTO_TUPLE: [['=',2,'B']],\n"
"    IPROTO_KEY: [999]\n"
"})"
msgstr ""
"# <size>\n"
"msgpack(17)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_UPDATE,\n"
"    IPROTO_SYNC: 5\n"
"})\n"
"# <body> ... the map-item IPROTO_INDEX_BASE is optional\n"
"msgpack({\n"
"    IPROTO_SPACE_ID: 512,\n"
"    IPROTO_INDEX_ID: 0,\n"
"    IPROTO_INDEX_BASE: 1,\n"
"    IPROTO_TUPLE: [['=',2,'B']],\n"
"    IPROTO_KEY: [999]\n"
"})"

msgid ""
"Later in :ref:`Binary protocol -- illustration <box_protocol-illustration>` "
"we will show actual byte codes of an IPROTO_UPDATE message."
msgstr ""
"Далее в разделе :ref:`Примеры <box_protocol-illustration>` будут рассмотрены"
" байт-коды сообщения IPROTO_UPDATE."

msgid "IPROTO_DELETE = 0x05"
msgstr "IPROTO_DELETE = 0x05"

msgid ""
"See :ref:`space_object:delete()  <box_space-delete>`. The body is a 3-item "
"map:"
msgstr ""
"См. :ref:`space_object:delete()  <box_space-delete>`. Тело сообщения "
"представляет собой ассоциативный массив из 3 элементов:"

msgid ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_DELETE,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_SPACE_ID: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_INDEX_ID: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_KEY: :samp:`{{MP_ARRAY array of key values}}`\n"
"})"
msgstr ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_DELETE,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_SPACE_ID: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_INDEX_ID: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_KEY: :samp:`{{MP_ARRAY array of key values}}`\n"
"})"


msgid "IPROTO_UPSERT = 0x09"
msgstr "IPROTO_UPSERT = 0x09"

msgid "See :ref:`space_object:upsert()  <box_space-upsert>`."
msgstr "См. :ref:`space_object:upsert()  <box_space-upsert>`."

msgid ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_UPSERT,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_SPACE_ID: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_INDEX_BASE: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_OPS: :samp:`{{MP_ARRAY array of update operations}}`,\n"
"    IPROTO_TUPLE: :samp:`{{MP_ARRAY array of primary-key field values}}`\n"
"})"
msgstr ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_UPSERT,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_SPACE_ID: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_INDEX_BASE: :samp:`{{MP_UINT unsigned integer}}`,\n"
"    IPROTO_OPS: :samp:`{{MP_ARRAY array of update operations}}`,\n"
"    IPROTO_TUPLE: :samp:`{{MP_ARRAY array of primary-key field values}}`\n"
"})"

msgid ""
"The IPROTO_OPS is the same as the IPROTO_TUPLE of :ref:`IPROTO_UPDATE "
"<box_protocol-update>`."
msgstr ""
"IPROTO_OPS — это то же самое, что и IPROTO_TUPLE в :ref:`IPROTO_UPDATE "
"<box_protocol-update>`."


msgid "IPROTO_CALL = 0x0a"
msgstr "IPROTO_CALL = 0x0a"

msgid "See :ref:`conn:call() <net_box-call>`. The body is a 2-item map:"
msgstr ""
"См. :ref:`conn:call() <net_box-call>`. Тело сообщения представляет собой "
"ассоциативный массив из 2 элементов:"

msgid ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_CALL,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_FUNCTION_NAME: :samp:`{{MP_STR string}}`,\n"
"    IPROTO_TUPLE: :samp:`{{MP_ARRAY array of arguments}}`\n"
"})"
msgstr ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_CALL,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_FUNCTION_NAME: :samp:`{{MP_STR string}}`,\n"
"    IPROTO_TUPLE: :samp:`{{MP_ARRAY array of arguments}}`\n"
"})"

msgid ""
"The response will be a list of values, similar to the :ref:`IPROTO_EVAL "
"<box_protocol-eval>` response."
msgstr ""
"Вернется список значений, наподобие ответа :ref:`IPROTO_EVAL <box_protocol-"
"eval>`."


msgid ""
"The ``<body>`` has the details of the request or response. In a request, it "
"can also be absent or be an empty map. Both these states will be interpreted"
" equally. Responses will contain the ``<body>`` anyway even for an "
":ref:`IPROTO_PING <box_protocol-ping>` request."
msgstr ""
"Тело сообщения ``<body>`` содержит детали запроса или ответа. В запросе оно "
"может отсутствовать или представлять собой пустой ассоциативный массив. И "
"то, и другое будет интерпретироваться одинаково. Ответы будут содержать "
"``<body>`` в любом случае, даже после запроса :ref:`IPROTO_PING "
"<box_protocol-ping>`."
"

msgid "IPROTO_CALL_16 = 0x06"
msgstr "IPROTO_CALL_16 = 0x06"

msgid ""
"See :ref:`conn:call() <net_box-call>`. The suffix ``_16`` is a hint that "
"this is for the ``call()`` until Tarantool 1.6. It is deprecated. Use "
":ref:`IPROTO_CALL <box_protocol-call>` instead. The body is a 2-item map:"
msgstr ""
"См. :ref:`conn:call() <net_box-call>`. ``_16`` в конце подсказывает, что "
"константа используется для ``call()`` до версии Tarantool 1.6. Эта константа"
" объявлена устаревшей. Вместо нее используйте :ref:`IPROTO_CALL "
"<box_protocol-call>`. Тело сообщения представляет собой ассоциативный массив"
" из 2 элементов:"

msgid ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_CALL_16,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_FUNCTION_NAME: :samp:`{{MP_STR string}}`,\n"
"    IPROTO_TUPLE: :samp:`{{MP_ARRAY array of arguments}}`\n"
"})"
msgstr ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_CALL_16,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_FUNCTION_NAME: :samp:`{{MP_STR string}}`,\n"
"    IPROTO_TUPLE: :samp:`{{MP_ARRAY array of arguments}}`\n"
"})"

msgid "The return value is an array of tuples."
msgstr "Возвращается массив кортежей."

msgid "IPROTO_AUTH = 0x07"
msgstr "IPROTO_AUTH = 0x07"

msgid ""
"See :ref:`authentication <authentication-users>`. See the later section "
":ref:`Binary protocol -- authentication <box_protocol-authentication>`."
msgstr ""
"См. раздел :ref:`Аутентификация <authentication-users>` в документации. См. "
"раздел об :ref:`аутентификации <box_protocol-authentication>` ниже."

msgid "IPROTO_EVAL = 0x08"
msgstr "IPROTO_EVAL = 0x08"

msgid ""
"See :ref:`conn:eval() <net_box-eval>`. Since the argument is a Lua "
"expression, this is Tarantool's way to handle non-binary with the binary "
"protocol. Any request that does not have its own code, for example "
":samp:`box.space.{space-name}:drop()`, will be handled either with "
":ref:`IPROTO_CALL <box_protocol-call>` or IPROTO_EVAL. The "
":ref:`tarantoolctl <tarantoolctl>` administrative utility makes extensive "
"use of ``eval``. The body is a 2-item map:"
msgstr ""
"См. :ref:`conn:eval() <net_box-eval>`. В качестве аргумента выступает "
"выражение на Lua — так Tarantool обрабатывает небинарный код с помощью "
"бинарного протокола. Любой запрос без собственного кода, например "
":samp:`box.space.{space-name}:drop()`, будет обработан с помощью либо "
":ref:`IPROTO_CALL <box_protocol-call>`, либо IPROTO_EVAL. Административная "
"утилита :ref:`tarantoolctl <tarantoolctl>` активно использует ``eval``. Тело"
" сообщения представляет собой ассоциативный массив из 2 элементов:"

msgid ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_EVAL,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_EXPR: :samp:`{{MP_STR string}}`,\n"
"    IPROTO_TUPLE: :samp:`{{MP_ARRAY array of arguments}}`\n"
"})"
msgstr ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_EVAL,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_EXPR: :samp:`{{MP_STR string}}`,\n"
"    IPROTO_TUPLE: :samp:`{{MP_ARRAY array of arguments}}`\n"
"})"

msgid ""
"If this is the fifth message, :samp:`conn:eval('return 5;')` will "
"cause:"
msgstr ""
"Если это пятое сообщение, :samp:`conn:eval('return 5;')` приведет к "
"следующему:"

msgid ""
"# <size>\n"
"msgpack(19)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_SYNC: 5\n"
"    IPROTO_REQUEST_TYPE: IPROTO_EVAL\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_EXPR: 'return 5;',\n"
"    IPROTO_TUPLE: []\n"
"})"
msgstr ""
"# <size>\n"
"msgpack(19)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_SYNC: 5\n"
"    IPROTO_REQUEST_TYPE: IPROTO_EVAL\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_EXPR: 'return 5;',\n"
"    IPROTO_TUPLE: []\n"
"})"


msgid "IPROTO_EXECUTE = 0x0b"
msgstr "IPROTO_EXECUTE = 0x0b"

msgid ""
"See :ref:`box.execute() <box-sql_box_execute>`, this is only for SQL. The "
"body is a 3-item map:"
msgstr ""
"См. :ref:`box.execute() <box-sql_box_execute>`, используется только для SQL."
" Тело сообщения представляет собой ассоциативный массив из 3 элементов:"

msgid ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_EXECUTE,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_STMT_ID: :samp:`{{MP_INT integer}}` or IPROTO_SQL_TEXT: :samp:`{{MP_STR string}}`,\n"
"    IPROTO_SQL_BIND: :samp:`{{MP_INT integer}}`,\n"
"    IPROTO_OPTIONS: :samp:`{{MP_ARRAY array}}`\n"
"})"
msgstr ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_EXECUTE,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_STMT_ID: :samp:`{{MP_INT integer}}` или IPROTO_SQL_TEXT: :samp:`{{MP_STR string}}`,\n"
"    IPROTO_SQL_BIND: :samp:`{{MP_INT integer}}`,\n"
"    IPROTO_OPTIONS: :samp:`{{MP_ARRAY array}}`\n"
"})"

msgid ""
"Use IPROTO_STMT_ID (0x43) and statement-id (MP_INT) if executing a prepared "
"statement, or use IPROTO_SQL_TEXT (0x40) and statement-text (MP_STR) if "
"executing an SQL string, then IPROTO_SQL_BIND (0x41) and array of parameter "
"values to match ? placeholders or :name placeholders, IPROTO_OPTIONS (0x2b) "
"and array of options (usually empty)."
msgstr ""
"При выполнении подготовленного оператора используйте IPROTO_STMT_ID (0x43) и"
" ID оператора (MP_INT), при работе со строками SQL — IPROTO_SQL_TEXT (0x40) "
"и текст оператора (MP_STR), а затем IPROTO_SQL_BIND (0x41) и массив значений"
" параметров для подстановочных знаков ``?`` или ``:name``, IPROTO_OPTIONS "
"(0x2b) и массив параметров (обычно пустой)."

msgid ""
"For example, suppose we prepare a statement with two ? placeholders, and "
"execute with two parameters, thus: |br| :code:`n = conn:prepare([[VALUES (?,"
" ?);]])` |br| :code:`conn:execute(n.stmt_id, {1,'a'})` |br| Then the body "
"will look like this:"
msgstr ""
"Например, предположим, что мы создаем подготовленный оператор с двумя "
"подстановочными знаками ? и выполняем его с двумя параметрами таким образом:"
" |br| :code:`n = conn:prepare([[VALUES (?, ?);]])` |br| "
":code:`conn:execute(n.stmt_id, {1,'a'})` |br| Тогда тело сообщения будет "
"выглядеть так:"

msgid ""
"# <body>\n"
"msgpack({\n"
"    IPROTO_STMT_ID: 0xd7aa741b,\n"
"    IPROTO_SQL_BIND: [1, 'a'],\n"
"    IPROTO_OPTIONS: []\n"
"})"
msgstr ""
"# <body>\n"
"msgpack({\n"
"    IPROTO_STMT_ID: 0xd7aa741b,\n"
"    IPROTO_SQL_BIND: [1, 'a'],\n"
"    IPROTO_OPTIONS: []\n"
"})"

msgid ""
"Later in :ref:`Binary protocol -- illustration <box_protocol-illustration>` "
"we will show actual byte codes of the IPROTO_EXECUTE message."
msgstr ""
"Далее в разделе :ref:`Примеры <box_protocol-illustration>` будут рассмотрены"
" байт-коды сообщения IPROTO_EXECUTE."

msgid ""
"To call a prepared statement with named parameters from a connector pass the"
" parameters within an array of maps. A client should wrap each element into "
"a map, where the key holds a name of the parameter (with a colon) and the "
"value holds an actual value. So, to bind foo and bar to 42 and 43, a client "
"should send ``IPROTO_SQL_TEXT: <...>, IPROTO_SQL_BIND: [{\"foo\": 42}, "
"{\"bar\": 43}]``."
msgstr ""
"Чтобы вызвать подготовленный оператор с именованными параметрами из "
"коннектора, передайте параметры в массиве ассоциативных массивов. Клиент "
"должен поместить каждый элемент в ассоциативный массив, где ключ содержит "
"имя параметра (с двоеточием), а значение — фактическое значение. Так, чтобы "
"связать foo и bar с 42 и 43, клиент должен отправить ``IPROTO_SQL_TEXT: "
"<...>, IPROTO_SQL_BIND: [{\"foo\": 42}, {\"bar\": 43}]``."

msgid ""
"If a statement has both named and non-named parameters, wrap only named ones"
" into a map. The rest of the parameters are positional and will be "
"substituted in order."
msgstr ""
"Если оператор содержит как именованные, так и неименованные параметры, "
"поместите в ассоциативный массив только именованные параметры. Остальные "
"параметры являются позиционными и будут подставляться по порядку."

msgid "IPROTO_NOP = 0x0c"
msgstr "IPROTO_NOP = 0x0c"

msgid ""
"There is no Lua request exactly equivalent to IPROTO_NOP. It causes the LSN "
"to be incremented. It could be sometimes used for updates where the old and "
"new values are the same, but the LSN must be increased because a data-change"
" must be recorded. The body is: nothing."
msgstr ""
"Нет такого запроса на Lua, который бы соответствовал IPROTO_NOP. IPROTO_NOP "
"приводит к увеличению LSN. Иногда константу можно использовать для "
"обновления значения, когда старое и новое значения одинаковы, но LSN нужно "
"увеличить, поскольку нужно зарегистрировать изменение данных. Тело сообщения"
" пустое."



msgid "IPROTO_PREPARE = 0x0d"
msgstr "IPROTO_PREPARE = 0x0d"

msgid ""
"See :ref:`box.prepare <box-sql_box_prepare>`, this is only for SQL. The body"
" is a 1-item map:"
msgstr ""
"См. :ref:`box.prepare <box-sql_box_prepare>`, используется только для SQL. "
"Тело сообщения представляет собой ассоциативный массив из 1 элемента:"

msgid ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_PREPARE,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_STMT_ID: :samp:`{{MP_INT integer}}` or IPROTO_SQL_TEXT: :samp:`{{MP_STR string}}`\n"
"})"
msgstr ""
"# <size>\n"
"msgpack(:samp:`{{MP_UINT unsigned integer = size(<header>) + size(<body>)}}`)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_PREPARE,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})\n"
"# <body>\n"
"msgpack({\n"
"    IPROTO_STMT_ID: :samp:`{{MP_INT integer}}` или IPROTO_SQL_TEXT: :samp:`{{MP_STR string}}`\n"
"})"

msgid ""
"IPROTO_STMT_ID (0x43) and statement-id (MP_INT) if executing a prepared "
"statement or IPROTO_SQL_TEXT (0x40) and statement-text (string) if executing"
" an SQL string. Thus the IPROTO_PREPARE map item is the same as the first "
"item of the :ref:`IPROTO_EXECUTE <box_protocol-execute>` body."
msgstr ""
"При выполнении подготовленного оператора используйте IPROTO_STMT_ID (0x43) и"
" ID оператора (MP_INT), при работе со строками SQL --- IPROTO_SQL_TEXT "
"(0x40) и текст оператора (string). Таким образом, элемент ассоциативного "
"массива IPROTO_PREPARE — это то же самое, что и первый элемент тела "
"сообщения :ref:`IPROTO_EXECUTE <box_protocol-execute>`."

msgid "IPROTO_PING = 0x40"
msgstr "IPROTO_PING = 0x40"

msgid ""
"See :ref:`conn:ping() <conn-ping>`. The body will be an empty map because "
"IPROTO_PING in the header contains all the information that the server "
"instance needs."
msgstr ""
"См. :ref:`conn:ping() <conn-ping>`. В теле сообщения будет пустой "
"ассоциативный массив, потому что IPROTO_PING в заголовке содержит всю "
"информацию, необходимую экземпляру сервера."

msgid ""
"# <size>\n"
"msgpack(5)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_PING,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})"
msgstr ""
"# <size>\n"
"msgpack(5)\n"
"# <header>\n"
"msgpack({\n"
"    IPROTO_REQUEST_TYPE: IPROTO_PING,\n"
"    IPROTO_SYNC: :samp:`{{MP_UINT unsigned integer}}`\n"
"})"
