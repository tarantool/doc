
msgid "Streams"
msgstr ""

msgid "Overview"
msgstr ""

#, fuzzy
msgid ""
"The :ref:`Streams and interactive transactions <txn_mode_stream-interactive-"
"transactions>` feature, which was added in Tarantool version :tarantool-"
"release:`2.10.0`, allows two things: sequential processing and interleaving."
msgstr ""
":ref:`Стримы и интерактивные транзакции <box_stream>`, добавленные в "
"Tarantool :tarantool-release:`2.10.0`, делают возможными две процедуры: "
"последовательную обработку и чередование."

#, fuzzy
msgid ""
"**Sequential processing**: With streams there is a guarantee that the server"
" instance will not handle the next request in a stream until it has "
"completed the previous one."
msgstr ""
"Последовательная обработка гарантирует, что экземпляр не будет обрабатывать "
"следующий запрос в стриме, пока не завершит работу с предыдущим."

#, fuzzy
msgid ""
"**Interleaving**: For example, a series of requests can include \"begin for "
"stream #1\", \"begin for stream #2\", \"insert for stream #1\", \"insert for"
" stream #2\", \"delete for stream #1\", \"commit for stream #1\", \"rollback"
" for stream #2\"."
msgstr ""
"Чередование допускает, например, такую последовательность запросов: \"begin "
"для стрима 1\", \"begin для стрима 2\", \"insert для стрима 1\", \"insert "
"для стрима 2\", \"delete для стрима 1\", \"commit для стрима 1\", \"rollback"
" для стрима 2\"."

msgid ""
"To work with stream transactions using iproto, the following is required:"
msgstr ""

msgid ""
"The engine should be :ref:`vinyl <engines-vinyl>` or :ref:`memtx with mvcc "
"<cfg_basic-memtx_use_mvcc_engine>`."
msgstr ""

#, fuzzy
msgid ""
"The client is responsible for ensuring that the stream identifier, unsigned "
"integer :ref:`IPROTO_STREAM_ID <box_protocol-iproto_stream_id>`, is in the "
"request header. IPROTO_STREAM_ID can be any positive 64-bit number, and "
"should be unique for the connection. If IPROTO_STREAM_ID equals zero, the "
"server instance will ignore it."
msgstr ""
"Эти процедуры возможны, если используется движок :ref:`vinyl <engines-"
"vinyl>` или :ref:`memtx с mvcc <cfg_basic-memtx_use_mvcc_engine>`. При этом "
"клиент отвечает за наличие идентификатора стрима, беззнакового целого числа "
":ref:`IPROTO_STREAM_ID <box_protocol-iproto_stream_id>`, в заголовке "
"запроса. Идентификатор IPROTO_STREAM_ID должен быть положительным 64-битовым"
" числом, уникальным для соединения. Если IPROTO_STREAM_ID стрима равен нулю,"
" экземпляр его проигнорирует."

msgid "Basic request description"
msgstr ""

msgid "Name"
msgstr ""

msgid "Code"
msgstr ""

msgid "Description"
msgstr ""

msgid ":ref:`IPROTO_BEGIN <box_protocol-begin>`"
msgstr ""

msgid "0x0e"
msgstr ""

msgid "Begin a transaction in the specified stream"
msgstr ""

msgid ":ref:`IPROTO_COMMIT <box_protocol-commit>`"
msgstr ""

msgid "0x0f"
msgstr ""

msgid "Commit the transaction in the specified stream"
msgstr ""

msgid ":ref:`IPROTO_ROLLBACK <box_protocol-rollback>`"
msgstr ""

msgid "0x10"
msgstr ""

msgid "Rollback the transaction in the specified stream"
msgstr ""

msgid "IPROTO_BEGIN"
msgstr ""

msgid "Code: 0x0e."
msgstr ""

msgid ""
"Begin a transaction in the specified stream. See :ref:`stream:begin() "
"<net_box-stream_begin>`. The body is optional and can contain two items:"
msgstr ""

msgid ""
"IPROTO_TIMEOUT is an optional timeout (in seconds). After it expires, the "
"transaction will be rolled back automatically."
msgstr ""

msgid "IPROTO_COMMIT"
msgstr ""

msgid "Code: 0x0f."
msgstr ""

msgid ""
"Commit the transaction in the specified stream. See :ref:`stream:commit() "
"<net_box-stream_commit>`."
msgstr ""

msgid "IPROTO_ROLLBACK"
msgstr ""

msgid "Codde: 0x10."
msgstr ""

msgid ""
"Rollback the transaction in the specified stream. See "
":ref:`stream:rollback() <net_box-stream_rollback>`."
msgstr ""

msgid "Example"
msgstr ""

#, fuzzy
msgid ""
"Suppose that the client has started a stream with the :ref:`net.box module "
"<net_box-module>`"
msgstr ""
"Предположим, что клиент запустил стрим с помощью :ref:`модуля "
"net.box<net_box-module>`."

msgid ""
"net_box = require('net.box')\n"
"conn = net_box.connect('localhost:3302')\n"
"stream = conn:new_stream()"
msgstr ""
"net_box = require('net.box')\n"
"conn = net_box.connect('localhost:3302')\n"
"stream = conn:new_stream()"

msgid ""
"At this point the stream object will look like a duplicate of the conn "
"object, with just one additional member: ``stream_id``. Now, using stream "
"instead of conn, the client sends two requests:"
msgstr ""
"В этот момент объект ``stream`` будет выглядеть так же, как объект ``conn``,"
" но включать один дополнительный элемент: ``stream_id``. Пусть теперь "
"клиент, используя ``stream`` вместо ``conn``, отправит два запроса:"

msgid ""
"stream.space.T:insert{1}\n"
"stream.space.T:insert{2}"
msgstr ""
"stream.space.T:insert{1}\n"
"stream.space.T:insert{2}"

msgid ""
"The header and body of these requests will be the same as in non-stream "
":ref:`IPROTO_INSERT <box_protocol-insert>` requests, except that the header "
"will contain an additional item: IPROTO_STREAM_ID=0x0a with MP_UINT=0x01. It"
" happens to equal 1 for this example because each call to conn:new_stream() "
"assigns a new number, starting with 1."
msgstr ""
"Заголовок и тело этих запросов будут такими же, как в обычных запросах "
":ref:`IPROTO_INSERT <box_protocol-insert>`, но заголовок будет содержать "
"дополнительный элемент ``IPROTO_STREAM_ID=0x0a``, где ``MP_UINT=0x01``. В "
"этом примере значение IPROTO_STREAM_ID равно 1, так как при вызове "
"``conn:new_stream()`` идентификатору каждого нового стрима присваивается "
"уникальное значение, начиная с 1."

msgid "The client makes stream transactions by sending, in order:"
msgstr ""

msgid ""
"IPROTO_BEGIN with an optional transaction timeout in the IPROTO_TIMEOUT "
"field of the request body."
msgstr ""

msgid "The transaction data-change and query requests."
msgstr ""

msgid "IPROTO_COMMIT or IPROTO_ROLLBACK."
msgstr ""

msgid "All these requests must contain the same IPROTO_STREAM_ID value."
msgstr ""

msgid ""
"A rollback will happen automatically if a disconnect occurs or the "
"transaction timeout expires before the commit is possible."
msgstr ""

#, fuzzy
msgid ""
"Thus there are now multiple ways to do transactions: with ``net_box`` "
"``stream:begin()`` and ``stream:commit()`` or ``stream:rollback()`` which "
"cause IPROTO_BEGIN and IPROTO_COMMIT or IPROTO_ROLLBACK with the current "
"value of stream.stream_id; with :ref:`box.begin() <box-begin>` and "
":ref:`box.commit() <box-commit>` or :ref:`box.rollback() <box-rollback>`; "
"with SQL and :ref:`START TRANSACTION <sql_start_transaction>` and "
":ref:`COMMIT <sql_commit>` or :ref:`ROLLBACK <sql_rollback>`. An application"
" can use any or all of these ways."
msgstr ""
"Таким образом, у приложения есть несколько способов выполнять транзакции. "
"Во-первых, можно использовать модуль ``net_box`` с методами "
"``stream:begin()`` и ``stream:commit()``/``stream:rollback()``, которые "
"отправляют запросы IPROTO_BEGIN и IPROTO_COMMIT/IPROTO_ROLLBACK с текущим "
"значением ``stream.stream_id``. Другой способ --- применять методы "
":ref:`box.begin() <box-begin>` и :ref:`box.commit() <box-"
"commit>`/:ref:`box.rollback() <box-rollback>`. Наконец, можно пользоваться "
"инструкциями SQL :ref:`START TRANSACTION <sql_start_transaction>` и "
":ref:`COMMIT <sql_commit>`/:ref:`ROLLBACK <sql_rollback>`."

#~ msgid "Binary protocol -- streams"
#~ msgstr "Бинарный протокол — стримы"

#~ msgid ""
#~ "The client makes stream transactions by sending, in order: IPROTO_BEGIN, the"
#~ " transaction data-change and query requests, IPROTO_COMMIT or "
#~ "IPROTO_ROLLBACK. Each request must contain the same IPROTO_STREAM_ID value. "
#~ "With streaming there is no need to add :ref:`IPROTO_FLAGS <box_protocol-"
#~ "flags>` and IPROTO_FLAG_COMMIT in the header of the last request of a "
#~ "transaction. Rollback will be automatic if disconnect occurs before commit "
#~ "is possible."
#~ msgstr ""
#~ "Клиент запускает транзакцию внутри стрима, отправляя запросы в следующем "
#~ "порядке: IPROTO_BEGIN, запросы на изменение и получение данных транзакции, "
#~ "затем IPROTO_COMMIT или IPROTO_ROLLBACK. Каждый запрос должен содержать "
#~ "переменную IPROTO_STREAM_ID с одним и тем же значением. Используя стримы, не"
#~ " нужно добавлять в заголовок последнего запроса транзакции "
#~ ":ref:`IPROTO_FLAGS <box_protocol-flags>` и IPROTO_FLAG_COMMIT. Если "
#~ "транзакция прервется до того, как можно будет выполнить коммит, она будет "
#~ "автоматически отменена."
