
#, fuzzy
msgid "Module box"
msgstr "Модуль `box`"

msgid "Opaque structure passed to a C stored procedure"
msgstr "Непрозрачная структура, передаваемая в хранимую процедуру на языке C."

msgid "Return a tuple from a C stored procedure."
msgstr "Возврат кортежа с помощью хранимой процедуры на языке C."

msgid ""
"The returned tuple is automatically reference-counted by Tarantool. An "
"example program that uses ``box_return_tuple()`` is :ref:`write.c "
"<f_c_tutorial-write>`."
msgstr ""
"Для возвращаемого кортежа Tarantool проводит автоматический подсчет ссылок. "
"Пример программы, которая использует ``box_return_tuple()``: :ref:`write.c "
"<f_c_tutorial-write>`."

msgid "Parameters"
msgstr "Параметры"

msgid "an opaque structure passed to the C stored procedure by Tarantool"
msgstr ""
"непрозрачная структура, передаваемая Tarantool в хранимую процедуру на языке"
" C"

msgid "a tuple to return"
msgstr "возвращаемый кортеж"

msgid "Returns"
msgstr "Возвращает"

msgid ""
"-1 on error (perhaps, out of memory; check :ref:`box_error_last()<c_api-"
"error-box_error_last>`)"
msgstr ""
"-1 в случае ошибки (возможная нехватка памяти; проверьте "
":ref:`box_error_last()<c_api-error-box_error_last>`)"

msgid "0 otherwise"
msgstr "0 в остальных случаях"

msgid "Return a pointer to a series of bytes in MessagePack format."
msgstr "Возврат указателя на серию байтов в формате MessagePack."

msgid ""
"This can be used instead of :ref:`box_return_tuple() <box-box_return_tuple>`"
" -- it can send the same value, but as MessagePack instead of as a tuple "
"object. It may be simpler than ``box_return_tuple()`` when the result is "
"small, for example a number or a boolean or a short string. It will also be "
"faster than ``box_return_tuple()``, if the result is that users save time by"
" not creating a tuple every time they want to return something from a C "
"function."
msgstr ""
"Можно использовать вместо :ref:`box_return_tuple() <box-box_return_tuple>`: "
"передаст то же значение, но в формате MessagePack, а не в виде кортежа. Это "
"может быть проще, чем ``box_return_tuple()``, если результат будет "
"небольшим, например, число, логическое значение или короткая строка. Кроме "
"того, это экономит время в отличие от ``box_return_tuple()``, если в "
"результате пользователю не приходится создавать кортеж каждый раз, когда он "
"хочет вернуть что-то из функции на C."

msgid ""
"On the other hand, if an already-existing tuple was obtained from an "
"iterator, then it would be faster to return the tuple via "
"``box_return_tuple()`` rather than extracting its parts and sending them via"
" ``box_return_mp()``."
msgstr ""
"С другой стороны, если из итератора получен уже существующий кортеж, то "
"быстрее будет вернуть кортеж через ``box_return_tuple()``, чем извлекать его"
" части и отправлять их через ``box_return_mp()``."

msgid "the first MessagePack byte"
msgstr "первый байт в MessagePack"

msgid "after the last MessagePack byte"
msgstr "после последнего байта в MessagePack"

msgid ""
"For example, if ``mp`` is a buffer, and ``mp_end`` is a return value "
"produced by encoding a single MP_UINT scalar value with "
"``mp_end=mp_encode_uint(mp,1);``, then ``box_return_mp(ctx,mp,mp_end);`` "
"should return ``0``."
msgstr ""
"Например, если ``mp`` — это буфер, а ``mp_end`` — возвращаемое значение, "
"полученное путем кодирования одного скалярного значения MP_UINT с помощью "
"``mp_end=mp_encode_uint(mp,1);``, то ``box_return_mp(ctx,mp,mp_end);`` "
"вернет ``0``."

msgid "Find space id by name."
msgstr "Поиск идентификатора спейса по имени."

msgid ""
"This function performs a SELECT request on the ``_vspace`` system space."
msgstr ""
"Данная функция делает запрос выборки SELECT из системного спейса "
"``_vspace``."

msgid "space name"
msgstr "имя спейса"

msgid "length of ``name``"
msgstr "длина имени ``name``"

msgid ""
":c:macro:`BOX_ID_NIL` on error or if not found (check "
":ref:`box_error_last()<c_api-error-box_error_last>`)"
msgstr ""
":c:macro:`BOX_ID_NIL` в случае ошибки или отсутствия (проверьте "
":ref:`box_error_last()<c_api-error-box_error_last>`)"

msgid "space_id otherwise"
msgstr "space_id в остальных случаях"

msgid "See also: :c:type:`box_index_id_by_name`"
msgstr "См. также :c:type:`box_index_id_by_name`"

msgid "Find index id by name."
msgstr "Поиск идентификатора индекса по имени."

msgid ""
"This function performs a SELECT request on the ``_vindex`` system space."
msgstr ""
"Данная функция делает запрос выборки SELECT из системного спейса "
"``_vindex``."

msgid "space identifier"
msgstr "идентификатор спейса"

msgid "index name"
msgstr "имя индекса"

msgid "See also: :c:type:`box_space_id_by_name`"
msgstr "См. также :c:type:`box_space_id_by_name`"

msgid "Execute an INSERT/REPLACE request."
msgstr "Выполнение запроса вставки или замены (INSERT/REPLACE)."

msgid "encoded tuple in MsgPack Array format ([ field1, field2, ...])"
msgstr ""
"закодированный кортеж в формате MsgPack-массива ([ field1, field2, ...])"

msgid "end of a ``tuple``"
msgstr "конец кортежа ``tuple``"

msgid "output argument. Resulting tuple. Can be set to NULL to discard result"
msgstr ""
"аргумент вывода. Возвращаемый кортеж. Можно задать значение NULL для сброса "
"результата"

msgid ""
"-1 on error (check :ref:`box_error_last()<c_api-error-box_error_last>`)"
msgstr ""
"-1 в случае ошибки (проверьте :ref:`box_error_last()<c_api-error-"
"box_error_last>`)"

#, fuzzy
msgid "See also: :ref:`space_object.insert()<box_space-insert>`"
msgstr "См. также :ref:`space_object.insert()<box_space-insert>`"

msgid "Execute a REPLACE request."
msgstr "Выполнение запроса замены (REPLACE)."

#, fuzzy
msgid "See also: :ref:`space_object.replace()<box_space-replace>`"
msgstr "См. также :ref:`space_object.replace()<box_space-replace>`"

msgid "Execute a DELETE request."
msgstr "Выполнение запроса удаления (DELETE)."

msgid "index identifier"
msgstr "идентификатор индекса"

msgid "encoded key in MsgPack Array format ([ field1, field2, ...])"
msgstr ""
"закодированный ключ в формате MsgPack-массива ([ field1, field2, ...])"

msgid "end of a ``key``"
msgstr "конец ключа ``key``"

msgid "output argument. An old tuple. Can be set to NULL to discard result"
msgstr ""
"аргумент вывода. Старый кортеж. Можно задать значение NULL для сброса "
"результата"

#, fuzzy
msgid "See also: :ref:`space_object.delete()<box_space-delete>`"
msgstr "См. также :ref:`space_object.delete()<box_space-delete>`"

msgid "Execute an UPDATE request."
msgstr "Выполнение запроса обновления (UPDATE)."

msgid ""
"encoded operations in MsgPack Array format, e.g. ``[[ '=', field_id,  value "
"], ['!', 2, 'xxx']]``"
msgstr ""
"закодированные операции в формате MsgPack-массива, например ``[[ '=', "
"field_id, value ], ['!', 2, 'xxx']]``"

msgid "end of an ``ops`` section"
msgstr "конец раздела операций ``ops``"

msgid ""
"0 if field_ids are zero-based as in C, 1 if field ids are 1-based as in Lua"
msgstr ""
"0, если идентификаторы полей field_id с основанием 0, как в C, 1, если "
"идентификаторы полей с основанием 1, как в Lua"

#, fuzzy
msgid "See also: :ref:`space_object.update()<box_space-update>`"
msgstr "См. также :ref:`space_object.update()<box_space-update>`"

msgid "Execute an UPSERT request."
msgstr "Выполнение запроса обновления и вставки (UPSERT)."

msgid "end of a ``ops``"
msgstr "конец операций ``ops``"

#, fuzzy
msgid "See also: :ref:`space_object.upsert()<box_space-upsert>`"
msgstr "См. также :ref:`space_object.upsert()<box_space-upsert>`"

msgid "Truncate a space."
msgstr "Очистка спейса."

msgid ""
"Since version :doc:`2.4.1 </release/2.4.1>`. Push MessagePack data into a "
"session data channel -- socket, console or whatever is behind the session. "
"Behaves just like Lua :doc:`/reference/reference_lua/box_session/push`."
msgstr ""
"С версии :doc:`2.4.1 </release/2.4.1>`. Передача данных в формате "
"MessagePack в канал данных сеанса — сокет, консоль или то, что используется "
"в сеансе. Работает, как :doc:`/reference/reference_lua/box_session/push` в "
"Lua."

msgid "begin of MessagePack to push"
msgstr "начало данных для передачи"

msgid "end of MessagePack to push"
msgstr "конец данных для передачи"

msgid ""
"Since version :doc:`2.4.1 </release/2.4.1>`. Return the last retrieved value"
" of the specified sequence."
msgstr ""
"С версии :doc:`2.4.1 </release/2.4.1>`. Возврат последнего полученного "
"значения из указанной последовательности."

msgid "sequence identifier"
msgstr "идентификатор последовательности"

msgid ""
"pointer to a variable where the current sequence value will be stored on "
"success."
msgstr ""
"указатель на переменную, где будет храниться значение последовательности в "
"случае успеха."

msgid ""
"0 on success and -1 otherwise. In case of an error user could get it via "
"``box_error_last()``."
msgstr ""
"0 при успехе и -1 в обратном случае. В случае ошибки, ее можно получить с "
"помощью ``box_error_last()``."

msgid ""
"Since version :doc:`2.11.0 </release/2.11.0>`. Return the database schema "
"version. A schema version is a number that indicates whether the "
":ref:`database schema <index-box-data_schema_description>` is changed. For "
"example, the ``schema_version`` value grows if a :ref:`space <index-"
"box_space>` or :ref:`index <index-box_index>` is added or deleted, or a "
"space, index, or field name is changed."
msgstr ""

msgid "the database schema version"
msgstr ""

#, fuzzy
msgid "Return type"
msgstr "Возвращает"

msgid "number"
msgstr ""

msgid ""
"See also: :ref:`box.info.schema_version <box_info_schema_version>` and "
":ref:`IPROTO_SCHEMA_VERSION <internals-iproto-keys-schema_version>`"
msgstr ""

#, fuzzy
msgid ""
"Since version :doc:`2.11.0 </release/2.11.0>`. Return the unique identifier "
"(ID) for the current session."
msgstr ""
"С версии :doc:`2.4.1 </release/2.4.1>`. Возврат последнего полученного "
"значения из указанной последовательности."

msgid "the session identifier; 0 or -1 if there is no session"
msgstr ""

#, fuzzy
msgid "See also: :ref:`box.session.id() <box_session-id>`"
msgstr "См. также :ref:`space_object.update()<box_space-update>`"

msgid ""
"Since version :doc:`2.11.0 </release/2.11.0>`. Send an :ref:`IPROTO "
"<internals-iproto-format>` packet over the session's socket with the given "
"MsgPack header and body. The function yields. The function works for binary "
"sessions only. For details, see :ref:`box.session.type() <box_session-"
"type>`."
msgstr ""

msgid ""
"the IPROTO session identifier (see :ref:`box_session_id() "
"<box_box_session_id>`)"
msgstr ""

msgid "a MsgPack-encoded header"
msgstr ""

msgid "end of a header encoded as MsgPack"
msgstr ""

msgid ""
"a MsgPack-encoded body. If the ``body`` and ``body_end`` parameters are "
"omitted, the packet consists of the header only."
msgstr ""

msgid "end of a body encoded as MsgPack"
msgstr ""

#, fuzzy
msgid ""
"0 on success; -1 on error (check :ref:`box_error_last() <c_api-error-"
"box_error_last>`)"
msgstr ""
"-1 в случае ошибки (проверьте :ref:`box_error_last()<c_api-error-"
"box_error_last>`)"

msgid "See also: :ref:`box.iproto.send() <reference_lua-box_iproto_send>`"
msgstr ""

msgid "**Possible errors:**"
msgstr ""

msgid ":errcode:`ER_SESSION_CLOSED` -- the session is closed."
msgstr ""

msgid ":errcode:`ER_NO_SUCH_SESSION` -- the session does not exist."
msgstr ""

msgid ":errcode:`ER_MEMORY_ISSUE` -- out-of-memory limit has been reached."
msgstr ""

msgid ":errcode:`ER_WRONG_SESSION_TYPE` -- the session type is not binary."
msgstr ""

msgid ""
"For details, see `src/box/errcode.h "
"<https://github.com/tarantool/tarantool/blob/master/src/box/errcode.h>`__."
msgstr ""

msgid "**Example**"
msgstr ""

msgid ""
"/* IPROTO constants are not exported to C.\n"
"* That is, the user encodes them by himself.\n"
"*/\n"
"#define IPROTO_REQUEST_TYPE 0x00\n"
"#define IPROTO_OK 0x00\n"
"#define IPROTO_SYNC 0x01\n"
"#define IPROTO_SCHEMA_VERSION 0x05\n"
"#define IPROTO_DATA 0x30\n"
"\n"
"char buf[256] = {};\n"
"char *header = buf;\n"
"char *header_end = header;\n"
"header_end = mp_encode_map(header_end, 3);\n"
"header_end = mp_encode_uint(header_end, IPROTO_REQUEST_TYPE);\n"
"header_end = mp_encode_uint(header_end, IPROTO_OK);\n"
"header_end = mp_encode_uint(header_end, IPROTO_SYNC);\n"
"header_end = mp_encode_uint(header_end, 10);\n"
"header_end = mp_encode_uint(header_end, IPROTO_SCHEMA_VERSION);\n"
"header_end = mp_encode_uint(header_end, box_schema_version());\n"
"\n"
"char *body = header_end;\n"
"char *body_end = body;\n"
"body_end = mp_encode_map(body_end, 1);\n"
"body_end = mp_encode_uint(body_end, IPROTO_DATA);\n"
"body_end = mp_encode_uint(body_end, 1);\n"
"\n"
"/* The packet contains both the header and body. */\n"
"box_iproto_send(box_session_id(), header, header_end, body, body_end);\n"
"\n"
"/* The packet contains the header only. */\n"
"box_iproto_send(box_session_id(), header, header_end, NULL, NULL);"
msgstr ""

msgid ""
"Since version :doc:`2.11.0 </release/2.11.0>`. Set a new IPROTO request "
"handler with the provided context for the given request type. The function "
"yields."
msgstr ""

msgid ""
"IPROTO request type code (for example, ``IPROTO_SELECT``). For details, "
"check :ref:`Client-server requests and responses <internals-"
"requests_responses>`.  To override the handler of unknown request types, use"
" the :ref:`IPROTO_UNKNOWN <internals-iproto-keys-unknown>` type code."
msgstr ""

msgid ""
"IPROTO request type code (for example, ``IPROTO_SELECT``). For details, "
"check :ref:`Client-server requests and responses <internals-"
"requests_responses>`."
msgstr ""

msgid ""
"To override the handler of unknown request types, use the "
":ref:`IPROTO_UNKNOWN <internals-iproto-keys-unknown>` type code."
msgstr ""

msgid ""
"IPROTO request handler. To reset the request handler, set the ``handler`` "
"parameter to ``NULL``. See the full parameter description in the "
":ref:`Handler function <box_box_iproto_override-handler>` section."
msgstr ""

msgid ""
"IPROTO request handler destructor. The destructor is called when the "
"corresponding handler is removed. See the full parameter description in the "
":ref:`Handler destructor function <box_box_iproto_override-destroy>` "
"section."
msgstr ""

msgid "a context passed to the ``handler`` and ``destroy`` callbacks"
msgstr ""

msgid ""
"See also: :ref:`box.iproto.override() <reference_lua-box_iproto_override>`"
msgstr ""

msgid ""
"If a Lua handler throws an exception, the behavior is similar to that of a "
"remote procedure call. The following errors are returned to the client over "
"IPROTO (see `src/lua/utils.h "
"<https://github.com/tarantool/tarantool/blob/dec0e0221e183fa972efa65bb0fb658112f2196f/src/lua/utils.h#L366-L371>`__):"
msgstr ""

msgid ""
":errcode:`ER_PROC_LUA` -- an exception is thrown from a Lua handler, "
"diagnostic is not set."
msgstr ""

msgid ""
"diagnostics from ``src/box/errcode.h`` -- an exception is thrown, diagnostic"
" is set."
msgstr ""

msgid "**Handler function**"
msgstr ""

msgid "The signature of a handler function (the ``handler`` parameter):"
msgstr ""

msgid ""
"enum iproto_handler_status {\n"
"        IPROTO_HANDLER_OK,\n"
"        IPROTO_HANDLER_ERROR,\n"
"        IPROTO_HANDLER_FALLBACK,\n"
"}\n"
"\n"
"typedef enum iproto_handler_status\n"
"(*iproto_handler_t)(const char *header, const char *header_end,\n"
"                    const char *body, const char *body_end, void *ctx);"
msgstr ""

msgid "where:"
msgstr ""

msgid "``header`` (const char*) -- a MsgPack-encoded header"
msgstr ""

msgid "``header_end`` (const char*) -- end of a header encoded as MsgPack"
msgstr ""

msgid "``body`` (const char*) -- a MsgPack-encoded body"
msgstr ""

msgid "``header_end`` (const char*) -- end of a body encoded as MsgPack"
msgstr ""

msgid "The handler returns a status code. Possible statuses:"
msgstr ""

msgid "``IPROTO_REQUEST_HANDLER_OK`` -- success"
msgstr ""

msgid ""
"``IPROTO_REQUEST_HANDLER_ERROR`` -- error, diagnostic must be set by handler"
" (see :ref:`box_error_set() <c_api-error-box_error_set>` and "
":ref:`box_error_raise() <c_api-error-box_error_raise>`)"
msgstr ""

msgid "``IPROTO_REQUEST_HANDLER_FALLBACK`` -- fallback to the default handler"
msgstr ""

msgid "**Handler destructor function**"
msgstr ""

msgid ""
"The destructor is called when the handler is reset. The signature of a "
"destructor function (the ``destroy`` parameter):"
msgstr ""

msgid "typedef void (*iproto_handler_destroy_t)(void *ctx);"
msgstr ""

msgid ""
"``ctx`` (void*): the context provided by ``box_iproto_override()`` function."
msgstr ""

msgid "**Examples**"
msgstr ""

msgid ""
"box_iproto_override(1000, iproto_request_handler_с, NULL)\n"
"box_iproto_override(IPROTO_SELECT, iproto_request_handler_с, (uintptr_t)23)\n"
"box_iproto_override(IPROTO_SELECT, NULL, NULL)\n"
"box_iproto_override(IPROTO_UNKNOWN, iproto_unknown_request_handler_с, &ctx)"
msgstr ""
