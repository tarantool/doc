# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-06 14:05+0000\n"
"PO-Revision-Date: 2019-11-14 20:46+0300\n"
"Last-Translator: \n"
"Language: ru\n"
"Language-Team: \n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

msgid "Module `tuple`"
msgstr "Модуль `tuple`"

msgid "Tuple format."
msgstr "Формат кортежа."

msgid ""
"Each Tuple has an associated format (class). Default format is used to "
"create tuples which are not attached to any particular space."
msgstr ""
"Каждому кортежу соответствует определенный формат (класс). По умолчанию, "
"используется формат для создания кортежей, не привязанных к определенному"
" спейсу."

msgid "Tuple"
msgstr "Кортеж"

msgid "Allocate and initialize a new tuple from raw MsgPack Array data."
msgstr "Выделение и инициализация нового кортежа из сырых данных MsgPack-массива."

msgid "Parameters"
msgstr "Параметры"

msgid ""
"tuple format. Use :ref:`box_tuple_format_default()<c_api-tuple-"
"box_tuple_format_default>` to create space-independent tuple."
msgstr ""
"формат кортежа. Используйте :ref:`box_tuple_format_default()<c_api-tuple-"
"box_tuple_format_default>` для создания кортежа независимо от спейса."

msgid "tuple data in MsgPack Array format ([field1, field2, ...])"
msgstr "данные кортежа в формате MsgPack-массива ([ field1, field2, ...])"

msgid "the end of ``data``"
msgstr "конец данных ``data``"

msgid "Returns"
msgstr "Возвращает"

msgid "NULL on out of memory"
msgstr "NULL при нехватке памяти"

msgid "tuple otherwise"
msgstr "в остальных случаях кортеж"

msgid "See also: :ref:`box.tuple.new()<box_tuple-new>`"
msgstr "См. также :ref:`box.tuple.new()<box_tuple-new>`"

msgid ""
"When working with tuples, it is the developer's responsibility to ensure "
"that enough space is allocated, taking especial caution when writing to "
"them with msgpuck functions such as ``mp_encode_array()``."
msgstr ""
"При работе с кортежами в обязанности разработчика входит выделение "
"достаточного места, уделяя особое внимание записи данных с помощью таких "
"msgpuck-функций, как ``mp_encode_array()``."

msgid "Increase the reference counter of tuple."
msgstr "Увеличение значения счетчика количества ссылок на кортеж."

msgid ""
"Tuples are reference counted. All functions that return tuples guarantee "
"that the last returned tuple is reference counted internally until the "
"next call to API function that yields or returns another tuple."
msgstr ""
"Для кортежей подсчитываются ссылки. Все функции, которые возвращают "
"кортежи, обеспечивают внутренний подсчет ссылок для последнего "
"возвращенного кортежа до следующего вызова API-функции, которая передает "
"управление или возвращает другой кортеж."

msgid ""
"You should increase the reference counter before taking tuples for long "
"processing in your code. The Lua garbage collector will not destroy a "
"tuple that has references, even if another fiber removes them from a "
"space. After processing, decrement the reference counter using "
":ref:`box_tuple_unref()<c_api-tuple-box_tuple_unref>`, otherwise the "
"tuple will leak."
msgstr ""
"Следует увеличивать значение счетчика количества ссылок перед длительной "
"обработкой кортежей в коде. Сборщик мусора в Lua не будет удалять кортежи"
" с ссылками, даже если другой файбер удалит их из спейса. После обработки"
" уменьшите значение счетчика количества ссылок с помощью "
":ref:`box_tuple_unref()<c_api-tuple-box_tuple_unref>`, иначе кортеж будет"
" допускать утечку."

msgid "a tuple"
msgstr "кортеж"

msgid "-1 on error"
msgstr "-1 в случае ошибки"

msgid "0 otherwise"
msgstr "0 в остальных случаях"

msgid "See also: :ref:`box_tuple_unref()<c_api-tuple-box_tuple_unref>`"
msgstr "См. также :ref:`box_tuple_unref()<c_api-tuple-box_tuple_unref>`"

msgid "Decrease the reference counter of tuple."
msgstr "Увеличение значения счетчика количества ссылок на кортеж."

msgid "See also: :ref:`box_tuple_ref()<c_api-tuple-box_tuple_ref>`"
msgstr "См. также :ref:`box_tuple_ref()<c_api-tuple-box_tuple_ref>`"

msgid "Return the number of fields in a tuple (the size of MsgPack Array)."
msgstr "Возврат количества полей в кортеже (размер MsgPack-массива)."

msgid ""
"Return the number of bytes used to store internal tuple data (MsgPack "
"Array)."
msgstr ""
"Возврат количества байтов, используемых для хранения внутренних данных "
"кортежа (MsgPack-массив)."

msgid "Dump raw MsgPack data to the memory buffer ``buf`` of size ``size``."
msgstr "Передача сырых MsgPack-данных в буфер памяти ``buf`` размера ``size``."

msgid "Store tuple fields in the memory buffer."
msgstr "Хранение полей кортежа в буфере памяти."

msgid ""
"Upon successful return, the function returns the number of bytes written."
" If buffer size is not enough then the return value is the number of "
"bytes which would have been written if enough space had been available."
msgstr ""
"При успешном выполнении функция возвращает количество записанных байтов. "
"Если размер буфера недостаточный, возвращается количество байтов, которое"
" было бы записано, если бы было достаточно места."

msgid "number of bytes written on success."
msgstr "количество записанных байтов при успешном выполнении."

msgid "Return the associated format."
msgstr "Возврат взаимосвязанного формата."

msgid "tuple format"
msgstr "формат кортежа"

msgid ""
"Return the raw tuple field in MsgPack format. The result is a pointer to "
"raw MessagePack data which can be decoded with mp_decode functions, for "
"an example see the tutorial program :ref:`read.c <f_c_tutorial-read>`."
msgstr ""
"Возврат поля кортежа в MsgPack-формате. Результатом будет указатель на "
"сырые данные в формате MessagePack, которые можно расшифровать с помощью "
"функций mp_decode. Пример можно увидеть в программе практикума "
":ref:`read.c <f_c_tutorial-read>`."

msgid "The buffer is valid until the next call to a ``box_tuple_*`` function."
msgstr "Буфер действует до следующего вызова функции ``box_tuple_*``."

msgid "zero-based index in MsgPack array."
msgstr "индекс с основанием 0 в MsgPack-массиве."

msgid ""
"NULL if i >= :ref:`box_tuple_field_count()<c_api-tuple-"
"box_tuple_field_count>`"
msgstr ""
"NULL, если i >= :ref:`box_tuple_field_count()<c_api-tuple-"
"box_tuple_field_count>`"

msgid "msgpack otherwise"
msgstr "в остальных случаях msgpack"

msgid "Possible data types for tuple fields."
msgstr "Допустимые типы данных для полей кортежа."

msgid ""
"One cannot use STRS/ENUM macros for types because there is a mismatch "
"between enum name (STRING) and type name literal (\"STR\"). STR is "
"already used as a type in Objective C."
msgstr ""
"Нельзя использовать макросы STRS/ENUM для типов, поскольку есть "
"несоответствие между именем enum (STRING) и литералом имени типа "
"(\"STR\"). STR уже используется в качестве типа в Objective-C."

msgid "Key definition"
msgstr "Определение ключа"

msgid ""
"Create a key definition with the key fields with passed types on passed "
"positions."
msgstr ""
"Создание определения ключа с полям ключа с переданными типами по "
"переданным позициям."

msgid "May be used for tuple format creation and/or tuple comparison."
msgstr ""
"Можно использовать для создания формата кортежа и/или сопоставления "
"кортежей."

msgid "array with key field identifiers"
msgstr "массив с идентификаторами поля ключа"

msgid "array with key :ref:`field types <capi-tuple_field_type>`"
msgstr "массив с :ref:`типами поля <capi-tuple_field_type>` ключа"

msgid "the number of key fields"
msgstr "количество полей ключа"

msgid "key definition on success"
msgstr "определение ключа, если выполнено"

msgid "NULL on error"
msgstr "NULL в случае ошибки"

msgid "Delete a key definition"
msgstr "Удаление определения ключа"

msgid "key definition to delete"
msgstr "удаляемое определение ключа"

msgid "Return new in-memory tuple format based on passed key definitions"
msgstr "Возврат нового формата кортежа на основании переданных определений ключа"

msgid "array of keys defined for the format"
msgstr "массив ключей, определенный для формата"

msgid "count of keys"
msgstr "количество ключей"

msgid "new tuple format on success"
msgstr "новый формат кортежа, если выполнено"

msgid "Increment tuple format reference count"
msgstr "Увеличение значения подсчета ссылок на формат кортежа"

msgid "tuple format to ref"
msgstr "формат кортежа для ссылок"

msgid "Decrement tuple format reference count"
msgstr "Уменьшение значения подсчета ссылок на формат кортежа"

msgid "tuple format to unref"
msgstr "формат кортежа для уменьшения"

msgid "Compare tuples using key definition"
msgstr "Сопоставление кортежей, используя определение ключа"

msgid "the first tuple"
msgstr "первый кортеж"

msgid "the second tuple"
msgstr "второй кортеж"

msgid "key definition"
msgstr "определение ключа"

msgid "0  if ``key_fields(tuple_a)`` == ``key_fields(tuple_b)``"
msgstr "0, если ``key_fields(tuple_a)`` == ``key_fields(tuple_b)``"

msgid "<0 if ``key_fields(tuple_a)`` < ``key_fields(tuple_b)``"
msgstr "<0, если ``key_fields(tuple_a)`` < ``key_fields(tuple_b)``"

msgid ">0 if ``key_fields(tuple_a)`` > ``key_fields(tuple_b)``"
msgstr ">0, если ``key_fields(tuple_a)`` > ``key_fields(tuple_b)``"

msgid "See also: enum :ref:`field_type <capi-tuple_field_type>`"
msgstr "См. также enum :ref:`field_type <capi-tuple_field_type>`"

msgid "Compare a tuple with a key using key definition"
msgstr "Сопоставление кортежа с ключом, используя определение ключа"

msgid "tuple"
msgstr "кортеж"

msgid "key with MessagePack array header"
msgstr "ключ с заголовком MessagePack-массива"

msgid "0  if ``key_fields(tuple)`` == ``parts(key)``"
msgstr "0, если ``key_fields(tuple)`` == ``parts(key)``"

msgid "<0 if ``key_fields(tuple)`` < ``parts(key)``"
msgstr "<0, если ``key_fields(tuple)`` < ``parts(key)``"

msgid ">0 if ``key_fields(tuple)`` > ``parts(key)``"
msgstr ">0, если ``key_fields(tuple)`` > ``parts(key)``"

msgid "Tuple iterator"
msgstr "Итератор кортежей"

msgid ""
"Allocate and initialize a new tuple iterator. The tuple iterator allows "
"iterating over fields at the root level of a MsgPack array."
msgstr ""
"Выделение и инициализация нового итератора кортежей. Итератор кортежей "
"позволяет проводить итерацию по полям на корневом уровне MsgPack-массива."

msgid "**Example:**"
msgstr "**Пример:**"

msgid ""
"box_tuple_iterator_t* it = box_tuple_iterator(tuple);\n"
"if (it == NULL) {\n"
"    // error handling using box_error_last()\n"
"}\n"
"const char* field;\n"
"while (field = box_tuple_next(it)) {\n"
"    // process raw MsgPack data\n"
"}\n"
"\n"
"// rewind the iterator to the first position\n"
"box_tuple_rewind(it)\n"
"assert(box_tuple_position(it) == 0);\n"
"\n"
"// rewind three fields\n"
"field = box_tuple_seek(it, 3);\n"
"assert(box_tuple_position(it) == 4);\n"
"\n"
"box_iterator_free(it);"
msgstr ""
"box_tuple_iterator_t* it = box_tuple_iterator(tuple);\n"
"if (it == NULL) {\n"
"    // обработка ошибок с помощью box_error_last()\n"
"}\n"
"const char* field;\n"
"while (field = box_tuple_next(it)) {\n"
"    // обработка сырых MsgPack-данных\n"
"}\n"
"\n"
"// перемотка итератора на начальное положение\n"
"box_tuple_rewind(it)\n"
"assert(box_tuple_position(it) == 0);\n"
"\n"
"// перемотка на три поля\n"
"field = box_tuple_seek(it, 3);\n"
"assert(box_tuple_position(it) == 4);\n"
"\n"
"box_iterator_free(it);"

msgid "Destroy and free tuple iterator"
msgstr "Удаление и освобождение итератора кортежей"

msgid ""
"Return zero-based next position in iterator. That is, this function "
"returnы the field id of the field that will be returned by the next call "
"to :ref:`box_tuple_next()<c_api-tuple-box_tuple_next>`. Returned value is"
" zero after initialization or rewind and :ref:`box_tuple_field_count"
"()<c_api-tuple-box_tuple_field_count>` after the end of iteration."
msgstr ""
"Возврат следующего положения с основанием 0 в итераторе. То есть функция "
"возвращает идентификатор поля, который вернется при следующем вызове "
":ref:`box_tuple_next()<c_api-tuple-box_tuple_next>`. Возвращается "
"значение 0 после инициализации или перемотки и "
":ref:`box_tuple_field_count()<c_api-tuple-box_tuple_field_count>` по "
"окончании итерации."

msgid "a tuple iterator"
msgstr "итератор кортежей"

msgid "position"
msgstr "положение"

msgid "Rewind iterator to the initial position."
msgstr "Перемотка итератора в начальное положение."

msgid "After: ``box_tuple_position(it) == 0``"
msgstr "После: ``box_tuple_position(it) == 0``"

msgid "Seek the tuple iterator."
msgstr "Поиск итератора кортежей."

msgid ""
"The result is a pointer to raw MessagePack data which can be decoded with"
" mp_decode functions, for an example see the tutorial program "
":ref:`read.c <f_c_tutorial-read>`. The returned buffer is valid until the"
" next call to ``box_tuple_*`` API. The requested ``field_no`` is returned"
" by the next call to ``box_tuple_next(it)``."
msgstr ""
"Результатом будет указатель на сырые MessagePack-данные, которые можно "
"расшифровать с помощью функций ``mp_decode``. Пример можно увидеть в "
"программе практикума :ref:`read.c <f_c_tutorial-read>`. Возвращаемый "
"буфер действует до следующего вызова API ``box_tuple_*`` . Запрашиваемый "
"номер поля ``field_no`` возвращается при следующем вызове "
"``box_tuple_next(it)``."

msgid "field number - zero-based position in MsgPack array"
msgstr "номер поля -- положение с основанием 0 в MsgPack-массиве"

msgid "After:"
msgstr "После:"

msgid "``box_tuple_position(it) == field_not`` if returned value is not NULL."
msgstr "``box_tuple_position(it) == field_not``, если возвращается не NULL."

msgid ""
"``box_tuple_position(it) == box_tuple_field_count(tuple)`` if returned "
"value is NULL."
msgstr ""
"``box_tuple_position(it) == box_tuple_field_count(tuple)``, если "
"возвращается NULL."

msgid "Return the next tuple field from tuple iterator."
msgstr "Возврат следующего поля кортежа из итератора кортежей."

msgid ""
"The result is a pointer to raw MessagePack data which can be decoded with"
" mp_decode functions, for an example see the tutorial program "
":ref:`read.c <f_c_tutorial-read>`. The returned buffer is valid until "
"next call to ``box_tuple_*`` API."
msgstr ""
"Результатом будет указатель на сырые MessagePack-данные, которые можно "
"расшифровать с помощью функций mp_decode. Пример можно увидеть в "
"программе практикума :ref:`read.c <f_c_tutorial-read>`. Возвращаемый "
"буфер действует до следующего вызова API ``box_tuple_*``."

msgid "NULL if there are no more fields"
msgstr "NULL, если полей больше нет"

msgid "MsgPack otherwise"
msgstr "в остальных случаях MsgPack"

msgid ""
"Before: :ref:`box_tuple_position()<c_api-tuple-box_tuple_position>` is "
"zero-based ID of returned field."
msgstr ""
"Ранее: :ref:`box_tuple_position()<c_api-tuple-box_tuple_position>` -- это"
" идентификатор с основанием 0 возвращаемого поля."

msgid ""
"After: ``box_tuple_position(it) == box_tuple_field_count(tuple)`` if "
"returned value is NULL."
msgstr ""
"После: ``box_tuple_position(it) == box_tuple_field_count(tuple)``, если "
"возвращается NULL."
