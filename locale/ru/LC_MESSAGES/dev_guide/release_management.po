
msgid "Release management"
msgstr "Управление версиями"

msgid "Release policy"
msgstr "Политика управления версия"

msgid "A Tarantool release is identified by three digits, for example, 1.10.7:"
msgstr ""

msgid ""
"The first digit stands for a MAJOR release series that introduces some "
"*major changes*. Up to now, there has been only one major release jump "
"when we delivered the 2.x release series with the SQL support."
msgstr ""

msgid ""
"The second digit stands for a MINOR release series that is used for "
"introducing new *features*. :ref:`Backward incompatible changes "
"<backward-incompatible>` are possible between these release series."
msgstr ""

msgid ""
"The third digit is for PATCH releases by which we reflect how stable the "
"MINOR release series is:"
msgstr ""

msgid "``0`` meaning **alpha**"
msgstr ""

msgid "``1`` meaning **beta**"
msgstr ""

msgid "``2`` and above meaning **stable**."
msgstr ""

msgid ""
"So, each MINOR release series goes through a development-maturity life "
"cycle as follows:"
msgstr ""

msgid ""
"**Alpha**. Once a quarter, we start off with a new alpha version, such as"
" 2.3.0, 2.4.0, and so on. This is not what an alpha release usually means"
" in the typical software release life cycle but rather the current trunk "
"version which is under heavy development and can be unstable. The current"
" alpha version always lives in the master branch."
msgstr ""

msgid ""
"**Beta**. When all the features planned are implemented, we fork a new "
"branch from the master branch and tag it as a new beta version. It "
"contains ``1`` for the PATCH digit, e.g., 2.3.1, 2.4.1, and so on. This "
"version cannot be called stable yet (feature freeze has just been done) "
"although there are no known critical regressions in it since the last "
"stable release."
msgstr ""

msgid ""
"**Stable**. Finally, after we see our beta version runs successfully in a"
" production or development environment during another quarter while we "
"fix incoming bugs, we declare this version stable. It is tagged with "
"``2`` for the PATCH digit, e.g., 2.3.2, 2.4.2, and so on."
msgstr ""

msgid ""
"We support such version for 3 months while making another stable release "
"by fixing all bugs found. We release it in a quarter. This last tag "
"contains ``3`` for the PATCH digit, e.g., 2.3.3, 2.4.3, and so on. After "
"the tag is set, no new changes are allowed to the release branch, and it "
"is declared deprecated and superseded by a newer MINOR version."
msgstr ""

msgid ""
"Stable versions don't receive any new features and only get backward "
"compatible fixes."
msgstr ""

msgid ""
"Like Ubuntu, in terms of support, we distinguish between two kinds of "
"stable release series:"
msgstr ""

msgid ""
"**LTS (Long Term Support)** is a release series that is supported for 3 "
"years (community) and up to 5 years (paying customers). Current LTS "
"release series is 1.10, and it receives only PATCH level releases."
msgstr ""

msgid ""
"**Standard** is a release series that is supported only for a few months "
"until the next release series enters the stable state."
msgstr ""

msgid ""
"Below is a diagram that illustrates the release sequence issuing "
"described above by an example of some latest releases and release series:"
msgstr ""

msgid ""
"1.10 series -- 1.10.4 -- 1.10.5 -- 1.10.6 -- 1.10.7\n"
"(LTS)\n"
"\n"
"....\n"
"\n"
"2.2 series --- 2.2.1 --- 2.2.2 --- 2.2.3 (end of support)\n"
"                 |\n"
"                 V\n"
"2.3 series ... 2.3.0 --- 2.3.1 --- 2.3.2 --- 2.3.3 (end of support)\n"
"                           |\n"
"                           V\n"
"2.4 series ............. 2.4.0 --- 2.4.1 --- 2.4.2\n"
"                                     |\n"
"                                     V\n"
"2.5 series ....................... 2.5.0 --- 2.5.1\n"
"                                               |\n"
"                                               V\n"
"2.6 series ................................. 2.6.0\n"
"\n"
"-----------------|---------|---------|---------|------> (time)\n"
"                   1/4 yr.   1/4 yr.   1/4 yr."
msgstr ""

msgid ""
"*Support* means that we continue fixing bugs. We add bug fixes "
"simultaneously into the following release series: LTS, last stable, beta,"
" and alpha. If we look at the release diagram above, it means that the "
"bug fixes are to be added into 1.10, 2.4, 2.5, and 2.6 release series."
msgstr ""

msgid ""
"To sum it up, once a quarter we release (see the release diagram above "
"for reference):"
msgstr ""

msgid "next LTS release, e.g., 1.10.7"
msgstr ""

msgid "two stable releases, e.g., 2.3.3 and 2.4.2"
msgstr ""

msgid "beta version of the next release series, e.g., 2.5.1."
msgstr ""

msgid ""
"In all supported releases, when we find and fix an outstanding "
"CVE/vulnerability, we deliver a patch for that but do not tag a new PATCH"
" level version. Users will be informed about such critical patches via "
"the official Tarantool news channel (`tarantool_news "
"<https://t.me/tarantool_news>`_)."
msgstr ""

msgid ""
"We also publish nightly builds, and use the fourth slot in the version "
"identifier to designate the nightly build number."
msgstr ""
"Мы также публикуем ночные сборки и используем четвертый слот в "
"идентификаторе версии для обозначения номера ночной сборки."

msgid ""
"A release series may introduce backward incompatible changes in a sense "
"that existing Lua, SQL or C code that are run on a current release series"
" may not be run with the same effect on a future series. However, we "
"don't exploit this rule and don't make incompatible changes without "
"appropriate reason. We usually deliver information how mature a "
"functionality is via release notes."
msgstr ""

msgid ""
"Please note that binary data layout is always compatible with the "
"previous series as well as with the LTS series (an instance of ``X.Y`` "
"version can be started on top of ``X.(Y+1)`` or ``1.10.z`` data); binary "
"protocol is compatible too (client-server as well as replication "
"protocol)."
msgstr ""

msgid "Release list"
msgstr ""

msgid ""
"Below is the table containing all Tarantool releases starting from 1.10.0"
" up to the current latest versions (as of September 1, 2020). For each "
"release series, releases are sorted out as alpha, beta, and stable ones."
msgstr ""

msgid "Release series"
msgstr ""

msgid "Alpha"
msgstr ""

msgid "Beta"
msgstr ""

msgid "Stable"
msgstr ""

msgid "1.10 (LTS)"
msgstr ""

msgid "1.10.0"
msgstr ""

msgid "1.10.1"
msgstr ""

msgid "1.10.2 1.10.3 1.10.4 1.10.5 1.10.6 1.10.7"
msgstr ""

msgid "2.1"
msgstr ""

msgid "2.1.0"
msgstr ""

msgid "2.1.1"
msgstr ""

msgid "2.1.2 2.1.3"
msgstr ""

msgid "2.2"
msgstr ""

msgid "2.2.0"
msgstr ""

msgid "2.2.1"
msgstr ""

msgid "2.2.2 2.2.3"
msgstr ""

msgid "2.3"
msgstr ""

msgid "2.3.0"
msgstr ""

msgid "2.3.1"
msgstr ""

msgid "2.3.2 2.3.3"
msgstr ""

msgid "2.4"
msgstr ""

msgid "2.4.0"
msgstr ""

msgid "2.4.1"
msgstr ""

msgid "2.4.2"
msgstr ""

msgid "2.5"
msgstr ""

msgid "2.5.0"
msgstr ""

msgid "2.5.1"
msgstr ""

msgid "2.6"
msgstr ""

msgid "2.6.0"
msgstr ""

msgid "How to make a minor release"
msgstr "Как собрать минорную версию"

msgid ""
"$ git tag -a 2.4 -m \"Next minor in 2.x series\"\n"
"$ vim CMakeLists.txt # edit CPACK_PACKAGE_VERSION_PATCH\n"
"$ git push --tags"
msgstr ""
"$ git tag -a 2.4 -m \"Next minor in 2.x series\"\n"
"$ vim CMakeLists.txt # редактировать CPACK_PACKAGE_VERSION_PATCH\n"
"$ git push --tags"

msgid ""
"A tag which is made on a git branch can be taken along with a merge, or "
"left on the branch. The technique to \"keep the tag on the branch it was "
"originally set on\" is to use ``--no-fast-forward`` when merging this "
"branch."
msgstr ""
"Тег, который делается на ветке git, можно забрать при слиянии или "
"оставить на ветке. Метод \"сохранить тег на ветке, на которой он был "
"первоначально установлен\", заключается в использовании ``--no-fast-"
"forward`` при слиянии этой ветки."

msgid ""
"With ``--no-ff``, a merge changeset is created to represent the received "
"changes, and only that merge changeset ends up in the destination branch."
" This technique can be useful when there are two active lines of "
"development, e.g. \"stable\" and \"next\", and it's necessary to be able "
"to tag both lines independently."
msgstr ""
"С помощью ``--no-ff`` создается набор изменений при слиянии для пояснения"
" полученных изменений, и только этот набор изменений при слиянии "
"оказывается в ветке назначения. Этот метод можно использовать, когда есть"
" две активные линии разработки, например, \"стабильная\" и \"следующая\","
" и необходимо иметь возможность помечать тегами линии независимо друг от "
"друга."

msgid ""
"To make sure that a tag doesn't end up in the destination branch, it is "
"necessary to have the commit to which the tag is attached, \"stay on the "
"original branch\". That's exactly what a merge with disabled \"fast-"
"forward\" does -- creates a \"merge\" commit and adds it to both "
"branches."
msgstr ""
"Чтобы убедиться, что тег не окажется в ветке назначения, необходимо, "
"чтобы коммит, к которому привязан тег, остался в исходной ветке. Это и "
"происходит при отключенном \"fast-forward\" -- создается коммит для "
"слияния и добавляется в обе ветки."

msgid "Here's what it may look like:"
msgstr "Вот как это может выглядеть:"

msgid ""
"kostja@shmita:~/work/tarantool$ git checkout master\n"
"Already on 'master'\n"
"kostja@shmita:~/work/tarantool$ git tag -a 2.4 -m \"Next development\"\n"
"kostja@shmita:~/work/tarantool$ git describe\n"
"2.4\n"
"kostja@shmita:~/work/tarantool$ git checkout master-stable\n"
"Switched to branch 'master-stable'\n"
"kostja@shmita:~/work/tarantool$ git tag -a 2.3 -m \"Next stable\"\n"
"kostja@shmita:~/work/tarantool$ git describe\n"
"2.3\n"
"kostja@shmita:~/work/tarantool$ git checkout master\n"
"Switched to branch 'master'\n"
"kostja@shmita:~/work/tarantool$ git describe\n"
"2.4\n"
"kostja@shmita:~/work/tarantool$ git merge --no-ff master-stable\n"
"Auto-merging CMakeLists.txt\n"
"Merge made by recursive.\n"
" CMakeLists.txt |    1 +\n"
" 1 files changed, 1 insertions(+), 0 deletions(-)\n"
"kostja@shmita:~/work/tarantool$ git describe\n"
"2.4.0-0-g0a98576"
msgstr ""
"kostja@shmita:~/work/tarantool$ git checkout master\n"
"Already on 'master'\n"
"kostja@shmita:~/work/tarantool$ git tag -a 2.4 -m \"Next development\"\n"
"kostja@shmita:~/work/tarantool$ git describe\n"
"2.4\n"
"kostja@shmita:~/work/tarantool$ git checkout master-stable\n"
"Switched to branch 'master-stable'\n"
"kostja@shmita:~/work/tarantool$ git tag -a 2.3 -m \"Next stable\"\n"
"kostja@shmita:~/work/tarantool$ git describe\n"
"2.3\n"
"kostja@shmita:~/work/tarantool$ git checkout master\n"
"Switched to branch 'master'\n"
"kostja@shmita:~/work/tarantool$ git describe\n"
"2.4\n"
"kostja@shmita:~/work/tarantool$ git merge --no-ff master-stable\n"
"Auto-merging CMakeLists.txt\n"
"Merge made by recursive.\n"
" CMakeLists.txt |    1 +\n"
" 1 files changed, 1 insertions(+), 0 deletions(-)\n"
"kostja@shmita:~/work/tarantool$ git describe\n"
"2.4.0-0-g0a98576"

msgid "Also, don't forget this:"
msgstr "Кроме того, следует помнить:"

msgid "Update all issues. Upload the ChangeLog based on ``git log`` output."
msgstr ""
"Обновляйте все задачи. Обновляйте журнал изменений ChangeLog на основании"
" вывода ``git log``."

msgid ""
"The ChangeLog must only include items which are mentioned as issues on "
"GitHub. If anything significant is there, which is not mentioned, "
"something went wrong in release planning and the release should be held "
"up until this is cleared."
msgstr ""
"Журнал изменений ChangeLog должен включать в себя только пункты, "
"указанные в задачах на GitHub. Если что-то значительное не указано, "
"значит, что-то пошло не так при планировании версии, и ее выход следует "
"отложить до выяснения причин."

msgid ""
"Click 'Release milestone'. Create a milestone for the next minor release."
" Alert the driver to target bugs and blueprints to the new milestone."
msgstr ""
"Нажимайте 'Release milestone' (создать промежуточную версию). Создавайте "
"промежуточные версии для следующей минорной версии. Указывайте драйверу "
"на дефекты и проекты для новой промежуточной версии."
