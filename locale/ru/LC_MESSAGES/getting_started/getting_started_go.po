msgid ""
msgstr ""
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"X-Crowdin-Project: tarantool-docs\n"
"X-Crowdin-Project-ID: 442986\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /en/getting_started/getting_started_go.pot\n"
"X-Crowdin-File-ID: 1124\n"
"Project-Id-Version: tarantool-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Russian\n"
"Language: ru_RU\n"
"PO-Revision-Date: 2021-04-23 11:58\n"

msgid "Connecting from Go"
msgstr "Подключение из Go"

msgid "Pre-requisites"
msgstr "Подготовка"

msgid "Before we proceed:"
msgstr "Перед тем как идти дальше, выполним следующие действия:"

msgid "`Install <https://github.com/tarantool/go-tarantool#installation>`__ the ``go-tarantool`` library."
msgstr "`Установим <https://github.com/tarantool/go-tarantool#installation>`__ библиотеку ``go-tarantool``."

msgid ":ref:`Start <getting_started_db>` Tarantool (locally or in Docker) and make sure that you have created and populated a database as we suggested :ref:`earlier <creating-db-locally>`:"
msgstr ":ref:`Запустим <getting_started_db>` Tarantool (локально или в Docker) и обязательно создадим базу данных с тестовыми данными, как показано в :ref:`предыдущем разделе <creating-db-locally>`:"

msgid "box.cfg{listen = 3301}\n"
"s = box.schema.space.create('tester')\n"
"s:format({\n"
"         {name = 'id', type = 'unsigned'},\n"
"         {name = 'band_name', type = 'string'},\n"
"         {name = 'year', type = 'unsigned'}\n"
"         })\n"
"s:create_index('primary', {\n"
"         type = 'hash',\n"
"         parts = {'id'}\n"
"         })\n"
"s:create_index('secondary', {\n"
"         type = 'hash',\n"
"         parts = {'band_name'}\n"
"         })\n"
"s:insert{1, 'Roxette', 1986}\n"
"s:insert{2, 'Scorpions', 2015}\n"
"s:insert{3, 'Ace of Base', 1993}"
msgstr "box.cfg{listen = 3301}\n"
"s = box.schema.space.create('tester')\n"
"s:format({\n"
"         {name = 'id', type = 'unsigned'},\n"
"         {name = 'band_name', type = 'string'},\n"
"         {name = 'year', type = 'unsigned'}\n"
"         })\n"
"s:create_index('primary', {\n"
"         type = 'hash',\n"
"         parts = {'id'}\n"
"         })\n"
"s:create_index('secondary', {\n"
"         type = 'hash',\n"
"         parts = {'band_name'}\n"
"         })\n"
"s:insert{1, 'Roxette', 1986}\n"
"s:insert{2, 'Scorpions', 2015}\n"
"s:insert{3, 'Ace of Base', 1993}"

msgid "Please do not close the terminal window where Tarantool is running -- you'll need it soon."
msgstr "Не закрывайте окно терминала с запущенным Tarantool -- оно пригодится нам позднее."

msgid "In order to connect to Tarantool as an administrator, reset the password for the ``admin`` user:"
msgstr "Чтобы иметь возможность подключаться к Tarantool в качестве администратора, сменим пароль пользователя ``admin``:"

msgid "box.schema.user.passwd('pass')"
msgstr "box.schema.user.passwd('pass')"

msgid "Connecting to Tarantool"
msgstr "Подключение к Tarantool"

msgid "To get connected to the Tarantool server, write a simple Go program:"
msgstr "Простая программа, выполняющая подключение к серверу, будет выглядеть так:"

msgid "package main\n\n"
"import (\n"
"    \"fmt\"\n\n"
"    \"github.com/tarantool/go-tarantool\"\n"
")\n\n"
"func main() {\n\n"
"    conn, err := tarantool.Connect(\"127.0.0.1:3301\", tarantool.Opts{\n"
"            User: \"admin\",\n"
"            Pass: \"pass\",\n"
"    })\n\n"
"    if err != nil {\n"
"            log.Fatalf(\"Connection refused\")\n"
"    }\n\n"
"    defer conn.Close()\n\n"
"    // Your logic for interacting with the database\n"
"}"
msgstr "package main\n\n"
"import (\n"
"    \"fmt\"\n\n"
"    \"github.com/tarantool/go-tarantool\"\n"
")\n\n"
"func main() {\n\n"
"    conn, err := tarantool.Connect(\"127.0.0.1:3301\", tarantool.Opts{\n"
"            User: \"admin\",\n"
"            Pass: \"pass\",\n"
"    })\n\n"
"    if err != nil {\n"
"            log.Fatalf(\"Connection refused\")\n"
"    }\n\n"
"    defer conn.Close()\n\n"
"    // Ваш код общения с базой\n\n"
"}"

msgid "The default user is ``guest``."
msgstr "По умолчанию используется пользователь ``guest``."

msgid "Manipulating the data"
msgstr "Работа с данными"

msgid "Inserting data"
msgstr "Вставка данных"

msgid "To insert a :term:`tuple` into a :term:`space`, use ``Insert``:"
msgstr ""

msgid "resp, err = conn.Insert(\"tester\", []interface{}{4, \"ABBA\", 1972})"
msgstr "resp, err = conn.Insert(\"tester\", []interface{}{4, \"ABBA\", 1972})"

msgid "This inserts the tuple ``(4, \"ABBA\", 1972)`` into a space named ``tester``."
msgstr "В этом примере в спейс ``tester`` вставляется кортеж ``(4, \"ABBA\", 1972)``."

msgid "The response code and data are available in the `tarantool.Response <https://github.com/tarantool/go-tarantool#usage>`_ structure:"
msgstr "Код ответа и данные можно получить из структуры `tarantool.Response <https://github.com/tarantool/go-tarantool#usage>`_:"

msgid "code := resp.Code\n"
"data := resp.Data"
msgstr "code := resp.Code\n"
"data := resp.Data"

msgid "Querying data"
msgstr "Получение данных"

msgid "To select a tuple from a space, use `Select <https://github.com/tarantool/go-tarantool#api-reference>`_:"
msgstr "Чтобы выбрать кортеж из спейса, воспользуемся функцией `Select <https://github.com/tarantool/go-tarantool#api-reference>`_:"

msgid "resp, err = conn.Select(\"tester\", \"primary\", 0, 1, tarantool.IterEq, []interface{}{4})"
msgstr "resp, err = conn.Select(\"tester\", \"primary\", 0, 1, tarantool.IterEq, []interface{}{4})"

msgid "This selects a tuple by the primary key with ``offset = 0`` and ``limit = 1`` from a space named ``tester`` (in our example, this is the index named ``primary``, based on the ``id`` field of each tuple)."
msgstr ""

msgid "Next, select tuples by a secondary key."
msgstr "Теперь поищем по вторичному ключу:"

msgid "resp, err = conn.Select(\"tester\", \"secondary\", 0, 1, tarantool.IterEq, []interface{}{\"ABBA\"})"
msgstr "resp, err = conn.Select(\"tester\", \"secondary\", 0, 1, tarantool.IterEq, []interface{}{\"ABBA\"})"

msgid "Finally, it would be nice to select all the tuples in a space. But there is no one-liner for this in Go; you would need a script like :ref:`this one <cookbook-select-all-go>`."
msgstr "Наконец, было бы интересно сделать полную выборку даных из спейса. Но в рамках языка Go эта задача не решается в одну строчку. :ref:`Пример <cookbook-select-all-go>` такой программы вы можете посмотреть в отдельном разделе документации."

msgid "For more examples, see https://github.com/tarantool/go-tarantool#usage"
msgstr "Более сложные примеры выборок можно увидеть тут: https://github.com/tarantool/go-tarantool#usage"

msgid "Updating data"
msgstr "Обновление данных"

msgid "Update a :term:`field` value using ``Update``:"
msgstr ""

msgid "resp, err = conn.Update(\"tester\", \"primary\", []interface{}{4}, []interface{}{[]interface{}{\"+\", 2, 3}})"
msgstr "resp, err = conn.Update(\"tester\", \"primary\", []interface{}{4}, []interface{}{[]interface{}{\"+\", 2, 3}})"

msgid "This increases by 3 the value of field ``2`` in the tuple with ``id = 4``. If a tuple with this ``id`` doesn't exist, Tarantool will return an error."
msgstr ""

msgid "Now use ``Replace`` to totally replace the tuple that matches the primary key. If a tuple with this primary key doesn't exist, Tarantool will do nothing."
msgstr "Теперь с помощью функции ``Replace`` мы полностью заменим кортеж с совпадающим первичным ключом. Если кортежа с указанным первичным ключом не существует, то эта операция ни к чему не приведет."

msgid "resp, err = conn.Replace(\"tester\", []interface{}{4, \"New band\", 2011})"
msgstr "resp, err = conn.Replace(\"tester\", []interface{}{4, \"New band\", 2011})"

msgid "You can also update the data using ``Upsert`` that works similarly to ``Update``, but creates a new tuple if the old one was not found."
msgstr "Также мы можем обновлять данные с помощью функции ``Upsert``, которая работает аналогично ``Update``, но создает новый кортеж, если старый не был найден."

msgid "resp, err = conn.Upsert(\"tester\", []interface{}{4, \"Another band\", 2000}, []interface{}{[]interface{}{\"+\", 2, 5}})"
msgstr "resp, err = conn.Upsert(\"tester\", []interface{}{4, \"Another band\", 2000}, []interface{}{[]interface{}{\"+\", 2, 5}})"

msgid "This increases by 5 the value of the third field in the tuple with ``id = 4``, or inserts the tuple ``(4, \"Another band\", 2000)`` if a tuple with this ``id`` doesn't exist."
msgstr ""

msgid "Deleting data"
msgstr "Удаление данных"

msgid "To delete a tuple, use ``сonnection.Delete``:"
msgstr "Чтобы удалить кортеж, воспользуемся функцией ``сonnection.Delete``:"

msgid "resp, err = conn.Delete(\"tester\", \"primary\", []interface{}{4})"
msgstr "resp, err = conn.Delete(\"tester\", \"primary\", []interface{}{4})"

msgid "To delete all tuples in a space (or to delete an entire space), use ``Call``. We'll focus on this function in more detail in the :ref:`next <getting_started-go-stored-procs>` section."
msgstr "Для удаления всех кортежей в спейсе (или всего спейса целиком), нужно воспользоваться функцией ``Call``. Мы поговорим о ней подробнее в :ref:`следующем разделе <getting_started-go-stored-procs>`."

msgid "To delete all tuples in a space, call ``space:truncate``:"
msgstr "Чтобы удалить все кортежи в спейсе, нужно вызвать функцию ``space:truncate``:"

msgid "resp, err = conn.Call(\"box.space.tester:truncate\", []interface{}{})"
msgstr "resp, err = conn.Call(\"box.space.tester:truncate\", []interface{}{})"

msgid "To delete an entire space, call ``space:drop``. This requires connecting to Tarantool as the ``admin`` user:"
msgstr "Чтобы удалить весь спейс, нужно вызвать функцию ``space:drop``. Для выполнения следующей команды необходимо подключиться из-под пользователя ``admin``:"

msgid "resp, err = conn.Call(\"box.space.tester:drop\", []interface{}{})"
msgstr "resp, err = conn.Call(\"box.space.tester:drop\", []interface{}{})"

msgid "Executing stored procedures"
msgstr "Исполнение хранимых процедур"

msgid "Switch to the terminal window where Tarantool is running."
msgstr "Перейдем в терминал с запущенным Tarantool."

msgid "If you don't have a terminal window with remote connection to Tarantool, check out these guides:"
msgstr "О том, как установить удаленное подключение к Tarantool, можно прочитать здесь:"

msgid ":ref:`connecting to a local Tarantool instance <connecting-remotely>`"
msgstr ":ref:`как подключиться к Tarantool, запущенному локально <connecting-remotely>`"

msgid ":ref:`attaching to a Tarantool instance that runs in a Docker container <getting_started-docker-attaching>`"
msgstr ":ref:`как подключиться к Tarantool, запущенному в Docker-контейнере <getting_started-docker-attaching>`"

msgid "Define a simple Lua function:"
msgstr "Напишем простую функцию на Lua:"

msgid "function sum(a, b)\n"
"    return a + b\n"
"end"
msgstr "function sum(a, b)\n"
"    return a + b\n"
"end"

msgid "Now we have a Lua function defined in Tarantool. To invoke this function from ``go``, use ``Call``:"
msgstr "Итак, теперь у нас есть функция, описанная в Tarantool. Чтобы вызвать ее из ``go``, нам нужна функция ``Call``:"

msgid "resp, err = conn.Call(\"sum\", []interface{}{2, 3})"
msgstr "resp, err = conn.Call(\"sum\", []interface{}{2, 3})"

msgid "To send bare Lua code for execution, use ``Eval``:"
msgstr "Также мы можем передать на выполнение любой Lua-код. Для этого воспользуемся функцией ``Eval``:"

msgid "resp, err = connection.Eval(\"return 4 + 5\", []interface{}{})"
msgstr "resp, err = connection.Eval(\"return 4 + 5\", []interface{}{})"

