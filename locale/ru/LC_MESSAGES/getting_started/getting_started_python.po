
msgid "Connecting from Python"
msgstr "Подключение из Python"

msgid "Pre-requisites"
msgstr "Подготовка"

msgid "Before we proceed:"
msgstr "Перед тем как идти дальше, выполним следующие действия:"

msgid ""
"`Install <https://github.com/tarantool/tarantool-python#download-and-"
"install>`__ the ``tarantool`` module. We recommend using ``python3`` and "
"``pip3``."
msgstr ""
"`Установим <https://github.com/tarantool/tarantool-python#download-and-"
"install>`__ библиотеку ``tarantool``. Рекомендуется использовать ``python3``"
" и ``pip3``."

msgid ""
":ref:`Start <getting_started_db>` Tarantool (locally or in Docker) and make "
"sure that you have created and populated a database as we suggested "
":ref:`earlier <creating-db-locally>`:"
msgstr ""
":ref:`Запустим <getting_started_db>` Tarantool (локально или в Docker) и "
"обязательно создадим базу данных с тестовыми данными, как показано в "
":ref:`предыдущем разделе <creating-db-locally>`:"

msgid ""
"box.cfg{listen = 3301}\n"
"s = box.schema.space.create('tester')\n"
"s:format({\n"
"         {name = 'id', type = 'unsigned'},\n"
"         {name = 'band_name', type = 'string'},\n"
"         {name = 'year', type = 'unsigned'}\n"
"         })\n"
"s:create_index('primary', {\n"
"         type = 'hash',\n"
"         parts = {'id'}\n"
"         })\n"
"s:create_index('secondary', {\n"
"         type = 'hash',\n"
"         parts = {'band_name'}\n"
"         })\n"
"s:insert{1, 'Roxette', 1986}\n"
"s:insert{2, 'Scorpions', 2015}\n"
"s:insert{3, 'Ace of Base', 1993}"
msgstr ""
"box.cfg{listen = 3301}\n"
"s = box.schema.space.create('tester')\n"
"s:format({\n"
"         {name = 'id', type = 'unsigned'},\n"
"         {name = 'band_name', type = 'string'},\n"
"         {name = 'year', type = 'unsigned'}\n"
"         })\n"
"s:create_index('primary', {\n"
"         type = 'hash',\n"
"         parts = {'id'}\n"
"         })\n"
"s:create_index('secondary', {\n"
"         type = 'hash',\n"
"         parts = {'band_name'}\n"
"         })\n"
"s:insert{1, 'Roxette', 1986}\n"
"s:insert{2, 'Scorpions', 2015}\n"
"s:insert{3, 'Ace of Base', 1993}"

msgid ""
"Please do not close the terminal window where Tarantool is running -- you'll"
" need it soon."
msgstr ""
"Не закрывайте окно терминала с запущенным Tarantool -- оно пригодится нам "
"позднее."

msgid ""
"In order to connect to Tarantool as an administrator, reset the password for"
" the ``admin`` user:"
msgstr ""
"Чтобы иметь возможность подключаться к Tarantool в качестве администратора, "
"сменим пароль пользователя ``admin``:"

msgid "box.schema.user.passwd('pass')"
msgstr "box.schema.user.passwd('pass')"

msgid "Connecting to Tarantool"
msgstr "Подключение к Tarantool"

msgid "To get connected to the Tarantool server, say this:"
msgstr "Для подключения к серверу достаточно выполнить следующее:"

msgid ""
">>> import tarantool\n"
">>> connection = tarantool.connect(\"localhost\", 3301)"
msgstr ""
">>> import tarantool\n"
">>> connection = tarantool.connect(\"localhost\", 3301)"

msgid "You can also specify the user name and password, if needed:"
msgstr "Также при необходимости можно указать имя пользователя и пароль:"

msgid ""
">>> tarantool.connect(\"localhost\", 3301, user=username, password=password)"
msgstr ""
">>> tarantool.connect(\"localhost\", 3301, user=username, password=password)"

msgid "The default user is ``guest``."
msgstr "По умолчанию используется пользователь ``guest``."

msgid "Manipulating the data"
msgstr "Работа с данными"

msgid ""
"A :term:`space` is a container for :term:`tuples <tuple>`. To access a space"
" as a named object, use ``connection.space``:"
msgstr ""

msgid ">>> tester = connection.space('tester')"
msgstr ">>> tester = connection.space('tester')"

msgid "Inserting data"
msgstr "Вставка данных"

msgid "To insert a tuple into a space, use ``insert``:"
msgstr "Для вставки нового кортежа в спейс воспользуемся функцией ``insert``:"

msgid ""
">>> tester.insert((4, 'ABBA', 1972))\n"
"[4, 'ABBA', 1972]"
msgstr ""
">>> tester.insert((4, 'ABBA', 1972))\n"
"[4, 'ABBA', 1972]"

msgid "Querying data"
msgstr "Получение данных"

msgid ""
"Let's start with selecting a tuple by the primary key (in our example, this "
"is the index named ``primary``, based on the ``id`` field of each tuple). "
"Use ``select``:"
msgstr ""
"Сначала выберем кортеж по первичному ключу (в нашем примере первичный индекс"
" –--это индекс ``primary``, построенный по полю ``id`` в каждом кортеже). "
"Воспользуемся функцией ``select``:"

msgid ""
">>> tester.select(4)\n"
"[4, 'ABBA', 1972]"
msgstr ""
">>> tester.select(4)\n"
"[4, 'ABBA', 1972]"

msgid ""
"Next, select tuples by a secondary key. For this purpose, you need to "
"specify the number *or* name of the index."
msgstr ""
"Теперь поищем кортежи по вторичному ключу. Для этого нужно указать номер "
"*или* имя вторичного индекса."

msgid "First off, select tuples using the index number:"
msgstr "Сначала сделаем запрос по номеру индекса:"

msgid ""
">>> tester.select('Scorpions', index=1)\n"
"[2, 'Scorpions', 2015]"
msgstr ""
">>> tester.select('Scorpions', index=1)\n"
"[2, 'Scorpions', 2015]"

msgid ""
"(We say ``index=1`` because index numbers in Tarantool start with 0, and "
"we're using our second index here.)"
msgstr ""
"(Мы указываем ``index=1``, потому что индексы в Tarantool нумеруются с нуля,"
" а в данном случае мы обращаемся к индексу, который создавали вторым.)"

msgid ""
"Now make a similar query by the index name and make sure that the result is "
"the same:"
msgstr ""
"Теперь сделаем аналогичный запрос по имени индекса и получим тот же "
"результат:"

msgid ""
">>> tester.select('Scorpions', index='secondary')\n"
"[2, 'Scorpions', 2015]"
msgstr ""
">>> tester.select('Scorpions', index='secondary')\n"
"[2, 'Scorpions', 2015]"

msgid ""
"Finally, select all the tuples in a space via a ``select`` with no "
"arguments:"
msgstr ""
"А чтобы выбрать все кортежи из спейса, вызовем ``select`` без аргументов:"

msgid ">>> tester.select()"
msgstr ">>> tester.select()"

msgid "Updating data"
msgstr "Обновление данных"

msgid "Update a :term:`field` value using ``update``:"
msgstr ""

msgid ">>> tester.update(4, [('=', 1, 'New group'), ('+', 2, 2)])"
msgstr ">>> tester.update(4, [('=', 1, 'New group'), ('+', 2, 2)])"

msgid ""
"This updates the value of field ``1`` and increases the value of field ``2``"
" in the tuple with ``id = 4``. If a tuple with this ``id`` doesn't exist, "
"Tarantool will return an error."
msgstr ""

msgid ""
"Now use ``replace`` to totally replace the tuple that matches the primary "
"key. If a tuple with this primary key doesn't exist, Tarantool will do "
"nothing."
msgstr ""
"Теперь с помощью функции ``replace`` мы полностью заменим кортеж с "
"совпадающим первичным ключом. Если кортежа с указанным первичным ключом не "
"существует, то эта операция ни к чему не приведет."

msgid ">>> tester.replace((4, 'New band', 2015))"
msgstr ">>> tester.replace((4, 'New band', 2015))"

msgid ""
"You can also update the data using ``upsert`` that works similarly to "
"``update``, but creates a new tuple if the old one was not found."
msgstr ""
"Также мы можем обновлять данные с помощью функции ``upsert``, которая "
"работает аналогично ``update``, но создает новый кортеж, если старый не был "
"найден."

msgid ">>> tester.upsert((4, 'Another band', 2000), [('+', 2, 5)])"
msgstr ">>> tester.upsert((4, 'Another band', 2000), [('+', 2, 5)])"

msgid ""
"This increases by 5 the value of field ``2`` in the tuple with ``id = 4``, "
"or inserts the tuple ``(4, \"Another band\", 2000)`` if a tuple with this "
"``id`` doesn't exist."
msgstr ""

msgid "Deleting data"
msgstr "Удаление данных"

msgid "To delete a tuple, use ``delete(primary_key)``:"
msgstr "Чтобы удалить кортеж, нужно использовать ``delete(primary_key)``:"

msgid ""
">>> tester.delete(4)\n"
"[4, 'New group', 2012]"
msgstr ""
">>> tester.delete(4)\n"
"[4, 'New group', 2012]"

msgid ""
"To delete all tuples in a space (or to delete an entire space), use "
"``call``. We'll focus on this function in more detail in the :ref:`next "
"<getting_started-python-stored-procs>` section."
msgstr ""
"Для удаления всех кортежей в спейсе (или всего спейса целиком) нужно "
"воспользоваться функцией ``call``. Мы поговорим о ней подробнее в "
":ref:`следующем разделе <getting_started-python-stored-procs>`."

msgid "To delete all tuples in a space, call ``space:truncate``:"
msgstr ""
"Чтобы удалить все кортежи в спейсе, нужно вызвать функцию "
"``space:truncate``:"

msgid ">>> connection.call('box.space.tester:truncate', ())"
msgstr ">>> connection.call('box.space.tester:truncate', ())"

msgid ""
"To delete an entire space, call ``space:drop``. This requires connecting to "
"Tarantool as the ``admin`` user:"
msgstr ""
"Чтобы удалить весь спейс, нужно вызвать функцию ``space:drop``. Для "
"выполнения следующей команды необходимо подключиться из-под пользователя "
"``admin``:"

msgid ">>> connection.call('box.space.tester:drop', ())"
msgstr ">>> connection.call('box.space.tester:drop', ())"

msgid "Executing stored procedures"
msgstr "Исполнение хранимых процедур"

msgid "Switch to the terminal window where Tarantool is running."
msgstr "Перейдем в терминал с запущенным Tarantool."

msgid ""
"If you don't have a terminal window with remote connection to Tarantool, "
"check out these guides:"
msgstr ""
"О том, как установить удаленное подключение к Tarantool, можно прочитать "
"здесь:"

msgid ":ref:`connecting to a local Tarantool instance <connecting-remotely>`"
msgstr ""
":ref:`как подключиться к Tarantool, запущенному локально <connecting-"
"remotely>`"

msgid ""
":ref:`attaching to a Tarantool instance that runs in a Docker container "
"<getting_started-docker-attaching>`"
msgstr ""
":ref:`как подключиться к Tarantool, запущенному в Docker-контейнере "
"<getting_started-docker-attaching>`"

msgid "Define a simple Lua function:"
msgstr "Напишем простую функцию на Lua:"

msgid ""
"function sum(a, b)\n"
"    return a + b\n"
"end"
msgstr ""
"function sum(a, b)\n"
"    return a + b\n"
"end"

msgid ""
"Now we have a Lua function defined in Tarantool. To invoke this function "
"from ``python``, use ``call``:"
msgstr ""
"Итак, теперь у нас есть функция, описанная в Tarantool. Чтобы вызвать ее из "
"``python``, нам нужна функция ``call``:"

msgid ""
">>> connection.call('sum', (3, 2))\n"
"5"
msgstr ""
">>> connection.call('sum', (3, 2))\n"
"5"

msgid "To send bare Lua code for execution, use ``eval``:"
msgstr ""
"Также мы можем передать на выполнение любой Lua-код. Для этого воспользуемся"
" функцией ``eval``:"

msgid ""
">>> connection.eval('return 4 + 5')\n"
"9"
msgstr ""
">>> connection.eval('return 4 + 5')\n"
"9"
