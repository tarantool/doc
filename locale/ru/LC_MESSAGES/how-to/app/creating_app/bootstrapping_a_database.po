
msgid "Bootstrapping a database"
msgstr ""

msgid ""
"Let's discuss game initialization. In ``start()`` method, we need to "
"populate Tarantool spaces with pokémon data. Why not keep all game data in "
"memory? Why use a database? The answer is: :ref:`persistence <index-"
"box_persistence>`. Without a database, we risk losing data on power outage, "
"for example. But if we store our data in an in-memory database, Tarantool "
"takes care to persist it on disk whenever it's changed. This gives us one "
"more benefit: quick startup in case of failure. Tarantool has a :ref:`smart "
"algorithm <internals-recovery_process>` that quickly loads all data from "
"disk into memory on startup, so the warm-up takes little time."
msgstr ""

msgid ""
"We'll be using functions from Tarantool built-in :ref:`box <box-module>` "
"module:"
msgstr ""

msgid ""
"``box.schema.create_space('pokemons')`` to create a space named ``pokemon`` "
"for storing information about pokémons (we don't create a similar space for "
"players, because we intend to only send/receive player information via API "
"calls, so we needn't store it);"
msgstr ""

msgid ""
"``box.space.pokemons:create_index('primary', {type = 'hash', parts = {1, "
"'unsigned'}})`` to create a primary HASH index by pokémon ID;"
msgstr ""

msgid ""
"``box.space.pokemons:create_index('status', {type = 'tree', parts = {2, "
"'str'}})`` to create a secondary TREE index by pokémon status."
msgstr ""

msgid ""
"Notice the ``parts =`` argument in the index specification. The pokémon ID "
"is the first field in a Tarantool tuple since it’s the first member of the "
"respective Avro type. So does the pokémon status. The actual JSON document "
"may have ID or status fields at any position of the JSON map."
msgstr ""

msgid "The implementation of ``start()`` method looks like this:"
msgstr ""

msgid ""
"-- create game object\n"
"start = function(self)\n"
"    -- create spaces and indexes\n"
"    box.once('init', function()\n"
"        box.schema.create_space('pokemons')\n"
"        box.space.pokemons:create_index(\n"
"            \"primary\", {type = 'hash', parts = {1, 'unsigned'}}\n"
"        )\n"
"        box.space.pokemons:create_index(\n"
"            \"status\", {type = \"tree\", parts = {2, 'str'}}\n"
"        )\n"
"    end)\n"
"\n"
"    -- create models\n"
"    local ok_m, pokemon = avro.create(schema.pokemon)\n"
"    local ok_p, player = avro.create(schema.player)\n"
"    if ok_m and ok_p then\n"
"        -- compile models\n"
"        local ok_cm, compiled_pokemon = avro.compile(pokemon)\n"
"        local ok_cp, compiled_player = avro.compile(player)\n"
"        if ok_cm and ok_cp then\n"
"            -- start the game\n"
"            <...>\n"
"        else\n"
"            log.error('Schema compilation failed')\n"
"        end\n"
"    else\n"
"        log.info('Schema creation failed')\n"
"    end\n"
"    return false\n"
"end"
msgstr ""
