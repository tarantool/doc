
msgid "Non-blocking IO"
msgstr ""

msgid ""
"To test the REST API, we create a new script (`client.lua "
"<https://github.com/tarantool/pokemon/blob/1.9/client/client.lua>`_), which "
"is similar to our ``game.lua`` application, but makes HTTP POST and GET "
"requests rather than calling Lua functions:"
msgstr ""

#, python-format
msgid ""
"local http = require('curl').http()\n"
"local json = require('json')\n"
"local URI = os.getenv('SERVER_URI')\n"
"local fiber = require('fiber')\n"
"\n"
"local player1 = {\n"
"    name=\"Player1\",\n"
"    id=1,\n"
"    location = {\n"
"        x=1.0001,\n"
"        y=2.0003\n"
"    }\n"
"}\n"
"local player2 = {\n"
"    name=\"Player2\",\n"
"    id=2,\n"
"    location = {\n"
"        x=30.123,\n"
"        y=40.456\n"
"    }\n"
"}\n"
"\n"
"local pokemon = {\n"
"    name=\"Pikachu\",\n"
"    chance=99.1,\n"
"    id=1,\n"
"    status=\"active\",\n"
"    location = {\n"
"        x=1,\n"
"        y=2\n"
"    }\n"
"}\n"
"\n"
"function request(method, body, id)\n"
"    local resp = http:request(\n"
"        method, URI, body\n"
"    )\n"
"    if id ~= nil then\n"
"        print(string.format('Player %d result: %s',\n"
"            id, resp.body))\n"
"    else\n"
"        print(resp.body)\n"
"    end\n"
"end\n"
"\n"
"local players = {}\n"
"function catch(player)\n"
"    fiber.sleep(math.random(5))\n"
"    print('Catch pokemon by player ' .. tostring(player.id))\n"
"    request(\n"
"        'POST', '{\"method\": \"catch\",\n"
"        \"params\": [1, '..json.encode(player)..']}',\n"
"        tostring(player.id)\n"
"    )\n"
"    table.insert(players, player.id)\n"
"end\n"
"\n"
"print('Create pokemon')\n"
"request('POST', '{\"method\": \"add\",\n"
"    \"params\": ['..json.encode(pokemon)..']}')\n"
"request('GET', '')\n"
"\n"
"fiber.create(catch, player1)\n"
"fiber.create(catch, player2)\n"
"\n"
"-- wait for players\n"
"while #players ~= 2 do\n"
"    fiber.sleep(0.001)\n"
"end\n"
"\n"
"request('GET', '')\n"
"os.exit()"
msgstr ""

msgid ""
"When you run this script, you’ll notice that both players have equal chances"
" to make the first attempt at catching the pokémon. In a classical Lua "
"script, a networked call blocks the script until it’s finished, so the first"
" catch attempt can only be done by the player who entered the game first. In"
" Tarantool, both players play concurrently, since all modules are integrated"
" with Tarantool :ref:`cooperative multitasking <app-"
"cooperative_multitasking>` and use non-blocking I/O."
msgstr ""

msgid ""
"Indeed, when Player1 makes its first REST call, the script doesn’t block. "
"The fiber running ``catch()`` function on behalf of Player1 issues a non-"
"blocking call to the operating system and yields control to the next fiber, "
"which happens to be the fiber of Player2. Player2’s fiber does the same. "
"When the network response is received, Player1's fiber is activated by "
"Tarantool cooperative scheduler, and resumes its work. All Tarantool "
":ref:`modules <built_in_modules>` use non-blocking I/O and are integrated "
"with Tarantool cooperative scheduler. For module developers, Tarantool "
"provides an :ref:`API <index-c_api_reference>`."
msgstr ""

msgid ""
"For our HTTP test, we create a third container based on the `official "
"Tarantool 1.9 image <https://github.com/tarantool/docker>`_ (see "
"`client/Dockerfile "
"<https://github.com/tarantool/pokemon/blob/1.9/client/Dockerfile>`_) and set"
" the container's default command to ``tarantool client.lua``."
msgstr ""

msgid ""
"To run this test locally, download our `pokemon "
"<https://github.com/tarantool/pokemon>`_ project from GitHub and say:"
msgstr ""

msgid ""
"$ docker-compose build\n"
"$ docker-compose up"
msgstr ""

msgid ""
"Docker Compose builds and runs all the three containers: ``pserver`` "
"(Tarantool backend), ``phttp`` (nginx) and ``pclient`` (demo client). You "
"can see log messages from all these containers in the console, pclient "
"saying that it made an HTTP request to create a pokémon, made two catch "
"requests, requested the map (empty since the pokémon is caught and "
"temporarily inactive) and exited:"
msgstr ""

msgid ""
"pclient_1  | Create pokemon\n"
"<...>\n"
"pclient_1  | {\"result\":true}\n"
"pclient_1  | {\"map\":[{\"id\":1,\"status\":\"active\",\"location\":{\"y\":2,\"x\":1},\"name\":\"Pikachu\",\"chance\":99.100000}]}\n"
"pclient_1  | Catch pokemon by player 2\n"
"pclient_1  | Catch pokemon by player 1\n"
"pclient_1  | Player 1 result: {\"result\":true}\n"
"pclient_1  | Player 2 result: {\"result\":false}\n"
"pclient_1  | {\"map\":[]}\n"
"pokemon_pclient_1 exited with code 0"
msgstr ""

msgid ""
"Congratulations! Here's the end point of our walk-through. As further "
"reading, see more about :ref:`installing <app_server-installing_module>` and"
" :ref:`contributing <app_server-contributing_module>` a module."
msgstr ""

msgid ""
"See also reference on :ref:`Tarantool modules <built_in_modules>` and "
":ref:`C API <index-c_api_reference>`, and don't miss our :ref:`Lua cookbook "
"recipes <cookbook>`."
msgstr ""
