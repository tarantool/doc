
msgid "CRUD operation examples"
msgstr "Примеры CRUD-операций"

#, fuzzy
msgid "Using data operations"
msgstr "Пример: использование операций с данными"

#, fuzzy
msgid ""
"This section shows basic usage scenarios and typical errors for each "
":ref:`data operation <index-box_data-operations>` in Tarantool: :ref:`INSERT"
" <box_space-operations-insert>`, :ref:`DELETE <box_space-operations-"
"delete>`, :ref:`UPDATE <box_space-operations-update>`, :ref:`UPSERT "
"<box_space-operations-upsert>`, :ref:`REPLACE <box_space-operations-"
"replace>`, and :ref:`SELECT <box_space-operations-select>`. Before trying "
"out the examples, you need to bootstrap a Tarantool instance as shown below."
msgstr ""
"Пример ниже иллюстрирует все возможные сценарии -- а также типичные ошибки "
"-- для всех :ref:`операций с данными <index-box_data-operations>` в "
"Tarantool: :ref:`INSERT <box_space-operations-insert>`, :ref:`DELETE "
"<box_space-operations-delete>`, :ref:`UPDATE <box_space-operations-update>`,"
" :ref:`UPSERT <box_space-operations-upsert>`, :ref:`REPLACE <box_space-"
"operations-replace>` и :ref:`SELECT <box_space-operations-select>`."

msgid ""
"-- Create a space --\n"
"bands = box.schema.space.create('bands')\n"
"\n"
"-- Specify field names and types --\n"
"box.space.bands:format({\n"
"    { name = 'id', type = 'unsigned' },\n"
"    { name = 'band_name', type = 'string' },\n"
"    { name = 'year', type = 'unsigned' }\n"
"})\n"
"\n"
"-- Create a primary index --\n"
"box.space.bands:create_index('primary', { parts = { 'id' } })\n"
"\n"
"-- Create a unique secondary index --\n"
"box.space.bands:create_index('band', { parts = { 'band_name' } })\n"
"\n"
"-- Create a non-unique secondary index --\n"
"box.space.bands:create_index('year', { parts = { { 'year' } }, unique = false })\n"
"\n"
"-- Create a multi-part index --\n"
"box.space.bands:create_index('year_band', { parts = { { 'year' }, { 'band_name' } } })\n"
msgstr ""

msgid "INSERT"
msgstr "INSERT"

msgid ""
"The :ref:`space_object.insert <box_space-insert>` method accepts a well-"
"formatted tuple."
msgstr ""

msgid ""
"-- Insert a tuple with a unique primary key --\n"
"tarantool> bands:insert{1, 'Scorpions', 1965}\n"
"---\n"
"- [1, 'Scorpions', 1965]\n"
"..."
msgstr ""

#, fuzzy
msgid "``insert`` also checks all the keys for duplicates."
msgstr ""
"Операция ``insert`` (вставка) работает с кортежами с четким форматом и "
"проверяет все ключи на наличие совпадений."

msgid ""
"-- Try to insert a tuple with a duplicate primary key --\n"
"tarantool> bands:insert{1, 'Scorpions', 1965}\n"
"---\n"
"- error: Duplicate key exists in unique index \"primary\" in space \"bands\" with old\n"
"    tuple - [1, \"Scorpions\", 1965] and new tuple - [1, \"Scorpions\", 1965]\n"
"...\n"
"\n"
"-- Try to insert a tuple with a duplicate secondary key --\n"
"tarantool> bands:insert{2, 'Scorpions', 1965}\n"
"---\n"
"- error: Duplicate key exists in unique index \"band\" in space \"bands\" with old tuple\n"
"    - [1, \"Scorpions\", 1965] and new tuple - [2, \"Scorpions\", 1965]\n"
"...\n"
"\n"
"-- Insert a second tuple with unique primary and secondary keys --\n"
"tarantool> bands:insert{2, 'Pink Floyd', 1965}\n"
"---\n"
"- [2, 'Pink Floyd', 1965]\n"
"...\n"
"\n"
"-- Delete all tuples --\n"
"tarantool> bands:truncate()\n"
"---\n"
"..."
msgstr ""

msgid "DELETE"
msgstr "DELETE"

msgid ""
":ref:`space_object.delete <box_space-delete>` allows you to delete a tuple "
"identified by the primary key."
msgstr ""

msgid ""
"-- Insert test data --\n"
"tarantool> bands:insert{1, 'Roxette', 1986}\n"
"           bands:insert{2, 'Scorpions', 1965}\n"
"           bands:insert{3, 'Ace of Base', 1987}\n"
"           bands:insert{4, 'The Beatles', 1960}\n"
"\n"
"-- Delete a tuple with an existing key --\n"
"tarantool> bands:delete{4}\n"
"---\n"
"- [4, 'The Beatles', 1960]\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"  - [2, 'Scorpions', 1965]\n"
"  - [3, 'Ace of Base', 1987]\n"
"..."
msgstr ""

msgid ""
"You can also use :ref:`index_object.delete <box_index-delete>` to delete a "
"tuple by the specified unique index."
msgstr ""

msgid ""
"-- Delete a tuple by the primary index --\n"
"tarantool> bands.index.primary:delete{3}\n"
"---\n"
"- [3, 'Ace of Base', 1987]\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"  - [2, 'Scorpions', 1965]\n"
"...\n"
"\n"
"-- Delete a tuple by a unique secondary index --\n"
"tarantool> bands.index.band:delete{'Scorpions'}\n"
"---\n"
"- [2, 'Scorpions', 1965]\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"...\n"
"\n"
"-- Try to delete a tuple by a non-unique secondary index --\n"
"tarantool> bands.index.year:delete(1986)\n"
"---\n"
"- error: Get() doesn't support partial keys and non-unique indexes\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"...\n"
"\n"
"-- Try to delete a tuple by a partial key --\n"
"tarantool> bands.index.year_band:delete('Roxette')\n"
"---\n"
"- error: Invalid key part count in an exact match (expected 2, got 1)\n"
"...\n"
"\n"
"-- Delete a tuple by a full key --\n"
"tarantool> bands.index.year_band:delete{1986, 'Roxette'}\n"
"---\n"
"- [1, 'Roxette', 1986]\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- []\n"
"...\n"
"\n"
"-- Delete all tuples --\n"
"tarantool> bands:truncate()\n"
"---\n"
"..."
msgstr ""

msgid "UPDATE"
msgstr "UPDATE"

msgid ""
":ref:`space_object.update <box_space-update>` allows you to update a tuple "
"identified by the primary key. Similarly to ``delete``, the ``update`` "
"method accepts a full key and also an operation to execute."
msgstr ""

msgid ""
"-- Insert test data --\n"
"tarantool> bands:insert{1, 'Roxette', 1986}\n"
"           bands:insert{2, 'Scorpions', 1965}\n"
"           bands:insert{3, 'Ace of Base', 1987}\n"
"           bands:insert{4, 'The Beatles', 1960}\n"
"\n"
"-- Update a tuple with an existing key --\n"
"tarantool> bands:update({2}, {{'=', 2, 'Pink Floyd'}})\n"
"---\n"
"- [2, 'Pink Floyd', 1965]\n"
"...\n"
"\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"  - [2, 'Pink Floyd', 1965]\n"
"  - [3, 'Ace of Base', 1987]\n"
"  - [4, 'The Beatles', 1960]\n"
"..."
msgstr ""

msgid ""
":ref:`index_object.update <box_index-update>` updates a tuple identified by "
"the specified unique index."
msgstr ""

msgid ""
"-- Update a tuple by the primary index --\n"
"tarantool> bands.index.primary:update({2}, {{'=', 2, 'The Rolling Stones'}})\n"
"---\n"
"- [2, 'The Rolling Stones', 1965]\n"
"...\n"
"\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"  - [2, 'The Rolling Stones', 1965]\n"
"  - [3, 'Ace of Base', 1987]\n"
"  - [4, 'The Beatles', 1960]\n"
"...\n"
"\n"
"-- Update a tuple by a unique secondary index --\n"
"tarantool> bands.index.band:update({'The Rolling Stones'}, {{'=', 2, 'The Doors'}})\n"
"---\n"
"- [2, 'The Doors', 1965]\n"
"...\n"
"\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"  - [2, 'The Doors', 1965]\n"
"  - [3, 'Ace of Base', 1987]\n"
"  - [4, 'The Beatles', 1960]\n"
"...\n"
"\n"
"-- Try to update a tuple by a non-unique secondary index --\n"
"tarantool> bands.index.year:update({1965}, {{'=', 2, 'Scorpions'}})\n"
"---\n"
"- error: Get() doesn't support partial keys and non-unique indexes\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"  - [2, 'The Doors', 1965]\n"
"  - [3, 'Ace of Base', 1987]\n"
"  - [4, 'The Beatles', 1960]\n"
"...\n"
"\n"
"-- Delete all tuples --\n"
"tarantool> bands:truncate()\n"
"---\n"
"..."
msgstr ""

msgid "UPSERT"
msgstr "UPSERT"

msgid ""
":ref:`space_object.upsert <box_space-upsert>` updates an existing tuple or "
"inserts a new one:"
msgstr ""

#, fuzzy
msgid ""
"If the existing tuple is found by the primary key, Tarantool applies the "
"update operation to this tuple and ignores the new tuple."
msgstr ""
"Если найден старый кортеж по первичному ключу, то операции обновления "
"применяются к старому кортежу, а новый кортеж игнорируется."

#, fuzzy
msgid ""
"If no existing tuple is found, Tarantool inserts the new tuple and ignores "
"the update operation."
msgstr ""
"Если старый кортеж не найден, то происходит вставка нового кортежа, а "
"операции обновления **игнорируются**."

#, fuzzy
msgid ""
"tarantool> bands:insert{1, 'Scorpions', 1965}\n"
"---\n"
"- [1, 'Scorpions', 1965]\n"
"...\n"
"-- As the first argument, upsert accepts a tuple, not a key --\n"
"tarantool> bands:upsert({2}, {{'=', 2, 'Pink Floyd'}})\n"
"---\n"
"- error: Tuple field 2 (band_name) required by space format is missing\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Scorpions', 1965]\n"
"...\n"
"tarantool> bands:delete(1)\n"
"---\n"
"- [1, 'Scorpions', 1965]\n"
"..."
msgstr ""
"tarantool> s.index.pk.upsert == nil\n"
"---\n"
"- true\n"
"...\n"
"tarantool> s.index.sk_uniq.upsert == nil\n"
"---\n"
"- true\n"
"...\n"
"tarantool> s.upsert ~= nil\n"
"---\n"
"- true\n"
"...\n"
"tarantool> -- В качестве первого аргумента upsert принимает --\n"
"tarantool> -- кортеж в правильном формате, а НЕ ключ! --\n"
"tarantool> s:insert{1, 2, 3}\n"
"---\n"
"- [1, 2, 3]\n"
"...\n"
"tarantool> s:upsert({1}, {{'=', 2, 200}})\n"
"---\n"
"- error: Tuple field 2 required by space format is missing\n"
"...\n"
"tarantool> s:select{}\n"
"---\n"
"- - [1, 2, 3]\n"
"...\n"
"tarantool> s:delete{1}\n"
"---\n"
"- [1, 2, 3]\n"
"..."

#, fuzzy
msgid ""
"``upsert`` acts as ``insert`` when no existing tuple is found by the primary"
" key."
msgstr ""
"``upsert`` превращается в ``insert``, когда старый кортеж не найден по "
"первичному ключу."

msgid ""
"tarantool> bands:upsert({1, 'Scorpions', 1965}, {{'=', 2, 'The Doors'}})\n"
"---\n"
"...\n"
"-- As you can see, {1, 'Scorpions', 1965} is inserted, --\n"
"-- and the update operation is not applied. --\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Scorpions', 1965]\n"
"...\n"
"\n"
"-- upsert with the same primary key but different values in other fields --\n"
"-- applies the update operation and ignores the new tuple. --\n"
"tarantool> bands:upsert({1, 'Scorpions', 1965}, {{'=', 2, 'The Doors'}})\n"
"---\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'The Doors', 1965]\n"
"..."
msgstr ""

#, fuzzy
msgid ""
"``upsert`` searches for the existing tuple by the primary index, not by the "
"secondary index. This can lead to a duplication error if the tuple violates "
"a secondary index uniqueness."
msgstr ""
"``upsert`` ищет старый кортеж по первичному индексу, НЕ по вторичному. Это "
"может привести к ошибкам с дубликатами, если новый кортеж нарушает "
"уникальность вторичного индекса."

#, fuzzy
msgid ""
"tarantool> bands:upsert({2, 'The Doors', 1965}, {{'=', 2, 'Pink Floyd'}})\n"
"---\n"
"- error: Duplicate key exists in unique index \"band\" in space \"bands\" with old tuple\n"
"    - [1, \"The Doors\", 1965] and new tuple - [2, \"The Doors\", 1965]\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'The Doors', 1965]\n"
"...\n"
"\n"
"-- This works if uniqueness is preserved. --\n"
"tarantool> bands:upsert({2, 'The Beatles', 1960}, {{'=', 2, 'Pink Floyd'}})\n"
"---\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'The Doors', 1965]\n"
"  - [2, 'The Beatles', 1960]\n"
"...\n"
"\n"
"-- Delete all tuples --\n"
"tarantool> bands:truncate()\n"
"---\n"
"..."
msgstr ""
"tarantool> s:upsert({2, 200, 3}, {{'=', 3, 300}})\n"
"---\n"
"- error: Duplicate key exists in unique index 'sk_uniq' in space 'test'\n"
"...\n"
"s:select{}\n"
"---\n"
"- - [1, 200, 3]\n"
"...\n"
"tarantool> -- Но сработает, если сохраняется уникальность. --\n"
"tarantool> s:upsert({2, 0, 0}, {{'=', 3, 300}})\n"
"---\n"
"...\n"
"tarantool> s:select{}\n"
"---\n"
"- - [1, 200, 3]\n"
"  - [2, 0, 0]\n"
"...\n"
"tarantool> s:truncate()\n"
"---\n"
"..."

msgid "REPLACE"
msgstr "REPLACE"

#, fuzzy
msgid ""
":ref:`space_object.replace <box_space-replace>` accepts a well-formatted "
"tuple and searches for the existing tuple by the primary key of the new "
"tuple:"
msgstr ""
"``replace`` (замена) работает с кортежами с четким форматом и ищет старый "
"кортеж по первичному ключу нового кортежа."

#, fuzzy
msgid ""
"If the existing tuple is found, Tarantool deletes it and inserts the new "
"tuple."
msgstr ""
"Если найден старый кортеж, то происходит удаление старого кортежа и вставка "
"нового."

#, fuzzy
msgid "If no existing tuple is found, Tarantool inserts the new tuple."
msgstr ""
"Если найден старый кортеж, то происходит удаление старого кортежа и вставка "
"нового."

#, fuzzy
msgid ""
"tarantool> bands:replace{1, 'Scorpions', 1965}\n"
"---\n"
"- [1, 'Scorpions', 1965]\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Scorpions', 1965]\n"
"...\n"
"tarantool> bands:replace{1, 'The Beatles', 1960}\n"
"---\n"
"- [1, 'The Beatles', 1960]\n"
"...\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'The Beatles', 1960]\n"
"...\n"
"tarantool> bands:truncate()\n"
"---\n"
"..."
msgstr ""
"tarantool> s:replace{1, 2, 3}\n"
"---\n"
"- [1, 2, 3]\n"
"...\n"
"tarantool> s:select{}\n"
"---\n"
"- - [1, 2, 3]\n"
"...\n"
"tarantool> s:replace{1, 3, 4}\n"
"---\n"
"- [1, 3, 4]\n"
"...\n"
"tarantool> s:select{}\n"
"---\n"
"- - [1, 3, 4]\n"
"...\n"
"tarantool> s:truncate()\n"
"---\n"
"..."

#, fuzzy
msgid "``replace`` can violate unique constraints, like ``upsert`` does."
msgstr "Как и ``upsert``, ``replace`` может нарушить требования уникальности."

msgid ""
"tarantool> bands:insert{1, 'Scorpions', 1965}\n"
"- [1, 'Scorpions', 1965]\n"
"...\n"
"tarantool> bands:insert{2, 'The Beatles', 1960}\n"
"---\n"
"- [2, 'The Beatles', 1960]\n"
"...\n"
"tarantool> bands:replace{2, 'Scorpions', 1965}\n"
"---\n"
"- error: Duplicate key exists in unique index \"band\" in space \"bands\" with old tuple\n"
"    - [1, \"Scorpions\", 1965] and new tuple - [2, \"Scorpions\", 1965]\n"
"...\n"
"tarantool> bands:truncate()\n"
"---\n"
"..."
msgstr ""

msgid "SELECT"
msgstr "SELECT"

msgid ""
"The :ref:`space_object.select <box_space-select>` request searches for a "
"tuple or a set of tuples in the given space by the primary key. To search by"
" the specified index, use :ref:`index_object.select <box_index-select>`. "
"These methods work with any keys, including unique and non-unique, full and "
"partial. If a key is partial, ``select`` searches by all keys where the "
"prefix matches the specified key part."
msgstr ""

msgid ""
"tarantool> bands:insert{1, 'Roxette', 1986}\n"
"           bands:insert{2, 'Scorpions', 1965}\n"
"           bands:insert{3, 'The Doors', 1965}\n"
"           bands:insert{4, 'The Beatles', 1960}\n"
"\n"
"tarantool> bands:select(1)\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"...\n"
"\n"
"tarantool> bands:select()\n"
"---\n"
"- - [1, 'Roxette', 1986]\n"
"  - [2, 'Scorpions', 1965]\n"
"  - [3, 'The Doors', 1965]\n"
"  - [4, 'The Beatles', 1960]\n"
"...\n"
"\n"
"tarantool> bands.index.primary:select(2)\n"
"---\n"
"- - [2, 'Scorpions', 1965]\n"
"...\n"
"\n"
"tarantool> bands.index.band:select('The Doors')\n"
"---\n"
"- - [3, 'The Doors', 1965]\n"
"...\n"
"\n"
"tarantool> bands.index.year:select(1965)\n"
"---\n"
"- - [2, 'Scorpions', 1965]\n"
"  - [3, 'The Doors', 1965]\n"
"..."
msgstr ""

#, fuzzy
msgid "Using box.space functions to read _space tuples"
msgstr "Пример: использование функций box.space для чтения кортежей из _space"

#, fuzzy
msgid ""
"This example illustrates how to look at all the spaces, and for each "
"display: approximately how many tuples it contains, and the first field of "
"its first tuple. The function uses the Tarantool's ``box.space`` functions "
"``len()`` and ``pairs()``. The iteration through the spaces is coded as a "
"scan of the ``_space`` system space, which contains metadata. The third "
"field in ``_space`` contains the space name, so the key instruction "
"``space_name = v[3]`` means ``space_name`` is the ``space_name`` field in "
"the tuple of ``_space`` that we've just fetched with ``pairs()``. The "
"function returns a table:"
msgstr ""
"Функция ниже проиллюстрирует, как обращаться ко всем спейсам, и для каждого "
"отобразит примерное количество кортежей и первое поле первого кортежа. В "
"данной функции используются функции из ``box.space`` в Tarantool: ``len()`` "
"и ``pairs()``. Итерация по спейсам закодирована в форме сканирования "
"системного спейса ``_space``, который содержит метаданные. Третье поле в "
"``_space`` содержит имя спейса, поэтому ключевая команда ``space_name = "
"v[3]`` означает, что ``space_name`` -- это поле ``space_name`` в кортеже "
"``_space``, который мы только что получили с помощью ``pairs()``. Функция "
"возвращает таблицу:"

msgid ""
"function example()\n"
"  local tuple_count, space_name, line\n"
"  local ta = {}\n"
"  for k, v in box.space._space:pairs() do\n"
"    space_name = v[3]\n"
"    if box.space[space_name].index[0] ~= nil then\n"
"      tuple_count = '1 or more'\n"
"    else\n"
"      tuple_count = '0'\n"
"    end\n"
"    line = space_name .. ' tuple_count =' .. tuple_count\n"
"    if tuple_count == '1 or more' then\n"
"      for k1, v1 in box.space[space_name]:pairs() do\n"
"        line = line .. '. first field in first tuple = ' .. v1[1]\n"
"        break\n"
"      end\n"
"    end\n"
"    table.insert(ta, line)\n"
"  end\n"
"  return ta\n"
"end"
msgstr ""
"function example()\n"
"  local tuple_count, space_name, line\n"
"  local ta = {}\n"
"  for k, v in box.space._space:pairs() do\n"
"    space_name = v[3]\n"
"    if box.space[space_name].index[0] ~= nil then\n"
"      tuple_count = '1 or more'\n"
"    else\n"
"      tuple_count = '0'\n"
"    end\n"
"    line = space_name .. ' tuple_count =' .. tuple_count\n"
"    if tuple_count == '1 or more' then\n"
"      for k1, v1 in box.space[space_name]:pairs() do\n"
"        line = line .. '. first field in first tuple = ' .. v1[1]\n"
"        break\n"
"      end\n"
"    end\n"
"    table.insert(ta, line)\n"
"  end\n"
"  return ta\n"
"end"

#, fuzzy
msgid "The output below shows what happens if you invoke this function:"
msgstr "А вот что происходит, когда вызывается функция:"

msgid ""
"tarantool> example()\n"
"---\n"
"- - _schema tuple_count =1 or more. first field in first tuple = cluster\n"
"  - _space tuple_count =1 or more. first field in first tuple = 272\n"
"  - _vspace tuple_count =1 or more. first field in first tuple = 272\n"
"  - _index tuple_count =1 or more. first field in first tuple = 272\n"
"  - _vindex tuple_count =1 or more. first field in first tuple = 272\n"
"  - _func tuple_count =1 or more. first field in first tuple = 1\n"
"  - _vfunc tuple_count =1 or more. first field in first tuple = 1\n"
"  - _user tuple_count =1 or more. first field in first tuple = 0\n"
"  - _vuser tuple_count =1 or more. first field in first tuple = 0\n"
"  - _priv tuple_count =1 or more. first field in first tuple = 1\n"
"  - _vpriv tuple_count =1 or more. first field in first tuple = 1\n"
"  - _cluster tuple_count =1 or more. first field in first tuple = 1\n"
"..."
msgstr ""
"tarantool> example()\n"
"---\n"
"- - _schema tuple_count =1 or more. first field in first tuple = cluster\n"
"  - _space tuple_count =1 or more. first field in first tuple = 272\n"
"  - _vspace tuple_count =1 or more. first field in first tuple = 272\n"
"  - _index tuple_count =1 or more. first field in first tuple = 272\n"
"  - _vindex tuple_count =1 or more. first field in first tuple = 272\n"
"  - _func tuple_count =1 or more. first field in first tuple = 1\n"
"  - _vfunc tuple_count =1 or more. first field in first tuple = 1\n"
"  - _user tuple_count =1 or more. first field in first tuple = 0\n"
"  - _vuser tuple_count =1 or more. first field in first tuple = 0\n"
"  - _priv tuple_count =1 or more. first field in first tuple = 1\n"
"  - _vpriv tuple_count =1 or more. first field in first tuple = 1\n"
"  - _cluster tuple_count =1 or more. first field in first tuple = 1\n"
"..."

#, fuzzy
msgid "Using box.space functions to organize a _space tuple"
msgstr ""
"Пример: использование функций box.space для организации кортежа из _space"

#, fuzzy
msgid ""
"This examples shows how to display field names and field types of a system "
"space -- using metadata to find metadata."
msgstr ""
"Основная цель -- отобразить имена и типы полей системного спейса, то есть "
"использование метаданных для поиска метаданных."

msgid ""
"To begin: how can one select the ``_space`` tuple that describes ``_space``?"
msgstr ""
"Для начала: как можно сделать выборку кортежа из ``_space``, который "
"описывает ``_space``?"

#, fuzzy
msgid ""
"A simple way is to look at the constants in ``box.schema``, which shows that"
" there is an item named SPACE_ID == 288, so these statements retrieve the "
"correct tuple:"
msgstr ""
"Проще всего проверить постоянные в ``box.schema``, что укажет на наличие "
"элемента под названием SPACE_ID == 288. Таким образом, следующие запросы "
"вернут нужный кортеж:"

msgid ""
"box.space._space:select{ 288 }\n"
"-- or --\n"
"box.space._space:select{ box.schema.SPACE_ID }"
msgstr ""
"box.space._space:select{ 288 }\n"
"-- или --\n"
"box.space._space:select{ box.schema.SPACE_ID }"

#, fuzzy
msgid ""
"Another way is to look at the tuples in ``box.space._index``, which shows "
"that there is a secondary index named 'name' for a space number 288, so this"
" statement also retrieve the correct tuple:"
msgstr ""
"Также можно обратиться к спейсам в ``box.space._index``, что укажет на "
"наличие вторичного индекса с именем 'name' для спейса под номером 288. Таким"
" образом, следующий запрос также вернет нужный кортеж:"

msgid "box.space._space.index.name:select{ '_space' }"
msgstr "box.space._space.index.name:select{ '_space' }"

msgid "However, the retrieved tuple is not easy to read:"
msgstr "Однако непросто прочитать информацию из полученного кортежа:"

msgid ""
"tarantool> box.space._space.index.name:select{'_space'}\n"
"---\n"
"- - [280, 1, '_space', 'memtx', 0, {}, [{'name': 'id', 'type': 'num'}, {'name': 'owner',\n"
"        'type': 'num'}, {'name': 'name', 'type': 'str'}, {'name': 'engine', 'type': 'str'},\n"
"      {'name': 'field_count', 'type': 'num'}, {'name': 'flags', 'type': 'str'}, {\n"
"        'name': 'format', 'type': '*'}]]\n"
"..."
msgstr ""
"tarantool> box.space._space.index.name:select{'_space'}\n"
"---\n"
"- - [280, 1, '_space', 'memtx', 0, {}, [{'name': 'id', 'type': 'num'}, {'name': 'owner',\n"
"        'type': 'num'}, {'name': 'name', 'type': 'str'}, {'name': 'engine', 'type': 'str'},\n"
"      {'name': 'field_count', 'type': 'num'}, {'name': 'flags', 'type': 'str'}, {\n"
"        'name': 'format', 'type': '*'}]]\n"
"..."

msgid ""
"It looks disorganized because field number 7 has been formatted with "
"recommended names and data types. How can one get those specific sub-fields?"
" Since it's visible that field number 7 is an array of maps, this `for` loop"
" will do the organizing:"
msgstr ""
"Информация подается бессистемно, поскольку по формату поле №7 содержит "
"рекомендованные имена и типы данных. Как же получить эти данные? Поскольку "
"очевидно, что поле №7 представляет собой ассоциативный массив, цикл `for` "
"проведет организацию данных:"

msgid ""
"tarantool> do\n"
"         >   local tuple_of_space = box.space._space.index.name:get{'_space'}\n"
"         >   for _, field in ipairs(tuple_of_space[7]) do\n"
"         >     print(field.name .. ', ' .. field.type)\n"
"         >   end\n"
"         > end\n"
"id, num\n"
"owner, num\n"
"name, str\n"
"engine, str\n"
"field_count, num\n"
"flags, str\n"
"format, *\n"
"---\n"
"..."
msgstr ""
"tarantool> do\n"
"         >   local tuple_of_space = box.space._space.index.name:get{'_space'}\n"
"         >   for _, field in ipairs(tuple_of_space[7]) do\n"
"         >     print(field.name .. ', ' .. field.type)\n"
"         >   end\n"
"         > end\n"
"id, num\n"
"owner, num\n"
"name, str\n"
"engine, str\n"
"field_count, num\n"
"flags, str\n"
"format, *\n"
"---\n"
"..."

#~ msgid ""
#~ "-- Bootstrap the database --\n"
#~ "box.cfg{}\n"
#~ "format = {}\n"
#~ "format[1] = {'field1', 'unsigned'}\n"
#~ "format[2] = {'field2', 'unsigned'}\n"
#~ "format[3] = {'field3', 'unsigned'}\n"
#~ "s = box.schema.create_space('test', {format = format})\n"
#~ "-- Create a primary index --\n"
#~ "pk = s:create_index('pk', {parts = {{'field1'}}})\n"
#~ "-- Create a unique secondary index --\n"
#~ "sk_uniq = s:create_index('sk_uniq', {parts = {{'field2'}}})\n"
#~ "-- Create a non-unique secondary index --\n"
#~ "sk_non_uniq = s:create_index('sk_non_uniq', {parts = {{'field3'}}, unique = false})"
#~ msgstr ""
#~ "-- Настройка базы данных --\n"
#~ "box.cfg{}\n"
#~ "format = {}\n"
#~ "format[1] = {'field1', 'unsigned'}\n"
#~ "format[2] = {'field2', 'unsigned'}\n"
#~ "format[3] = {'field3', 'unsigned'}\n"
#~ "s = box.schema.create_space('test', {format = format})\n"
#~ "-- Создание первичного индекса --\n"
#~ "pk = s:create_index('pk', {parts = {{'field1'}}})\n"
#~ "-- Создание уникального вторичного индекса --\n"
#~ "sk_uniq = s:create_index('sk_uniq', {parts = {{'field2'}}})\n"
#~ "-- Создание неуникального вторичного индекса --\n"
#~ "sk_non_uniq = s:create_index('sk_non_uniq', {parts = {{'field3'}}, unique = false})"

#~ msgid ""
#~ "tarantool> -- Unique indexes: ok --\n"
#~ "tarantool> s:insert({1, 1, 1})\n"
#~ "---\n"
#~ "- [1, 1, 1]\n"
#~ "...\n"
#~ "tarantool> -- Conflicting primary key: error --\n"
#~ "tarantool> s:insert({1, 1, 1})\n"
#~ "---\n"
#~ "- error: Duplicate key exists in unique index 'pk' in space 'test'\n"
#~ "...\n"
#~ "tarantool> -- Conflicting unique secondary key: error --\n"
#~ "tarantool> s:insert({2, 1, 1})\n"
#~ "---\n"
#~ "- error: Duplicate key exists in unique index 'sk_uniq' in space 'test'\n"
#~ "...\n"
#~ "tarantool> -- Key {1} exists in sk_non_uniq index, but it is not unique: ok --\n"
#~ "tarantool> s:insert({2, 2, 1})\n"
#~ "---\n"
#~ "- [2, 2, 1]\n"
#~ "...\n"
#~ "tarantool> s:truncate()\n"
#~ "---\n"
#~ "..."
#~ msgstr ""
#~ "tarantool> -- Уникальные индексы: разрешено --\n"
#~ "tarantool> s:insert({1, 1, 1})\n"
#~ "---\n"
#~ "- [1, 1, 1]\n"
#~ "...\n"
#~ "tarantool> -- Конфликт первичного ключа: ошибка --\n"
#~ "tarantool> s:insert({1, 1, 1})\n"
#~ "---\n"
#~ "- error: Duplicate key exists in unique index 'pk' in space 'test'\n"
#~ "...\n"
#~ "tarantool> -- Конфликт уникального вторичного ключа: ошибка --\n"
#~ "tarantool> s:insert({2, 1, 1})\n"
#~ "---\n"
#~ "- error: Duplicate key exists in unique index 'sk_uniq' in space 'test'\n"
#~ "...\n"
#~ "tarantool> -- Ключ {1} присутствует в индексе sk_non_uniq, но он не уникален: разрешено --\n"
#~ "tarantool> s:insert({2, 2, 1})\n"
#~ "---\n"
#~ "- [2, 2, 1]\n"
#~ "...\n"
#~ "tarantool> s:truncate()\n"
#~ "---\n"
#~ "..."

#~ msgid "``delete`` accepts a full key of any unique index."
#~ msgstr ""
#~ "``delete`` (удаление) работает с полными ключами любого уникального индекса."

#~ msgid "``space:delete`` is an alias for \"delete by primary key\"."
#~ msgstr ""
#~ "``space:delete`` -- это псевдоним для операции \"удалить по первичному "
#~ "ключу\"."

#~ msgid ""
#~ "tarantool> -- Insert some test data --\n"
#~ "tarantool> s:insert{3, 4, 5}\n"
#~ "---\n"
#~ "- [3, 4, 5]\n"
#~ "...\n"
#~ "tarantool> s:insert{6, 7, 8}\n"
#~ "---\n"
#~ "- [6, 7, 8]\n"
#~ "...\n"
#~ "tarantool> s:insert{9, 10, 11}\n"
#~ "---\n"
#~ "- [9, 10, 11]\n"
#~ "...\n"
#~ "tarantool> s:insert{12, 13, 14}\n"
#~ "---\n"
#~ "- [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Nothing done here: no {4} key in pk index --\n"
#~ "tarantool> s:delete{4}\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [3, 4, 5]\n"
#~ "  - [6, 7, 8]\n"
#~ "  - [9, 10, 11]\n"
#~ "  - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Delete by a primary key: ok --\n"
#~ "tarantool> s:delete{3}\n"
#~ "---\n"
#~ "- [3, 4, 5]\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [6, 7, 8]\n"
#~ "  - [9, 10, 11]\n"
#~ "  - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Explicitly delete by a primary key: ok --\n"
#~ "tarantool> s.index.pk:delete{6}\n"
#~ "---\n"
#~ "- [6, 7, 8]\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [9, 10, 11]\n"
#~ "  - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Delete by a unique secondary key: ok --\n"
#~ "s.index.sk_uniq:delete{10}\n"
#~ "---\n"
#~ "- [9, 10, 11]\n"
#~ "...\n"
#~ "s:select{}\n"
#~ "---\n"
#~ "- - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Delete by a non-unique secondary index: error --\n"
#~ "tarantool> s.index.sk_non_uniq:delete{14}\n"
#~ "---\n"
#~ "- error: Get() doesn't support partial keys and non-unique indexes\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> s:truncate()\n"
#~ "---\n"
#~ "..."
#~ msgstr ""
#~ "tarantool> -- Вставить некоторые тестовые данные --\n"
#~ "tarantool> s:insert{3, 4, 5}\n"
#~ "---\n"
#~ "- [3, 4, 5]\n"
#~ "...\n"
#~ "tarantool> s:insert{6, 7, 8}\n"
#~ "---\n"
#~ "- [6, 7, 8]\n"
#~ "...\n"
#~ "tarantool> s:insert{9, 10, 11}\n"
#~ "---\n"
#~ "- [9, 10, 11]\n"
#~ "...\n"
#~ "tarantool> s:insert{12, 13, 14}\n"
#~ "---\n"
#~ "- [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Здесь ничего не происходит: нет ключа {4} в индексе pk --\n"
#~ "tarantool> s:delete{4}\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [3, 4, 5]\n"
#~ "  - [6, 7, 8]\n"
#~ "  - [9, 10, 11]\n"
#~ "  - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Удалить по первичному ключу: разрешено --\n"
#~ "tarantool> s:delete{3}\n"
#~ "---\n"
#~ "- [3, 4, 5]\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [6, 7, 8]\n"
#~ "  - [9, 10, 11]\n"
#~ "  - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Точно удалить по первичному ключу: разрешено --\n"
#~ "tarantool> s.index.pk:delete{6}\n"
#~ "---\n"
#~ "- [6, 7, 8]\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [9, 10, 11]\n"
#~ "  - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Удалить по уникальному вторичному ключу: разрешено --\n"
#~ "s.index.sk_uniq:delete{10}\n"
#~ "---\n"
#~ "- [9, 10, 11]\n"
#~ "...\n"
#~ "s:select{}\n"
#~ "---\n"
#~ "- - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Удалить по неуникальному вторичному индексу: ошибка --\n"
#~ "tarantool> s.index.sk_non_uniq:delete{14}\n"
#~ "---\n"
#~ "- error: Get() doesn't support partial keys and non-unique indexes\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> s:truncate()\n"
#~ "---\n"
#~ "..."

#~ msgid "The key must be full: ``delete`` cannot work with partial keys."
#~ msgstr ""
#~ "Ключ должен быть полным: операция ``delete`` не работает с компонентами "
#~ "ключа."

#~ msgid ""
#~ "tarantool> s2 = box.schema.create_space('test2')\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> pk2 = s2:create_index('pk2', {parts = {{1, 'unsigned'}, {2, 'unsigned'}}})\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> s2:insert{1, 1}\n"
#~ "---\n"
#~ "- [1, 1]\n"
#~ "...\n"
#~ "tarantool> -- Delete by a partial key: error --\n"
#~ "tarantool> s2:delete{1}\n"
#~ "---\n"
#~ "- error: Invalid key part count in an exact match (expected 2, got 1)\n"
#~ "...\n"
#~ "tarantool> -- Delete by a full key: ok --\n"
#~ "tarantool> s2:delete{1, 1}\n"
#~ "---\n"
#~ "- [1, 1]\n"
#~ "...\n"
#~ "tarantool> s2:select{}\n"
#~ "---\n"
#~ "- []\n"
#~ "...\n"
#~ "tarantool> s2:drop()\n"
#~ "---\n"
#~ "..."
#~ msgstr ""
#~ "tarantool> s2 = box.schema.create_space('test2')\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> pk2 = s2:create_index('pk2', {parts = {{1, 'unsigned'}, {2, 'unsigned'}}})\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> s2:insert{1, 1}\n"
#~ "---\n"
#~ "- [1, 1]\n"
#~ "...\n"
#~ "tarantool> -- Удалить по компоненту ключа: ошибка --\n"
#~ "tarantool> s2:delete{1}\n"
#~ "---\n"
#~ "- error: Invalid key part count in an exact match (expected 2, got 1)\n"
#~ "...\n"
#~ "tarantool> -- Удалить по ключу целиком: разрешено --\n"
#~ "tarantool> s2:delete{1, 1}\n"
#~ "---\n"
#~ "- [1, 1]\n"
#~ "...\n"
#~ "tarantool> s2:select{}\n"
#~ "---\n"
#~ "- []\n"
#~ "...\n"
#~ "tarantool> s2:drop()\n"
#~ "---\n"
#~ "..."

#~ msgid ""
#~ "Similarly to ``delete``, ``update`` accepts a full key of any unique index, "
#~ "and also the operations to execute."
#~ msgstr ""
#~ "Как и ``delete``, ``update`` работает с полными ключами любого уникального "
#~ "индекса, а также выполняет операции."

#~ msgid "``space:update`` is an alias for \"update by primary key\"."
#~ msgstr ""
#~ "``space:update`` -- это псевдоним для операции \"обновить по первичному "
#~ "ключу\"."

#~ msgid ""
#~ "tarantool> -- Insert some test data --\n"
#~ "tarantool> s:insert{3, 4, 5}\n"
#~ "---\n"
#~ "- [3, 4, 5]\n"
#~ "...\n"
#~ "tarantool> s:insert{6, 7, 8}\n"
#~ "---\n"
#~ "- [6, 7, 8]\n"
#~ "...\n"
#~ "tarantool> s:insert{9, 10, 11}\n"
#~ "---\n"
#~ "- [9, 10, 11]\n"
#~ "...\n"
#~ "tarantool> s:insert{12, 13, 14}\n"
#~ "---\n"
#~ "- [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Nothing done here: no {4} key in pk index --\n"
#~ "s:update({4}, {{'=', 2, 400}})\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [3, 4, 5]\n"
#~ "  - [6, 7, 8]\n"
#~ "  - [9, 10, 11]\n"
#~ "  - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Update by a primary key: ok --\n"
#~ "tarantool> s:update({3}, {{'=', 2, 400}})\n"
#~ "---\n"
#~ "- [3, 400, 5]\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [3, 400, 5]\n"
#~ "  - [6, 7, 8]\n"
#~ "  - [9, 10, 11]\n"
#~ "  - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Explicitly update by a primary key: ok --\n"
#~ "tarantool> s.index.pk:update({6}, {{'=', 2, 700}})\n"
#~ "---\n"
#~ "- [6, 700, 8]\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [3, 400, 5]\n"
#~ "  - [6, 700, 8]\n"
#~ "  - [9, 10, 11]\n"
#~ "  - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Update by a unique secondary key: ok --\n"
#~ "tarantool> s.index.sk_uniq:update({10}, {{'=', 2, 1000}})\n"
#~ "---\n"
#~ "- [9, 1000, 11]\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [3, 400, 5]\n"
#~ "  - [6, 700, 8]\n"
#~ "  - [9, 1000, 11]\n"
#~ "  - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Update by a non-unique secondary key: error --\n"
#~ "tarantool> s.index.sk_non_uniq:update({14}, {{'=', 2, 1300}})\n"
#~ "---\n"
#~ "- error: Get() doesn't support partial keys and non-unique indexes\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [3, 400, 5]\n"
#~ "  - [6, 700, 8]\n"
#~ "  - [9, 1000, 11]\n"
#~ "  - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> s:truncate()\n"
#~ "---\n"
#~ "..."
#~ msgstr ""
#~ "tarantool> -- Вставить некоторые тестовые данные --\n"
#~ "tarantool> s:insert{3, 4, 5}\n"
#~ "---\n"
#~ "- [3, 4, 5]\n"
#~ "...\n"
#~ "tarantool> s:insert{6, 7, 8}\n"
#~ "---\n"
#~ "- [6, 7, 8]\n"
#~ "...\n"
#~ "tarantool> s:insert{9, 10, 11}\n"
#~ "---\n"
#~ "- [9, 10, 11]\n"
#~ "...\n"
#~ "tarantool> s:insert{12, 13, 14}\n"
#~ "---\n"
#~ "- [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Здесь ничего не происходит: нет ключа {4} в индексе pk --\n"
#~ "s:update({4}, {{'=', 2, 400}})\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [3, 4, 5]\n"
#~ "  - [6, 7, 8]\n"
#~ "  - [9, 10, 11]\n"
#~ "  - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Обновить по первичному ключу: разрешено --\n"
#~ "tarantool> s:update({3}, {{'=', 2, 400}})\n"
#~ "---\n"
#~ "- [3, 400, 5]\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [3, 400, 5]\n"
#~ "  - [6, 7, 8]\n"
#~ "  - [9, 10, 11]\n"
#~ "  - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Точно обновить по первичному ключу: разрешено --\n"
#~ "tarantool> s.index.pk:update({6}, {{'=', 2, 700}})\n"
#~ "---\n"
#~ "- [6, 700, 8]\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [3, 400, 5]\n"
#~ "  - [6, 700, 8]\n"
#~ "  - [9, 10, 11]\n"
#~ "  - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Обновить по уникальному вторичному ключу: разрешено --\n"
#~ "tarantool> s.index.sk_uniq:update({10}, {{'=', 2, 1000}})\n"
#~ "---\n"
#~ "- [9, 1000, 11]\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [3, 400, 5]\n"
#~ "  - [6, 700, 8]\n"
#~ "  - [9, 1000, 11]\n"
#~ "  - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> -- Обновить по неуникальному вторичному ключу: ошибка --\n"
#~ "tarantool> s.index.sk_non_uniq:update({14}, {{'=', 2, 1300}})\n"
#~ "---\n"
#~ "- error: Get() doesn't support partial keys and non-unique indexes\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [3, 400, 5]\n"
#~ "  - [6, 700, 8]\n"
#~ "  - [9, 1000, 11]\n"
#~ "  - [12, 13, 14]\n"
#~ "...\n"
#~ "tarantool> s:truncate()\n"
#~ "---\n"
#~ "..."

#~ msgid "``upsert`` accepts a well-formatted tuple and update operations."
#~ msgstr ""
#~ "``upsert`` (обновление и вставка) работает с кортежами с четким форматом и "
#~ "выполняет операции обновления."

#~ msgid "Indexes have no ``upsert`` method - this is a method of a space."
#~ msgstr "Для индексов нет метода ``upsert`` -- это метод для спейса."

#~ msgid ""
#~ "tarantool> s:upsert({1, 2, 3}, {{'=', 2, 200}})\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> -- As you can see, {1, 2, 3} were inserted, --\n"
#~ "tarantool> -- and the update operations were not applied. --\n"
#~ "s:select{}\n"
#~ "---\n"
#~ "- - [1, 2, 3]\n"
#~ "...\n"
#~ "tarantool> -- Performing another upsert with the same primary key, --\n"
#~ "tarantool> -- but different values in the other fields. --\n"
#~ "s:upsert({1, 20, 30}, {{'=', 2, 200}})\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> -- The old tuple was found by the primary key {1} --\n"
#~ "tarantool> -- and update operations were applied. --\n"
#~ "tarantool> -- The new tuple was ignored. --\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [1, 200, 3]\n"
#~ "..."
#~ msgstr ""
#~ "tarantool> s:upsert({1, 2, 3}, {{'=', 2, 200}})\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> -- Как можно увидеть, произошла вставка {1, 2, 3}, --\n"
#~ "tarantool> -- а операции обновления не применились. --\n"
#~ "s:select{}\n"
#~ "---\n"
#~ "- - [1, 2, 3]\n"
#~ "...\n"
#~ "tarantool> -- Еще одна операция upsert с тем же первичным ключом, --\n"
#~ "tarantool> -- но другими значениями прочих полей. --\n"
#~ "s:upsert({1, 20, 30}, {{'=', 2, 200}})\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> -- Старый кортеж был найден по первичному ключу {1}, --\n"
#~ "tarantool> -- и применились операции обновления. --\n"
#~ "tarantool> -- Новый кортеж игнорируется. --\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [1, 200, 3]\n"
#~ "..."

#~ msgid "If the old tuple was not found, then just the new tuple is inserted."
#~ msgstr "Если старый кортеж не найден, вставляется новый кортеж."

#~ msgid ""
#~ "tarantool> s:insert{1, 1, 1}\n"
#~ "---\n"
#~ "- [1, 1, 1]\n"
#~ "...\n"
#~ "tarantool> s:insert{2, 2, 2}\n"
#~ "---\n"
#~ "- [2, 2, 2]\n"
#~ "...\n"
#~ "tarantool> -- This replace fails, because if the new tuple {1, 2, 0} replaces --\n"
#~ "tarantool> -- the old tuple by the primary key from 'pk' index {1, 1, 1}, --\n"
#~ "tarantool> -- this results in a duplicate unique secondary key in 'sk_uniq' index: --\n"
#~ "tarantool> -- key {2} is used both in the new tuple and in {2, 2, 2}. --\n"
#~ "tarantool> s:replace{1, 2, 0}\n"
#~ "---\n"
#~ "- error: Duplicate key exists in unique index 'sk_uniq' in space 'test'\n"
#~ "...\n"
#~ "tarantool> s:truncate()\n"
#~ "---\n"
#~ "..."
#~ msgstr ""
#~ "tarantool> s:insert{1, 1, 1}\n"
#~ "---\n"
#~ "- [1, 1, 1]\n"
#~ "...\n"
#~ "tarantool> s:insert{2, 2, 2}\n"
#~ "---\n"
#~ "- [2, 2, 2]\n"
#~ "...\n"
#~ "tarantool> -- Такая замена не сработает, поскольку замена новым кортежем {1, 2, 0} --\n"
#~ "tarantool> -- старого кортежа по первичному ключу из индекса 'pk' {1, 1, 1}, --\n"
#~ "tarantool> -- приведет к созданию дубликата уникального вторичного ключа в индексе 'sk_uniq': --\n"
#~ "tarantool> -- ключ {2} используется и в новом кортеже, и в {2, 2, 2}. --\n"
#~ "tarantool> s:replace{1, 2, 0}\n"
#~ "---\n"
#~ "- error: Duplicate key exists in unique index 'sk_uniq' in space 'test'\n"
#~ "...\n"
#~ "tarantool> s:truncate()\n"
#~ "---\n"
#~ "..."

#~ msgid ""
#~ "``select`` works with any indexes (primary/secondary) and with any keys "
#~ "(unique/non-unique, full/partial)."
#~ msgstr ""
#~ "``select`` (выборка) работает с любыми индексами (первичными/вторичными) и с"
#~ " любыми ключами (уникальными/неуникальными, полными/компонентами)."

#~ msgid ""
#~ "If a key is partial, then ``select`` searches by all keys, where the prefix "
#~ "matches the specified key part."
#~ msgstr ""
#~ "Если задан компонент ключа, ``select`` выполняет поиск всех ключей, префикс "
#~ "которых совпадает с указанным компонентом ключа."

#~ msgid ""
#~ "tarantool> s:insert{1, 2, 3}\n"
#~ "---\n"
#~ "- [1, 2, 3]\n"
#~ "...\n"
#~ "tarantool> s:insert{4, 5, 6}\n"
#~ "---\n"
#~ "- [4, 5, 6]\n"
#~ "...\n"
#~ "tarantool> s:insert{7, 8, 9}\n"
#~ "---\n"
#~ "- [7, 8, 9]\n"
#~ "...\n"
#~ "tarantool> s:insert{10, 11, 9}\n"
#~ "---\n"
#~ "- [10, 11, 9]\n"
#~ "...\n"
#~ "tarantool> s:select{1}\n"
#~ "---\n"
#~ "- - [1, 2, 3]\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [1, 2, 3]\n"
#~ "  - [4, 5, 6]\n"
#~ "  - [7, 8, 9]\n"
#~ "  - [10, 11, 9]\n"
#~ "...\n"
#~ "tarantool> s.index.pk:select{4}\n"
#~ "---\n"
#~ "- - [4, 5, 6]\n"
#~ "...\n"
#~ "tarantool> s.index.sk_uniq:select{8}\n"
#~ "---\n"
#~ "- - [7, 8, 9]\n"
#~ "...\n"
#~ "tarantool> s.index.sk_non_uniq:select{9}\n"
#~ "---\n"
#~ "- - [7, 8, 9]\n"
#~ "  - [10, 11, 9]\n"
#~ "..."
#~ msgstr ""
#~ "tarantool> s:insert{1, 2, 3}\n"
#~ "---\n"
#~ "- [1, 2, 3]\n"
#~ "...\n"
#~ "tarantool> s:insert{4, 5, 6}\n"
#~ "---\n"
#~ "- [4, 5, 6]\n"
#~ "...\n"
#~ "tarantool> s:insert{7, 8, 9}\n"
#~ "---\n"
#~ "- [7, 8, 9]\n"
#~ "...\n"
#~ "tarantool> s:insert{10, 11, 9}\n"
#~ "---\n"
#~ "- [10, 11, 9]\n"
#~ "...\n"
#~ "tarantool> s:select{1}\n"
#~ "---\n"
#~ "- - [1, 2, 3]\n"
#~ "...\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [1, 2, 3]\n"
#~ "  - [4, 5, 6]\n"
#~ "  - [7, 8, 9]\n"
#~ "  - [10, 11, 9]\n"
#~ "...\n"
#~ "tarantool> s.index.pk:select{4}\n"
#~ "---\n"
#~ "- - [4, 5, 6]\n"
#~ "...\n"
#~ "tarantool> s.index.sk_uniq:select{8}\n"
#~ "---\n"
#~ "- - [7, 8, 9]\n"
#~ "...\n"
#~ "tarantool> s.index.sk_non_uniq:select{9}\n"
#~ "---\n"
#~ "- - [7, 8, 9]\n"
#~ "  - [10, 11, 9]\n"
#~ "..."
