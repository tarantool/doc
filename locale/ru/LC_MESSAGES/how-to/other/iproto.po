
msgid "Examples"
msgstr "Примеры"

msgid ""
"To follow the examples in this section, get a single Linux computer and "
"start three command-line shells (\"terminals\")."
msgstr ""
"Чтобы выполнить примеры, приведенные в этом разделе, запустите на компьютере"
" с Linux три командных оболочки (терминала)."

msgid ""
"-- On terminal #1, Start monitoring port 3302 with `tcpdump "
"<https://www.tcpdump.org/manpages/tcpdump.1.html>`_: |br|"
msgstr ""
"-- На терминале №1 запустите мониторинг порта 3302 с помощью `tcpdump "
"<https://www.tcpdump.org/manpages/tcpdump.1.html>`_: |br|"

msgid "sudo tcpdump -i lo 'port 3302' -X"
msgstr "sudo tcpdump -i lo 'port 3302' -X"

msgid "On terminal #2, start a server with:"
msgstr "На терминале №2 запустите сервер так:"

msgid ""
"box.cfg{listen=3302}\n"
"box.schema.space.create('tspace')\n"
"box.space.tspace:create_index('I')\n"
"box.space.tspace:insert{280}\n"
"box.schema.user.grant('guest','read,write,execute,create,drop','universe')"
msgstr ""
"box.cfg{listen=3302}\n"
"box.schema.space.create('tspace')\n"
"box.space.tspace:create_index('I')\n"
"box.space.tspace:insert{280}\n"
"box.schema.user.grant('guest','read,write,execute,create,drop','universe')"

msgid ""
"On terminal #3, start another server, which will act as a client, with:"
msgstr ""
"На терминале №3 запустите ещё один сервер, который будет выступать в "
"качестве клиента, так:"

msgid ""
"box.cfg{}\n"
"net_box = require('net.box')\n"
"conn = net_box.connect('localhost:3302')\n"
"conn.space.tspace:select(280)"
msgstr ""
"box.cfg{}\n"
"net_box = require('net.box')\n"
"conn = net_box.connect('localhost:3302')\n"
"conn.space.tspace:select(280)"

msgid ""
"Now look at what tcpdump shows for the job connecting to 3302 -- the "
"\"request\". After the words \"length 32\" is a packet that ends with these "
"32 bytes (we have added indented comments):"
msgstr ""
"Теперь посмотрите, что tcpdump покажет для запроса на подключение к порту "
"3302. После слов «length 32» идет пакет, который заканчивается этими 32 "
"байтами (комментарии отделены отступами):"

msgid ""
"ce 00 00 00 1b   MP_UINT = decimal 27 = number of bytes after this\n"
"82               MP_MAP, size 2 (we'll call this \"Main-Map\")\n"
"01                 IPROTO_SYNC (Main-Map Item#1)\n"
"04                 MP_INT = 4 = number that gets incremented with each request\n"
"00                 IPROTO_REQUEST_TYPE (Main-Map Item#2)\n"
"01                 IPROTO_SELECT\n"
"86                 MP_MAP, size 6 (we'll call this \"Select-Map\")\n"
"10                   IPROTO_SPACE_ID (Select-Map Item#1)\n"
"cd 02 00             MP_UINT = decimal 512 = id of tspace (could be larger)\n"
"11                   IPROTO_INDEX_ID (Select-Map Item#2)\n"
"00                   MP_INT = 0 = id of index within tspace\n"
"14                   IPROTO_ITERATOR (Select-Map Item#3)\n"
"00                   MP_INT = 0 = Tarantool iterator_type.h constant ITER_EQ\n"
"13                   IPROTO_OFFSET (Select-Map Item#4)\n"
"00                   MP_INT = 0 = amount to offset\n"
"12                   IPROTO_LIMIT (Select-Map Item#5)\n"
"ce ff ff ff ff       MP_UINT = 4294967295 = biggest possible limit\n"
"20                   IPROTO_KEY (Select-Map Item#6)\n"
"91                   MP_ARRAY, size 1 (we'll call this \"Key-Array\")\n"
"cd 01 18               MP_UINT = 280 (Select-Map Item#6, Key-Array Item#1)\n"
"                       -- 280 is the key value that we are searching for"
msgstr ""
"ce 00 00 00 1b   MP_UINT = 27, десятичное число = число байт после этого\n"
"82               MP_MAP, размер 2 (назовем это Main-Map)\n"
"01                 IPROTO_SYNC (1-й элемент Main-Map)\n"
"04                 MP_INT = 4 = число, которое увеличивается на 1 с каждым запросом\n"
"00                 IPROTO_REQUEST_TYPE (2-й элемент Main-Map)\n"
"01                 IPROTO_SELECT\n"
"86                 MP_MAP, размер 6 (назовем это Select-Map)\n"
"10                   IPROTO_SPACE_ID (1-й элемент Select-Map)\n"
"cd 02 00             MP_UINT = 512, десятичное число = id tspace (может быть больше)\n"
"11                   IPROTO_INDEX_ID (2-й элемент Select-Map)\n"
"00                   MP_INT = 0 = id индекса в tspace\n"
"14                   IPROTO_ITERATOR (3-й элемент Select-Map)\n"
"00                   MP_INT = 0 = константа Tarantool iterator_type.h ITER_EQ\n"
"13                   IPROTO_OFFSET (4-й элемент Select-Map)\n"
"00                   MP_INT = 0 = смещение\n"
"12                   IPROTO_LIMIT (5-й элемент Select-Map)\n"
"ce ff ff ff ff       MP_UINT = 4294967295 = наибольший возможный предел\n"
"20                   IPROTO_KEY (6-й элемент Select-Map)\n"
"91                   MP_ARRAY, размер 1 (назовем это Key-Array)\n"
"cd 01 18               MP_UINT = 280 (6-й элемент Select-Map, 1-й элемент Key-Array)\n"
"                       -- 280, ключевое значение, которое мы ищем"

msgid ""
"Now read the source code file `net_box.c "
"<https://github.com/tarantool/tarantool/blob/master/src/box/lua/net_box.c>`_"
" and skip to the line ``netbox_encode_select(lua_State *L)``. From the "
"comments and from simple function calls like ``mpstream_encode_uint(&stream,"
" IPROTO_SPACE_ID);`` you will be able to see how net_box put together the "
"packet contents that you have just observed with tcpdump."
msgstr ""
"Теперь в файле исходного кода `net_box.c "
"<https://github.com/tarantool/tarantool/blob/master/src/box/lua/net_box.c>`_"
" перейдите к строке ``netbox_encode_select(lua_State *L)``. Из комментариев "
"и из простых вызовов функций типа ``mpstream_encode_uint(&stream, "
"IPROTO_SPACE_ID);`` можно понять, как net_box собирает воедино содержимое "
"пакета, описанного выше с помощью tcpdump."

msgid ""
"There are libraries for reading and writing MessagePack objects. C "
"programmers sometimes include `msgpuck.h "
"<https://github.com/rtsisyk/msgpuck>`_."
msgstr ""
"Существуют библиотеки для чтения и записи объектов в формате MessagePack. "
"Программисты на языке C иногда включают `msgpuck.h "
"<https://github.com/rtsisyk/msgpuck>`_."

msgid ""
"Now you know how Tarantool itself makes requests with the binary protocol. "
"When in doubt about a detail, consult ``net_box.c`` -- it has routines for "
"each request. Some :ref:`connectors <index-box_connectors>` have similar "
"code."
msgstr ""
"Теперь вы знаете, как сам Tarantool выполняет запросы по бинарному "
"протоколу. Если какие-то детали остаются неясными, обратитесь к файлу "
"``net_box.c``, где описаны процедуры для каждого запроса. Некоторые "
":ref:`коннекторы <index-box_connectors>` написаны аналогично."

msgid ""
"For an IPROTO_UPDATE example, suppose a user changes field #2 in tuple #2 in"
" space #256 to ``'BBBB'``. The body will look like this: (notice that in "
"this case there is an extra map item IPROTO_INDEX_BASE, to emphasize that "
"field numbers start with 1, which is optional and can be omitted):"
msgstr ""
"Рассмотрим пример IPROTO_UPDATE. Предположим, пользователь изменяет поле №2 "
"кортежа №2 в спейсе №256 на `'BBBB'``. Тело будет выглядеть так (обратите "
"внимание, что в этом случае дополнительный необязательный элемент "
"ассоциативного массива IPROTO_INDEX_BASE подчеркивает, что номера полей "
"начинаются с 1 — это можно опустить):"

msgid ""
"04               IPROTO_UPDATE\n"
"85               IPROTO_MAP, size 5\n"
"10                 IPROTO_SPACE_ID, Map Item#1\n"
"cd 02 00           MP_UINT 256\n"
"11                 IPROTO_INDEX_ID, Map Item#2\n"
"00                 MP_INT 0 = primary-key index number\n"
"15                 IPROTO_INDEX_BASE, Map Item#3\n"
"01                 MP_INT = 1 i.e. field numbers start at 1\n"
"21                 IPROTO_TUPLE, Map Item#4\n"
"91                 MP_ARRAY, size 1, for array of operations\n"
"93                   MP_ARRAY, size 3\n"
"a1 3d                   MP_STR = OPERATOR = '='\n"
"02                      MP_INT = FIELD_NO = 2\n"
"a5 42 42 42 42 42       MP_STR = VALUE = 'BBBB'\n"
"20                 IPROTO_KEY, Map Item#5\n"
"91                 MP_ARRAY, size 1, for array of key values\n"
"02                   MP_UINT = primary-key value = 2"
msgstr ""
"04               IPROTO_UPDATE\n"
"85               IPROTO_MAP, размер 5\n"
"10                 IPROTO_SPACE_ID, 1-й элемент ассоциативного массива\n"
"cd 02 00           MP_UINT 256\n"
"11                 IPROTO_INDEX_ID, 2-й элемент ассоциативного массива\n"
"00                 MP_INT 0 = номер индекса первичного ключа\n"
"15                 IPROTO_INDEX_BASE, 3-й элемент ассоциативного массива\n"
"01                 MP_INT = 1, т.е. нумерация полей начинается с 1\n"
"21                 IPROTO_TUPLE, 4-й элемент ассоциативного массива\n"
"91                 MP_ARRAY, размер 1, для массива операций\n"
"93                   MP_ARRAY, размер 3\n"
"a1 3d                   MP_STR = OPERATOR = '='\n"
"02                      MP_INT = FIELD_NO = 2\n"
"a5 42 42 42 42 42       MP_STR = VALUE = 'BBBB'\n"
"20                 IPROTO_KEY, 5--й элемент ассоциативного массива\n"
"91                 MP_ARRAY, размер 1, для массива ключей\n"
"02                   MP_UINT = значение первичного ключа = 2"

msgid ""
"Byte codes for the :ref:`IPROTO_EXECUTE <box_protocol-execute>` example:"
msgstr "Пример байт-кода :ref:`IPROTO_EXECUTE <box_protocol-execute>`:"

msgid ""
"0b               IPROTO_EXECUTE\n"
"83               MP_MAP, size 3\n"
"43                 IPROTO_STMT_ID Map Item#1\n"
"ce d7 aa 74 1b     MP_UINT value of n.stmt_id\n"
"41                 IPROTO_SQL_BIND Map Item#2\n"
"92                 MP_ARRAY, size 2\n"
"01                   MP_INT = 1 = value for first parameter\n"
"a1 61                MP_STR = 'a' = value for second parameter\n"
"2b                 IPROTO_OPTIONS Map Item#3\n"
"90                 MP_ARRAY, size 0 (there are no options)"
msgstr ""
"0b               IPROTO_EXECUTE\n"
"83               MP_MAP, размер 3\n"
"43                 IPROTO_STMT_ID 1-й элемент ассоциативного массива\n"
"ce d7 aa 74 1b     MP_UINT значение n.stmt_id\n"
"41                 IPROTO_SQL_BIND 2-й элемент ассоциативного массива\n"
"92                 MP_ARRAY, размер 2\n"
"01                   MP_INT = 1 = значение первого параметра\n"
"a1 61                MP_STR = 'a' = значение второго параметра\n"
"2b                 IPROTO_OPTIONS 3-й элемент ассоциативного массива\n"
"90                 MP_ARRAY, размер 0 (никакие опции не выбраны)"

msgid ""
"Byte codes for the response to the "
":codenormal:`box.space.`:codeitalic:`space-name`:codenormal:`:insert{6}` "
"example:"
msgstr ""
"Пример байт-кода ответа на запрос "
":codenormal:`box.space.`:codeitalic:`space-name`:codenormal:`:insert{6}`:"

msgid ""
"ce 00 00 00 20                MP_UINT = HEADER AND BODY SIZE\n"
"83                            MP_MAP, size 3\n"
"00                              Response-Code-Indicator\n"
"ce 00 00 00 00                  MP_UINT = IPROTO_OK\n"
"01                              IPROTO_SYNC\n"
"cf 00 00 00 00 00 00 00 53      MP_UINT = sync value\n"
"05                              IPROTO_SCHEMA_VERSION\n"
"ce 00 00 00 68                  MP_UINT = schema version\n"
"81                            MP_MAP, size 1\n"
"30                              IPROTO_DATA\n"
"dd 00 00 00 01                  MP_ARRAY, size 1 (row count)\n"
"91                              MP_ARRAY, size 1 (field count)\n"
"06                              MP_INT = 6 = the value that was inserted"
msgstr ""
"ce 00 00 00 20                MP_UINT = размер заголовка и тела\n"
"83                            MP_MAP, размер 3\n"
"00                              индикатор кода ответа\n"
"ce 00 00 00 00                  MP_UINT = IPROTO_OK\n"
"01                              IPROTO_SYNC\n"
"cf 00 00 00 00 00 00 00 53      MP_UINT = значение синхронизации\n"
"05                              IPROTO_SCHEMA_VERSION\n"
"ce 00 00 00 68                  MP_UINT = версия схемы\n"
"81                            MP_MAP, размер 1\n"
"30                              IPROTO_DATA\n"
"dd 00 00 00 01                  MP_ARRAY, размер 1 (число строк)\n"
"91                              MP_ARRAY, размер 1 (число полей)\n"
"06                              MP_INT = 6 = добавленное значение"

msgid ""
"Byte codes for the response to the "
"``conn:eval([[box.schema.space.create('_space');]])`` example:"
msgstr ""
"Пример байт-кода ответа на запрос "
"``conn:eval([[box.schema.space.create('_space');]])``:"

msgid ""
"ce 00 00 00 3b                  MP_UINT = HEADER AND BODY SIZE\n"
"83                              MP_MAP, size 3 (i.e. 3 items in header)\n"
"   00                              Response-Code-Indicator\n"
"   ce 00 00 80 0a                  MP_UINT = hexadecimal 800a\n"
"   01                              IPROTO_SYNC\n"
"   cf 00 00 00 00 00 00 00 26      MP_UINT = sync value\n"
"   05                              IPROTO_SCHEMA_VERSION\n"
"   ce 00 00 00 78                  MP_UINT = schema version value\n"
"   81                              MP_MAP, size 1\n"
"     31                              IPROTO_ERROR_24\n"
"     db 00 00 00 1d 53 70 61 63 etc. MP_STR = \"Space '_space' already exists\""
msgstr ""
"ce 00 00 00 3b                  MP_UINT = размер заголовка и тела\n"
"83                              MP_MAP, размер 3 (3 элемента в заголовке)\n"
"   00                              индикатор кода ответа\n"
"   ce 00 00 80 0a                  MP_UINT = шестнадцатеричное значение 800a\n"
"   01                              IPROTO_SYNC\n"
"   cf 00 00 00 00 00 00 00 26      MP_UINT = значение синхронизации\n"
"   05                              IPROTO_SCHEMA_VERSION\n"
"   ce 00 00 00 78                  MP_UINT = версия схемы \n"
"   81                              MP_MAP, размер 1\n"
"     31                              IPROTO_ERROR_24\n"
"     db 00 00 00 1d 53 70 61 63 ... MP_STR = \"Space '_space' already exists\""

msgid ""
"Byte codes, if we use the same net.box connection that we used for "
":ref:`Binary protocol -- illustration <box_protocol-illustration>` and we "
"say |br| ``conn:execute([[CREATE TABLE t1 (dd INT PRIMARY KEY AUTOINCREMENT,"
" дд STRING COLLATE \"unicode\");]])`` |br| ``conn:execute([[INSERT INTO t1 "
"VALUES (NULL, 'a'), (NULL, 'b');]])`` |br| and we watch what tcpdump "
"displays, we will see two noticeable things: (1) the CREATE statement caused"
" a schema change so the response has a new IPROTO_SCHEMA_VERSION value and "
"the body includes the new contents of some system tables (caused by requests"
" from net.box which users will not see); (2) the final bytes of the response"
" to the INSERT will be:"
msgstr ""
"Подключимся через то же соединение net.box, что приводилось в :ref:`примерах"
" <box_protocol-illustration>`, и выполним следующее: |br| "
"``conn:execute([[CREATE TABLE t1 (dd INT PRIMARY KEY AUTOINCREMENT, дд "
"STRING COLLATE \"unicode\");]])`` |br| ``conn:execute([[INSERT INTO t1 "
"VALUES (NULL, 'a'), (NULL, 'b');]])`` |br| Результат вывода tcpdump покажет "
"два интересных момента: (1) инструкция CREATE привела к изменению схемы, так"
" что в ответе указано новое значение IPROTO_SCHEMA_VERSION. При этом тело "
"включает новое содержимое некоторых системных таблиц, полученное в "
"результате невидимых для пользователя запросов от net.box; (2) последние "
"байты ответа на INSERT будут следующими:"

msgid ""
"81   MP_MAP, size 1\n"
"42     IPROTO_SQL_INFO\n"
"82     MP_MAP, size 2\n"
"00       Tarantool constant (not in iproto_constants.h) = SQL_INFO_ROW_COUNT\n"
"02       1 = row count\n"
"01       Tarantool constant (not in iproto_constants.h) = SQL_INFO_AUTOINCREMENT_ID\n"
"92       MP_ARRAY, size 2\n"
"01         first autoincrement number\n"
"02         second autoincrement number"
msgstr ""
"81   MP_MAP, размер 1\n"
"42     IPROTO_SQL_INFO\n"
"82     MP_MAP, размер 2\n"
"00       константа Tarantool (не из iproto_constants.h) = SQL_INFO_ROW_COUNT\n"
"02       1 = число строк\n"
"01       константа Tarantool (не из iproto_constants.h) = SQL_INFO_AUTOINCREMENT_ID\n"
"92       MP_ARRAY, размер 2\n"
"01         первое число с автоинкрементом\n"
"02         второе число с автоинкрементом"

msgid ""
"Byte codes for the SQL SELECT example, if we ask for full metadata by saying"
" |br| :code:`conn.space._session_settings:update('sql_full_metadata', {{'=',"
" 'value', true}})` |br| and we select the two rows from the table that we "
"just created |br| :code:`conn:execute([[SELECT dd, дд AS д FROM t1;]])` |br|"
" then tcpdump will show this response, after the header:"
msgstr ""
"Пример байт-кода SQL SELECT. Запросим полные метаданные, вызвав "
":code:`conn.space._session_settings:update('sql_full_metadata', {{'=', "
"'value', true}})`, и выберем две строки из только что созданной таблицы: "
":code:`conn:execute([[SELECT dd, дд AS д FROM t1;]])`. tcpdump выдаст "
"следующий ответ (после заголовка):"

msgid ""
"82                       MP_MAP, size 2 (i.e. metadata and rows)\n"
"32                         IPROTO_METADATA\n"
"92                         MP_ARRAY, size 2 (i.e. 2 columns)\n"
"85                           MP_MAP, size 5 (i.e. 5 items for column#1)\n"
"00 a2 44 44                    IPROTO_FIELD_NAME and 'DD'\n"
"01 a7 69 6e 74 65 67 65 72     IPROTO_FIELD_TYPE and 'integer'\n"
"03 c2                          IPROTO_FIELD_IS_NULLABLE and false\n"
"04 c3                          IPROTO_FIELD_IS_AUTOINCREMENT and true\n"
"05 c0                          PROTO_FIELD_SPAN and nil\n"
"85                           MP_MAP, size 5 (i.e. 5 items for column#2)\n"
"00 a2 d0 94                    IPROTO_FIELD_NAME and 'Д' upper case\n"
"01 a6 73 74 72 69 6e 67        IPROTO_FIELD_TYPE and 'string'\n"
"02 a7 75 6e 69 63 6f 64 65     IPROTO_FIELD_COLL and 'unicode'\n"
"03 c3                          IPROTO_FIELD_IS_NULLABLE and true\n"
"05 a4 d0 b4 d0 b4              IPROTO_FIELD_SPAN and 'дд' lower case\n"
"30                         IPROTO_DATA\n"
"92                         MP_ARRAY, size 2\n"
"92                           MP_ARRAY, size 2\n"
"01                             MP_INT = 1 i.e. contents of row#1 column#1\n"
"a1 61                          MP_STR = 'a' i.e. contents of row#1 column#2\n"
"92                           MP_ARRAY, size 2\n"
"02                             MP_INT = 2 i.e. contents of row#2 column#1\n"
"a1 62                          MP_STR = 'b' i.e. contents of row#2 column#2"
msgstr ""
"82                       MP_MAP, размер 2 (метаданные и строки)\n"
"32                         IPROTO_METADATA\n"
"92                         MP_ARRAY, размер 2 (2 столбца)\n"
"85                           MP_MAP, размер 5 (5 элементов для столбца 1)\n"
"00 a2 44 44                    IPROTO_FIELD_NAME и 'DD'\n"
"01 a7 69 6e 74 65 67 65 72     IPROTO_FIELD_TYPE и 'integer'\n"
"03 c2                          IPROTO_FIELD_IS_NULLABLE и false\n"
"04 c3                          IPROTO_FIELD_IS_AUTOINCREMENT и true\n"
"05 c0                          PROTO_FIELD_SPAN и nil\n"
"85                           MP_MAP, размер 5 (5 элементов для столбца 2)\n"
"00 a2 d0 94                    IPROTO_FIELD_NAME и 'Д' в верхнем регистре\n"
"01 a6 73 74 72 69 6e 67        IPROTO_FIELD_TYPE и 'string'\n"
"02 a7 75 6e 69 63 6f 64 65     IPROTO_FIELD_COLL и 'unicode'\n"
"03 c3                          IPROTO_FIELD_IS_NULLABLE и true\n"
"05 a4 d0 b4 d0 b4              IPROTO_FIELD_SPAN и 'дд' в нижнем регистре\n"
"30                         IPROTO_DATA\n"
"92                         MP_ARRAY, размер 2\n"
"92                           MP_ARRAY, размер 2\n"
"01                             MP_INT = 1: содержимое строки 1, столбца 1\n"
"a1 61                          MP_STR = 'a': содержимое строки 1, столбца 2\n"
"92                           MP_ARRAY, размер 2\n"
"02                             MP_INT = 2: содержимое строки 2, столбца 1\n"
"a1 62                          MP_STR = 'b': содержимое строки 2, столбца 2"

msgid ""
"Byte code for the SQL PREPARE example. If we said |br| "
":code:`conn:prepare([[SELECT dd, дд AS д FROM t1;]])` |br| then tcpdump "
"would show almost the same response, but there would be no IPROTO_DATA. "
"Instead, additional items will appear:"
msgstr ""
"Пример байт-кода SQL PREPARE. Если вызвать :code:`conn:prepare([[SELECT dd, "
"дд AS д FROM t1;]])`, вывод tcpdump будет почти таким же, но исчезнет "
"IPROTO_DATA. Вместо этого появятся дополнительные байты:"

msgid ""
"34                       IPROTO_BIND_COUNT\n"
"00                       MP_UINT = 0\n"
"\n"
"33                       IPROTO_BIND_METADATA\n"
"90                       MP_ARRAY, size 0"
msgstr ""
"34                       IPROTO_BIND_COUNT\n"
"00                       MP_UINT = 0\n"
"\n"
"33                       IPROTO_BIND_METADATA\n"
"90                       MP_ARRAY, размер 0"

msgid ""
"``MP_UINT = 0`` and ``MP_ARRAY`` has size 0 because there are no parameters "
"to bind. Full output:"
msgstr ""
"``MP_UINT = 0``. Массив ``MP_ARRAY`` имеет размер 0, поскольку параметров "
"нет. Вывод целиком:"

msgid ""
"84                       MP_MAP, size 4\n"
"43                         IPROTO_STMT_ID\n"
"ce c2 3c 2c 1e             MP_UINT = statement id\n"
"34                         IPROTO_BIND_COUNT\n"
"00                         MP_INT = 0 = number of parameters to bind\n"
"33                         IPROTO_BIND_METADATA\n"
"90                         MP_ARRAY, size 0 = there are no parameters to bind\n"
"32                         IPROTO_METADATA\n"
"92                         MP_ARRAY, size 2 (i.e. 2 columns)\n"
"85                           MP_MAP, size 5 (i.e. 5 items for column#1)\n"
"00 a2 44 44                    IPROTO_FIELD_NAME and 'DD'\n"
"01 a7 69 6e 74 65 67 65 72     IPROTO_FIELD_TYPE and 'integer'\n"
"03 c2                          IPROTO_FIELD_IS_NULLABLE and false\n"
"04 c3                          IPROTO_FIELD_IS_AUTOINCREMENT and true\n"
"05 c0                          PROTO_FIELD_SPAN and nil\n"
"85                           MP_MAP, size 5 (i.e. 5 items for column#2)\n"
"00 a2 d0 94                    IPROTO_FIELD_NAME and 'Д' upper case\n"
"01 a6 73 74 72 69 6e 67        IPROTO_FIELD_TYPE and 'string'\n"
"02 a7 75 6e 69 63 6f 64 65     IPROTO_FIELD_COLL and 'unicode'\n"
"03 c3                          IPROTO_FIELD_IS_NULLABLE and true\n"
"05 a4 d0 b4 d0 b4              IPROTO_FIELD_SPAN and 'дд' lower case"
msgstr ""
"84                       MP_MAP, размер 4\n"
"43                         IPROTO_STMT_ID\n"
"ce c2 3c 2c 1e             MP_UINT = ID инструкции\n"
"34                         IPROTO_BIND_COUNT\n"
"00                         MP_INT = 0 = число привязываемых параметров\n"
"33                         IPROTO_BIND_METADATA\n"
"90                         MP_ARRAY, размер 0 = нет привязываемых параметров\n"
"32                         IPROTO_METADATA\n"
"92                         MP_ARRAY, размер 2 (2 столбца)\n"
"85                           MP_MAP, размер 5 (5 элементов для столбца 1)\n"
"00 a2 44 44                    IPROTO_FIELD_NAME и 'DD'\n"
"01 a7 69 6e 74 65 67 65 72     IPROTO_FIELD_TYPE и 'integer'\n"
"03 c2                          IPROTO_FIELD_IS_NULLABLE и false\n"
"04 c3                          IPROTO_FIELD_IS_AUTOINCREMENT и true\n"
"05 c0                          PROTO_FIELD_SPAN и nil\n"
"85                           MP_MAP, размер 5 (5 элементов для столбца 2)\n"
"00 a2 d0 94                    IPROTO_FIELD_NAME + 'Д' в верхнем регистре\n"
"01 a6 73 74 72 69 6e 67        IPROTO_FIELD_TYPE и 'string'\n"
"02 a7 75 6e 69 63 6f 64 65     IPROTO_FIELD_COLL и 'unicode'\n"
"03 c3                          IPROTO_FIELD_IS_NULLABLE и true\n"
"05 a4 d0 b4 d0 b4              IPROTO_FIELD_SPAN и 'дд' в нижнем регистре"

msgid "Byte code for the :ref:`heartbeat <box_protocol-heartbeat>` example. The master might send this body:"
msgstr ""
"Пример байт-кода :ref:`контрольного сигнала <box_protocol-heartbeat>`. Мастер может отправить следующее "
"тело:"

msgid ""
"83                      MP_MAP, size 3\n"
"00                        Main-Map Item #1 IPROTO_REQUEST_TYPE\n"
"00                          MP_UINT = 0\n"
"02                        Main-Map Item #2 IPROTO_REPLICA_ID\n"
"02                          MP_UINT = 2 = id\n"
"04                        Main-Map Item #3 IPROTO_TIMESTAMP\n"
"cb                          MP_DOUBLE (MessagePack \"Float 64\")\n"
"41 d7 ba 06 7b 3a 03 21     8-byte timestamp"
msgstr ""
"83                      MP_MAP, размер 3\n"
"00                        1-й элемент Main-Map IPROTO_REQUEST_TYPE\n"
"00                          MP_UINT = 0\n"
"02                        2-й элемент Main-Map IPROTO_REPLICA_ID\n"
"02                          MP_UINT = 2 = id\n"
"04                        3-й элемент Main-Map IPROTO_TIMESTAMP\n"
"cb                          MP_DOUBLE (MessagePack \"Float 64\")\n"
"41 d7 ba 06 7b 3a 03 21     8-байтовая временная отметка"

msgid ""
"Byte code for the :ref:`heartbeat <box_protocol-heartbeat>` example. The replica might send back this body"
msgstr ""
"Пример байт-кода ответа на :ref:`контрольный сигнал <box_protocol-heartbeat>`. Реплика может вернуть "
"следующее тело:"

msgid ""
"81                       MP_MAP, size 1\n"
"00                         Main-Map Item #1 Response-code-indicator\n"
"00                         MP_UINT = 0 = IPROTO_OK\n"
"81                         Main-Map Item #2, MP_MAP, size 1\n"
"26                           Sub-Map Item #1 IPROTO_VCLOCK\n"
"81                           Sub-Map Item #2, MP_MAP, size 1\n"
"01                             MP_UINT = 1 = id (part 1 of vclock)\n"
"06                             MP_UINT = 6 = lsn (part 2 of vclock)"
msgstr ""
"81                       MP_MAP, размер 1\n"
"00                         1-й элемент Main-Map: индикатор кода ответа\n"
"00                         MP_UINT = 0 = IPROTO_OK\n"
"81                         2-й элемент Main-Map: MP_MAP, размер 1 (Sub-Map)\n"
"26                           1-й элемент Sub-Map: IPROTO_VCLOCK\n"
"81                           2-й элемент Sub-Map: MP_MAP, размер 1\n"
"01                             MP_UINT = 1 = id (1-я часть vclock)\n"
"06                             MP_UINT = 6 = lsn (2-я часть vclock)"
