
#, fuzzy
msgid "Master-replica: manual failover"
msgstr "Настройка репликации мастер-реплика"

msgid ""
"**Example on GitHub**: `manual_leader "
"<https://github.com/tarantool/doc/tree/latest/doc/code_snippets/snippets/replication/instances.enabled/manual_leader>`_"
msgstr ""

msgid ""
"This tutorial shows how to configure and work with a replica set with manual"
" failover."
msgstr ""

msgid "Prerequisites"
msgstr ""

msgid "Before starting this tutorial:"
msgstr ""

msgid "Install the :ref:`tt <tt-cli>` utility."
msgstr ""

msgid ""
"Create a tt environment in the current directory by executing the :ref:`tt "
"init <tt-init>` command."
msgstr ""

msgid ""
"Inside the ``instances.enabled`` directory of the created tt environment, "
"create the ``manual_leader`` directory."
msgstr ""

msgid ""
"Inside ``instances.enabled/manual_leader``, create the ``instances.yml`` and"
" ``config.yaml`` files:"
msgstr ""

msgid ""
"``instances.yml`` specifies instances to :ref:`run <replication-"
"master_replica_starting>` in the current environment and should look like "
"this:"
msgstr ""

msgid ""
"instance001:\n"
"instance002:\n"
msgstr ""

msgid ""
"The ``config.yaml`` file is intended to store a :ref:`replica set "
"configuration <replication-master_replica_configuring>`."
msgstr ""

#, fuzzy
msgid "Configuring a replica set"
msgstr "Настройка набора реплик"

msgid ""
"This section describes how to configure a replica set in ``config.yaml``."
msgstr ""

msgid "Step 1: Configuring a failover mode"
msgstr ""

msgid ""
"First, set the :ref:`replication.failover "
"<configuration_reference_replication_failover>` option to ``manual``:"
msgstr ""

msgid ""
"replication:\n"
"  failover: manual\n"
msgstr ""

#, fuzzy
msgid "Step 2: Defining a replica set topology"
msgstr "Настройка набора реплик"

msgid ""
"Define a replica set topology inside the :ref:`groups "
"<configuration_reference_groups>` section:"
msgstr ""

msgid ""
"The :ref:`leader <configuration_reference_replicasets_name_leader>` option "
"sets ``instance001`` as a replica set leader."
msgstr ""

msgid ""
"The :ref:`iproto.listen <configuration_reference_iproto_listen>` option "
"specifies an address used to listen for incoming requests and allows "
"replicas to communicate with each other."
msgstr ""

msgid ""
"groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        leader: instance001\n"
"        instances:\n"
"          instance001:\n"
"            iproto:\n"
"              listen: 127.0.0.1:3301\n"
"          instance002:\n"
"            iproto:\n"
"              listen: 127.0.0.1:3302\n"
msgstr ""

msgid "Step 3: Creating a user for replication"
msgstr ""

msgid ""
"In the :ref:`credentials <configuration_reference_credentials>` section, "
"create the ``replicator`` user with the ``replication`` role:"
msgstr ""

msgid ""
"credentials:\n"
"  users:\n"
"    replicator:\n"
"      password: 'topsecret'\n"
"      roles: [replication]\n"
msgstr ""

msgid "Step 4: Specifying advertise URIs"
msgstr ""

msgid ""
"Set :ref:`iproto.advertise.peer "
"<configuration_reference_iproto_advertise_peer>` to advertise the current "
"instance to other replica set members:"
msgstr ""

msgid ""
"iproto:\n"
"  advertise:\n"
"    peer: replicator@\n"
msgstr ""

msgid "Resulting configuration"
msgstr ""

msgid "The resulting replica set configuration should look as follows:"
msgstr ""

msgid ""
"credentials:\n"
"  users:\n"
"    replicator:\n"
"      password: 'topsecret'\n"
"      roles: [replication]\n"
"\n"
"iproto:\n"
"  advertise:\n"
"    peer: replicator@\n"
"\n"
"replication:\n"
"  failover: manual\n"
"\n"
"groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        leader: instance001\n"
"        instances:\n"
"          instance001:\n"
"            iproto:\n"
"              listen: 127.0.0.1:3301\n"
"          instance002:\n"
"            iproto:\n"
"              listen: 127.0.0.1:3302\n"
msgstr ""

#, fuzzy
msgid "Working with a replica set"
msgstr "Настройка набора реплик"

msgid "Starting instances"
msgstr ""

msgid ""
"After configuring a replica set, execute the :ref:`tt start <tt-start>` "
"command from the :ref:`tt environment directory <replication-tt-env>`:"
msgstr ""

msgid ""
"$ tt start manual_leader\n"
"   • Starting an instance [manual_leader:instance001]...\n"
"   • Starting an instance [manual_leader:instance002]..."
msgstr ""

msgid ""
"Check that instances are in the ``RUNNING`` status using the :ref:`tt status"
" <tt-status>` command:"
msgstr ""

msgid ""
"$ tt status manual_leader\n"
"INSTANCE                      STATUS      PID\n"
"manual_leader:instance001     RUNNING     15272\n"
"manual_leader:instance002     RUNNING     15273"
msgstr ""

#, fuzzy
msgid "Checking a replica set status"
msgstr "Настройка набора реплик"

msgid "Connect to ``instance001`` using :ref:`tt connect <tt-connect>`:"
msgstr ""

msgid ""
"$ tt connect manual_leader:instance001\n"
"   • Connecting to the instance...\n"
"   • Connected to manual_leader:instance001"
msgstr ""

msgid ""
"Make sure that the instance is in the ``running`` state by executing "
":ref:`box.info.status <box_introspection-box_info>`:"
msgstr ""

msgid ""
"manual_leader:instance001> box.info.status\n"
"---\n"
"- running\n"
"..."
msgstr ""

msgid "Check that the instance is writable using ``box.info.ro``:"
msgstr ""

msgid ""
"manual_leader:instance001> box.info.ro\n"
"---\n"
"- false\n"
"..."
msgstr ""

msgid ""
"Execute ``box.info.replication`` to check a replica set status. For "
"``instance002``, ``upstream.status`` and ``downstream.status`` should be "
"``follow``."
msgstr ""

msgid ""
"manual_leader:instance001> box.info.replication\n"
"---\n"
"- 1:\n"
"    id: 1\n"
"    uuid: 9bb111c2-3ff5-36a7-00f4-2b9a573ea660\n"
"    lsn: 7\n"
"    name: instance001\n"
"  2:\n"
"    id: 2\n"
"    uuid: 4cfa6e3c-625e-b027-00a7-29b2f2182f23\n"
"    lsn: 0\n"
"    upstream:\n"
"      status: follow\n"
"      idle: 0.3893879999996\n"
"      peer: replicator@127.0.0.1:3302\n"
"      lag: 0.00028800964355469\n"
"    name: instance002\n"
"    downstream:\n"
"      status: follow\n"
"      idle: 0.37777199999982\n"
"      vclock: {1: 7}\n"
"      lag: 0\n"
"..."
msgstr ""

msgid "Adding data"
msgstr ""

msgid ""
"To check that a replica (``instance002``) gets all updates from the master, "
"follow the steps below:"
msgstr ""

msgid ""
"On ``instance001``, create a space and add data as described in :ref:`CRUD "
"operation examples <box_space_examples>`."
msgstr ""

msgid ""
"Open the second terminal, connect to ``instance002`` using ``tt connect``, "
"and use the ``select`` operation to make sure data is replicated."
msgstr ""

msgid ""
"Check that :ref:`box.info.vclock <box_introspection-box_info>` values are "
"the same on both instances:"
msgstr ""

msgid "``instance001``:"
msgstr ""

msgid ""
"manual_leader:instance001> box.info.vclock\n"
"---\n"
"- {1: 21}\n"
"..."
msgstr ""

msgid "``instance002``:"
msgstr ""

msgid ""
"manual_leader:instance002> box.info.vclock\n"
"---\n"
"- {1: 21}\n"
"..."
msgstr ""

msgid ""
"Note that a ``vclock`` value might include the ``0`` component that is "
"related to local space operations and might differ for different instances "
"in a replica set."
msgstr ""

msgid "Adding instances"
msgstr ""

msgid "This section describes how to add a new replica to a replica set."
msgstr ""

msgid "Adding an instance to the configuration"
msgstr ""

msgid "Add ``instance003`` to the ``instances.yml`` file:"
msgstr ""

msgid ""
"instance001:\n"
"instance002:\n"
"instance003:"
msgstr ""

msgid ""
"Add ``instance003`` with the specified ``iproto.listen`` option to the "
"``config.yaml`` file:"
msgstr ""

msgid ""
"groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        leader: instance001\n"
"        instances:\n"
"          instance001:\n"
"            iproto:\n"
"              listen: 127.0.0.1:3301\n"
"          instance002:\n"
"            iproto:\n"
"              listen: 127.0.0.1:3302\n"
"          instance003:\n"
"            iproto:\n"
"              listen: 127.0.0.1:3303\n"
msgstr ""

msgid "Starting an instance"
msgstr ""

msgid ""
"Open the third terminal to work with a new instance. Start ``instance003`` "
"using ``tt start``:"
msgstr ""

msgid ""
"$ tt start manual_leader:instance003\n"
"   • Starting an instance [manual_leader:instance003]..."
msgstr ""

msgid "Check a replica set status using ``tt status``:"
msgstr ""

msgid ""
"$ tt status manual_leader\n"
"INSTANCE                      STATUS      PID\n"
"manual_leader:instance001     RUNNING     15272\n"
"manual_leader:instance002     RUNNING     15273\n"
"manual_leader:instance003     RUNNING     15551"
msgstr ""

msgid "Reloading configuration"
msgstr ""

msgid ""
"After you added ``instance003`` to the configuration and started it, you "
"need to reload configurations on all instances. This is required to allow "
"``instance001`` and ``instance002`` to get data from the new instance in "
"case it becomes a master."
msgstr ""

msgid "Connect to ``instance003`` using ``tt connect``:"
msgstr ""

msgid ""
"$ tt connect manual_leader:instance003\n"
"   • Connecting to the instance...\n"
"   • Connected to manual_leader:instance001"
msgstr ""

msgid ""
"Reload configurations on all three instances using the ``reload()`` function"
" provided by the :ref:`config <config-module>` module:"
msgstr ""

msgid ""
"manual_leader:instance001> require('config'):reload()\n"
"---\n"
"..."
msgstr ""

msgid ""
"manual_leader:instance002> require('config'):reload()\n"
"---\n"
"..."
msgstr ""

msgid "``instance003``:"
msgstr ""

msgid ""
"manual_leader:instance003> require('config'):reload()\n"
"---\n"
"..."
msgstr ""

msgid ""
"Execute ``box.info.replication`` to check a replica set status. Make sure "
"that ``upstream.status`` and ``downstream.status`` are ``follow`` for "
"``instance003``."
msgstr ""

msgid ""
"manual_leader:instance001> box.info.replication\n"
"---\n"
"- 1:\n"
"    id: 1\n"
"    uuid: 9bb111c2-3ff5-36a7-00f4-2b9a573ea660\n"
"    lsn: 21\n"
"    name: instance001\n"
"  2:\n"
"    id: 2\n"
"    uuid: 4cfa6e3c-625e-b027-00a7-29b2f2182f23\n"
"    lsn: 0\n"
"    upstream:\n"
"      status: follow\n"
"      idle: 0.052655000000414\n"
"      peer: replicator@127.0.0.1:3302\n"
"      lag: 0.00010204315185547\n"
"    name: instance002\n"
"    downstream:\n"
"      status: follow\n"
"      idle: 0.09503500000028\n"
"      vclock: {1: 21}\n"
"      lag: 0.00026917457580566\n"
"  3:\n"
"    id: 3\n"
"    uuid: 9a3a1b9b-8a18-baf6-00b3-a6e5e11fd8b6\n"
"    lsn: 0\n"
"    upstream:\n"
"      status: follow\n"
"      idle: 0.77522099999987\n"
"      peer: replicator@127.0.0.1:3303\n"
"      lag: 0.0001838207244873\n"
"    name: instance003\n"
"    downstream:\n"
"      status: follow\n"
"      idle: 0.33186100000012\n"
"      vclock: {1: 21}\n"
"      lag: 0\n"
"        ..."
msgstr ""

msgid "Performing manual failover"
msgstr ""

msgid ""
"This section shows how to perform manual failover and change a replica set "
"leader."
msgstr ""

msgid "Switching instances to read-only mode"
msgstr ""

msgid ""
"In the ``config.yaml`` file, change the replica set leader from "
"``instance001`` to ``null``:"
msgstr ""

msgid ""
"replicaset001:\n"
"  leader: null"
msgstr ""

msgid ""
"Reload configurations on all three instances using :ref:`config:reload() "
"<config-module>` and check that instances are in read-only mode. The example"
" below shows how to do this for ``instance001``:"
msgstr ""

msgid ""
"manual_leader:instance001> require('config'):reload()\n"
"---\n"
"...\n"
"manual_leader:instance001> box.info.ro\n"
"---\n"
"- true\n"
"...\n"
"manual_leader:instance001> box.info.ro_reason\n"
"---\n"
"- config\n"
"..."
msgstr ""

msgid ""
"Make sure that :ref:`box.info.vclock <box_introspection-box_info>` values "
"are the same on all instances:"
msgstr ""

msgid ""
"manual_leader:instance003> box.info.vclock\n"
"---\n"
"- {1: 21}\n"
"..."
msgstr ""

msgid "Configuring a new leader"
msgstr ""

msgid "Change a replica set leader in ``config.yaml`` to ``instance002``:"
msgstr ""

msgid ""
"replicaset001:\n"
"  leader: instance002"
msgstr ""

msgid ""
"Reload configuration on all instances using :ref:`config:reload() <config-"
"module>`."
msgstr ""

msgid "Make sure that ``instance002`` is a new master:"
msgstr ""

msgid ""
"manual_leader:instance002> box.info.ro\n"
"---\n"
"- false\n"
"..."
msgstr ""

msgid "Check replication status using ``box.info.replication``."
msgstr ""

msgid "Removing instances"
msgstr ""

msgid ""
"This section describes the process of removing an instance from a replica "
"set."
msgstr ""

msgid ""
"Before removing an instance, make sure it is in read-only mode. If the "
"instance is a master, perform :ref:`manual failover <replication-"
"controlled_failover>`."
msgstr ""

msgid "Disconnecting an instance"
msgstr ""

msgid ""
"Clear the ``iproto`` option for ``instance003`` by setting its value to "
"``{}``:"
msgstr ""

msgid ""
"instance003:\n"
"  iproto: {}"
msgstr ""

msgid "Reload configurations on ``instance001`` and ``instance002``:"
msgstr ""

msgid ""
"Check that the ``upstream`` section is missing for ``instance003`` by "
"executing ``box.info.replication[3]``:"
msgstr ""

msgid ""
"manual_leader:instance001> box.info.replication[3]\n"
"---\n"
"- id: 3\n"
"  uuid: 9a3a1b9b-8a18-baf6-00b3-a6e5e11fd8b6\n"
"  lsn: 0\n"
"  downstream:\n"
"    status: follow\n"
"    idle: 0.4588760000006\n"
"    vclock: {1: 21}\n"
"    lag: 0\n"
"  name: instance003\n"
"..."
msgstr ""

msgid "Stopping an instance"
msgstr ""

msgid "Stop ``instance003`` using the :ref:`tt stop <tt-stop>` command:"
msgstr ""

msgid ""
"$ tt stop manual_leader:instance003\n"
"   • The Instance manual_leader:instance003 (PID = 15551) has been terminated."
msgstr ""

msgid "Check that ``downstream.status`` is ``stopped`` for ``instance003``:"
msgstr ""

msgid ""
"manual_leader:instance001> box.info.replication[3]\n"
"---\n"
"- id: 3\n"
"  uuid: 9a3a1b9b-8a18-baf6-00b3-a6e5e11fd8b6\n"
"  lsn: 0\n"
"  downstream:\n"
"    status: stopped\n"
"    message: 'unexpected EOF when reading from socket, called on fd 27, aka 127.0.0.1:3301,\n"
"      peer of 127.0.0.1:54185: Broken pipe'\n"
"    system_message: Broken pipe\n"
"  name: instance003\n"
"..."
msgstr ""

msgid "Removing an instance from the configuration"
msgstr ""

msgid "Remove ``instance003`` from the ``instances.yml`` file:"
msgstr ""

msgid "Remove ``instance003`` from ``config.yaml``:"
msgstr ""

msgid ""
"instances:\n"
"  instance001:\n"
"    iproto:\n"
"      listen: 127.0.0.1:3301\n"
"  instance002:\n"
"    iproto:\n"
"      listen: 127.0.0.1:3302\n"
msgstr ""

msgid "Removing an instance from the '_cluster' space"
msgstr ""

msgid ""
"To remove an instance from the replica set permanently, it should be removed"
" from the :ref:`box.space._cluster <box_space-cluster>` system space:"
msgstr ""

msgid "Select all the tuples in the ``box.space._cluster`` system space:"
msgstr ""

msgid ""
"manual_leader:instance002> box.space._cluster:select{}\n"
"---\n"
"- - [1, '9bb111c2-3ff5-36a7-00f4-2b9a573ea660', 'instance001']\n"
"  - [2, '4cfa6e3c-625e-b027-00a7-29b2f2182f23', 'instance002']\n"
"  - [3, '9a3a1b9b-8a18-baf6-00b3-a6e5e11fd8b6', 'instance003']\n"
"..."
msgstr ""

msgid "Delete a tuple corresponding to ``instance003``:"
msgstr ""

msgid ""
"manual_leader:instance002> box.space._cluster:delete(3)\n"
"---\n"
"- [3, '9a3a1b9b-8a18-baf6-00b3-a6e5e11fd8b6', 'instance003']\n"
"..."
msgstr ""

msgid "Execute ``box.info.replication`` to check the health status:"
msgstr ""

msgid ""
"manual_leader:instance002> box.info.replication\n"
"---\n"
"- 1:\n"
"    id: 1\n"
"    uuid: 9bb111c2-3ff5-36a7-00f4-2b9a573ea660\n"
"    lsn: 21\n"
"    upstream:\n"
"      status: follow\n"
"      idle: 0.73316000000159\n"
"      peer: replicator@127.0.0.1:3301\n"
"      lag: 0.00016212463378906\n"
"    name: instance001\n"
"    downstream:\n"
"      status: follow\n"
"      idle: 0.7269320000014\n"
"      vclock: {2: 1, 1: 21}\n"
"      lag: 0.00083398818969727\n"
"  2:\n"
"    id: 2\n"
"    uuid: 4cfa6e3c-625e-b027-00a7-29b2f2182f23\n"
"    lsn: 1\n"
"    name: instance002\n"
"..."
msgstr ""

#~ msgid "Replication setup"
#~ msgstr "Первоначальная настройка репликации"

#~ msgid ""
#~ "To enable :ref:`replication <replication>`, you need to specify two "
#~ "parameters in a ``box.cfg{}`` request:"
#~ msgstr ""
#~ "Чтобы включить репликацию, необходимо указать два параметра в запросе "
#~ "``box.cfg{}``:"

#~ msgid ""
#~ ":ref:`replication <cfg_replication-replication>` which defines the "
#~ "replication source(s), and"
#~ msgstr ""
#~ ":ref:`replication <cfg_replication-replication>`, который определяет "
#~ "источники репликации, и"

#~ msgid ""
#~ ":ref:`read_only <cfg_basic-read_only>` which is ``true`` for a replica and "
#~ "``false`` for a master."
#~ msgstr ""
#~ ":ref:`read_only <cfg_basic-read_only>` со значением ``true`` для реплики и "
#~ "``false`` для мастера."

#~ msgid ""
#~ "Both these parameters are \"dynamic\". This allows a replica to become a "
#~ "master and vice versa on the fly with the help of a ``box.cfg{}`` request."
#~ msgstr ""
#~ "\"Динамические\" параметры репликации можно менять на лету, что позволяет "
#~ "назначать реплику на роль мастера и наоборот. Для этого используется запрос "
#~ "``box.cfg{}``."

#~ msgid ""
#~ "Let us first bootstrap a simple **master-replica** set containing two "
#~ "instances, each located on its own machine. For easier administration, we "
#~ "make the :ref:`instance files <admin-instance_file>` almost identical."
#~ msgstr ""
#~ "Сначала настроим простой набор **мастер-реплика** с двумя экземплярами, "
#~ "каждый из которых находится на отдельном сервере. Для удобства "
#~ "администрирования сделаем :ref:`файлы экземпляров <admin-instance_file>` "
#~ "практически одинаковыми."

#~ msgid "Here is an example of the master's instance file:"
#~ msgstr "Ниже пример файла экземпляра для мастера:"

#~ msgid ""
#~ "-- instance file for the master\n"
#~ "box.cfg{\n"
#~ "  listen = 3301,\n"
#~ "  replication = {'replicator:password@192.168.0.101:3301',  -- master URI\n"
#~ "                 'replicator:password@192.168.0.102:3301'}, -- replica URI\n"
#~ "  read_only = false\n"
#~ "}\n"
#~ "box.once(\"schema\", function()\n"
#~ "   box.schema.user.create('replicator', {password = 'password'})\n"
#~ "   box.schema.user.grant('replicator', 'replication') -- grant replication role\n"
#~ "   box.schema.space.create(\"test\")\n"
#~ "   box.space.test:create_index(\"primary\")\n"
#~ "   print('box.once executed on master')\n"
#~ "end)"
#~ msgstr ""
#~ "-- файл экземпляра для мастера\n"
#~ "box.cfg{\n"
#~ "  listen = 3301,\n"
#~ "  replication = {'replicator:password@192.168.0.101:3301',  -- URI мастера\n"
#~ "                 'replicator:password@192.168.0.102:3301'}, -- URI реплики\n"
#~ "  read_only = false\n"
#~ "}\n"
#~ "box.once(\"schema\", function()\n"
#~ "  box.schema.user.create('replicator', {password = 'password'})\n"
#~ "  box.schema.user.grant('replicator', 'replication') -- настроить роль для репликации\n"
#~ "  box.schema.space.create(\"test\")\n"
#~ "  box.space.test:create_index(\"primary\")\n"
#~ "  print('box.once executed on master')\n"
#~ "end)"

#~ msgid "where:"
#~ msgstr "где:"

#~ msgid ""
#~ "the ``box.cfg()`` :ref:`listen <cfg_basic-listen>` parameter defines a URI "
#~ "(port 3301 in our example), on which the master can accept connections from "
#~ "replicas."
#~ msgstr ""
#~ "параметр :ref:`listen <cfg_basic-listen>` в ``box.cfg{}`` определяет URI "
#~ "(порт 3301 в нашем примере), на котором мастер может принимать подключения "
#~ "от реплик."

#~ msgid ""
#~ "the ``box.cfg()`` :ref:`replication <cfg_replication-replication>` parameter"
#~ " defines the URIs at which all instances in the replica set can accept "
#~ "connections. It includes the replica's URI as well, although the replica is "
#~ "not a replication source right now. This parameter is mandatory only for "
#~ "master-master or full-mesh cluster setups."
#~ msgstr ""
#~ "параметр :ref:`replication <cfg_replication-replication>` в ``box.cfg{}`` "
#~ "определяет URI, на которых все экземпляры в наборе реплик могут принимать "
#~ "подключения. Он включает в себя также URI реплики, хотя реплики в данном "
#~ "случае не является источником репликации. Этот параметр является "
#~ "обязательным только при настройке кластеров с конфигурацией master-master "
#~ "или full-mesh."

#~ msgid ""
#~ "For security reasons, we recommend that administrators prevent unauthorized "
#~ "replication sources by associating a password with every user that has a "
#~ "replication :ref:`role <authentication-roles>`. That way, the :ref:`URI "
#~ "<index-uri>` for ``replication`` parameter must have the long form "
#~ "``username:password@host:port``."
#~ msgstr ""
#~ "Для целей безопасности рекомендуем администраторам не допускать репликацию "
#~ "из неавторизованных источников с помощью установки пароля для каждого "
#~ "пользователя, у которого есть :ref:`роль <authentication-roles>` для "
#~ "репликации. Таким образом, :ref:`URI <index-uri>` для параметра "
#~ "``replication``  должен иметь развернутый вид "
#~ "``username:password@host:port``."

#~ msgid ""
#~ "the :ref:`read_only = false <cfg_basic-read_only>` parameter setting enables"
#~ " data-change operations on the instance and makes the instance act as a "
#~ "master, not as a replica. *That is the only parameter setting in our "
#~ "instance files that will differ.*"
#~ msgstr ""
#~ "параметр :ref:`read_only = false <cfg_basic-read_only>` разрешает операции "
#~ "по изменению данных на экземпляре и заставляет данный экземпляр работать в "
#~ "качестве мастера, а не реплики. *Это единственное значение параметра, "
#~ "которое отличается в наших файлах экземпляров.*"

#~ msgid ""
#~ "the :doc:`box.once() </reference/reference_lua/box_once>` function contains "
#~ "database initialization logic that should be executed only once during the "
#~ "replica set lifetime."
#~ msgstr ""
#~ "функция :doc:`box.once() </reference/reference_lua/box_once>` содержит "
#~ "логику инициализации базы данных, которая должна выполняться однократно в "
#~ "течение срока работы набора реплик."

#~ msgid ""
#~ "In this example, we create a space with a primary index, and a user for "
#~ "replication purposes. We also say ``print('box.once executed on master')`` "
#~ "so that it will later be visible on a console whether ``box.once()`` was "
#~ "executed."
#~ msgstr ""
#~ "В данном примере создаем спейс с первичным индексом и пользователя для целей"
#~ " репликации. Также выполним команду ``print('box.once executed on "
#~ "master')``, чтобы позднее увидеть в консоли, была ли выполнена функция "
#~ "``box.once()``."

#~ msgid ""
#~ "Replication requires privileges. We can grant privileges for accessing "
#~ "spaces directly to the user who will start the instance. However, it is more"
#~ " usual to grant privileges for accessing spaces to a :ref:`role "
#~ "<authentication-roles>`, and then grant the role to the user who will start "
#~ "the replica."
#~ msgstr ""
#~ "Репликация требует настройки прав. Права на доступ к спейсам можно задать "
#~ "напрямую для пользователя, под чьим именем запущен экземпляр. Но обычно "
#~ "права на доступ к спейсам задаются с помощью :ref:`роли <authentication-"
#~ "roles>`, которая затем присваивается пользователю, под чьим именем запущена "
#~ "реплика."

#~ msgid ""
#~ "Here we use Tarantool's predefined role named \"replication\" which by "
#~ "default grants \"read\" privileges for all database objects (\"universe\"), "
#~ "and we can change privileges for this role as required."
#~ msgstr ""
#~ "Здесь мы используем предварительно определенную роль Tarantool под названием"
#~ " \"replication\", которая по умолчанию предоставляет права на чтение всех "
#~ "объектов в базе данных (\"universe\"), а также сможем настроить необходимые "
#~ "права для этой роли."

#~ msgid ""
#~ "In the replica's instance file, we set the ``read_only`` parameter to "
#~ "\"true\", and say ``print('box.once executed on replica')`` so that later it"
#~ " will be visible that ``box.once()`` was not executed more than once. "
#~ "Otherwise the replica's instance file is identical to the master's instance "
#~ "file."
#~ msgstr ""
#~ "В файле экземпляра для реплики устанавливаем значение \"true\" для параметра"
#~ " ``read_only`` и выполняем команду ``print('box.once executed on "
#~ "replica')``, чтобы позднее убедиться, что ``box.once()`` выполняется только "
#~ "однократно. В других отношениях файл экземпляра для реплики совпадает с "
#~ "файлом экземпляра для мастера."

#~ msgid ""
#~ "-- instance file for the replica\n"
#~ "box.cfg{\n"
#~ "  listen = 3301,\n"
#~ "  replication = {'replicator:password@192.168.0.101:3301',  -- master URI\n"
#~ "                 'replicator:password@192.168.0.102:3301'}, -- replica URI\n"
#~ "  read_only = true\n"
#~ "}\n"
#~ "box.once(\"schema\", function()\n"
#~ "   box.schema.user.create('replicator', {password = 'password'})\n"
#~ "   box.schema.user.grant('replicator', 'replication') -- grant replication role\n"
#~ "   box.schema.space.create(\"test\")\n"
#~ "   box.space.test:create_index(\"primary\")\n"
#~ "   print('box.once executed on replica')\n"
#~ "end)"
#~ msgstr ""
#~ "-- файл экземпляра для реплики\n"
#~ "box.cfg{\n"
#~ "  listen = 3301,\n"
#~ "  replication = {'replicator:password@192.168.0.101:3301',  -- URI мастера\n"
#~ "                 'replicator:password@192.168.0.102:3301'}, -- URI реплики\n"
#~ "  read_only = true\n"
#~ "}\n"
#~ "box.once(\"schema\", function()\n"
#~ "  box.schema.user.create('replicator', {password = 'password'})\n"
#~ "  box.schema.user.grant('replicator', 'replication') -- настроить роль для репликации\n"
#~ "  box.schema.space.create(\"test\")\n"
#~ "  box.space.test:create_index(\"primary\")\n"
#~ "  print('box.once executed on replica')\n"
#~ "end)"

#~ msgid ""
#~ "The replica does not inherit the master’s configuration parameters, such as "
#~ "those making the :ref:`checkpoint daemon <book_cfg_checkpoint_daemon>` run "
#~ "on the master. To get the same behavior, set the relevant parameters "
#~ "explicitly so that they are the same on both master and replica."
#~ msgstr ""
#~ "Реплика не берет конфигурационные параметры с мастера, например настройки "
#~ "запуска :ref:`фоновой программы для работы с контрольными точками "
#~ "<book_cfg_checkpoint_daemon>` на мастере. Чтобы получить те же настройки на "
#~ "реплике, необходимо задать их явным образом."

#~ msgid "Now we can launch the two instances. The master..."
#~ msgstr "Теперь можно запустить два экземпляра. Мастер..."

#~ msgid ""
#~ "$ # launching the master\n"
#~ "$ tarantool master.lua\n"
#~ "2017-06-14 14:12:03.847 [18933] main/101/master.lua C> version 1.7.4-52-g980d30092\n"
#~ "2017-06-14 14:12:03.848 [18933] main/101/master.lua C> log level 5\n"
#~ "2017-06-14 14:12:03.849 [18933] main/101/master.lua I> mapping 268435456 bytes for tuple arena...\n"
#~ "2017-06-14 14:12:03.859 [18933] iproto/101/main I> binary: bound to [::]:3301\n"
#~ "2017-06-14 14:12:03.861 [18933] main/105/applier/replicator@192.168.0. I> can't connect to master\n"
#~ "2017-06-14 14:12:03.861 [18933] main/105/applier/replicator@192.168.0. coio.cc:105 !> SystemError connect, called on fd 14, aka 192.168.0.102:56736: Connection refused\n"
#~ "2017-06-14 14:12:03.861 [18933] main/105/applier/replicator@192.168.0. I> will retry every 1 second\n"
#~ "2017-06-14 14:12:03.861 [18933] main/104/applier/replicator@192.168.0. I> remote master is 1.7.4 at 192.168.0.101:3301\n"
#~ "2017-06-14 14:12:19.878 [18933] main/105/applier/replicator@192.168.0. I> remote master is 1.7.4 at 192.168.0.102:3301\n"
#~ "2017-06-14 14:12:19.879 [18933] main/101/master.lua I> initializing an empty data directory\n"
#~ "2017-06-14 14:12:19.908 [18933] snapshot/101/main I> saving snapshot `/var/lib/tarantool/master/00000000000000000000.snap.inprogress'\n"
#~ "2017-06-14 14:12:19.914 [18933] snapshot/101/main I> done\n"
#~ "2017-06-14 14:12:19.914 [18933] main/101/master.lua I> vinyl checkpoint done\n"
#~ "2017-06-14 14:12:19.917 [18933] main/101/master.lua I> ready to accept requests\n"
#~ "2017-06-14 14:12:19.918 [18933] main/105/applier/replicator@192.168.0. I> failed to authenticate\n"
#~ "2017-06-14 14:12:19.918 [18933] main/105/applier/replicator@192.168.0. xrow.cc:431 E> ER_LOADING: Instance bootstrap hasn't finished yet\n"
#~ "box.once executed on master\n"
#~ "2017-06-14 14:12:19.920 [18933] main C> entering the event loop"
#~ msgstr ""
#~ "$ # запуск мастера\n"
#~ "$ tarantool master.lua\n"
#~ "2017-06-14 14:12:03.847 [18933] main/101/master.lua C> version 1.7.4-52-g980d30092\n"
#~ "2017-06-14 14:12:03.848 [18933] main/101/master.lua C> log level 5\n"
#~ "2017-06-14 14:12:03.849 [18933] main/101/master.lua I> mapping 268435456 bytes for tuple arena...\n"
#~ "2017-06-14 14:12:03.859 [18933] iproto/101/main I> binary: bound to [::]:3301\n"
#~ "2017-06-14 14:12:03.861 [18933] main/105/applier/replicator@192.168.0. I> can't connect to master\n"
#~ "2017-06-14 14:12:03.861 [18933] main/105/applier/replicator@192.168.0. coio.cc:105 !> SystemError connect, called on fd 14, aka 192.168.0.102:56736: Connection refused\n"
#~ "2017-06-14 14:12:03.861 [18933] main/105/applier/replicator@192.168.0. I> will retry every 1 second\n"
#~ "2017-06-14 14:12:03.861 [18933] main/104/applier/replicator@192.168.0. I> remote master is 1.7.4 at 192.168.0.101:3301\n"
#~ "2017-06-14 14:12:19.878 [18933] main/105/applier/replicator@192.168.0. I> remote master is 1.7.4 at 192.168.0.102:3301\n"
#~ "2017-06-14 14:12:19.879 [18933] main/101/master.lua I> initializing an empty data directory\n"
#~ "2017-06-14 14:12:19.908 [18933] snapshot/101/main I> saving snapshot `/var/lib/tarantool/master/00000000000000000000.snap.inprogress'\n"
#~ "2017-06-14 14:12:19.914 [18933] snapshot/101/main I> done\n"
#~ "2017-06-14 14:12:19.914 [18933] main/101/master.lua I> vinyl checkpoint done\n"
#~ "2017-06-14 14:12:19.917 [18933] main/101/master.lua I> ready to accept requests\n"
#~ "2017-06-14 14:12:19.918 [18933] main/105/applier/replicator@192.168.0. I> failed to authenticate\n"
#~ "2017-06-14 14:12:19.918 [18933] main/105/applier/replicator@192.168.0. xrow.cc:431 E> ER_LOADING: Instance bootstrap hasn't finished yet\n"
#~ "box.once executed on master\n"
#~ "2017-06-14 14:12:19.920 [18933] main C> entering the event loop"

#~ msgid ""
#~ "... (the display confirms that ``box.once()`` was executed on the master) --"
#~ " and the replica:"
#~ msgstr ""
#~ "... (выведенный результат подтверждает, что функция ``box.once()`` была "
#~ "выполнена на мастере) -- и реплику:"

#~ msgid ""
#~ "$ # launching the replica\n"
#~ "$ tarantool replica.lua\n"
#~ "2017-06-14 14:12:19.486 [18934] main/101/replica.lua C> version 1.7.4-52-g980d30092\n"
#~ "2017-06-14 14:12:19.486 [18934] main/101/replica.lua C> log level 5\n"
#~ "2017-06-14 14:12:19.487 [18934] main/101/replica.lua I> mapping 268435456 bytes for tuple arena...\n"
#~ "2017-06-14 14:12:19.494 [18934] iproto/101/main I> binary: bound to [::]:3311\n"
#~ "2017-06-14 14:12:19.495 [18934] main/104/applier/replicator@192.168.0. I> remote master is 1.7.4 at 192.168.0.101:3301\n"
#~ "2017-06-14 14:12:19.495 [18934] main/105/applier/replicator@192.168.0. I> remote master is 1.7.4 at 192.168.0.102:3302\n"
#~ "2017-06-14 14:12:19.496 [18934] main/104/applier/replicator@192.168.0. I> failed to authenticate\n"
#~ "2017-06-14 14:12:19.496 [18934] main/104/applier/replicator@192.168.0. xrow.cc:431 E> ER_LOADING: Instance bootstrap hasn't finished yet"
#~ msgstr ""
#~ "$ # запуск реплики\n"
#~ "$ tarantool replica.lua\n"
#~ "2017-06-14 14:12:19.486 [18934] main/101/replica.lua C> version 1.7.4-52-g980d30092\n"
#~ "2017-06-14 14:12:19.486 [18934] main/101/replica.lua C> log level 5\n"
#~ "2017-06-14 14:12:19.487 [18934] main/101/replica.lua I> mapping 268435456 bytes for tuple arena...\n"
#~ "2017-06-14 14:12:19.494 [18934] iproto/101/main I> binary: bound to [::]:3311\n"
#~ "2017-06-14 14:12:19.495 [18934] main/104/applier/replicator@192.168.0. I> remote master is 1.7.4 at 192.168.0.101:3301\n"
#~ "2017-06-14 14:12:19.495 [18934] main/105/applier/replicator@192.168.0. I> remote master is 1.7.4 at 192.168.0.102:3302\n"
#~ "2017-06-14 14:12:19.496 [18934] main/104/applier/replicator@192.168.0. I> failed to authenticate\n"
#~ "2017-06-14 14:12:19.496 [18934] main/104/applier/replicator@192.168.0. xrow.cc:431 E> ER_LOADING: Instance bootstrap hasn't finished yet"

#~ msgid ""
#~ "In both logs, there are messages saying that the replica was bootstrapped "
#~ "from the master:"
#~ msgstr ""
#~ "В обоих журналах есть сообщения о том, что реплика получила настройки от "
#~ "мастера:"

#~ msgid ""
#~ "$ # bootstrapping the replica (from the master's log)\n"
#~ "<...>\n"
#~ "2017-06-14 14:12:20.503 [18933] main/106/main I> initial data sent.\n"
#~ "2017-06-14 14:12:20.505 [18933] relay/[::ffff:192.168.0.101]:/101/main I> recover from `/var/lib/tarantool/master/00000000000000000000.xlog'\n"
#~ "2017-06-14 14:12:20.505 [18933] main/106/main I> final data sent.\n"
#~ "2017-06-14 14:12:20.522 [18933] relay/[::ffff:192.168.0.101]:/101/main I> recover from `/Users/e.shebunyaeva/work/tarantool-test-repl/master_dir/00000000000000000000.xlog'\n"
#~ "2017-06-14 14:12:20.922 [18933] main/105/applier/replicator@192.168.0. I> authenticated"
#~ msgstr ""
#~ "$ # настройка реплики (из журнала мастера)\n"
#~ "<...>\n"
#~ "2017-06-14 14:12:20.503 [18933] main/106/main I> initial data sent.\n"
#~ "2017-06-14 14:12:20.505 [18933] relay/[::ffff:192.168.0.101]:/101/main I> recover from `/var/lib/tarantool/master/00000000000000000000.xlog'\n"
#~ "2017-06-14 14:12:20.505 [18933] main/106/main I> final data sent.\n"
#~ "2017-06-14 14:12:20.522 [18933] relay/[::ffff:192.168.0.101]:/101/main I> recover from `/Users/e.shebunyaeva/work/tarantool-test-repl/master_dir/00000000000000000000.xlog'\n"
#~ "2017-06-14 14:12:20.922 [18933] main/105/applier/replicator@192.168.0. I> authenticated"

#~ msgid ""
#~ "$ # bootstrapping the replica (from the replica's log)\n"
#~ "<...>\n"
#~ "2017-06-14 14:12:20.498 [18934] main/104/applier/replicator@192.168.0. I> authenticated\n"
#~ "2017-06-14 14:12:20.498 [18934] main/101/replica.lua I> bootstrapping replica from 192.168.0.101:3301\n"
#~ "2017-06-14 14:12:20.512 [18934] main/104/applier/replicator@192.168.0. I> initial data received\n"
#~ "2017-06-14 14:12:20.512 [18934] main/104/applier/replicator@192.168.0. I> final data received\n"
#~ "2017-06-14 14:12:20.517 [18934] snapshot/101/main I> saving snapshot `/var/lib/tarantool/replica/00000000000000000005.snap.inprogress'\n"
#~ "2017-06-14 14:12:20.518 [18934] snapshot/101/main I> done\n"
#~ "2017-06-14 14:12:20.519 [18934] main/101/replica.lua I> vinyl checkpoint done\n"
#~ "2017-06-14 14:12:20.520 [18934] main/101/replica.lua I> ready to accept requests\n"
#~ "2017-06-14 14:12:20.520 [18934] main/101/replica.lua I> set 'read_only' configuration option to true\n"
#~ "2017-06-14 14:12:20.520 [18934] main C> entering the event loop"
#~ msgstr ""
#~ "$ # настройка реплики (из журнала реплики)\n"
#~ "<...>\n"
#~ "2017-06-14 14:12:20.498 [18934] main/104/applier/replicator@192.168.0. I> authenticated\n"
#~ "2017-06-14 14:12:20.498 [18934] main/101/replica.lua I> bootstrapping replica from 192.168.0.101:3301\n"
#~ "2017-06-14 14:12:20.512 [18934] main/104/applier/replicator@192.168.0. I> initial data received\n"
#~ "2017-06-14 14:12:20.512 [18934] main/104/applier/replicator@192.168.0. I> final data received\n"
#~ "2017-06-14 14:12:20.517 [18934] snapshot/101/main I> saving snapshot `/var/lib/tarantool/replica/00000000000000000005.snap.inprogress'\n"
#~ "2017-06-14 14:12:20.518 [18934] snapshot/101/main I> done\n"
#~ "2017-06-14 14:12:20.519 [18934] main/101/replica.lua I> vinyl checkpoint done\n"
#~ "2017-06-14 14:12:20.520 [18934] main/101/replica.lua I> ready to accept requests\n"
#~ "2017-06-14 14:12:20.520 [18934] main/101/replica.lua I> set 'read_only' configuration option to true\n"
#~ "2017-06-14 14:12:20.520 [18934] main C> entering the event loop"

#~ msgid ""
#~ "Notice that ``box.once()`` was executed only at the master, although we "
#~ "added ``box.once()`` to both instance files."
#~ msgstr ""
#~ "Обратите внимание, что функция ``box.once()`` была выполнена только на "
#~ "мастере, хотя мы добавили ``box.once()`` в оба файла экземпляра."

#~ msgid "We could as well launch the replica first:"
#~ msgstr "Также можно было сначала запустить реплику:"

#~ msgid ""
#~ "$ # launching the replica\n"
#~ "$ tarantool replica.lua\n"
#~ "2017-06-14 14:35:36.763 [18952] main/101/replica.lua C> version 1.7.4-52-g980d30092\n"
#~ "2017-06-14 14:35:36.765 [18952] main/101/replica.lua C> log level 5\n"
#~ "2017-06-14 14:35:36.765 [18952] main/101/replica.lua I> mapping 268435456 bytes for tuple arena...\n"
#~ "2017-06-14 14:35:36.772 [18952] iproto/101/main I> binary: bound to [::]:3301\n"
#~ "2017-06-14 14:35:36.772 [18952] main/104/applier/replicator@192.168.0. I> can't connect to master\n"
#~ "2017-06-14 14:35:36.772 [18952] main/104/applier/replicator@192.168.0. coio.cc:105 !> SystemError connect, called on fd 13, aka 192.168.0.101:56820: Connection refused\n"
#~ "2017-06-14 14:35:36.772 [18952] main/104/applier/replicator@192.168.0. I> will retry every 1 second\n"
#~ "2017-06-14 14:35:36.772 [18952] main/105/applier/replicator@192.168.0. I> remote master is 1.7.4 at 192.168.0.102:3301"
#~ msgstr ""
#~ "$ # запуск реплики\n"
#~ "$ tarantool replica.lua\n"
#~ "2017-06-14 14:35:36.763 [18952] main/101/replica.lua C> version 1.7.4-52-g980d30092\n"
#~ "2017-06-14 14:35:36.765 [18952] main/101/replica.lua C> log level 5\n"
#~ "2017-06-14 14:35:36.765 [18952] main/101/replica.lua I> mapping 268435456 bytes for tuple arena...\n"
#~ "2017-06-14 14:35:36.772 [18952] iproto/101/main I> binary: bound to [::]:3301\n"
#~ "2017-06-14 14:35:36.772 [18952] main/104/applier/replicator@192.168.0. I> can't connect to master\n"
#~ "2017-06-14 14:35:36.772 [18952] main/104/applier/replicator@192.168.0. coio.cc:105 !> SystemError connect, called on fd 13, aka 192.168.0.101:56820: Connection refused\n"
#~ "2017-06-14 14:35:36.772 [18952] main/104/applier/replicator@192.168.0. I> will retry every 1 second\n"
#~ "2017-06-14 14:35:36.772 [18952] main/105/applier/replicator@192.168.0. I> remote master is 1.7.4 at 192.168.0.102:3301"

#~ msgid "... and the master later:"
#~ msgstr "... а затем уже мастера:"

#~ msgid ""
#~ "$ # launching the master\n"
#~ "$ tarantool master.lua\n"
#~ "2017-06-14 14:35:43.701 [18953] main/101/master.lua C> version 1.7.4-52-g980d30092\n"
#~ "2017-06-14 14:35:43.702 [18953] main/101/master.lua C> log level 5\n"
#~ "2017-06-14 14:35:43.702 [18953] main/101/master.lua I> mapping 268435456 bytes for tuple arena...\n"
#~ "2017-06-14 14:35:43.709 [18953] iproto/101/main I> binary: bound to [::]:3301\n"
#~ "2017-06-14 14:35:43.709 [18953] main/105/applier/replicator@192.168.0. I> remote master is 1.7.4 at 192.168.0.102:3301\n"
#~ "2017-06-14 14:35:43.709 [18953] main/104/applier/replicator@192.168.0. I> remote master is 1.7.4 at 192.168.0.101:3301\n"
#~ "2017-06-14 14:35:43.709 [18953] main/101/master.lua I> initializing an empty data directory\n"
#~ "2017-06-14 14:35:43.721 [18953] snapshot/101/main I> saving snapshot `/var/lib/tarantool/master/00000000000000000000.snap.inprogress'\n"
#~ "2017-06-14 14:35:43.722 [18953] snapshot/101/main I> done\n"
#~ "2017-06-14 14:35:43.723 [18953] main/101/master.lua I> vinyl checkpoint done\n"
#~ "2017-06-14 14:35:43.723 [18953] main/101/master.lua I> ready to accept requests\n"
#~ "2017-06-14 14:35:43.724 [18953] main/105/applier/replicator@192.168.0. I> failed to authenticate\n"
#~ "2017-06-14 14:35:43.724 [18953] main/105/applier/replicator@192.168.0. xrow.cc:431 E> ER_LOADING: Instance bootstrap hasn't finished yet\n"
#~ "box.once executed on master\n"
#~ "2017-06-14 14:35:43.726 [18953] main C> entering the event loop\n"
#~ "2017-06-14 14:35:43.779 [18953] main/103/main I> initial data sent.\n"
#~ "2017-06-14 14:35:43.780 [18953] relay/[::ffff:192.168.0.101]:/101/main I> recover from `/var/lib/tarantool/master/00000000000000000000.xlog'\n"
#~ "2017-06-14 14:35:43.780 [18953] main/103/main I> final data sent.\n"
#~ "2017-06-14 14:35:43.796 [18953] relay/[::ffff:192.168.0.102]:/101/main I> recover from `/var/lib/tarantool/master/00000000000000000000.xlog'\n"
#~ "2017-06-14 14:35:44.726 [18953] main/105/applier/replicator@192.168.0. I> authenticated"
#~ msgstr ""
#~ "$ # запуск мастера\n"
#~ "$ tarantool master.lua\n"
#~ "2017-06-14 14:35:43.701 [18953] main/101/master.lua C> version 1.7.4-52-g980d30092\n"
#~ "2017-06-14 14:35:43.702 [18953] main/101/master.lua C> log level 5\n"
#~ "2017-06-14 14:35:43.702 [18953] main/101/master.lua I> mapping 268435456 bytes for tuple arena...\n"
#~ "2017-06-14 14:35:43.709 [18953] iproto/101/main I> binary: bound to [::]:3301\n"
#~ "2017-06-14 14:35:43.709 [18953] main/105/applier/replicator@192.168.0. I> remote master is 1.7.4 at 192.168.0.102:3301\n"
#~ "2017-06-14 14:35:43.709 [18953] main/104/applier/replicator@192.168.0. I> remote master is 1.7.4 at 192.168.0.101:3301\n"
#~ "2017-06-14 14:35:43.709 [18953] main/101/master.lua I> initializing an empty data directory\n"
#~ "2017-06-14 14:35:43.721 [18953] snapshot/101/main I> saving snapshot `/var/lib/tarantool/master/00000000000000000000.snap.inprogress'\n"
#~ "2017-06-14 14:35:43.722 [18953] snapshot/101/main I> done\n"
#~ "2017-06-14 14:35:43.723 [18953] main/101/master.lua I> vinyl checkpoint done\n"
#~ "2017-06-14 14:35:43.723 [18953] main/101/master.lua I> ready to accept requests\n"
#~ "2017-06-14 14:35:43.724 [18953] main/105/applier/replicator@192.168.0. I> failed to authenticate\n"
#~ "2017-06-14 14:35:43.724 [18953] main/105/applier/replicator@192.168.0. xrow.cc:431 E> ER_LOADING: Instance bootstrap hasn't finished yet\n"
#~ "box.once executed on master\n"
#~ "2017-06-14 14:35:43.726 [18953] main C> entering the event loop\n"
#~ "2017-06-14 14:35:43.779 [18953] main/103/main I> initial data sent.\n"
#~ "2017-06-14 14:35:43.780 [18953] relay/[::ffff:192.168.0.101]:/101/main I> recover from `/var/lib/tarantool/master/00000000000000000000.xlog'\n"
#~ "2017-06-14 14:35:43.780 [18953] main/103/main I> final data sent.\n"
#~ "2017-06-14 14:35:43.796 [18953] relay/[::ffff:192.168.0.102]:/101/main I> recover from `/var/lib/tarantool/master/00000000000000000000.xlog'\n"
#~ "2017-06-14 14:35:44.726 [18953] main/105/applier/replicator@192.168.0. I> authenticated"

#~ msgid ""
#~ "In this case, the replica would wait for the master to become available, so "
#~ "the launch order doesn't matter. Our ``box.once()`` logic would also be "
#~ "executed only once, at the master."
#~ msgstr ""
#~ "В данном случае реплика ожидает доступности мастера, поэтому порядок запуска"
#~ " не имеет значения. Наша функция ``box.once()`` также будет выполняться "
#~ "однократно, только на мастере."

#~ msgid ""
#~ "$ # the replica has eventually connected to the master\n"
#~ "$ # and got bootstrapped (from the replica's log)\n"
#~ "2017-06-14 14:35:43.777 [18952] main/104/applier/replicator@192.168.0. I> remote master is 1.7.4 at 192.168.0.101:3301\n"
#~ "2017-06-14 14:35:43.777 [18952] main/104/applier/replicator@192.168.0. I> authenticated\n"
#~ "2017-06-14 14:35:43.777 [18952] main/101/replica.lua I> bootstrapping replica from 192.168.0.199:3310\n"
#~ "2017-06-14 14:35:43.788 [18952] main/104/applier/replicator@192.168.0. I> initial data received\n"
#~ "2017-06-14 14:35:43.789 [18952] main/104/applier/replicator@192.168.0. I> final data received\n"
#~ "2017-06-14 14:35:43.793 [18952] snapshot/101/main I> saving snapshot `/var/lib/tarantool/replica/00000000000000000005.snap.inprogress'\n"
#~ "2017-06-14 14:35:43.793 [18952] snapshot/101/main I> done\n"
#~ "2017-06-14 14:35:43.795 [18952] main/101/replica.lua I> vinyl checkpoint done\n"
#~ "2017-06-14 14:35:43.795 [18952] main/101/replica.lua I> ready to accept requests\n"
#~ "2017-06-14 14:35:43.795 [18952] main/101/replica.lua I> set 'read_only' configuration option to true\n"
#~ "2017-06-14 14:35:43.795 [18952] main C> entering the event loop"
#~ msgstr ""
#~ "$ # реплика в итоге подключена к мастеру\n"
#~ "$ # и получила настройки (из журнала реплики)\n"
#~ "2017-06-14 14:35:43.777 [18952] main/104/applier/replicator@192.168.0. I> remote master is 1.7.4 at 192.168.0.101:3301\n"
#~ "2017-06-14 14:35:43.777 [18952] main/104/applier/replicator@192.168.0. I> authenticated\n"
#~ "2017-06-14 14:35:43.777 [18952] main/101/replica.lua I> bootstrapping replica from 192.168.0.199:3310\n"
#~ "2017-06-14 14:35:43.788 [18952] main/104/applier/replicator@192.168.0. I> initial data received\n"
#~ "2017-06-14 14:35:43.789 [18952] main/104/applier/replicator@192.168.0. I> final data received\n"
#~ "2017-06-14 14:35:43.793 [18952] snapshot/101/main I> saving snapshot `/var/lib/tarantool/replica/00000000000000000005.snap.inprogress'\n"
#~ "2017-06-14 14:35:43.793 [18952] snapshot/101/main I> done\n"
#~ "2017-06-14 14:35:43.795 [18952] main/101/replica.lua I> vinyl checkpoint done\n"
#~ "2017-06-14 14:35:43.795 [18952] main/101/replica.lua I> ready to accept requests\n"
#~ "2017-06-14 14:35:43.795 [18952] main/101/replica.lua I> set 'read_only' configuration option to true\n"
#~ "2017-06-14 14:35:43.795 [18952] main C> entering the event loop"

#~ msgid "Controlled failover"
#~ msgstr "Контролируемое восстановление после сбоя"

#~ msgid ""
#~ "To perform a **controlled failover**, that is, swap the roles of the master "
#~ "and replica, all we need to do is to set ``read_only=true`` at the master, "
#~ "and ``read_only=false`` at the replica. The order of actions is important "
#~ "here. If a system is running in production, we do not want concurrent writes"
#~ " happening both at the replica and the master. Nor do we want the new "
#~ "replica to accept any writes until it has finished fetching all replication "
#~ "data from the old master. To compare replica and master state, we can use "
#~ ":ref:`box.info.signature <box_introspection-box_info>`."
#~ msgstr ""
#~ "Чтобы провести **контролируемое восстановление после сбоя**, то есть "
#~ "поменять роли мастера и реплики, нужно лишь настроить параметры "
#~ "``read_only=true`` на мастере и ``read_only=false`` на реплике. Порядок "
#~ "действий в данном случае имеет значение. Если система принята в "
#~ "эксплуатацию, нам не нужна параллельная запись на реплике и на мастере. "
#~ "Нежелательно также, чтобы новая реплика принимала запись, пока не получит "
#~ "все реплицируемые данные со старого мастера. Чтобы сопоставить состояние "
#~ "реплики и мастера, можно использовать :ref:`box.info.signature "
#~ "<box_introspection-box_info>`."

#~ msgid "Set ``read_only=true`` at the master."
#~ msgstr "Настройте ``read_only=true`` на мастере."

#~ msgid ""
#~ "# at the master\n"
#~ "tarantool> box.cfg{read_only=true}"
#~ msgstr ""
#~ "# на мастере\n"
#~ "tarantool> box.cfg{read_only=true}"

#~ msgid ""
#~ "Record the master’s current position with ``box.info.signature``, containing"
#~ " the sum of all LSNs in the master’s vector clock."
#~ msgstr ""
#~ "Зарегистрируйте текущее состояние мастера с помощью ``box.info.signature``, "
#~ "которое содержит общее количество всех LSN в векторных часах мастера."

#~ msgid ""
#~ "# at the master\n"
#~ "tarantool> box.info.signature"
#~ msgstr ""
#~ "# на мастере\n"
#~ "tarantool> box.info.signature"

#~ msgid "Wait until the replica’s signature is the same as the master’s."
#~ msgstr "Подождите, пока сигнатура реплики не совпадет с сигнатурой мастера."

#~ msgid ""
#~ "# at the replica\n"
#~ "tarantool> box.info.signature"
#~ msgstr ""
#~ "# на реплике\n"
#~ "tarantool> box.info.signature"

#~ msgid "Set ``read_only=false`` at the replica to enable write operations."
#~ msgstr ""
#~ "Настройте ``read_only=false`` на реплике, чтобы запустить операции записи "
#~ "данных."

#~ msgid ""
#~ "# at the replica\n"
#~ "tarantool> box.cfg{read_only=false}"
#~ msgstr ""
#~ "# на реплике\n"
#~ "tarantool> box.cfg{read_only=false}"

#~ msgid ""
#~ "These four steps ensure that the replica doesn’t accept new writes until "
#~ "it’s done fetching writes from the master."
#~ msgstr ""
#~ "Эти шаги нужны для того, чтобы реплика гарантированно не принимала новые "
#~ "записи, пока не получит данные от мастера."

#~ msgid "Master-master bootstrap"
#~ msgstr "Настройка репликации мастер-мастер"

#~ msgid ""
#~ "Now let us bootstrap a two-instance **master-master** set. For easier "
#~ "administration, we make master#1 and master#2 instance files fully "
#~ "identical."
#~ msgstr ""
#~ "Теперь настроим набор с двумя экземплярами **мастер-мастер**. Для удобства "
#~ "управления сделаем файлы экземпляра для мастера №1 и мастера №2 практически "
#~ "одинаковыми."

#~ msgid ""
#~ "We re-use the master's instance file from the :ref:`master-replica example "
#~ "<replication-master_replica_bootstrap>` above."
#~ msgstr ""
#~ "Переиспользуем файл экземпляра для мастера из вышеописанного :ref:`примера "
#~ "мастер-реплика <replication-master_replica_bootstrap>`."

#~ msgid ""
#~ "-- instance file for any of the two masters\n"
#~ "box.cfg{\n"
#~ "  listen      = 3301,\n"
#~ "  replication = {'replicator:password@192.168.0.101:3301',  -- master1 URI\n"
#~ "                 'replicator:password@192.168.0.102:3301'}, -- master2 URI\n"
#~ "  read_only   = false\n"
#~ "}\n"
#~ "box.once(\"schema\", function()\n"
#~ "   box.schema.user.create('replicator', {password = 'password'})\n"
#~ "   box.schema.user.grant('replicator', 'replication') -- grant replication role\n"
#~ "   box.schema.space.create(\"test\")\n"
#~ "   box.space.test:create_index(\"primary\")\n"
#~ "   print('box.once executed on master #1')\n"
#~ "end)"
#~ msgstr ""
#~ "-- файл экземпляра для любого из двух мастеров\n"
#~ "  box.cfg{\n"
#~ "  listen      = 3301,\n"
#~ "  replication = {'replicator:password@192.168.0.101:3301',  -- URI мастера 1\n"
#~ "                 'replicator:password@192.168.0.102:3301'}, -- URI мастера 2\n"
#~ "  read_only   = false\n"
#~ "}\n"
#~ "box.once(\"schema\", function()\n"
#~ "  box.schema.user.create('replicator', {password = 'password'})\n"
#~ "  box.schema.user.grant('replicator', 'replication') -- настроить роль для репликации\n"
#~ "  box.schema.space.create(\"test\")\n"
#~ "  box.space.test:create_index(\"primary\")\n"
#~ "  print('box.once executed on master #1')\n"
#~ "end)"

#~ msgid ""
#~ "In the :ref:`replication <cfg_replication-replication>` parameter, we define"
#~ " the URIs of both masters in the replica set and say ``print('box.once "
#~ "executed on master #1')`` so it will be clear when and where the "
#~ "``box.once()`` logic is executed."
#~ msgstr ""
#~ "В параметре :ref:`replication <cfg_replication-replication>` определим URI "
#~ "обоих мастеров в наборе реплик и выполним команду ``print('box.once executed"
#~ " on master #1')``, чтобы увидеть, когда и где будет выполнена логика функции"
#~ " ``box.once()``."

#~ msgid ""
#~ "Now we can launch the two masters. Again, the launch order doesn't matter. "
#~ "The ``box.once()`` logic will also be executed only once, at the master "
#~ "which is elected as the replica set :ref:`leader <replication-leader>` at "
#~ "bootstrap."
#~ msgstr ""
#~ "Теперь можно запустить оба мастера. Повторимся, что порядок запуска не имеет"
#~ " значения. Логика ``box.once()`` также будет выполняться лишь однократно на "
#~ "мастере, который будет выбран лидером (:ref:`leader <replication-leader>`) в"
#~ " наборе реплик при настройке."

#~ msgid ""
#~ "$ # launching master #1\n"
#~ "$ tarantool master1.lua\n"
#~ "2017-06-14 15:39:03.062 [47021] main/101/master1.lua C> version 1.7.4-52-g980d30092\n"
#~ "2017-06-14 15:39:03.062 [47021] main/101/master1.lua C> log level 5\n"
#~ "2017-06-14 15:39:03.063 [47021] main/101/master1.lua I> mapping 268435456 bytes for tuple arena...\n"
#~ "2017-06-14 15:39:03.065 [47021] iproto/101/main I> binary: bound to [::]:3301\n"
#~ "2017-06-14 15:39:03.065 [47021] main/105/applier/replicator@192.168.0.10 I> can't connect to master\n"
#~ "2017-06-14 15:39:03.065 [47021] main/105/applier/replicator@192.168.0.10 coio.cc:107 !> SystemError connect, called on fd 14, aka 192.168.0.102:57110: Connection refused\n"
#~ "2017-06-14 15:39:03.065 [47021] main/105/applier/replicator@192.168.0.10 I> will retry every 1 second\n"
#~ "2017-06-14 15:39:03.065 [47021] main/104/applier/replicator@192.168.0.10 I> remote master is 1.7.4 at 192.168.0.101:3301\n"
#~ "2017-06-14 15:39:08.070 [47021] main/105/applier/replicator@192.168.0.10 I> remote master is 1.7.4 at 192.168.0.102:3301\n"
#~ "2017-06-14 15:39:08.071 [47021] main/105/applier/replicator@192.168.0.10 I> authenticated\n"
#~ "2017-06-14 15:39:08.071 [47021] main/101/master1.lua I> bootstrapping replica from 192.168.0.102:3301\n"
#~ "2017-06-14 15:39:08.073 [47021] main/105/applier/replicator@192.168.0.10 I> initial data received\n"
#~ "2017-06-14 15:39:08.074 [47021] main/105/applier/replicator@192.168.0.10 I> final data received\n"
#~ "2017-06-14 15:39:08.074 [47021] snapshot/101/main I> saving snapshot `/Users/e.shebunyaeva/work/tarantool-test-repl/master1_dir/00000000000000000008.snap.inprogress'\n"
#~ "2017-06-14 15:39:08.074 [47021] snapshot/101/main I> done\n"
#~ "2017-06-14 15:39:08.076 [47021] main/101/master1.lua I> vinyl checkpoint done\n"
#~ "2017-06-14 15:39:08.076 [47021] main/101/master1.lua I> ready to accept requests\n"
#~ "box.once executed on master #1\n"
#~ "2017-06-14 15:39:08.077 [47021] main C> entering the event loop"
#~ msgstr ""
#~ "$ # запуск мастера №1\n"
#~ "$ tarantool master1.lua\n"
#~ "2017-06-14 15:39:03.062 [47021] main/101/master1.lua C> version 1.7.4-52-g980d30092\n"
#~ "2017-06-14 15:39:03.062 [47021] main/101/master1.lua C> log level 5\n"
#~ "2017-06-14 15:39:03.063 [47021] main/101/master1.lua I> mapping 268435456 bytes for tuple arena...\n"
#~ "2017-06-14 15:39:03.065 [47021] iproto/101/main I> binary: bound to [::]:3301\n"
#~ "2017-06-14 15:39:03.065 [47021] main/105/applier/replicator@192.168.0.10 I> can't connect to master\n"
#~ "2017-06-14 15:39:03.065 [47021] main/105/applier/replicator@192.168.0.10 coio.cc:107 !> SystemError connect, called on fd 14, aka 192.168.0.102:57110: Connection refused\n"
#~ "2017-06-14 15:39:03.065 [47021] main/105/applier/replicator@192.168.0.10 I> will retry every 1 second\n"
#~ "2017-06-14 15:39:03.065 [47021] main/104/applier/replicator@192.168.0.10 I> remote master is 1.7.4 at 192.168.0.101:3301\n"
#~ "2017-06-14 15:39:08.070 [47021] main/105/applier/replicator@192.168.0.10 I> remote master is 1.7.4 at 192.168.0.102:3301\n"
#~ "2017-06-14 15:39:08.071 [47021] main/105/applier/replicator@192.168.0.10 I> authenticated\n"
#~ "2017-06-14 15:39:08.071 [47021] main/101/master1.lua I> bootstrapping replica from 192.168.0.102:3301\n"
#~ "2017-06-14 15:39:08.073 [47021] main/105/applier/replicator@192.168.0.10 I> initial data received\n"
#~ "2017-06-14 15:39:08.074 [47021] main/105/applier/replicator@192.168.0.10 I> final data received\n"
#~ "2017-06-14 15:39:08.074 [47021] snapshot/101/main I> saving snapshot `/Users/e.shebunyaeva/work/tarantool-test-repl/master1_dir/00000000000000000008.snap.inprogress'\n"
#~ "2017-06-14 15:39:08.074 [47021] snapshot/101/main I> done\n"
#~ "2017-06-14 15:39:08.076 [47021] main/101/master1.lua I> vinyl checkpoint done\n"
#~ "2017-06-14 15:39:08.076 [47021] main/101/master1.lua I> ready to accept requests\n"
#~ "box.once executed on master #1\n"
#~ "2017-06-14 15:39:08.077 [47021] main C> entering the event loop"

#~ msgid ""
#~ "$ # launching master #2\n"
#~ "$ tarantool master2.lua\n"
#~ "2017-06-14 15:39:07.452 [47022] main/101/master2.lua C> version 1.7.4-52-g980d30092\n"
#~ "2017-06-14 15:39:07.453 [47022] main/101/master2.lua C> log level 5\n"
#~ "2017-06-14 15:39:07.453 [47022] main/101/master2.lua I> mapping 268435456 bytes for tuple arena...\n"
#~ "2017-06-14 15:39:07.455 [47022] iproto/101/main I> binary: bound to [::]:3301\n"
#~ "2017-06-14 15:39:07.455 [47022] main/104/applier/replicator@192.168.0.19 I> remote master is 1.7.4 at 192.168.0.101:3301\n"
#~ "2017-06-14 15:39:07.455 [47022] main/105/applier/replicator@192.168.0.10 I> remote master is 1.7.4 at 192.168.0.102:3301\n"
#~ "2017-06-14 15:39:07.455 [47022] main/101/master2.lua I> initializing an empty data directory\n"
#~ "2017-06-14 15:39:07.457 [47022] snapshot/101/main I> saving snapshot `/Users/e.shebunyaeva/work/tarantool-test-repl/master2_dir/00000000000000000000.snap.inprogress'\n"
#~ "2017-06-14 15:39:07.457 [47022] snapshot/101/main I> done\n"
#~ "2017-06-14 15:39:07.458 [47022] main/101/master2.lua I> vinyl checkpoint done\n"
#~ "2017-06-14 15:39:07.459 [47022] main/101/master2.lua I> ready to accept requests\n"
#~ "2017-06-14 15:39:07.460 [47022] main C> entering the event loop\n"
#~ "2017-06-14 15:39:08.072 [47022] main/103/main I> initial data sent.\n"
#~ "2017-06-14 15:39:08.073 [47022] relay/[::ffff:192.168.0.102]:/101/main I> recover from `/Users/e.shebunyaeva/work/tarantool-test-repl/master2_dir/00000000000000000000.xlog'\n"
#~ "2017-06-14 15:39:08.073 [47022] main/103/main I> final data sent.\n"
#~ "2017-06-14 15:39:08.077 [47022] relay/[::ffff:192.168.0.102]:/101/main I> recover from `/Users/e.shebunyaeva/work/tarantool-test-repl/master2_dir/00000000000000000000.xlog'\n"
#~ "2017-06-14 15:39:08.461 [47022] main/104/applier/replicator@192.168.0.10 I> authenticated"
#~ msgstr ""
#~ "$ # запуск мастера №2\n"
#~ "$ tarantool master2.lua\n"
#~ "2017-06-14 15:39:07.452 [47022] main/101/master2.lua C> version 1.7.4-52-g980d30092\n"
#~ "2017-06-14 15:39:07.453 [47022] main/101/master2.lua C> log level 5\n"
#~ "2017-06-14 15:39:07.453 [47022] main/101/master2.lua I> mapping 268435456 bytes for tuple arena...\n"
#~ "2017-06-14 15:39:07.455 [47022] iproto/101/main I> binary: bound to [::]:3301\n"
#~ "2017-06-14 15:39:07.455 [47022] main/104/applier/replicator@192.168.0.19 I> remote master is 1.7.4 at 192.168.0.101:3301\n"
#~ "2017-06-14 15:39:07.455 [47022] main/105/applier/replicator@192.168.0.10 I> remote master is 1.7.4 at 192.168.0.102:3301\n"
#~ "2017-06-14 15:39:07.455 [47022] main/101/master2.lua I> initializing an empty data directory\n"
#~ "2017-06-14 15:39:07.457 [47022] snapshot/101/main I> saving snapshot `/Users/e.shebunyaeva/work/tarantool-test-repl/master2_dir/00000000000000000000.snap.inprogress'\n"
#~ "2017-06-14 15:39:07.457 [47022] snapshot/101/main I> done\n"
#~ "2017-06-14 15:39:07.458 [47022] main/101/master2.lua I> vinyl checkpoint done\n"
#~ "2017-06-14 15:39:07.459 [47022] main/101/master2.lua I> ready to accept requests\n"
#~ "2017-06-14 15:39:07.460 [47022] main C> entering the event loop\n"
#~ "2017-06-14 15:39:08.072 [47022] main/103/main I> initial data sent.\n"
#~ "2017-06-14 15:39:08.073 [47022] relay/[::ffff:192.168.0.102]:/101/main I> recover from `/Users/e.shebunyaeva/work/tarantool-test-repl/master2_dir/00000000000000000000.xlog'\n"
#~ "2017-06-14 15:39:08.073 [47022] main/103/main I> final data sent.\n"
#~ "2017-06-14 15:39:08.077 [47022] relay/[::ffff:192.168.0.102]:/101/main I> recover from `/Users/e.shebunyaeva/work/tarantool-test-repl/master2_dir/00000000000000000000.xlog'\n"
#~ "2017-06-14 15:39:08.461 [47022] main/104/applier/replicator@192.168.0.10 I> authenticated"
