
msgid "Master-replica: automated failover"
msgstr ""

msgid ""
"**Example on GitHub**: `auto_leader "
"<https://github.com/tarantool/doc/tree/latest/doc/code_snippets/snippets/replication/instances.enabled/auto_leader>`_"
msgstr ""

msgid ""
"This tutorial shows how to configure and work with a replica set with "
"automated failover."
msgstr ""

msgid "Prerequisites"
msgstr ""

msgid "Before starting this tutorial:"
msgstr ""

msgid "Install the :ref:`tt <tt-cli>` utility."
msgstr ""

msgid ""
"Create a tt environment in the current directory by executing the :ref:`tt "
"init <tt-init>` command."
msgstr ""

msgid ""
"Inside the ``instances.enabled`` directory of the created tt environment, "
"create the ``auto_leader`` directory."
msgstr ""

msgid ""
"Inside ``instances.enabled/auto_leader``, create the ``instances.yml`` and "
"``config.yaml`` files:"
msgstr ""

msgid ""
"``instances.yml`` specifies instances to :ref:`run <replication-automated-"
"failover-start-instances>` in the current environment and should look like "
"this:"
msgstr ""

msgid ""
"instance001:\n"
"instance002:\n"
"instance003:"
msgstr ""

msgid ""
"The ``config.yaml`` file is intended to store a :ref:`replica set "
"configuration <replication-automated-failover-configure-cluster>`."
msgstr ""

msgid "Configuring a replica set"
msgstr ""

msgid ""
"This section describes how to configure a replica set in ``config.yaml``."
msgstr ""

msgid "Step 1: Configuring a failover mode"
msgstr ""

msgid ""
"First, set the :ref:`replication.failover "
"<configuration_reference_replication_failover>` option to ``election``:"
msgstr ""

msgid ""
"replication:\n"
"  failover: election\n"
msgstr ""

msgid "Step 2: Defining a replica set topology"
msgstr ""

msgid ""
"Define a replica set topology inside the :ref:`groups "
"<configuration_reference_groups>` section. The :ref:`iproto.listen "
"<configuration_reference_iproto_listen>` option specifies an address used to"
" listen for incoming requests and allows replicas to communicate with each "
"other."
msgstr ""

msgid ""
"groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        instances:\n"
"          instance001:\n"
"            iproto:\n"
"              listen: 127.0.0.1:3301\n"
"          instance002:\n"
"            iproto:\n"
"              listen: 127.0.0.1:3302\n"
"          instance003:\n"
"            iproto:\n"
"              listen: 127.0.0.1:3303\n"
msgstr ""

msgid "Step 3: Creating a user for replication"
msgstr ""

msgid ""
"In the :ref:`credentials <configuration_reference_credentials>` section, "
"create the ``replicator`` user with the ``replication`` role:"
msgstr ""

msgid ""
"credentials:\n"
"  users:\n"
"    replicator:\n"
"      password: 'topsecret'\n"
"      roles: [replication]\n"
msgstr ""

msgid "Step 4: Specifying advertise URIs"
msgstr ""

msgid ""
"Set :ref:`iproto.advertise.peer "
"<configuration_reference_iproto_advertise_peer>` to advertise the current "
"instance to other replica set members:"
msgstr ""

msgid ""
"iproto:\n"
"  advertise:\n"
"    peer: replicator@\n"
msgstr ""

msgid "Resulting configuration"
msgstr ""

msgid "The resulting replica set configuration should look as follows:"
msgstr ""

msgid ""
"credentials:\n"
"  users:\n"
"    replicator:\n"
"      password: 'topsecret'\n"
"      roles: [replication]\n"
"\n"
"iproto:\n"
"  advertise:\n"
"    peer: replicator@\n"
"\n"
"replication:\n"
"  failover: election\n"
"\n"
"groups:\n"
"  group001:\n"
"    replicasets:\n"
"      replicaset001:\n"
"        instances:\n"
"          instance001:\n"
"            iproto:\n"
"              listen: 127.0.0.1:3301\n"
"          instance002:\n"
"            iproto:\n"
"              listen: 127.0.0.1:3302\n"
"          instance003:\n"
"            iproto:\n"
"              listen: 127.0.0.1:3303\n"
msgstr ""

msgid "Working with a replica set"
msgstr ""

msgid "Starting instances"
msgstr ""

msgid ""
"After configuring a replica set, execute the :ref:`tt start <tt-start>` "
"command from the :ref:`tt environment directory <replication-automated-"
"failover-tt-env>`:"
msgstr ""

msgid ""
"$ tt start auto_leader\n"
"   • Starting an instance [auto_leader:instance001]...\n"
"   • Starting an instance [auto_leader:instance002]...\n"
"   • Starting an instance [auto_leader:instance003]..."
msgstr ""

msgid ""
"Check that instances are in the ``RUNNING`` status using the :ref:`tt status"
" <tt-status>` command:"
msgstr ""

msgid ""
"$ tt status auto_leader\n"
"INSTANCE                    STATUS      PID\n"
"auto_leader:instance001     RUNNING     24768\n"
"auto_leader:instance002     RUNNING     24769\n"
"auto_leader:instance003     RUNNING     24767"
msgstr ""

msgid "Checking a replica set status"
msgstr ""

msgid "Connect to ``instance001`` using :ref:`tt connect <tt-connect>`:"
msgstr ""

msgid ""
"$ tt connect auto_leader:instance001\n"
"   • Connecting to the instance...\n"
"   • Connected to auto_leader:instance001"
msgstr ""

msgid ""
"Check the instance state in regard to :ref:`leader election "
"<repl_leader_elect_process>` using :ref:`box.info.election "
"<box_info_election>`. The output below shows that ``instance001`` is a "
"follower while ``instance002`` is a replica set leader."
msgstr ""

msgid ""
"auto_leader:instance001> box.info.election\n"
"---\n"
"- leader_idle: 0.77491499999815\n"
"  leader_name: instance002\n"
"  state: follower\n"
"  vote: 0\n"
"  term: 2\n"
"  leader: 1\n"
"..."
msgstr ""

msgid "Check that ``instance001`` is in read-only mode using ``box.info.ro``:"
msgstr ""

msgid ""
"auto_leader:instance001> box.info.ro\n"
"---\n"
"- true\n"
"..."
msgstr ""

msgid ""
"Execute ``box.info.replication`` to check a replica set status. Make sure "
"that ``upstream.status`` and ``downstream.status`` are ``follow`` for "
"``instance002`` and ``instance003``."
msgstr ""

msgid ""
"auto_leader:instance001> box.info.replication\n"
"---\n"
"- 1:\n"
"    id: 1\n"
"    uuid: 4cfa6e3c-625e-b027-00a7-29b2f2182f23\n"
"    lsn: 9\n"
"    upstream:\n"
"      status: follow\n"
"      idle: 0.8257709999998\n"
"      peer: replicator@127.0.0.1:3302\n"
"      lag: 0.00012326240539551\n"
"    name: instance002\n"
"    downstream:\n"
"      status: follow\n"
"      idle: 0.81174199999805\n"
"      vclock: {1: 9}\n"
"      lag: 0\n"
"  2:\n"
"    id: 2\n"
"    uuid: 9bb111c2-3ff5-36a7-00f4-2b9a573ea660\n"
"    lsn: 0\n"
"    name: instance001\n"
"  3:\n"
"    id: 3\n"
"    uuid: 9a3a1b9b-8a18-baf6-00b3-a6e5e11fd8b6\n"
"    lsn: 0\n"
"    upstream:\n"
"      status: follow\n"
"      idle: 0.83125499999733\n"
"      peer: replicator@127.0.0.1:3303\n"
"      lag: 0.00010204315185547\n"
"    name: instance003\n"
"    downstream:\n"
"      status: follow\n"
"      idle: 0.83213399999659\n"
"      vclock: {1: 9}\n"
"      lag: 0\n"
"..."
msgstr ""

msgid "Adding data"
msgstr ""

msgid ""
"To check that replicas (``instance001`` and ``instance003``) get all updates"
" from the master (``instance002``), follow the steps below:"
msgstr ""

msgid "Connect to ``instance002`` using ``tt connect``:"
msgstr ""

msgid ""
"$ tt connect auto_leader:instance002\n"
"   • Connecting to the instance...\n"
"   • Connected to auto_leader:instance002"
msgstr ""

msgid ""
"Create a space and add data as described in :ref:`CRUD operation examples "
"<box_space_examples>`."
msgstr ""

msgid ""
"Use the ``select`` operation on ``instance001`` and ``instance003`` to make "
"sure data is replicated."
msgstr ""

msgid ""
"Check that the ``1`` component of :ref:`box.info.vclock <box_introspection-"
"box_info>` values are the same on all instances:"
msgstr ""

msgid "``instance001``:"
msgstr ""

msgid ""
"auto_leader:instance001> box.info.vclock\n"
"---\n"
"- {0: 1, 1: 32}\n"
"..."
msgstr ""

msgid "``instance002``:"
msgstr ""

msgid ""
"auto_leader:instance002> box.info.vclock\n"
"---\n"
"- {0: 1, 1: 32}\n"
"..."
msgstr ""

msgid "``instance003``:"
msgstr ""

msgid ""
"auto_leader:instance003> box.info.vclock\n"
"---\n"
"- {0: 1, 1: 32}\n"
"..."
msgstr ""

msgid ""
"Note that a ``vclock`` value might include the ``0`` component that is "
"related to local space operations and might differ for different instances "
"in a replica set."
msgstr ""

msgid "Testing automated failover"
msgstr ""

msgid ""
"To test how automated failover works if the current master is stopped, "
"follow the steps below:"
msgstr ""

msgid ""
"Stop the current master instance (``instance002``) using the ``tt stop`` "
"command:"
msgstr ""

msgid ""
"$ tt stop auto_leader:instance002\n"
"   • The Instance auto_leader:instance002 (PID = 24769) has been terminated."
msgstr ""

msgid ""
"On ``instance001``, check  ``box.info.election``. In this example, a new "
"replica set leader is ``instance001``."
msgstr ""

msgid ""
"auto_leader:instance001> box.info.election\n"
"---\n"
"- leader_idle: 0\n"
"  leader_name: instance001\n"
"  state: leader\n"
"  vote: 2\n"
"  term: 3\n"
"  leader: 2\n"
"..."
msgstr ""

msgid ""
"Check replication status using ``box.info.replication`` for ``instance002``:"
msgstr ""

msgid "``upstream.status`` is ``disconnected``."
msgstr ""

msgid "``downstream.status`` is ``stopped``."
msgstr ""

msgid ""
"auto_leader:instance001> box.info.replication\n"
"---\n"
"- 1:\n"
"    id: 1\n"
"    uuid: 4cfa6e3c-625e-b027-00a7-29b2f2182f23\n"
"    lsn: 32\n"
"    upstream:\n"
"      peer: replicator@127.0.0.1:3302\n"
"      lag: 0.00032305717468262\n"
"      status: disconnected\n"
"      idle: 48.352504000002\n"
"      message: 'connect, called on fd 20, aka 127.0.0.1:62575: Connection refused'\n"
"      system_message: Connection refused\n"
"    name: instance002\n"
"    downstream:\n"
"      status: stopped\n"
"      message: 'unexpected EOF when reading from socket, called on fd 32, aka 127.0.0.1:3301,\n"
"        peer of 127.0.0.1:62204: Broken pipe'\n"
"      system_message: Broken pipe\n"
"  2:\n"
"    id: 2\n"
"    uuid: 9bb111c2-3ff5-36a7-00f4-2b9a573ea660\n"
"    lsn: 1\n"
"    name: instance001\n"
"  3:\n"
"    id: 3\n"
"    uuid: 9a3a1b9b-8a18-baf6-00b3-a6e5e11fd8b6\n"
"    lsn: 0\n"
"    upstream:\n"
"      status: follow\n"
"      idle: 0.18620999999985\n"
"      peer: replicator@127.0.0.1:3303\n"
"      lag: 0.00012516975402832\n"
"    name: instance003\n"
"    downstream:\n"
"      status: follow\n"
"      idle: 0.19718099999955\n"
"      vclock: {2: 1, 1: 32}\n"
"      lag: 0.00051403045654297\n"
"..."
msgstr ""

msgid "Start ``instance002`` back using ``tt start``:"
msgstr ""

msgid ""
"$ tt start auto_leader:instance002\n"
"   • Starting an instance [auto_leader:instance002]..."
msgstr ""

msgid "Choosing a leader manually"
msgstr ""

msgid ""
"Make sure that :ref:`box.info.vclock <box_introspection-box_info>` values "
"(except the ``0`` components) are the same on all instances:"
msgstr ""

msgid ""
"auto_leader:instance001> box.info.vclock\n"
"---\n"
"- {0: 2, 1: 32, 2: 1}\n"
"..."
msgstr ""

msgid ""
"auto_leader:instance002> box.info.vclock\n"
"---\n"
"- {0: 2, 1: 32, 2: 1}\n"
"..."
msgstr ""

msgid ""
"auto_leader:instance003> box.info.vclock\n"
"---\n"
"- {0: 3, 1: 32, 2: 1}\n"
"..."
msgstr ""

msgid ""
"On ``instance002``, run :ref:`box.ctl.promote() <box_ctl-promote>` to choose"
" it as a new replica set leader:"
msgstr ""

msgid ""
"auto_leader:instance002> box.ctl.promote()\n"
"---\n"
"..."
msgstr ""

msgid ""
"Check ``box.info.election`` to make sure ``instance002`` is a leader now:"
msgstr ""

msgid ""
"auto_leader:instance002> box.info.election\n"
"---\n"
"- leader_idle: 0\n"
"  leader_name: instance002\n"
"  state: leader\n"
"  vote: 1\n"
"  term: 4\n"
"  leader: 1\n"
"..."
msgstr ""

msgid "Adding and removing instances"
msgstr ""

msgid ""
"The process of adding instances to a replica set and removing them is "
"similar for all failover modes. Learn how to do this from the :ref:`Master-"
"replica: manual failover <replication-bootstrap>` tutorial:"
msgstr ""

msgid ":ref:`Adding instances <replication-add_instances>`"
msgstr ""

msgid ":ref:`Removing instances <replication-remove_instances>`"
msgstr ""

msgid ""
"Before removing an instance from a replica set with "
":ref:`replication.failover <configuration_reference_replication_failover>` "
"set to ``election``, make sure this instance is in read-only mode. If the "
"instance is a master, choose a :ref:`new leader manually <replication-"
"automated-failover-new-leader>`."
msgstr ""
