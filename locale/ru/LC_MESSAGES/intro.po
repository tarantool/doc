# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-06 14:05+0000\n"
"PO-Revision-Date: 2019-11-14 20:46+0300\n"
"Last-Translator: \n"
"Language: ru\n"
"Language-Team: \n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

msgid "Overview"
msgstr "Общие сведения"

msgid "An application server together with a database manager"
msgstr "Сервер приложений + СУБД"

msgid ""
"Tarantool is a Lua application server integrated with a database "
"management system. It has a \"fiber\" model which means that many "
"Tarantool applications can run simultaneously on a single thread, while "
"each instance of the Tarantool server itself can run multiple threads for"
" input-output and background maintenance. It incorporates the LuaJIT -- "
"\"Just In Time\" -- Lua compiler, Lua libraries for most common "
"applications, and the Tarantool Database Server which is an established "
"NoSQL DBMS. Thus Tarantool serves all the purposes that have made node.js"
" and Twisted popular, plus it supports data persistence."
msgstr ""
"Tarantool представляет собой сервер приложений на языке Lua, "
"интегрированный с СУБД. В основе Tarantool'а лежат файберы (fibers), что "
"означает, что несколько Tarantool-приложений могут работать в одном "
"потоке (thread), при этом каждый экземпляр Tarantool-сервера может "
"одновременно запускать несколько потоков для обработки ввода-вывода "
"данных и фоновых задач. Tarantool включает в себя LuaJIT (Just In Time) -"
" Lua-компилятор, Lua-библиотеки для наиболее распространенных приложений,"
" а также сервер базы данных Tarantool'а, который представляет собой "
"широко признанную СУБД NoSQL. Таким образом, Tarantool используется для "
"всех тех целей, которые принесли популярность node.js и Twisted, и более "
"того - поддерживает персистентность данных."

msgid ""
"The code is free. The open-source license is `BSD license`_. The "
"supported platforms are GNU/Linux, Mac OS and FreeBSD."
msgstr ""
"Tarantool -- это open-source проект. Исходный код открыт для всех и "
"распространяется бесплатно согласно лицензии `BSD license`_. "
"Поддерживаемые платформы: GNU / Linux, Mac OS и FreeBSD."

msgid ""
"Tarantool's creator and biggest user is `Mail.Ru`_, the largest internet "
"company in Russia, with 30 million users, 25 million emails per day, and "
"a web site whose Alexa global rank is in the `top 40`_ worldwide. "
"Tarantool services Mail.Ru's hottest data, such as the session data of "
"online users, the properties of online applications, the caches of the "
"underlying data, the distribution and sharding algorithms, and much more."
" Outside Mail.Ru the software is used by a growing number of projects in "
"online gaming, digital marketing, and social media industries. Although "
"Mail.Ru is the sponsor for product development, the roadmap and the bugs "
"database and the development process are fully open. The software "
"incorporates patches from dozens of community contributors. The Tarantool"
" community writes and maintains most of the drivers for programming "
"languages.  The greater Lua community has hundreds of useful packages "
"most of which can become Tarantool extensions."
msgstr ""
"Создателем Tarantool'а -- а также его основным пользователем -- является "
"компания `Mail.Ru`_, крупнейшая Интернет-компания России (30 млн "
"пользователей, 25 млн электронных писем в день, веб-сайт в списке `top "
"40`_ международного Alexa-рейтинга). Tarantool используется для обработки"
"  самых \"горячих\" данных Mail.Ru, таких как данные пользовательских "
"онлайн-сессий, настройки онлайн-приложений, кэширование сервисных данных,"
"  алгоритмы распределения данных и шардинга, и т.д. Tarantool также "
"используется во всё большем количестве проектов вне стен Mail.Ru. Это, к "
"примеру, онлайн-игры, цифровой маркетинг, социальные сети. Несмотря на то"
"  что Mail.Ru спонсирует разработку Tarantool'а, весь процесс разработки,"
" в т.ч. дальнейшие планы и база обнаруженных ошибок, является полностью "
"открытым. В Tarantool включены патчи от большого числа сторонних "
"разработчиков. Усилиями сообщества разработчиков Tarantool'а были "
"написаны (и далее поддерживаются) библиотеки для подключения модулей на "
"внешних языках программирования. А сообщество Lua-разработчиков "
"предоставило сотни полезных пакетов, большинство из которых можно "
"использовать в качестве расширений для Tarantool'а."

msgid ""
"Users can create, modify and drop **Lua functions** at runtime. Or they "
"can define **Lua programs** that are loaded during startup for triggers, "
"background tasks, and interacting with networked peers. Unlike popular "
"application development frameworks based on a \"reactor\" pattern, "
"networking in server-side Lua is sequential, yet very efficient, as it is"
" built on top of the **cooperative multitasking** environment that "
"Tarantool itself uses."
msgstr ""
"Пользователи Tarantool'а могут создавать, изменять и удалять "
"**Lua-функции** прямо во время исполнения кода. Также они могут указывать"
"  **Lua-программы**, которые будут загружаться во время запуска "
"Tarantool'а. Такие программы могут служить триггерами, выполнять фоновые "
"задачи и взаимодействовать с другими узлами по сети. В отличие от многих "
"популярных сред разработки приложений, которые используют \"реактивный\" "
"принцип, сетевое взаимодействие в Lua устроено последовательно, но очень "
"эффективно, т.к. оно использует среду **кооперативной многозадачности** "
"самого Tarantool'а."

msgid ""
"One of the built-in Lua packages provides an API for the Database "
"Management System. Thus some developers see Tarantool as a DBMS with a "
"popular stored procedure language, while others see it as a Lua "
"interpreter, while still others see it as a replacement for many "
"components of multi-tier Web applications. Performance can be a few "
"hundred thousand transactions per second on a laptop, scalable upwards or"
" outwards to server farms."
msgstr ""
"Один из встраиваемых Lua-пакетов -- это API для функций СУБД. Таким "
"образом, некоторые разработчики рассматривают Tarantool как СУБД с "
"популярным языком для написания хранимых процедур, другие рассматривают "
"его как Lua-интерпретатор, а третьи -- как вариант замены сразу "
"нескольких компонентов в многозвенных веб-приложениях. Производительность"
" Tarantool'а может достигать сотен тысяч транзакций в секунду на "
"ноутбуке, и ее можно наращивать \"вверх\" или \"вширь\" за счет новых "
"серверных ферм."

msgid "Database features"
msgstr "Возможности СУБД"

msgid ""
"Tarantool can run without it, but \"The Box\" -- the DBMS server -- is a "
"strong distinguishing feature."
msgstr ""
"Компонент \"box\" -- серверная часть с функциями СУБД -- это важная часть"
" Tarantool'а, хотя он может работать и без данного компонента."

msgid ""
"The database API allows for permanently storing Lua objects, managing "
"object collections, creating or dropping secondary keys, making changes "
"atomically, configuring and monitoring replication, performing controlled"
" fail-over, and executing Lua code triggered by database events. Remote "
"database instances are accessible transparently via a remote-procedure-"
"invocation API."
msgstr ""
"API для функций СУБД позволяет хранить Lua-объекты, управлять коллекциями"
" объектов, создавать и удалять вторичные ключи, делать атомарные "
"изменения, конфигурировать и мониторить репликацию, производить  "
"контролируемое переключение при отказе (failover), а также исполнять код"
"  на Lua, который вызывается событиями в базе. А для прозрачного доступа "
"к  удаленным (remote) экземплярам баз данных разработан API для вызова "
"удаленных процедур."

msgid ""
"Tarantool's DBMS server uses the **storage engine** concept, where "
"different sets of algorithms and data structures can be used for "
"different situations. Two storage engines are built-in: an in-memory "
"engine which has all the data and indexes in RAM, and a two-level B-tree "
"engine for data sets whose size is 10 to 1000 times the amount of "
"available RAM. All storage engines in Tarantool support transactions and "
"replication by using a common **write ahead log** (WAL). This ensures "
"consistency and crash safety of the persistent state. Changes are not "
"considered complete until the WAL is written. The logging subsystem "
"supports group commit."
msgstr ""
"В архитектуре серверной части СУБД Tarantool'а реализована концепция "
"\"движков\" базы данных (storage engines), где в разных ситуациях "
"используются разные наборы алгоритмов и структуры данных. В Tarantool'е "
"есть два встроенных движка: in-memory движок, который держит все данные и"
"  индексы в оперативной памяти, и двухуровневый движок для B-деревьев, "
"который обрабатывает данные размером в 10-1000 раз больше того, что может"
"  поместиться в оперативной памяти. Все движки в Tarantool'е поддерживают"
" транзакции и репликацию, поскольку они используют единый механизм "
"**упреждающей записи** (WAL = write ahead log). Это механизм обеспечивает"
"  согласованность и сохранность данных при сбоях. Таким образом, "
"изменения  не считаются завершенными, пока не проходит запись в лог WAL. "
"Подсистема записи в журнал также поддерживает групповые коммиты."

msgid ""
"**Tarantool's in-memory storage engine** (memtx) keeps all the data in "
"random-access memory, and therefore has very low read latency. It also "
"keeps persistent copies of the data in non-volatile storage, such as "
"disk, when users request \"snapshots\". If an instance of the server "
"stops and the random-access memory is lost, then restarts, it reads the "
"latest snapshot and then replays the transactions that are in the log -- "
"therefore no data is lost."
msgstr ""
"**In-memory движок базы данных Tarantool'а** (memtx) хранит все данные в "
"оперативной памяти, поэтому у него низкое значение задержки чтения. Кроме"
" того, когда пользователи запрашивают снимки данных (snapshots), этот "
"движок создает персистентные копии данных в энергонезависимой памяти, "
"например на диске. Если экземпляр сервера прекращает работать и данные в "
"оперативной памяти теряются, то при следующем запуске сервер загрузит в "
"память самый свежий снимок и воспроизведет все транзакции из журнала. "
"Таким образом, данные не теряются."

msgid ""
"**Tarantool's in-memory engine is lock-free** in typical situations. "
"Instead of the operating system's concurrency primitives, such as "
"mutexes, Tarantool uses cooperative multitasking to handle thousands of "
"connections simultaneously. There is a fixed number of independent "
"execution threads. The threads do not share state. Instead they exchange "
"data using low-overhead message queues. While this approach limits the "
"number of cores that the instance will use, it removes competition for "
"the memory bus and ensures peak scalability of memory access and network "
"throughput. CPU utilization of a typical highly-loaded Tarantool instance"
" is under 10%. Searches are possible via **secondary index keys** as well"
" as primary keys."
msgstr ""
"В штатных ситуациях **in-memory движок работает без блокировок**. Вместо "
"многопоточных примитивов, которые предлагает операционная система (таких "
"как mutex'ы), Tarantool использует кооперативную многозадачность для "
"работы с тысячами соединений одновременно. В Tarantool'е есть "
"фиксированное количество независимых потоков управления (thread), и у них"
" нет общего состояния. Для обмена данными между потоками используются "
"очереди сообщений с малой перегрузкой. Хотя такой подход накладывает "
"ограничение на количество процессорных ядер, которые может использовать "
"экземпляр, в то же время он позволяет избежать борьбы за шину памяти, а "
"также дает запас масштабируемости по скорости доступа к памяти и "
"производительности сети. В результате даже при большой нагрузке экземпляр"
" Tarantool'а в среднем использует процессор менее чем на 10%. Кроме того,"
" Tarantool поддерживает поиск как по первичным, так и по **внешним ключам"
" в индексах**."

msgid ""
"**Tarantool's disk-based storage engine** is a fusion of ideas from "
"modern filesystems, log-structured merge trees and classical B-trees. All"
" data is organized into **ranges**. Each range is represented by a file "
"on disk. Range size is a configuration option and normally is around "
"64MB. Each range is a collection of pages, serving different purposes. "
"Pages in a fully merged range contain non-overlapping ranges of keys. A "
"range can be partially merged if there were a lot of changes in its key "
"range recently. In that case some pages represent new keys and values in "
"the range. The disk-based storage engine is append only: new data never "
"overwrites old data. The disk-based storage engine is named *vinyl*."
msgstr ""
"**Дисковый движок базы данных Tarantool'а** совмещает в себе подходы, "
"заимствованные из современных файловых систем, "
"журнально-структурированных деревьев со слиянием (log-structured merge "
"trees) и классических B-деревьев. Все данные разбиты на **диапазоны**. "
"Каждый диапазон представлен файлом на диске. Размер диапазона можно "
"изменять, обычно он равен 64МБ. Каждый диапазон -- это набор страниц, "
"которые служат разным целям. После полного слияния диапазона ключи на его"
" страницах не пересекаются. Если диапазоны ключей недавно сильно "
"изменялись, можно провести частичное слияние диапазона. В этом случае на "
"некоторых страницах появились новые ключи и значения. Дисковый движок "
"обновляет данные по принципу дописывания в конец: новые данные никогда не"
" затирают старые. Дисковый движок базы данных называется *vinyl*."

msgid ""
"Tarantool supports **multi-part index keys**. The possible index types "
"are HASH, TREE, BITSET, and RTREE."
msgstr ""
"Tarantool поддерживает работу с **составными ключами в индексах**. "
"Возможные типы ключей: HASH, TREE, BITSET и RTREE."

msgid ""
"Tarantool supports **asynchronous replication**, locally or to remote "
"hosts. The replication architecture can be **master-master**, that is, "
"many nodes may both handle the loads and receive what others have "
"handled, for the same data sets."
msgstr ""
"Tarantool также поддерживает **асинхронную репликацию** -- как локальную,"
" так и на удаленных серверах. При этом репликацию можно настроить по "
"принципу **мастер-мастер**, когда несколько узлов могут не только "
"обрабатывать входящую нагрузку, но и получать данные от других узлов."
