
msgid "Submodule box.error"
msgstr "Вложенный модуль box.error"

msgid ""
"The ``box.error`` submodule can be used to work with errors in your "
"application. For example, you can get the information about the last error "
"raised by Tarantool or raise custom errors manually."
msgstr ""

#, fuzzy
msgid ""
"The difference between raising an error using ``box.error`` and a Lua's "
"built-in `error <https://www.lua.org/pil/8.3.html>`_ function is that when "
"the error reaches the client, its error code is preserved. In contrast, a "
"Lua error would always be presented to the client as :errcode:`ER_PROC_LUA`."
msgstr ""
"Функция ``box.error`` предназначена для вызова ошибки. Разница между этой "
"функцией и встроенной Lua-функцией `error "
"<https://www.lua.org/pil/8.3.html>`_ в том, что когда клиент получает "
"ошибку, код ошибки сохраняется. В отличие от этого, ошибки в Lua всегда "
"передаются на клиент в виде :errcode:`ER_PROC_LUA`."

msgid ""
"To learn how to handle errors in your application, see the :ref:`Handling "
"errors <error_handling>` section."
msgstr ""

#, fuzzy
msgid "Creating an error"
msgstr "Выдача ошибки"

msgid ""
"You can create an error object using the :ref:`box.error.new() <box_error-"
"new>` function. The created object can be passed to :ref:`box.error() "
"<box_error-error>` to raise the error. You can also raise the error using "
":ref:`error_object:raise() <box_error-raise>`."
msgstr ""

msgid ""
"The example below shows how to create and raise the error with the specified"
" code and reason."
msgstr ""

msgid ""
"local custom_error = box.error.new({ code = 500,\n"
"                                     reason = 'Internal server error' })\n"
"\n"
"box.error(custom_error)\n"
"--[[\n"
"---\n"
"- error: Internal server error\n"
"...\n"
"--]]\n"
msgstr ""

msgid ""
"``box.error.new()`` provides different overloads for creating an error "
"object with different parameters. These overloads are similar to the "
"``box.error()`` overloads described in the :ref:`next section "
"<box_error_raise_error>`."
msgstr ""

#, fuzzy
msgid "Raising an error"
msgstr "Выдача ошибки"

msgid ""
"To raise an error, call the :ref:`box.error() <box_error-error>` function. "
"This function can accept the specified error parameters or an error object "
":ref:`created using box.error.new() <box_error_create_error>`. In both "
"cases, you can use ``box.error()`` to raise the following error types:"
msgstr ""

msgid "A custom error with the specified reason, code, and type."
msgstr ""

msgid "A predefined Tarantool error."
msgstr ""

#, fuzzy
msgid "Custom error"
msgstr "Создание пользовательского типа ошибок"

msgid ""
"The following ``box.error()`` overloads are available for raising a custom "
"error:"
msgstr ""

msgid ""
":ref:`box.error({ reason = string[, code = number, type = string] }) "
"<box_error-error-table>` accepts a Lua table containing the error reason, "
"code, and type."
msgstr ""

msgid ""
":ref:`box.error(type, reason[, args]) <box_error-error-array>` accepts the "
"error type, its reason, and optional arguments passed to a reason's string."
msgstr ""

msgid ""
"The same overloads are available for :ref:`box.error.new() <box_error-new>`."
msgstr ""

msgid "box.error({ reason = string[, ...] })"
msgstr ""

msgid ""
"In the example below, ``box.error()`` accepts a Lua table with the specified"
" error code and reason:"
msgstr ""

msgid ""
"box.error { code = 500,\n"
"            reason = 'Custom server error' }\n"
"--[[\n"
"---\n"
"- error: Custom server error\n"
"...\n"
"--]]\n"
msgstr ""

msgid "The next example shows how to specify a custom error type:"
msgstr ""

msgid ""
"box.error { code = 500,\n"
"            reason = 'Internal server error',\n"
"            type = 'CustomInternalError' }\n"
"--[[\n"
"---\n"
"- error: Internal server error\n"
"...\n"
"--]]\n"
msgstr ""

msgid ""
"When a custom type is specified, it is returned in the "
":ref:`error_object.type <box_error-type>` attribute. When it is not "
"specified, ``error_object.type`` returns one of the built-in errors, such as"
" ``ClientError`` or ``OutOfMemory``."
msgstr ""

msgid "box.error(type, reason[, ...])"
msgstr ""

msgid ""
"This example shows how to raise an error with the type and reason specified "
"in the ``box.error()`` arguments:"
msgstr ""

msgid ""
"box.error('CustomConnectionError', 'cannot connect to the given port')\n"
"--[[\n"
"---\n"
"- error: cannot connect to the given port\n"
"...\n"
"--]]\n"
msgstr ""

msgid "You can also use a format string to compose an error reason:"
msgstr ""

#, python-format
msgid ""
"box.error('CustomConnectionError', '%s cannot connect to the port %u', 'client', 8080)\n"
"--[[\n"
"---\n"
"- error: client cannot connect to the port 8080\n"
"...\n"
"--]]\n"
msgstr ""

#, fuzzy
msgid "Tarantool error"
msgstr "Выдача ошибки"

msgid ""
"The :ref:`box.error(code[, ...]) <box_error-error-predefined>` overload "
"raises a predefined :ref:`Tarantool error <error_codes>` specified by its "
"identifier. The error code defines the error message format and the number "
"of required arguments. In the example below, no arguments are passed for the"
" ``box.error.READONLY`` error code:"
msgstr ""

msgid ""
"box.error(box.error.READONLY)\n"
"--[[\n"
"---\n"
"- error: Can't modify data on a read-only instance\n"
"...\n"
"--]]\n"
msgstr ""

msgid ""
"For the ``box.error.NO_SUCH_USER`` error code, you need to pass one "
"argument:"
msgstr ""

msgid ""
"box.error(box.error.NO_SUCH_USER, 'John')\n"
"--[[\n"
"---\n"
"- error: User 'John' is not found\n"
"...\n"
"--]]\n"
msgstr ""

msgid "``box.error.CREATE_SPACE`` requires two arguments:"
msgstr ""

msgid ""
"box.error(box.error.CREATE_SPACE, 'my_space', 'the space already exists')\n"
"--[[\n"
"---\n"
"- error: 'Failed to create space ''my_space'': the space already exists'\n"
"...\n"
"--]]\n"
msgstr ""

#, fuzzy
msgid "Getting the last error"
msgstr "Получение описания последней ошибки"

msgid ""
"To get the last raised error, call :ref:`box.error.last() <box_error-last>`:"
msgstr ""

msgid ""
"box.error.last()\n"
"--[[\n"
"---\n"
"- error: Internal server error\n"
"...\n"
"--]]\n"
msgstr ""

msgid "Obtaining error details"
msgstr ""

msgid ""
"To get error details, call the :ref:`error_object.unpack() <box_error-"
"unpack>`. Error details may include an error code, type, message, and trace."
msgstr ""

msgid ""
"box.error.last():unpack()\n"
"--[[\n"
"---\n"
"- code: 500\n"
"  base_type: CustomError\n"
"  type: CustomInternalError\n"
"  custom_type: CustomInternalError\n"
"  message: Internal server error\n"
"  trace:\n"
"  - file: '[string \"custom_error = box.error.new({ code = 500,...\"]'\n"
"    line: 1\n"
"...\n"
"--]]\n"
msgstr ""

#, fuzzy
msgid "Setting the last error"
msgstr "Получение описания последней ошибки"

msgid ""
"You can set the last error explicitly by calling :ref:`box.error.set() "
"<box_error-set>`:"
msgstr ""

msgid ""
"-- Create two errors --\n"
"local error1 = box.error.new({ code = 500, reason = 'Custom error 1' })\n"
"local error2 = box.error.new({ code = 505, reason = 'Custom error 2' })\n"
"\n"
"-- Raise the first error --\n"
"box.error(error1)\n"
"--[[\n"
"---\n"
"- error: Custom error 1\n"
"...\n"
"--]]\n"
"\n"
"-- Get the last error --\n"
"box.error.last()\n"
"--[[\n"
"---\n"
"- Custom error 1\n"
"...\n"
"--]]\n"
"\n"
"-- Set the second error as the last error --\n"
"box.error.set(error2)\n"
"--[[\n"
"---\n"
"...\n"
"--]]\n"
"\n"
"-- Get the last error --\n"
"box.error.last()\n"
"--[[\n"
"---\n"
"- Custom error 2\n"
"...\n"
"--]]\n"
msgstr ""

msgid "Error lists"
msgstr ""

msgid ""
":ref:`error_object <box_error-error_object>` provides the API for organizing"
" errors into lists. To set and get the previous error, use the "
":ref:`error_object:set_prev() <box_error-set_prev>` method and "
":ref:`error_object.prev <box_error-prev>` attribute."
msgstr ""

msgid ""
"local base_server_error = box.error.new({ code = 500,\n"
"                                          reason = 'Base server error',\n"
"                                          type = 'BaseServerError' })\n"
"local storage_server_error = box.error.new({ code = 507,\n"
"                                             reason = 'Not enough storage',\n"
"                                             type = 'StorageServerError' })\n"
"\n"
"base_server_error:set_prev(storage_server_error)\n"
"--[[\n"
"---\n"
"...\n"
"--]]\n"
"\n"
"box.error(base_server_error)\n"
"--[[\n"
"---\n"
"- error: Base server error\n"
"...\n"
"--]]\n"
"\n"
"box.error.last().prev:unpack()\n"
"--[[\n"
"---\n"
"- code: 507\n"
"  base_type: CustomError\n"
"  type: StorageServerError\n"
"  custom_type: StorageServerError\n"
"  message: Not enough storage\n"
"  trace:\n"
"  - file: '[string \"storage_server_error = box.error.new({ code =...\"]'\n"
"    line: 1\n"
"...\n"
"--]]\n"
msgstr ""

msgid "Cycles are not allowed for error lists:"
msgstr ""

msgid ""
"storage_server_error:set_prev(base_server_error)\n"
"--[[\n"
"---\n"
"- error: 'builtin/error.lua:120: Cycles are not allowed'\n"
"...\n"
"--]]"
msgstr ""

msgid "Setting the previous error does not erase its own previous members:"
msgstr ""

msgid ""
"-- e1 -> e2 -> e3 -> e4\n"
"e1:set_prev(e2)\n"
"e2:set_prev(e3)\n"
"e3:set_prev(e4)\n"
"e2:set_prev(e5)\n"
"-- Now there are two lists: e1 -> e2 -> e5 and e3 -> e4"
msgstr ""

msgid ""
"IPROTO also supports stacked diagnostics. See details in :ref:`MessagePack "
"extensions -- The ERROR type <msgpack_ext-error>`."
msgstr ""

msgid "Clearing errors"
msgstr ""

msgid "To clear the errors, call :ref:`box.error.clear() <box_error-clear>`."
msgstr ""

msgid ""
"box.error.clear()\n"
"--[[\n"
"---\n"
"...\n"
"--]]\n"
"box.error.last()\n"
"--[[\n"
"---\n"
"- null\n"
"...\n"
"--]]\n"
msgstr ""

msgid "API Reference"
msgstr ""

#, fuzzy
msgid "Below is a list of ``box.error`` functions and related objects."
msgstr "Ниже приведен перечень всех функций модуля ``box.error``."

msgid "Name"
msgstr "Имя"

msgid "Use"
msgstr "Назначение"

msgid ":doc:`./box_error/error`"
msgstr ""

msgid "Raise the last error or the error defined by the specified parameters"
msgstr ""

msgid ":doc:`./box_error/last`"
msgstr ""

#, fuzzy
msgid "Get the last raised error"
msgstr "Получение описания последней ошибки"

msgid ":doc:`./box_error/clear`"
msgstr ""

#, fuzzy
msgid "Clear the errors"
msgstr "Очистка записи об ошибках"

msgid ":doc:`./box_error/new`"
msgstr ""

#, fuzzy
msgid "Create the error but do not raise it"
msgstr "Создание ошибки без выдачи"

msgid ":doc:`./box_error/set`"
msgstr ""

msgid "Set the specified error as the last system error explicitly"
msgstr ""

msgid ":doc:`./box_error/error_object`"
msgstr ""

msgid "An object that defines an error"
msgstr ""

#~ msgid "Set an error as ``box.error.last()``"
#~ msgstr "Запись ошибки в ``box.error.last()``"

#~ msgid "Error object methods"
#~ msgstr "Методы объекта ошибки"

#~ msgid ":doc:`./box_error/custom_type`"
#~ msgstr ""
