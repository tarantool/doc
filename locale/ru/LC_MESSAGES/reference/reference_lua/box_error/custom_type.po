
msgid "Custom error types"
msgstr "Пользовательские типы ошибок"

msgid ""
"From above you know that errors can be created in two ways: with "
"``box.error.new()`` and with ``box.error()``."
msgstr ""
"Объекты ошибок могут быть созданы двумя способами: с помощью "
"``box.error.new()`` и с помощью ``box.error()``."

msgid ""
"Both methods can take arguments either as a list (``code, reason, <reason"
" string args>``):"
msgstr ""
"Оба метода принимают аргументы либо в виде перечисления (``code, reason, "
"<reason string args>``):"

msgid ""
"box.error(9, 'my_space', 'reason') -- error: 'Failed to create space "
"my_space: reason'"
msgstr ""

msgid "...or as a table (``{code = code, reason = reason, ...}``):"
msgstr "...либо в виде Lua-таблицы (``{code = code, reason = reason, ...}``):"

msgid "box.error({code = 9, reason = 'Failed to create space my_space: reason'})"
msgstr ""

msgid ""
"It is also possible to specify your own type of errors instead of pre-"
"defined ones. Put a string with your type in the ``type`` field if you "
"pass arguments as a table, or instead of the ``code`` parameter if you "
"use listing:"
msgstr ""
"Также можно определить свой собственный тип ошибок вместо встроенных. Для"
" этого поместите строку со своим типом в поле ``type``, если вы передаете"
" аргументы в виде таблицы, или вместо параметра ``code`` при "
"перечислении:"

msgid ""
"box.error('MyErrorType', 'Message')\n"
"box.error({type = 'MyErrorType', code = 1024, reason = 'Message'})"
msgstr ""

msgid "Or a no-throw version:"
msgstr "Или вариант без выдачи ошибки:"

msgid ""
"box.error.new('MyErrorType', 'Message')\n"
"box.error.new({type = 'MyErrorType', code = 1024, reason = 'Message'})"
msgstr ""

msgid ""
"When a custom type is specified, it is reported in the ``err.type`` "
"attribute. When it is not specified, ``err.type`` reports one of built-in"
" errors such as ``'ClientError'``, ``'OurOfMemory'``, etc."
msgstr ""
"При указании пользовательского типа он отображается в атрибуте "
"``err.type``. Когда он не указан, ``err.type`` показывает одну из "
"встроенных ошибок, таких как ``'ClientError'``, ``'OurOfMemory'`` и др."

msgid ""
"The maximum name length for a custom type is *63 bytes*. Everything "
"longer than this limit is truncated."
msgstr ""
"Ограничение по длине имени для пользовательского типа составляет *63 "
"байта*. Все, что длиннее этого ограничения, отсекается."

msgid ""
"The original error type can be checked using the ``err.base_type`` "
"member, although normally it should not be used. For user-defined types, "
"the base type is ``'CustomError'``."
msgstr ""
"Исходный тип ошибки можно проверить, используя член ``err.base_type``, "
"хотя, как правило, его не следует использовать. Для пользовательских "
"типов базовым типом является ``'CustomError'``."

msgid "**Example:**"
msgstr "**Пример:**"

msgid ""
"tarantool> e = box.error.new({type = 'MyErrorType', code = 1024, reason ="
" 'Message'})\n"
"---\n"
"...\n"
"\n"
"tarantool> e:unpack()\n"
"---\n"
"- code: 1024\n"
"trace:\n"
"- file: '[string \"e = box.error.new({type = ''MyErrorType'', code...\"]'"
"\n"
"    line: 1\n"
"type: MyErrorType\n"
"custom_type: MyErrorType\n"
"message: Message\n"
"base_type: CustomError\n"
"..."
msgstr ""

msgid ""
"You can also use a format string to compose an error message for the "
"``'CustomError'`` type."
msgstr ""
"Также можно использовать format string для составления сообщения об "
"ошибке для типа ``'CustomError'``."

#, python-format
msgid "box.error('MyCustomType', 'The error reason: %s', 'some error reason')"
msgstr ""
