
msgid "box.error()"
msgstr ""

msgid "Raise the last error."
msgstr ""

msgid "**See also:** :ref:`box.error.last() <box_error-last>`"
msgstr ""

msgid ""
"Raise the error defined by :ref:`error_object <box_error-error_object>`."
msgstr ""

msgid "Parameters"
msgstr "Параметры"

msgid "an error object"
msgstr ""

#, fuzzy
msgid "**Example**"
msgstr "**Пример:**"

msgid ""
"local custom_error = box.error.new({ code = 500,\n"
"                                     reason = 'Internal server error' })\n"
"\n"
"box.error(custom_error)\n"
"--[[\n"
"---\n"
"- error: Internal server error\n"
"...\n"
"--]]\n"
msgstr ""

msgid "Raise the error defined by the specified parameters."
msgstr ""

msgid "an error description"
msgstr ""

#, fuzzy
msgid "(optional) a numeric code for this error"
msgstr "(целое число) числовой код ошибки, задается пользователем"

msgid "(optional) an error type"
msgstr ""

#, fuzzy
msgid "**Example 1**"
msgstr "**Пример:**"

msgid ""
"box.error { code = 500,\n"
"            reason = 'Custom server error' }\n"
"--[[\n"
"---\n"
"- error: Custom server error\n"
"...\n"
"--]]\n"
msgstr ""

#, fuzzy
msgid "**Example 2: custom type**"
msgstr "**Пример:**"

msgid ""
"box.error { code = 500,\n"
"            reason = 'Internal server error',\n"
"            type = 'CustomInternalError' }\n"
"--[[\n"
"---\n"
"- error: Internal server error\n"
"...\n"
"--]]\n"
msgstr ""

msgid "Raise the error defined by the specified type and description."
msgstr ""

msgid "an error type"
msgstr ""

msgid "description arguments"
msgstr ""

msgid "**Example 1: without arguments**"
msgstr ""

msgid ""
"box.error('CustomConnectionError', 'cannot connect to the given port')\n"
"--[[\n"
"---\n"
"- error: cannot connect to the given port\n"
"...\n"
"--]]\n"
msgstr ""

msgid "**Example 2: with arguments**"
msgstr ""

#, python-format
msgid ""
"box.error('CustomConnectionError', '%s cannot connect to the port %u', 'client', 8080)\n"
"--[[\n"
"---\n"
"- error: client cannot connect to the port 8080\n"
"...\n"
"--]]\n"
msgstr ""

msgid ""
"Raise a predefined :ref:`Tarantool error <error_codes>` specified by its "
"identifier. You can see all Tarantool errors in the `errcode.h "
"<https://github.com/tarantool/tarantool/blob/master/src/box/errcode.h>`_ "
"file."
msgstr ""

msgid ""
"a pre-defined error identifier; Lua constants that correspond to those "
"Tarantool errors are defined as members of ``box.error``, for example, "
"``box.error.NO_SUCH_USER == 45``"
msgstr ""

#, fuzzy
msgid "**Example 1: no arguments**"
msgstr "**Пример:**"

msgid ""
"box.error(box.error.READONLY)\n"
"--[[\n"
"---\n"
"- error: Can't modify data on a read-only instance\n"
"...\n"
"--]]\n"
msgstr ""

#, fuzzy
msgid "**Example 2: one argument**"
msgstr "**Пример:**"

msgid ""
"box.error(box.error.NO_SUCH_USER, 'John')\n"
"--[[\n"
"---\n"
"- error: User 'John' is not found\n"
"...\n"
"--]]\n"
msgstr ""

#, fuzzy
msgid "**Example 3: two arguments**"
msgstr "**Пример:**"

msgid ""
"box.error(box.error.CREATE_SPACE, 'my_space', 'the space already exists')\n"
"--[[\n"
"---\n"
"- error: 'Failed to create space ''my_space'': the space already exists'\n"
"...\n"
"--]]\n"
msgstr ""

#~ msgid ""
#~ "When called without arguments, ``box.error()`` re-throws whatever the last "
#~ "error was."
#~ msgstr ""
#~ "При вызове без аргументов ``box.error()`` повторно вызывает последнюю "
#~ "ошибку."

#~ msgid ""
#~ "Throw an error. When called with a Lua-table argument, the code and reason "
#~ "have any user-desired values. The result will be those values."
#~ msgstr ""
#~ "Выдача ошибки. При вызове с аргументом из Lua-таблицы значения параметров "
#~ "code и reason будут любыми по желанию пользователя. Результатом будут эти "
#~ "значения."

#~ msgid "description of an error, defined by user"
#~ msgstr "(строка) описание ошибки, задается пользователем"

#~ msgid ""
#~ "Throw an error. This method emulates a request error, with text based on one"
#~ " of the pre-defined Tarantool errors defined in the file `errcode.h "
#~ "<https://github.com/tarantool/tarantool/blob/master/src/box/errcode.h>`_ in "
#~ "the source tree. Lua constants which correspond to those Tarantool errors "
#~ "are defined as members of ``box.error``, for example "
#~ "``box.error.NO_SUCH_USER == 45``."
#~ msgstr ""
#~ "Выдача ошибки. Моделирование ошибки запроса с текстом на основе одной из "
#~ "ошибок Tarantool, заданных в файле `errcode.h "
#~ "<https://github.com/tarantool/tarantool/blob/master/src/box/errcode.h>`_ в "
#~ "исходном дереве. Lua-постоянные, которые соответствуют этим ошибкам в "
#~ "Tarantool, определяются как элементы ``box.error``, например "
#~ "``box.error.NO_SUCH_USER == 45``."

#~ msgid "number of a pre-defined error"
#~ msgstr "номер предварительно заданной ошибки"

#~ msgid "part of the message which will accompany the error"
#~ msgstr "часть сообщения, которое сопровождает ошибку"

#~ msgid "For example:"
#~ msgstr "Пример:"

#~ msgid ""
#~ "the ``NO_SUCH_USER`` message is \"``User '%s' is not found``\" -- it "
#~ "includes one \"``%s``\" component which will be replaced with errtext. Thus "
#~ "a call to ``box.error(box.error.NO_SUCH_USER, 'joe')`` or ``box.error(45, "
#~ "'joe')`` will result in an error with the accompanying message \"``User "
#~ "'joe' is not found``\"."
#~ msgstr ""
#~ "сообщение ``NO_SUCH_USER`` = \"``User '%s' is not found``\" (пользователь не"
#~ " найден) -- оно включает в себя компонент \"``%s``\", который будет заменен "
#~ "значением параметра errtext. Таким образом, вызов "
#~ "``box.error(box.error.NO_SUCH_USER, 'joe')`` или ``box.error(45, 'joe')`` "
#~ "приведет к ошибке с сообщением \"``User 'joe' is not found``\" (пользователь"
#~ " 'joe' не найден)."

#~ msgid "except"
#~ msgstr "Исключение"

#~ msgid "whatever is specified in errcode-number."
#~ msgstr "то, что указано в номере errcode."

#~ msgid "``box.error()`` accepts two sets of arguments:"
#~ msgstr "``box.error()`` может принимать два типа аргументов:"

#~ msgid ""
#~ "error code and reason/errtext (``box.error{code = 555, reason = 'Arbitrary "
#~ "message'}``), or"
#~ msgstr ""
#~ "код ошибки и ее причину/текст (``box.error{code = 555, reason = 'Arbitrary "
#~ "message'}``),"

#~ msgid "error object (``box.error(err)``)."
#~ msgstr "либо объект ошибки (``box.error(err)``)."

#~ msgid "In both cases the error is promoted as the last error."
#~ msgstr "В обоих случаях ошибка будет записана как последняя системная ошибка."

#~ msgid ""
#~ "tarantool> e1 = box.error.new({code = 111, reason = 'Сause'})\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> box.error(e1)\n"
#~ "---\n"
#~ "- error: Сause\n"
#~ "...\n"
#~ "tarantool> box.error{code = 555, reason = 'Arbitrary message'}\n"
#~ "---\n"
#~ "- error: Arbitrary message\n"
#~ "...\n"
#~ "tarantool> box.error()\n"
#~ "---\n"
#~ "- error: Arbitrary message\n"
#~ "...\n"
#~ "tarantool> box.error(box.error.FUNCTION_ACCESS_DENIED, 'A', 'B', 'C')\n"
#~ "---\n"
#~ "- error: A access denied for user 'B' to function 'C'\n"
#~ "..."
#~ msgstr ""
