
msgid "error_object"
msgstr ""

msgid ""
"An object that defines an error. ``error_object`` is returned by the "
"following methods:"
msgstr ""

msgid ":ref:`box.error.new() <box_error-new>`"
msgstr ""

msgid ":ref:`box.error.last() <box_error-last>`"
msgstr ""

msgid ""
"Get error details that may include an error code, type, message, and trace."
msgstr ""

#, fuzzy
msgid "**Example**"
msgstr "**Пример:**"

msgid ""
"box.error.last():unpack()\n"
"--[[\n"
"---\n"
"- code: 500\n"
"  base_type: CustomError\n"
"  type: CustomInternalError\n"
"  custom_type: CustomInternalError\n"
"  message: Internal server error\n"
"  trace:\n"
"  - file: '[string \"custom_error = box.error.new({ code = 500,...\"]'\n"
"    line: 1\n"
"...\n"
"--]]\n"
msgstr ""

msgid ""
"Depending on the error type, error details may include other attributes, "
"such as :ref:`errno <box_error-errno>` or :ref:`reason <box_error-reason>`."
msgstr ""

msgid "Raise the current error."
msgstr ""

msgid "**See also:** :ref:`Raising an error <box_error_raise_error>`"
msgstr ""

msgid "**Since:** :doc:`2.4.1 </release/2.4.1>`"
msgstr ""

#, fuzzy
msgid "Set the previous error for the current one."
msgstr "Возврат предыдущей ошибки, если она существует."

msgid "Parameters"
msgstr ""

msgid "an error object"
msgstr ""

msgid "**See also:** :ref:`Error lists <box_error_error_lists>`"
msgstr ""

#, fuzzy
msgid "Get the previous error for the current one."
msgstr "Возврат предыдущей ошибки, если она существует."

msgid "rtype"
msgstr ""

msgid ""
"The error code. This attribute may return a :ref:`custom error "
"<box_error_raise_custom_table_error>` code or a :ref:`Tarantool error "
"<box_error_raise_tarantool_error>` code."
msgstr ""

msgid "number"
msgstr ""

msgid "The error type."
msgstr ""

msgid "string"
msgstr ""

msgid "**See also:** :ref:`Custom error <box_error_raise_custom_error>`"
msgstr ""

msgid "The error message."
msgstr ""

msgid "The error trace."
msgstr ""

msgid "table"
msgstr ""

msgid ""
"If the error is a system error (for example, a socket or file IO failure), "
"returns a C standard error number."
msgstr ""

msgid "**Since:** :doc:`2.10.0 </release/2.10.0>`"
msgstr ""

msgid ""
"Returns the :ref:`box.info.ro_reason <box_introspection-box_info>` value at "
"the moment of throwing the ``box.error.READONLY`` error."
msgstr ""

msgid "The following values may be returned:"
msgstr ""

msgid ""
"``election`` if the instance has :ref:`box.cfg.election_mode "
"<cfg_replication-election_mode>` set to a value other than ``off`` and this "
"instance is not a leader. In this case, ``error_object`` may include the "
"following attributes: ``state``, ``leader_id``, ``leader_uuid``, and "
"``term``."
msgstr ""

msgid ""
"``synchro`` if the synchronous queue has an owner that is not the given "
"instance. This error usually happens if :ref:`synchronous replication "
"<repl_sync>` is used and another instance is called :ref:`box.ctl.promote() "
"<box_ctl-promote>`. In this case, ``error_object`` may include the "
"``queue_owner_id``, ``queue_owner_uuid``, and ``term`` attributes."
msgstr ""

msgid ""
"``config`` if the :ref:`box.cfg.read_only <cfg_basic-read_only>` is set to "
"``true``."
msgstr ""

msgid ""
"``orphan`` if the instance is in the :ref:`orphan <replication-"
"orphan_status>` state."
msgstr ""

msgid ""
"If multiple reasons are true at the same time, then only one is returned in "
"the following order of preference: ``election``, ``synchro``, ``config``, "
"``orphan``."
msgstr ""

msgid ""
"For the ``box.error.READONLY`` error, returns the current state of a replica"
" set node in regards to leader election (see :ref:`box.info.election.state "
"<box_info_election>`). This attribute presents if the :ref:`error reason "
"<box_error-reason>` is ``election``."
msgstr ""

msgid ""
"For the ``box.error.READONLY`` error, returns a numeric identifier "
"(:ref:`box.info.id <box_introspection-box_info>`) of the replica set leader."
" This attribute may present if the :ref:`error reason <box_error-reason>` is"
" ``election``."
msgstr ""

msgid ""
"For the ``box.error.READONLY`` error, returns a globally unique identifier "
"(:ref:`box.info.uuid <box_introspection-box_info>`) of the replica set "
"leader. This attribute may present if the :ref:`error reason <box_error-"
"reason>` is ``election``."
msgstr ""

msgid ""
"For the ``box.error.READONLY`` error, returns a numeric identifier "
"(:ref:`box.info.id <box_introspection-box_info>`) of the synchronous queue "
"owner. This attribute may present if the :ref:`error reason <box_error-"
"reason>` is ``synchro``."
msgstr ""

msgid ""
"For the ``box.error.READONLY`` error, returns a globally unique identifier "
"(:ref:`box.info.uuid <box_introspection-box_info>`) of the synchronous queue"
" owner. This attribute may present if the :ref:`error reason <box_error-"
"reason>` is ``synchro``."
msgstr ""

msgid ""
"For the ``box.error.READONLY`` error, returns the current election term (see"
" :ref:`box.info.election.term <box_info_election>`). This attribute may "
"present if the :ref:`error reason <box_error-reason>` is ``election`` or "
"``synchro``."
msgstr ""

#~ msgid ""
#~ "Since version :doc:`2.4.1 </release/2.4.1>`. Errors can be organized into "
#~ "lists. To achieve this, a Lua table representing an error object has "
#~ "``.prev`` field and ``e:set_prev(err)`` method."
#~ msgstr ""

#~ msgid ""
#~ "Set an error as the previous error. Accepts an ``error object`` or ``nil``."
#~ msgstr ""
#~ "Установка ошибки в качестве предыдущей. Принимает объект ошибки или ``nil``."

#~ msgid ""
#~ "tarantool> e1 = box.error.new({code = 111, reason = 'some cause'})\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> e2 = box.error.new({code = 111, reason = 'cause of cause'})\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> e1:set_prev(e2)\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> e1.prev\n"
#~ "---\n"
#~ "- cause of cause\n"
#~ "..."
#~ msgstr ""

#~ msgid "Cycles are not allowed for error lists:"
#~ msgstr "Циклы для списков ошибок недопустимы:"

#~ msgid ""
#~ "tarantool> e2:set_prev(e1)\n"
#~ "---\n"
#~ "- error: 'builtin/error.lua:147: Cycles are not allowed'\n"
#~ "..."
#~ msgstr ""

#~ msgid "Setting the previous error does not erase its own previous members:"
#~ msgstr ""
#~ "Установка предыдущей ошибки подтягивает за ней ее собственные предыдущие "
#~ "ошибки:"

#~ msgid ""
#~ "-- e1 -> e2 -> e3 -> e4\n"
#~ "e1:set_prev(e2)\n"
#~ "e2:set_prev(e3)\n"
#~ "e3:set_prev(e4)\n"
#~ "e2:set_prev(e5)\n"
#~ "-- Now there are two lists: e1->e2->e5 and e3->e4"
#~ msgstr ""

#~ msgid ""
#~ "The iProto protocol also supports stacked diagnostics. See details in "
#~ ":ref:`MessagePack extensions -- The ERROR type <msgpack_ext-error>`."
#~ msgstr ""
#~ "Протокол IProto тоже поддерживает диагностику с помощью стека ошибок. "
#~ "Подробнее в разделе :ref:`Дополнительные типы MessagePack -- Тип ERROR "
#~ "<msgpack_ext-error>`."
