msgid ""
msgstr ""
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"X-Crowdin-Project: tarantool-docs\n"
"X-Crowdin-Project-ID: 442986\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /en/reference/reference_lua/box_error/error_object.pot\n"
"X-Crowdin-File-ID: 1526\n"
"Project-Id-Version: tarantool-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Russian\n"
"Language: ru_RU\n"
"PO-Revision-Date: 2021-04-23 11:58\n"

msgid "error_object"
msgstr ""

msgid "Since version :doc:`2.4.1 </release/2.4.1>`. Errors can be organized into lists. To achieve this, a Lua table representing an error object has ``.prev`` field and ``e:set_prev(err)`` method."
msgstr ""

msgid "Return a previous error, if any."
msgstr "Возврат предыдущей ошибки, если она существует."

msgid "Set an error as the previous error. Accepts an ``error object`` or ``nil``."
msgstr "Установка ошибки в качестве предыдущей. Принимает объект ошибки или ``nil``."

msgid "**Example:**"
msgstr "**Пример:**"

msgid "tarantool> e1 = box.error.new({code = 111, reason = 'some cause'})\n"
"---\n"
"...\n"
"tarantool> e2 = box.error.new({code = 111, reason = 'cause of cause'})\n"
"---\n"
"...\n"
"tarantool> e1:set_prev(e2)\n"
"---\n"
"...\n"
"tarantool> e1.prev\n"
"---\n"
"- cause of cause\n"
"..."
msgstr ""

msgid "Cycles are not allowed for error lists:"
msgstr "Циклы для списков ошибок недопустимы:"

msgid "tarantool> e2:set_prev(e1)\n"
"---\n"
"- error: 'builtin/error.lua:147: Cycles are not allowed'\n"
"..."
msgstr ""

msgid "Setting the previous error does not erase its own previous members:"
msgstr "Установка предыдущей ошибки подтягивает за ней ее собственные предыдущие ошибки:"

msgid "-- e1 -> e2 -> e3 -> e4\n"
"e1:set_prev(e2)\n"
"e2:set_prev(e3)\n"
"e3:set_prev(e4)\n"
"e2:set_prev(e5)\n"
"-- Now there are two lists: e1->e2->e5 and e3->e4"
msgstr ""

msgid "The iProto protocol also supports stacked diagnostics. See details in :ref:`MessagePack extensions -- The ERROR type <msgpack_ext-error>`."
msgstr "Протокол IProto тоже поддерживает диагностику с помощью стека ошибок. Подробнее в разделе :ref:`Дополнительные типы MessagePack -- Тип ERROR <msgpack_ext-error>`."

