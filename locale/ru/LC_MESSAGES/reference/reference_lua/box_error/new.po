
msgid "box.error.new()"
msgstr ""

msgid "Create an error object with the specified parameters."
msgstr ""

msgid "Parameters"
msgstr "Параметры"

msgid "an error description"
msgstr ""

msgid "(optional) a numeric code for this error"
msgstr ""

msgid "(optional) an error type"
msgstr ""

#, fuzzy
msgid "**Example 1**"
msgstr "**Пример:**"

msgid ""
"local custom_error = box.error.new({ code = 500,\n"
"                                     reason = 'Internal server error' })\n"
"\n"
"box.error(custom_error)\n"
"--[[\n"
"---\n"
"- error: Internal server error\n"
"...\n"
"--]]\n"
msgstr ""

#, fuzzy
msgid "**Example 2: custom type**"
msgstr "**Пример:**"

msgid ""
"local custom_error = box.error.new({ code = 500,\n"
"                                     reason = 'Internal server error',\n"
"                                     type = 'CustomInternalError' })\n"
"\n"
"box.error(custom_error)\n"
"--[[\n"
"---\n"
"- error: Internal server error\n"
"...\n"
"--]]\n"
msgstr ""

msgid "Create an error object with the specified type and description."
msgstr ""

msgid "an error type"
msgstr ""

msgid "description arguments"
msgstr ""

#, fuzzy
msgid "**Example**"
msgstr "**Пример:**"

msgid ""
"local custom_error = box.error.new('CustomInternalError', 'Internal server error')\n"
"\n"
"box.error(custom_error)\n"
"--[[\n"
"---\n"
"- error: Internal server error\n"
"...\n"
"--]]\n"
msgstr ""

msgid ""
"Create a predefined :ref:`Tarantool error <error_codes>` specified by its "
"identifier. You can see all Tarantool errors in the `errcode.h "
"<https://github.com/tarantool/tarantool/blob/master/src/box/errcode.h>`_ "
"file."
msgstr ""

msgid ""
"a pre-defined error identifier; Lua constants that correspond to those "
"Tarantool errors are defined as members of ``box.error``, for example, "
"``box.error.NO_SUCH_USER == 45``"
msgstr ""

#, fuzzy
msgid "**Example 1: one argument**"
msgstr "**Пример:**"

msgid ""
"local custom_error = box.error.new(box.error.NO_SUCH_USER, 'John')\n"
"\n"
"box.error(custom_error)\n"
"--[[\n"
"---\n"
"- error: User 'John' is not found\n"
"...\n"
"--]]\n"
msgstr ""

#, fuzzy
msgid "**Example 2: two arguments**"
msgstr "**Пример:**"

msgid ""
"local custom_error = box.error.new(box.error.CREATE_SPACE, 'my_space', 'the space already exists')\n"
"\n"
"box.error(custom_error)\n"
"--[[\n"
"---\n"
"- error: 'Failed to create space ''my_space'': the space already exists'\n"
"...\n"
"--]]\n"
msgstr ""

#~ msgid ""
#~ "Create an error object, but not throw it as "
#~ ":doc:`/reference/reference_lua/box_error/error` does. This is useful when "
#~ "error information should be saved for later retrieval. Since version "
#~ ":doc:`2.4.1 </release/2.4.1>`, to set an error as the last explicitly use "
#~ ":doc:`/reference/reference_lua/box_error/set`."
#~ msgstr ""

#~ msgid "number of a pre-defined error"
#~ msgstr "номер предварительно заданной ошибки"

#~ msgid "part of the message which will accompany the error"
#~ msgstr "часть сообщения, которое сопровождает ошибку"

#~ msgid ""
#~ "tarantool> e=box.error.new{code=5,reason='A',type='B'}\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> e:unpack()\n"
#~ "---\n"
#~ "- code: 5\n"
#~ "  base_type: CustomError\n"
#~ "  type: B\n"
#~ "  custom_type: B\n"
#~ "  message: A\n"
#~ "  trace:\n"
#~ "  - file: '[string \"e=box.error.new{code=5,reason=''A'',type=''B''}\"]'\n"
#~ "    line: 1\n"
#~ "...\n"
#~ "tarantool> box.error.last()\n"
#~ "---\n"
#~ "- null"
#~ msgstr ""

#~ msgid ""
#~ "Since version :doc:`2.4.1 </release/2.4.1>`, there is a "
#~ ":ref:`session_settings <box_space-session_settings>` setting which affects "
#~ "the structure of error objects. If ``error_marshaling_enabled`` is changed "
#~ "to ``true``, then the object will have the MP_EXT type and the MP_ERROR "
#~ "subtype. Using the :ref:`binary protocol <internals-box_protocol>`, in the "
#~ "body of a packet that the server could send in response to "
#~ "``box.error.new()``, one will see: the encoding of MP_EXT according to the "
#~ "`MessagePack specification "
#~ "<https://github.com/msgpack/msgpack/blob/master/spec.md>`_ (usually 0xc7), "
#~ "followed by the encoding of MP_ERROR (0x03), followed by the encoding of "
#~ "MP_ERROR_STACK (0x81), followed by all of the MP_ERROR_STACK components "
#~ "(MP_ARRAY which contains MP_MAP which contains keys MP_ERROR_MESSAGE, "
#~ "MP_ERROR_CODE, etc.) that are described and illustrated in section "
#~ ":ref:`MessagePack extensions -- The ERROR type <msgpack_ext-error>`. The map"
#~ " field for error object \"type\" will have key = MP_ERROR_TYPE, the map "
#~ "field for error object \"code\" will have key = MP_ERROR_CODE, the map field"
#~ " for error object \"message\" will have key = MP_ERROR_MESSAGE."
#~ msgstr ""
