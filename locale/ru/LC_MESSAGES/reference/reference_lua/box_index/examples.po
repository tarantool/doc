
msgid "Examples for `box.index`"
msgstr "Примеры для `box.index`"

msgid "Example showing use of the box functions"
msgstr "Пример использования функций box"

msgid ""
"This example will work with the sandbox configuration described in the "
"preface. That is, there is a space named tester with a numeric primary "
"key. The example function will:"
msgstr ""
"Данный пример сработает на конфигурации из песочницы, описанной в "
"предисловии, то есть создан спейс под названием tester с первичным "
"числовым ключом. Функция в примере выполнит следующие действия:"

msgid "select a tuple whose key value is 1000;"
msgstr "выбрать кортеж, значение ключа в котором равно 1000;"

msgid "raise an error if the tuple already exists and already has 3 fields;"
msgstr ""
"выдать сообщение об ошибке, если такой кортеж уже существует и содержит 3"
" поля;"

msgid "Insert or replace the tuple with:"
msgstr "вставить или заменить кортеж следующими данными:"

msgid "field[1] = 1000"
msgstr "поле [1] = 1000"

msgid "field[2] = a uuid"
msgstr "поле [2] = UUID"

msgid "field[3] = number of seconds since 1970-01-01;"
msgstr "поле [3] = количество секунд с 01.01.1970;"

msgid "Get field[3] from what was replaced;"
msgstr "получить поле [3] из того, что заменили;"

msgid "Format the value from field[3] as yyyy-mm-dd hh:mm:ss.ffff;"
msgstr ""
"преобразовать значение из поля [3] в формат yyyy-mm-dd hh:mm:ss.ffff "
"(год-месяц-день час:минута:секунда.десятитысячные доли секунды);"

msgid "Return the formatted value."
msgstr "вернуть преобразованное значение."

msgid ""
"The function uses Tarantool box functions :ref:`box.space...select "
"<box_space-select>`, :ref:`box.space...replace <box_space-replace>`, "
":ref:`fiber.time <fiber-time>`, :ref:`uuid.str <uuid-str>`. The function "
"uses Lua functions `os.date()`_ and `string.sub()`_."
msgstr ""
"Данная функция использует функции box в Tarantool'е: "
":ref:`box.space...select <box_space-select>`, :ref:`box.space...replace "
"<box_space-replace>`, :ref:`fiber.time <fiber-time>`, :ref:`uuid.str "
"<uuid-str>`. Данная функция использует Lua-функции `os.date()`_ и "
"`string.sub()`_."

#, python-format
msgid ""
"function example()\n"
"  local a, b, c, table_of_selected_tuples, d\n"
"  local replaced_tuple, time_field\n"
"  local formatted_time_field\n"
"  local fiber = require('fiber')\n"
"  table_of_selected_tuples = box.space.tester:select{1000}\n"
"  if table_of_selected_tuples ~= nil then\n"
"    if table_of_selected_tuples[1] ~= nil then\n"
"      if #table_of_selected_tuples[1] == 3 then\n"
"        box.error({code=1, reason='This tuple already has 3 fields'})\n"
"      end\n"
"    end\n"
"  end\n"
"  replaced_tuple = box.space.tester:replace\n"
"    {1000,  require('uuid').str(), tostring(fiber.time())}\n"
"  time_field = tonumber(replaced_tuple[3])\n"
"  formatted_time_field = os.date(\"%Y-%m-%d %H:%M:%S\", time_field)\n"
"  c = time_field % 1\n"
"  d = string.sub(c, 3, 6)\n"
"  formatted_time_field = formatted_time_field .. '.' .. d\n"
"  return formatted_time_field\n"
"end"
msgstr ""
"function example()\n"
"  local a, b, c, table_of_selected_tuples, d\n"
"  local replaced_tuple, time_field\n"
"  local formatted_time_field\n"
"  local fiber = require('fiber')\n"
"  table_of_selected_tuples = box.space.tester:select{1000}\n"
"  if table_of_selected_tuples ~= nil then\n"
"    if table_of_selected_tuples[1] ~= nil then\n"
"      if #table_of_selected_tuples[1] == 3 then\n"
"        box.error({code=1, reason='This tuple already has 3 fields'})\n"
"      end\n"
"    end\n"
"  end\n"
"  replaced_tuple = box.space.tester:replace\n"
"    {1000,  require('uuid').str(), tostring(fiber.time())}\n"
"  time_field = tonumber(replaced_tuple[3])\n"
"  formatted_time_field = os.date(\"%Y-%m-%d %H:%M:%S\", time_field)\n"
"  c = time_field % 1\n"
"  d = string.sub(c, 3, 6)\n"
"  formatted_time_field = formatted_time_field .. '.' .. d\n"
"  return formatted_time_field\n"
"end"

msgid "... And here is what happens when one invokes the function:"
msgstr "... А вот что происходит, когда вызывается функция:"

msgid ""
"tarantool> box.space.tester:delete(1000)\n"
"---\n"
"- [1000, '264ee2da03634f24972be76c43808254', '1391037015.6809']\n"
"...\n"
"tarantool> example(1000)\n"
"---\n"
"- 2014-01-29 16:11:51.1582\n"
"...\n"
"tarantool> example(1000)\n"
"---\n"
"- error: 'This tuple already has 3 fields'\n"
"..."
msgstr ""

msgid "Example showing a user-defined iterator"
msgstr "Пример с заданным пользователем итератором"

msgid ""
"Here is an example that shows how to build one's own iterator. The "
"``paged_iter`` function is an \"iterator function\", which will only be "
"understood by programmers who have read the Lua manual section `Iterators"
" and Closures <https://www.lua.org/pil/7.1.html>`_. It does paginated "
"retrievals, that is, it returns 10 tuples at a time from a table named "
"\"t\", whose primary key was defined with "
"``create_index('primary',{parts={1,'string'}})``."
msgstr ""
"Здесь приведен пример того, как создать свой собственный итератор. "
"Функция ``paged_iter`` представляет собой \"функцию с итератором\", что "
"поймут только разработчики, которые ознакомились с разделом руководства "
"по Lua `Итераторы и замыкания <https://www.lua.org/pil/7.1.html>`_. Она "
"делает постраничную выборку, то есть возвращает 10 кортежей одновременно "
"из таблицы под названием \"t\", первичный ключ которой определен с "
"помощью ``create_index('primary',{parts={1,'string'}})``."

msgid ""
"function paged_iter(search_key, tuples_per_page)\n"
"  local iterator_string = \"GE\"\n"
"  return function ()\n"
"  local page = box.space.t.index[0]:select(search_key,\n"
"    {iterator = iterator_string, limit=tuples_per_page})\n"
"  if #page == 0 then return nil end\n"
"  search_key = page[#page][1]\n"
"  iterator_string = \"GT\"\n"
"  return page\n"
"  end\n"
"end"
msgstr ""

msgid ""
"Programmers who use ``paged_iter`` do not need to know why it works, they"
" only need to know that, if they call it within a loop, they will get 10 "
"tuples at a time until there are no more tuples."
msgstr ""
"Разработчикам, использующим ``paged_iter``, необязательно знать, почему "
"она работает, следует лишь понимать, что вызвав функцию в цикле, можно "
"получать 10 кортежей за раз до тех пор, пока кортежи не кончатся."

msgid ""
"In this example the tuples are merely printed, a page at a time. But it "
"should be simple to change the functionality, for example by yielding "
"after each retrieval, or by breaking when the tuples fail to match some "
"additional criteria."
msgstr ""
"В данном примере кортежи лишь выводятся по странице за раз. Но легко "
"изменить функцию, например, путем передачи управления после каждой "
"выборки или с помощью прерывания, если кортежи не будут соответствовать "
"дополнительным критериям."

msgid ""
"for page in paged_iter(\"X\", 10) do\n"
"  print(\"New Page. Number Of Tuples = \" .. #page)\n"
"  for i = 1, #page, 1 do\n"
"    print(page[i])\n"
"  end\n"
"end"
msgstr ""

msgid ""
"Example showing submodule `box.index` with index type = RTREE for spatial"
" searches"
msgstr ""
"Пример использования `box.index` с индексом типа RTREE для посика в "
"пространственных данных"

msgid ""
"This submodule may be used for spatial searches if the index type is "
"RTREE. There are operations for searching *rectangles* (geometric objects"
" with 4 corners and 4 sides) and *boxes* (geometric objects with more "
"than 4 corners and more than 4 sides, sometimes called hyperrectangles). "
"This manual uses the term *rectangle-or-box* for the whole class of "
"objects that includes both rectangles and boxes. Only rectangles will be "
"illustrated."
msgstr ""
"Этот вложенный модуль может использоваться для поиска в пространственных "
"данных, если тип индекса -- RTREE. Существуют операции для поиска "
"*прямоугольников* (геометрические фигуры с 4 углами и 4 сторонами) и "
"*параллелепипедов* (геометрические фигуры с количеством углов более 4 и "
"количеством сторон более 4, которые иногда называются "
"гиперпрямоугольниками). В данном руководстве используется термин "
"*прямоугольник-или-параллелепипед* для всего класса объектов, который "
"включает в себя прямоугольники и параллелепипеды. Примерами "
"иллюстрируются только прямоугольники."

msgid ""
"Rectangles are described according to their X-axis (horizontal axis) and "
"Y-axis (vertical axis) coordinates in a grid of arbitrary size. Here is a"
" picture of four rectangles on a grid with 11 horizontal points and 11 "
"vertical points:"
msgstr ""
"Прямоугольники описаны в соответствии с координатами по оси X "
"(горизонтальной оси) и оси Y (вертикальной оси) на сетке произвольного "
"размера. Ниже представлен рисунок четырех прямоугольников на сетке с 11 "
"горизонтальными точками и 11 вертикальными точками:"

msgid ""
"           X AXIS\n"
"           1   2   3   4   5   6   7   8   9   10  11\n"
"        1\n"
"        2  #-------+                                           "
"<-Rectangle#1\n"
"Y AXIS  3  |       |\n"
"        4  +-------#\n"
"        5          #-----------------------+                   "
"<-Rectangle#2\n"
"        6          |                       |\n"
"        7          |   #---+               |                   "
"<-Rectangle#3\n"
"        8          |   |   |               |\n"
"        9          |   +---#               |\n"
"        10         +-----------------------#\n"
"        11                                     #               "
"<-Rectangle#4"
msgstr ""
"           X AXIS\n"
"                1   2   3   4   5   6   7   8   9   10  11\n"
"             1\n"
"             2  #-------+                                           "
"<-Прямоугольник №1\n"
"     Y AXIS  3  |       |\n"
"             4  +-------#\n"
"             5          #-----------------------+                   "
"<-Прямоугольник №2\n"
"             6          |                       |\n"
"             7          |   #---+               |                   "
"<-Прямоугольник №3\n"
"             8          |   |   |               |\n"
"             9          |   +---#               |\n"
"             10         +-----------------------#\n"
"             11                                     #               "
"<-Прямоугольник №4"

msgid ""
"The rectangles are defined according to this scheme: {X-axis coordinate "
"of top left, Y-axis coordinate of top left, X-axis coordinate of bottom "
"right, Y-axis coordinate of bottom right} -- or more succinctly: "
"{x1,y1,x2,y2}. So in the picture ... Rectangle#1 starts at position 1 on "
"the X axis and position 2 on the Y axis, and ends at position 3 on the X "
"axis and position 4 on the Y axis, so its coordinates are {1,2,3,4}. "
"Rectangle#2's coordinates are {3,5,9,10}. Rectangle#3's coordinates are "
"{4,7,5,9}. And finally Rectangle#4's coordinates are {10,11,10,11}. "
"Rectangle#4 is actually a \"point\" since it has zero width and zero "
"height, so it could have been described with only two digits: {10,11}."
msgstr ""
"Прямоугольники определяются в соответствии со следующей схемой: {верхняя "
"левая координата по оси X, верхняя левая координата по оси Y, нижняя "
"правая координата по оси X, нижняя правая координата по оси Y} -- или "
"коротко: {x1,y1,x2,y2}. Таким образом, на рисунке ... Прямоугольник № 1 "
"начинается в точке 1 по оси X и точке 2 по оси Y, а заканчивается в точке"
" 3 по оси X и точке 4 по оси Y, поэтому его координаты будут следующие: "
"{1,2,3,4}. Координаты Прямоугольника № 2: {3,5,9,10}. Координаты "
"Прямоугольника № 3: {4,7,5,9}. И наконец, координаты Прямоугольника № 4: "
"{10,11,10,11}. Прямоугольник № 4, на самом деле, является точкой, "
"поскольку у него нулевая ширина и нулевая высота, так что его можно "
"описать всего двумя числами: {10,11}."

msgid ""
"Some relationships between the rectangles are: \"Rectangle#1's nearest "
"neighbor is Rectangle#2\", and \"Rectangle#3 is entirely inside "
"Rectangle#2\"."
msgstr ""
"Некоторые отношения между прямоугольниками могут быть описаны так: "
"\"Прямоугольник №1 является ближайшим соседом Прямоугольника №2\", а "
"\"Прямоугольник №3 полностью находится внутри Прямоугольника №2\"."

msgid "Now let us create a space and add an RTREE index."
msgstr "Сейчас создадим спейс и добавим RTREE-индекс."

msgid ""
"tarantool> s = box.schema.space.create('rectangles')\n"
"tarantool> i = s:create_index('primary', {\n"
"         >   type = 'HASH',\n"
"         >   parts = {1, 'unsigned'}\n"
"         > })\n"
"tarantool> r = s:create_index('rtree', {\n"
"         >   type = 'RTREE',\n"
"         >   unique = false,\n"
"         >   parts = {2, 'ARRAY'}\n"
"         > })"
msgstr ""

msgid ""
"Field#1 doesn't matter, we just make it because we need a primary-key "
"index. (RTREE indexes cannot be unique and therefore cannot be primary-"
"key indexes.) The second field must be an \"array\", which means its "
"values must represent {x,y} points or {x1,y1,x2,y2} rectangles. Now let "
"us populate the table by inserting two tuples, containing the coordinates"
" of Rectangle#2 and Rectangle#4."
msgstr ""
"Поле №1 не имеет значения, мы создаем его лишь потому, что необходим "
"первичный индекс. (RTREE-индексы не могут быть уникальными, поэтому не "
"могут быть первичными индексами.) Второе поле должно быть массивом "
"(\"array\"), что означает, что его значения должны представлять собой "
"точки {x,y} или прямоугольники {x1,y1,x2,y2}. Заполним таблицу, вставив "
"два кортежа с координатами Прямоугольника №2 и Прямоугольника №4."

msgid ""
"tarantool> s:insert{1, {3, 5, 9, 10}}\n"
"tarantool> s:insert{2, {10, 11}}"
msgstr ""

msgid ""
"And now, following the description of `RTREE iterator types`_, we can "
"search the rectangles with these requests:"
msgstr ""
"Затем, после описания типов RTREE-итераторов (`RTREE iterator types`_), "
"можно произвести поиск прямоугольников с помощью данных запросов:"

msgid ""
"tarantool> r:select({10, 11, 10, 11}, {iterator = 'EQ'})\n"
"---\n"
"- - [2, [10, 11]]\n"
"...\n"
"tarantool> r:select({4, 7, 5, 9}, {iterator = 'GT'})\n"
"---\n"
"- - [1, [3, 5, 9, 10]]\n"
"...\n"
"tarantool> r:select({1, 2, 3, 4}, {iterator = 'NEIGHBOR'})\n"
"---\n"
"- - [1, [3, 5, 9, 10]]\n"
"  - [2, [10, 11]]\n"
"..."
msgstr ""

msgid ""
"Request#1 returns 1 tuple because the point {10,11} is the same as the "
"rectangle {10,11,10,11} (\"Rectangle#4\" in the picture). Request#2 "
"returns 1 tuple because the rectangle {4,7,5,9}, which was "
"\"Rectangle#3\" in the picture, is entirely within{3,5,9,10} which was "
"Rectangle#2. Request#3 returns 2 tuples, because the NEIGHBOR iterator "
"always returns all tuples, and the first returned tuple will be "
"{3,5,9,10} (\"Rectangle#2\" in the picture) because it is the closest "
"neighbor of {1,2,3,4} (\"Rectangle#1\" in the picture)."
msgstr ""
"Запрос №1 возвращает 1 кортеж, потому что точка {10,11} представляет "
"собой то же, что и прямоугольник {10,11,10,11} (\"Прямоугольник №4\" на "
"рисунке). Запрос № 2 возвращает 1 кортеж, потому что прямоугольник "
"{4,7,5,9}, который был \"Прямоугольником №3\" на рисунке находится "
"полностью внутри {3,5,9,10}, что представляет собой Прямоугольник № 2. "
"Запрос № 3 возвращает 2 кортежа, потому что итератор NEIGHBOR (сосед) "
"всегда возвращает все кортежи, а первым найденным кортежем будет "
"{3,5,9,10} (\"Прямоугольник №2\" на рисунке), потому что он является "
"ближайшим соседом {1,2,3,4} (\"Прямоугольник №1\" на рисунке)."

msgid ""
"Now let us create a space and index for cuboids, which are rectangle-or-"
"boxes that have 6 corners and 6 sides."
msgstr ""
"Теперь создадим спейс и индекс для кубоидов, которые представляют собой "
"прямоугольники-или-параллелепипеды, у которых 6 углов и 6 сторон."

msgid ""
"tarantool> s = box.schema.space.create('R')\n"
"tarantool> i = s:create_index('primary', {parts = {1, 'unsigned'}})\n"
"tarantool> r = s:create_index('S', {\n"
"         >   type = 'RTREE',\n"
"         >   unique = false,\n"
"         >   dimension = 3,\n"
"         >   parts = {2, 'ARRAY'}\n"
"         > })"
msgstr ""

msgid ""
"The additional option here is ``dimension=3``. The default dimension is "
"2, which is why it didn't need to be specified for the examples of "
"rectangle. The maximum dimension is 20. Now for insertions and selections"
" there will usually be 6 coordinates. For example:"
msgstr ""
"Здесь задается дополнительный параметр ``dimension=3``. По умолчанию, "
"измерений 2, поэтому не было необходимости указывать данный параметр в "
"примерах для прямоугольника. Максимальное количество измерений -- 20. Что"
" касается вставки и выборки, здесь будет 6 координат. Например:"

msgid ""
"tarantool> s:insert{1, {0, 3, 0, 3, 0, 3}}\n"
"tarantool> r:select({1, 2, 1, 2, 1, 2}, {iterator = box.index.GT})"
msgstr ""

msgid ""
"Now let us create a space and index for Manhattan-style spatial objects, "
"which are rectangle-or-boxes that have a different way to calculate "
"neighbors."
msgstr ""
"Теперь создадим спейс и индекс для пространственных объектов с метрикой "
"расстояния городских кварталов (метрика Манхэттена), которые представляют"
" собой прямоугольники-или-параллелепипеды; соседи для них рассчитываются "
"иным образом."

msgid ""
"tarantool> s = box.schema.space.create('R')\n"
"tarantool> i = s:create_index('primary', {parts = {1, 'unsigned'}})\n"
"tarantool> r = s:create_index('S', {\n"
"         >   type = 'RTREE',\n"
"         >   unique = false,\n"
"         >   distance = 'manhattan',\n"
"         >   parts = {2, 'ARRAY'}\n"
"         > })"
msgstr ""

msgid ""
"The additional option here is ``distance='manhattan'``. The default "
"distance calculator is 'euclid', which is the straightforward as-the-"
"crow-flies method. The optional distance calculator is 'manhattan', which"
" can be a more appropriate method if one is following the lines of a grid"
" rather than traveling in a straight line."
msgstr ""
"Здесь задается дополнительный параметр ``distance='manhattan'``. По "
"умолчанию, расстояние измеряется по Евклидовой метрике, что лучше всего "
"подходит для измерений по прямой линии. Другой способ расчета расстояния "
"по метрике Манхэттена ('manhattan'), который больше подходит, если "
"необходимо следовать линиям сетки, а не по прямой."

msgid ""
"tarantool> s:insert{1, {0, 3, 0, 3}}\n"
"tarantool> r:select({1, 2, 1, 2}, {iterator = box.index.NEIGHBOR})"
msgstr ""
"tarantool> s:insert{1, {0, 3, 0, 3}}\n"
"tarantool> r:select({1, 2, 1, 2}, {iterator = box.index.NEIGHBOR})"

msgid ""
"More examples of spatial searching are online in the file `R tree index "
"quick start and usage <https://github.com/tarantool/tarantool/wiki/R"
"-tree-index-quick-start-and-usage>`_."
msgstr ""
"Другие примеры поиска в пространственных данных см. по ссылке `R tree "
"index quick start and usage`_."
