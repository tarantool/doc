
msgid "index_object:user_defined()"
msgstr ""

msgid ""
"Users can define any functions they want, and associate them with "
"indexes: in effect they can make their own index methods. They do this "
"by:"
msgstr ""
"Пользователи могут сами определять любые желаемые функции и связывать их "
"с индексами: фактически они могут создавать собственные методы для работы"
" с индексом. Это можно сделать так:"

msgid "creating a Lua function,"
msgstr "создать Lua-функцию,"

msgid ""
"adding the function name to a predefined global variable which has type ="
" table, and"
msgstr ""
"добавить имя функции в заданную глобальную переменную с типом \"таблица\""
" (table),"

msgid ""
"invoking the function any time thereafter, as long as the server is up, "
"by saying ``index_object:function-name([parameters])``."
msgstr ""
"впоследствии в любое время, пока работает сервер, вызвать функцию с "
"помощью ``объект_индекса:имя-функции([параметры])``."

msgid "There are three predefined global variables:"
msgstr "Есть три заданные глобальные переменные:"

msgid ""
"Adding to ``box_schema.index_mt`` makes the method available for all "
"indexes."
msgstr ""
"Метод, добавленный в ``box_schema.index_mt``, будет доступен для всех "
"индексов."

msgid ""
"Adding to ``box_schema.memtx_index_mt`` makes the method available for "
"all memtx indexes."
msgstr ""
"Метод, добавленный в ``box_schema.memtx_index_mt``, будет доступен для "
"всех индексов в memtx'е."

msgid ""
"Adding to ``box_schema.vinyl_index_mt`` makes the method available for "
"all vinyl indexes."
msgstr ""
"Метод, добавленный в ``box_schema.vinyl_index_mt``, будет доступен для "
"всех индексов в vinyl'е."

msgid ""
"Alternatively, user-defined methods can be made available for only one "
"index, by calling ``getmetatable(index_object)`` and then adding the "
"function name to the meta table."
msgstr ""
"Можно также сделать задаваемый пользователем метод доступным только для "
"одного индекса путем вызова ``getmetatable(объект_индекса)`` и "
"последующего добавления имени функции в метатаблицу."

msgid "Parameters"
msgstr "Параметры"

msgid "an :ref:`object reference <app_server-object_reference>`."
msgstr ":ref:`ссылка на объект <app_server-object_reference>`."

msgid "whatever the user defines"
msgstr "то, что определяет пользователь"

msgid "**Example:**"
msgstr "**Пример:**"

msgid ""
"-- Visible to any index of a memtx space, no parameters.\n"
"-- After these requests, the value of global_variable will be 6.\n"
"box.schema.space.create('t', {engine='memtx'})\n"
"box.space.t:create_index('i')\n"
"global_variable = 5\n"
"function f() global_variable = global_variable + 1 end\n"
"box.schema.memtx_index_mt.counter = f\n"
"box.space.t.index.i:counter()"
msgstr ""
"-- Доступный для любого индекса спейса memtx, без параметров.\n"
"-- После таких запросов значение глобальной переменной global_variable "
"будет 6.\n"
"box.schema.space.create('t', {engine='memtx'})\n"
"box.space.t:create_index('i')\n"
"global_variable = 5\n"
"function f() global_variable = global_variable + 1 end\n"
"box.schema.memtx_index_mt.counter = f\n"
"box.space.t.index.i:counter()"

msgid ""
"-- Visible to index box.space.t.index.i only, 1 parameter.\n"
"-- After these requests, the value of X will be 1005.\n"
"box.schema.space.create('t', {engine='memtx', id = 1000})\n"
"box.space.t:create_index('i')\n"
"X = 0\n"
"i = box.space.t.index.i\n"
"function f(i_arg, param) X = X + param + i_arg.space_id end\n"
"box.schema.memtx_index_mt.counter = f\n"
"meta = getmetatable(i)\n"
"meta.counter = f\n"
"i:counter(5)"
msgstr ""
"-- Доступный только для индекса box.space.t.index.i, 1 параметр.\n"
"-- После таких запросов значение X будет 1005.\n"
"box.schema.space.create('t', {engine='memtx', id = 1000})\n"
"box.space.t:create_index('i')\n"
"X = 0\n"
"i = box.space.t.index.i\n"
"function f(i_arg, param) X = X + param + i_arg.space_id end\n"
"box.schema.memtx_index_mt.counter = f\n"
"meta = getmetatable(i)\n"
"meta.counter = f\n"
"i:counter(5)"
