
msgid "index_object extensions"
msgstr ""

msgid "You can extend ``index_object`` with custom functions as follows:"
msgstr ""
"Пользователи могут сами определять любые желаемые функции и связывать их с "
"индексами: фактически они могут создавать собственные методы для работы с "
"индексом. Это можно сделать так:"

msgid "Create a Lua function."
msgstr "создать Lua-функцию,"

msgid ""
"Add the function name to a predefined global variable, which has the "
"``table`` type."
msgstr ""
"добавить имя функции в заданную глобальную переменную с типом \"таблица\" "
"(table),"

msgid ""
"Call the function on the ``index_object``: ``index_object:function-"
"name([parameters])``."
msgstr ""
"впоследствии в любое время, пока работает сервер, вызвать функцию с помощью "
"``объект_индекса:имя-функции([параметры])``."

msgid "There are three predefined global variables:"
msgstr "Есть три заданные глобальные переменные:"

#, fuzzy
msgid ""
"Adding to ``box_schema.index_mt`` makes the function available for all "
"indexes."
msgstr ""
"Метод, добавленный в ``box_schema.index_mt``, будет доступен для всех "
"индексов."

#, fuzzy
msgid ""
"Adding to ``box_schema.memtx_index_mt`` makes the function available for all"
" memtx indexes."
msgstr ""
"Метод, добавленный в ``box_schema.memtx_index_mt``, будет доступен для всех "
"индексов в memtx'е."

#, fuzzy
msgid ""
"Adding to ``box_schema.vinyl_index_mt`` makes the function available for all"
" vinyl indexes."
msgstr ""
"Метод, добавленный в ``box_schema.vinyl_index_mt``, будет доступен для всех "
"индексов в vinyl'е."

msgid ""
"Alternatively, you can make a user-defined function available for only one "
"index by calling ``getmetatable(index_object)`` and then adding the function"
" name to the meta table."
msgstr ""
"Можно также сделать задаваемый пользователем метод доступным только для "
"одного индекса путем вызова ``getmetatable(объект_индекса)`` и последующего "
"добавления имени функции в метатаблицу."

#, fuzzy
msgid "**Example 1:**"
msgstr "**Пример:**"

msgid ""
"The example below shows how to extend all memtx indexes with the custom "
"function:"
msgstr ""

msgid ""
"box.schema.space.create('tester1', { engine = 'memtx' })\n"
"box.space.tester1:create_index('index1')\n"
"global_counter = 5\n"
"\n"
"-- Create a custom function.\n"
"function increase_global_counter()\n"
"    global_counter = global_counter + 1\n"
"end\n"
"\n"
"-- Extend all memtx indexes with the created function.\n"
"box.schema.memtx_index_mt.increase_global_counter = increase_global_counter\n"
"\n"
"-- Call the 'increase_global_counter' function on 'index1'\n"
"-- to change the 'global_counter' value from 5 to 6.\n"
"box.space.tester1.index.index1:increase_global_counter()\n"
msgstr ""

#, fuzzy
msgid "**Example 2:**"
msgstr "**Пример:**"

msgid ""
"The example below shows how to extend the specified index with the custom "
"function with parameters:"
msgstr ""

msgid ""
"box.schema.space.create('tester2', { engine = 'memtx', id = 1000 })\n"
"box.space.tester2:create_index('index2')\n"
"local_counter = 0\n"
"\n"
"-- Create a custom function.\n"
"function increase_local_counter(i_arg, param)\n"
"    local_counter = local_counter + param + i_arg.space_id\n"
"end\n"
"\n"
"-- Extend only the 'index2' index with the created function.\n"
"box.schema.memtx_index_mt.increase_local_counter = increase_local_counter\n"
"meta = getmetatable(box.space.tester2.index.index2)\n"
"meta.increase_local_counter = increase_local_counter\n"
"\n"
"-- Call the 'increase_local_counter' function on 'index2'\n"
"-- to change the 'local_counter' value from 0 to 1005.\n"
"box.space.tester2.index.index2:increase_local_counter(5)\n"
msgstr ""

#~ msgid "Parameters"
#~ msgstr "Параметры"

#~ msgid "an :ref:`object reference <app_server-object_reference>`."
#~ msgstr ":ref:`ссылка на объект <app_server-object_reference>`."

#~ msgid "whatever the user defines"
#~ msgstr "то, что определяет пользователь"

#~ msgid ""
#~ "-- Visible to any index of a memtx space, no parameters.\n"
#~ "-- After these requests, the value of global_variable will be 6.\n"
#~ "box.schema.space.create('t', {engine='memtx'})\n"
#~ "box.space.t:create_index('i')\n"
#~ "global_variable = 5\n"
#~ "function f() global_variable = global_variable + 1 end\n"
#~ "box.schema.memtx_index_mt.counter = f\n"
#~ "box.space.t.index.i:counter()"
#~ msgstr ""
#~ "-- Доступный для любого индекса спейса memtx, без параметров.\n"
#~ "-- После таких запросов значение глобальной переменной global_variable будет 6.\n"
#~ "box.schema.space.create('t', {engine='memtx'})\n"
#~ "box.space.t:create_index('i')\n"
#~ "global_variable = 5\n"
#~ "function f() global_variable = global_variable + 1 end\n"
#~ "box.schema.memtx_index_mt.counter = f\n"
#~ "box.space.t.index.i:counter()"

#~ msgid ""
#~ "-- Visible to index box.space.t.index.i only, 1 parameter.\n"
#~ "-- After these requests, the value of X will be 1005.\n"
#~ "box.schema.space.create('t', {engine='memtx', id = 1000})\n"
#~ "box.space.t:create_index('i')\n"
#~ "X = 0\n"
#~ "i = box.space.t.index.i\n"
#~ "function f(i_arg, param) X = X + param + i_arg.space_id end\n"
#~ "box.schema.memtx_index_mt.counter = f\n"
#~ "meta = getmetatable(i)\n"
#~ "meta.counter = f\n"
#~ "i:counter(5)"
#~ msgstr ""
#~ "-- Доступный только для индекса box.space.t.index.i, 1 параметр.\n"
#~ "-- После таких запросов значение X будет 1005.\n"
#~ "box.schema.space.create('t', {engine='memtx', id = 1000})\n"
#~ "box.space.t:create_index('i')\n"
#~ "X = 0\n"
#~ "i = box.space.t.index.i\n"
#~ "function f(i_arg, param) X = X + param + i_arg.space_id end\n"
#~ "box.schema.memtx_index_mt.counter = f\n"
#~ "meta = getmetatable(i)\n"
#~ "meta.counter = f\n"
#~ "i:counter(5)"
