
msgid "Function `box.once`"
msgstr "Функция `box.once`"

msgid ""
"Execute a function, provided it has not been executed before. A passed "
"value is checked to see whether the function has already been executed. "
"If it has been executed before, nothing happens. If it has not been "
"executed before, the function is invoked."
msgstr ""
"Выполнение функции при условии, что она раньше не выполнялась. "
"Передаваемое значение проверяется на предмет того, выполнялась ли "
"функция. Если она выполнялась, ничего не происходит. В противном случае "
"вызывается функция."

msgid ""
"See an example of using ``box.once()`` while :ref:`bootstrapping a "
"replica set <replication-bootstrap>`."
msgstr ""
"См. пример использования ``box.once()`` во время :ref:`настройки набора "
"реплик <replication-bootstrap>`."

msgid ""
"**Warning:** If an error occurs inside ``box.once()`` when initializing a"
" database, you can re-execute the failed ``box.once()`` block without "
"stopping the database. The solution is to delete the ``once`` object from"
" the system space :ref:`_schema <box_space-schema>`. Say "
"``box.space._schema:select{}``, find your ``once`` object there and "
"delete it. For example, re-executing a block with ``key='hello'`` :"
msgstr ""
"Если в ``box.once()`` возникает ошибка во время инициализации базы "
"данных, можно повторно запустить невыполненный блок ``box.once()``, не "
"останавливая базу данных. Для этого удалите объект ``once`` из системного"
" спейса :ref:`_schema <box_space-schema>`. Введите команду "
"``box.space._schema:select{}``, найдите объект ``once`` и удалите его. "
"Например, повторное выполнение блока ``key='hello'`` :"

msgid ""
"When ``box.once()`` is used for initialization, it may be useful to wait "
"until the database is in an appropriate state (read-only or read-write). "
"In that case, see the functions in the "
":doc:`/reference/reference_lua/box_ctl`."
msgstr ""
"Когда ``box.once()`` используется для инициализации, следует подождать, "
"пока база данных не будет в нужном состоянии (только для чтения или для "
"чтения и записи). Для этого см. функции во "
":doc:`/reference/reference_lua/box_ctl`."

msgid ""
"tarantool> box.space._schema:select{}\n"
"---\n"
"- - ['cluster', 'b4e15788-d962-4442-892e-d6c1dd5d13f2']\n"
"  - ['max_id', 512]\n"
"  - ['oncebye']\n"
"  - ['oncehello']\n"
"  - ['version', 1, 7, 2]\n"
"...\n"
"\n"
"tarantool> box.space._schema:delete('oncehello')\n"
"---\n"
"- ['oncehello']\n"
"...\n"
"\n"
"tarantool> box.once('hello', function() end)\n"
"---\n"
"..."
msgstr ""
"tarantool> box.space._schema:select{}\n"
"---\n"
"- - ['cluster', 'b4e15788-d962-4442-892e-d6c1dd5d13f2']\n"
"  - ['max_id', 512]\n"
"  - ['oncebye']\n"
"  - ['oncehello']\n"
"  - ['version', 1, 7, 2]\n"
"...\n"
"\n"
"tarantool> box.space._schema:delete('oncehello')\n"
"---\n"
"- ['oncehello']\n"
"...\n"
"\n"
"tarantool> box.once('hello', function() end)\n"
"---\n"
"..."

msgid "Parameters"
msgstr "Параметры"

msgid "a value that will be checked"
msgstr "значение для проверки"

msgid "a function"
msgstr "функция"

msgid "arguments that must be passed to function"
msgstr "аргументы, которые следует передать в функцию"

msgid ""
"The parameter ``key`` will be stored in the :ref:`_schema <box_space-"
"schema>` system space after ``box.once()`` is called in order to prevent "
"a double run. These keys are global per replica set. So a simultaneous "
"call of ``box.once()`` with the same key on two instances of the same "
"replica set may succeed on both of them, but it'll lead to a transaction "
"conflict."
msgstr ""
"Параметр ``key`` сохраняется в системном спейсе :ref:`_schema <box_space-"
"schema>` после вызова ``box.once()``, чтобы предотвратить повторный вызов"
" по ключу. Эти ключи распространяются на набор реплик. Поэтому "
"одновременный вызов ``box.once`` с одинаковыми ключами на двух "
"экземплярах одного набора реплик может быть успешным, но приведет к "
"конфликту транзакций."
