
msgid "box.schema.space.create() / schema_object:create_space()"
msgstr ""

msgid "Create a :ref:`space <index-box_space>`."
msgstr "Создание :ref:`спейса <index-box_space>`."

msgid "Parameters"
msgstr "Параметры"

msgid ""
"name of space, which should conform to the :ref:`rules for object names "
"<app_server-names>`"
msgstr ""
"имя спейса, которое должно соответствовать :ref:`правилам именования "
"объектов <app_server-names>`"

msgid "see \"Options for box.schema.space.create\" chart, below"
msgstr "см. таблицу \"Параметры для box.schema.space.create\" ниже"

msgid "return"
msgstr "возвращает"

msgid "space object"
msgstr "объект спейса"

msgid "rtype"
msgstr "тип возвращаемого значения"

msgid "userdata"
msgstr "пользовательские данные"

msgid ""
"You can use either syntax. For example, ``s = "
"box.schema.space.create('tester')`` has the same effect as ``s = "
"box.schema.create_space('tester')``."
msgstr ""
"Можно использовать любой вариант синтаксиса. Например, ``s = "
"box.schema.space.create('tester')`` эквивалентно ``s = "
"box.schema.create_space('tester')``."

msgid "**Options for box.schema.space.create**"
msgstr "**Параметры для box.schema.space.create**"

msgid "Name"
msgstr "Имя"

msgid "Effect"
msgstr "Эффект"

msgid "Type"
msgstr "Тип"

msgid "Default"
msgstr "Значение по умолчанию"

msgid "engine"
msgstr "engine (движок)"

msgid "'memtx' or 'vinyl'"
msgstr "'memtx' или 'vinyl'"

msgid "string"
msgstr "string (строка)"

msgid "'memtx'"
msgstr "'memtx'"

msgid "field_count"
msgstr "field_count (количество полей)"

msgid ""
"fixed count of :ref:`fields <index-box_tuple>`: for example if "
"field_count=5, it is illegal to insert a tuple with fewer than or more "
"than 5 fields"
msgstr ""
"заданное количество :ref:`полей <index-box_tuple>`: например, если "
"field_count=5, нельзя вставить кортеж с количеством полей, большим или "
"меньшим, чем 5"

msgid "number"
msgstr "число"

msgid "0 i.e. not fixed"
msgstr "0, то есть не задано"

msgid "format"
msgstr "format (формат)"

msgid ""
"field names and types: See the illustrations of format clauses in the "
":ref:`space_object:format() <box_space-format>` description and in the "
":ref:`box.space._space <box_space-space>` example. Optional and usually "
"not specified."
msgstr ""
"имена и типы полей: см. наглядные примеры операторов в описании "
":ref:`space_object:format() <box_space-format>` и в "
":ref:`box.space._space <box_space-space>`. Необязательный параметр, "
"обычно значение не указывается."

msgid "table"
msgstr "таблица"

msgid "(blank)"
msgstr "(пустое)"

msgid "id"
msgstr "id"

msgid ""
"unique identifier: users can refer to spaces with the id instead of the "
"name"
msgstr ""
"уникальный идентификатор: пользователи могут ссылаться на спейсы "
"посредством идентификатора вместо имени"

msgid "last space's id, +1"
msgstr "идентификатор последнего спейса +1"

msgid "if_not_exists"
msgstr "if_not_exists (если отсутствует)"

msgid ""
"create space only if a space with the same name does not exist already, "
"otherwise do nothing but do not cause an error"
msgstr ""
"спейс создается, только если спейса с таким же именем нет в базе данных, "
"в противном случае эффект отсутствует, но ошибка не выдается"

msgid "boolean"
msgstr "boolean (логический)"

msgid "false"
msgstr "false (ложь)"

msgid "is_local"
msgstr "is_local"

msgid ""
"space contents are :ref:`replication-local <replication-local>`: changes "
"are stored in the :ref:`write-ahead log <internals-wal>` of the local "
"node but there is no :ref:`replication <replication>`."
msgstr ""
"содержимое спейса :ref:`реплицируется локально <replication-local>`: "
"изменения сохраняются в :ref:`журнале упреждающей записи <internals-wal>`"
" локального узла, но не происходит :ref:`репликация <replication>`."

msgid "temporary"
msgstr "temporary (временный)"

msgid ""
"space contents are temporary: changes are not stored in the :ref:`write-"
"ahead log <internals-wal>` and there is no :ref:`replication "
"<replication>`. Note re storage engine: vinyl does not support temporary "
"spaces."
msgstr ""
"содержимое спейса хранится временно: изменения не хранятся в "
":ref:`журнале упреждающей записи <internals-wal>`, и не проводится "
":ref:`репликация <replication>`. Примечание по движку базы данных: vinyl "
"не поддерживает временные спейсы."

msgid "user"
msgstr "user (пользователь)"

msgid ""
"name of the user who is considered to be the space's :ref:`owner "
"<authentication-owners_privileges>` for authorization purposes"
msgstr ""
"имя пользователя, который считается :ref:`владельцем <authentication-"
"owners_privileges>` спейса, для целей авторизации"

msgid "current user's name"
msgstr "имя текущего пользователя"

msgid ""
"Saying ``box.cfg{read_only=true...}`` during :ref:`configuration "
"<cfg_basic-read_only>` affects spaces differently depending on the "
"options that were used during ``box.schema.space.create``, as summarized "
"by this chart:"
msgstr ""
"Если выполнить ``box.cfg{read_only=true...}`` во время :ref:`конфигурации"
" <cfg_basic-read_only>` по-разному влияет на спейсы в зависимости от "
"опций, использованных во время ``box.schema.space.create``, как описано в"
" таблице:"

msgid "Option"
msgstr "Характеристика"

msgid "Can be created?"
msgstr "Можно создать?"

msgid "Can be written to?"
msgstr "Допускает запись?"

msgid "Is replicated?"
msgstr "Реплицируется?"

msgid "Is persistent?"
msgstr "Сохраняется?"

msgid "(default)"
msgstr "(по умолчанию)"

msgid "no"
msgstr "нет"

msgid "yes"
msgstr "да"

msgid ""
"There are three :ref:`syntax variations <app_server-object_reference>` "
"for object references targeting space objects, for example "
":samp:`box.schema.space.drop({space-id})` will drop a space. However, the"
" common approach is to use functions attached to the space objects, for "
"example :ref:`space_object:drop() <box_space-drop>`."
msgstr ""
"Существуют три :ref:`варианта синтаксиса <app_server-object_reference>` "
"для ссылок на объекты спейса, например, "
":samp:`box.schema.space.drop({id-спейса})` удалит спейс. Однако общий "
"подход заключается в использовании функций, прикрепленных к объектам "
"спейса, например :ref:`space_object:drop() <box_space-drop>`."

msgid "**Example:**"
msgstr "**Пример:**"

msgid ""
"tarantool> s = box.schema.space.create('space55')\n"
"---\n"
"...\n"
"tarantool> s = box.schema.space.create('space55', {\n"
"         >   id = 555,\n"
"         >   temporary = false\n"
"         > })\n"
"---\n"
"- error: Space 'space55' already exists\n"
"...\n"
"tarantool> s = box.schema.space.create('space55', {\n"
"         >   if_not_exists = true\n"
"         > })\n"
"---\n"
"..."
msgstr ""

msgid ""
"After a space is created, usually the next step is to :ref:`create an "
"index <box_space-create_index>` for it, and then it is available for "
"insert, select, and all the other :ref:`box.space <box_space>` functions."
msgstr ""
"Следующим шагом после создания спейса будет :ref:`создание индекса "
"<box_space-create_index>` для него, после чего можно будет выполнять "
"вставку, выборку и другие функции :ref:`box.space <box_space>`."
