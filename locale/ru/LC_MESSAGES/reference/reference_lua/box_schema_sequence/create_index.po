
msgid "specifying a sequence in create_index()"
msgstr "использование последовательностей в create_index()"

msgid ""
"You can use the :samp:`sequence={sequence-name}` (or :samp:`sequence"
"={sequence-id}` or :samp:`sequence=true`) option when :ref:`creating "
"<box_space-create_index>` or :doc:`altering "
"</reference/reference_lua/box_index/alter>` a primary-key index. The "
"sequence becomes associated with the index, so that the next ``insert()``"
" will put the next generated number into the primary-key field, if the "
"field would otherwise be nil."
msgstr ""
"Можно использовать опцию :samp:`sequence={имя-последовательности}` (или "
":samp:`sequence={id-последовательности}`, или :samp:`sequence=true`) при "
":ref:`создании <box_space-create_index>` или :doc:`изменении "
"</reference/reference_lua/box_index/alter>` первичного индекса. "
"Происходит ассоциация последовательности с индексом, так что следующий "
"вызов ``insert()`` поместит следующее сгенерированное число в поле "
"первичного ключа, если в противном случае поле было бы nil."

msgid ""
"The syntax may be any of: |br| :samp:`sequence = {sequence identifier}` "
"|br| or :code:`sequence = {id =` :samp:`{sequence identifier}` :code:`}` "
"|br| or :code:`sequence = {field =` :samp:`{field number}` :code:`}` |br|"
" or :code:`sequence = {id =` :samp:`{sequence identifier}` :code:`, field"
" =` :samp:`{field number}` :code:`}` |br| or :code:`sequence = true` |br|"
" or :code:`sequence = {}`. |br| The sequence identifier may be either a "
"number (the sequence id) or a string (the sequence name). The field "
"number may be the ordinal number of any field in the index; default = 1. "
"Examples of all possibilities: ``sequence = 1`` or ``sequence = "
"'sequence_name'`` or ``sequence = {id = 1}`` or ``sequence = {id = "
"'sequence_name'}`` or ``sequence = {id = 1, field = 1}`` or ``sequence = "
"{id = 'sequence_name', field = 1}`` or ``sequence = {field = 1}`` or "
"``sequence = true`` or ``sequence = {}``. Notice that the sequence "
"identifier can be omitted, if it is omitted then a new sequence is "
"created automatically with default name = :samp:`{space-name}_seq`. "
"Notice that the field number does not have to be 1, that is, the sequence"
" can be associated with any field in the primary-key index."
msgstr ""

msgid ""
"For example, if 'Q' is a sequence and 'T' is a new space, then this will "
"work:"
msgstr ""
"Например, если 'Q' -- это последовательность, а 'T' -- это новый спейс, "
"то сработает:"

msgid ""
"tarantool> box.space.T:create_index('Q',{sequence='Q'})\n"
"---\n"
"- unique: true\n"
"  parts:\n"
"  - type: unsigned\n"
"    is_nullable: false\n"
"    fieldno: 1\n"
"  sequence_id: 8\n"
"  id: 0\n"
"  space_id: 514\n"
"  name: Q\n"
"  type: TREE\n"
"..."
msgstr ""
"tarantool> box.space.T:create_index('Q',{sequence='Q'})\n"
"---\n"
"- unique: true\n"
"  parts:\n"
"  - type: unsigned\n"
"    is_nullable: false\n"
"    fieldno: 1\n"
"  sequence_id: 8\n"
"  id: 0\n"
"  space_id: 514\n"
"  name: Q\n"
"  type: TREE\n"
"..."

msgid "(Notice that the index now has a ``sequence_id`` field.)"
msgstr ""
"(Обратите внимание, что теперь в индексе есть поле идентификатора "
"последовательности ``sequence_id``.)"

msgid "And this will work:"
msgstr "И сработает:"

msgid ""
"tarantool> box.space.T:insert{box.NULL,0}\n"
"---\n"
"- [1, 0]\n"
"..."
msgstr ""
"tarantool> box.space.T:insert{box.NULL,0}\n"
"---\n"
"- [1, 0]\n"
"..."

msgid ""
"The index key type may be either 'integer' or 'unsigned'. If any of the "
"sequence options is a negative number, then the index key type should be "
"'integer'."
msgstr ""

msgid ""
"Users should not insert a value greater than 9223372036854775807, which "
"is 2^63 - 1, in the indexed field. The sequence generator will ignore it."
msgstr ""

msgid ""
"A sequence cannot be dropped if it is associated with an index. However, "
":ref:`index_object:alter() <box_index-alter>` can be used to say that a "
"sequence is not associated with an index, for example "
"``box.space.T.index.I:alter({sequence=false})``."
msgstr ""
"Последовательность нельзя удалить, если она связана с индексом. Тем не "
"менее, можно использовать :ref:`index_object:alter() <box_index-alter>`, "
"чтобы показать, что последовательность не связана с индексом, например "
"так ``box.space.T.index.I:alter({sequence=false})``."

msgid ""
"If a sequence was created automatically because the sequence identifier "
"was omitted, then it will be dropped automatically if the index is "
"altered so that ``sequence=false``, or if the index is dropped."
msgstr ""

msgid ""
"``index_object:alter()`` can also be used to associate a sequence with an"
" existing index, with the same syntax for options."
msgstr ""

msgid ""
"When a sequence is used with an index based on a JSON path, inserted "
"tuples must have all components of the path preceding the autoincrement "
"field, and the autoincrement field. To achieve that use ``box.NULL`` "
"rather than ``nil``. Example:"
msgstr ""

msgid ""
"s = box.schema.space.create('test')\n"
"s:create_index('pk', {parts = {{'[1].a.b[1]', 'unsigned'}}, sequence = "
"true})\n"
"s:replace{} -- error\n"
"s:replace{{c = {}}} -- error\n"
"s:replace{{a = {c = {}}}} -- error\n"
"s:replace{{a = {b = {}}}} -- error\n"
"s:replace{{a = {b = {nil}}}} -- error\n"
"s:replace{{a = {b = {box.NULL}}}} -- ok"
msgstr ""
