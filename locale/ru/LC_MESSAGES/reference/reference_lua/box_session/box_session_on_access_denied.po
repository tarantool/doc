
msgid "box.session.on_access_denied()"
msgstr ""

msgid ""
"Define a trigger for reacting to user's attempts to execute actions that "
"are not within the user's privileges."
msgstr ""
"Определение триггера для ответа на попытки пользователя выполнить "
"неразрешенные ему действия."

msgid "Parameters"
msgstr "Параметры"

msgid "function which will become the trigger function"
msgstr "функция, в которой будет триггер"

msgid "existing trigger function which will be replaced by trigger-function"
msgstr "существующая функция с триггером, которую заменит новая"

msgid "return"
msgstr "возвращает"

msgid "nil or function pointer"
msgstr "nil или указатель функции"

msgid ""
"If the parameters are (nil, old-trigger-function), then the old trigger "
"is deleted."
msgstr ""
"Если указаны параметры `(nil, old-trigger-function)`, старый триггер "
"будет удален."

msgid ""
"If both parameters are omitted, then the response is a list of existing "
"trigger functions."
msgstr ""
"Если не указан ни один параметр, ответом будет список существующих "
"функций с триггером."

msgid ""
"Details about trigger characteristics are in the :ref:`triggers "
"<triggers-box_triggers>` section."
msgstr ""
"Подробная информация о характеристиках триггера находится в разделе "
":ref:`Триггеры <triggers-box_triggers>`."

msgid "**Example:**"
msgstr "**Пример:**"

msgid "For example, server administrator can log restricted actions like this:"
msgstr "Например, администратор сервера может регистрировать запрещенные действия:"

#, python-format
msgid ""
"tarantool> function on_access_denied(op, type, name)\n"
"         > log.warn('User %s tried to %s %s %s without required "
"privileges', box.session.user(), op, type, name)\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> box.session.on_access_denied(on_access_denied)\n"
"---\n"
"- 'function: 0x011b41af38'\n"
"...\n"
"tarantool> function test() print('you shall not pass') end\n"
"---\n"
"...\n"
"tarantool> box.schema.func.create('test')\n"
"---\n"
"..."
msgstr ""
"tarantool> function on_access_denied(op, type, name)\n"
"         > log.warn('User %s tried to %s %s %s without required "
"privileges', box.session.user(), op, type, name)\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> box.session.on_access_denied(on_access_denied)\n"
"---\n"
"- 'function: 0x011b41af38'\n"
"...\n"
"tarantool> function test() print('you shall not pass') end\n"
"---\n"
"...\n"
"tarantool> box.schema.func.create('test')\n"
"---\n"
"..."

msgid ""
"Then, when some user without required privileges tries to call ``test()``"
" and gets the error, the server will execute this trigger and write to "
"log **\"User *user_name* tried to Execute function test without required "
"privileges\"**"
msgstr ""
"И когда какой-нибудь пользователь без соответствующих прав попытается "
"вызвать ``test()``` и получит ошибку, сервер выполнит этот триггер и "
"запишет в журнал **\"User *имя_пользователя* tried to Execute function "
"test without required privileges\"** (Пользователь *имя_пользователя* "
"пытался выполнить функцию текст без соответствующих прав)."
