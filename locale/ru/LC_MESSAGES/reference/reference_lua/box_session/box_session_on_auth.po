
msgid "box.session.on_auth()"
msgstr ""

msgid ""
"Define a trigger for execution during ref:`authentication "
"<authentication-users>`."
msgstr ""
"Определение триггера, используемого во время :ref:`аутентификации "
"<authentication-users>`."

msgid "The ``on_auth`` trigger function is invoked in these circumstances:"
msgstr ""
"Вызов функции ``on_auth`` с триггером происходит в следующих "
"обстоятельствах:"

msgid ""
"The :ref:`console.connect <console-connect>` function includes an "
"authentication check for all users except 'guest'. For this case, the "
"``on_auth`` trigger function is invoked after the ``on_connect`` trigger "
"function, if and only if the connection has succeeded so far."
msgstr ""
"Функция :ref:`console.connect <console-connect>` включает в себя проверку"
" аутентификации всех пользователей, кроме 'guest'. Вызов функции "
"``on_auth`` с триггером происходит после триггера ``on_connect`` только в"
" том случае, если подключение было успешным."

msgid ""
"The :ref:`binary protocol <admin-security>` has a separate "
":ref:`authentication packet <box_protocol-authentication>`. For this "
"case, connection and authentication are considered to be separate steps."
msgstr ""
"В :ref:`бинарном протоколе <admin-security>` есть отдельный :ref:`пакет "
"для аутентификации <box_protocol-authentication>`. В этом случае "
"подключение и аутентификация считаются отдельными действиям."

msgid ""
"Unlike other trigger types, ``on_auth`` trigger functions are invoked "
"**before** the event. Therefore a trigger function like :code:`function "
"auth_function () v = box.session.user(); end` will set :code:`v` to "
"\"guest\", the user name before the authentication is done. To get the "
"user name **after** the authentication is done, use the special syntax: "
":code:`function auth_function (user_name) v = user_name; end`"
msgstr ""
"В отличие от других типов триггеров, вызов функций с триггером "
"``on_auth`` происходит **до** события. Таким образом, функция с таким "
"триггером, как :code:`function auth_function () v = box.session.user(); "
"end`, определит :code:`v` как \"guest\", то есть имя пользователя до "
"проведения аутентификации. Чтобы получить имя пользователя **после** "
"проведения аутентификации, используйте специальный синтаксис: "
":code:`function auth_function (user_name) v = user_name; end`"

msgid ""
"If the trigger fails by raising an error, the error is sent to the client"
" and the connection is closed."
msgstr ""
"Если триггер не выполняется и выдает ошибку, эта ошибка отправляется на "
"клиент, и подключение разрывается."

msgid "Parameters"
msgstr "Параметры"

msgid "function which will become the trigger function"
msgstr "функция, в которой будет триггер"

msgid "existing trigger function which will be replaced by trigger-function"
msgstr "существующая функция с триггером, которую заменит новая"

msgid "return"
msgstr "возвращает"

msgid "nil or function pointer"
msgstr "nil или указатель функции"

msgid ""
"If the parameters are (nil, old-trigger-function), then the old trigger "
"is deleted."
msgstr ""
"Если указаны параметры (nil, old-trigger-function), старый триггер будет "
"удален."

msgid ""
"If both parameters are omitted, then the response is a list of existing "
"trigger functions."
msgstr ""
"Если не указан ни один параметр, ответом будет список существующих "
"функций с триггером."

msgid ""
"Details about trigger characteristics are in the :ref:`triggers "
"<triggers-box_triggers>` section."
msgstr ""
"Подробная информация о характеристиках триггера находится в разделе "
":ref:`Триггеры <triggers-box_triggers>`."

msgid "**Example 1**"
msgstr "**Пример 1**"

msgid ""
"tarantool> function f ()\n"
"         >   x = x + 1\n"
"         > end\n"
"tarantool> box.session.on_auth(f)"
msgstr ""

msgid "**Example 2**"
msgstr "**Пример 2**"

msgid "This is a more complex example, with two server instances."
msgstr "Более сложный пример с двумя экземплярами сервера."

msgid ""
"The first server instance listens on port 3301; its default user name is "
"'admin'. There are three ``on_auth`` triggers:"
msgstr ""
"Первый экземпляр сервера настроен на прослушивание по порту 3301; имя "
"пользователя по умолчанию -- 'admin'. Есть три триггера ``on_auth``:"

msgid ""
"The first trigger has a function with no arguments, it can only look at "
"``box.session.user()``."
msgstr ""
"В первом триггере есть функция без аргументов, которая только смотрит на "
"``box.session.user()``."

msgid ""
"The second trigger has a function with a ``user_name`` argument, it can "
"look at both of: ``box.session.user()`` and ``user_name``."
msgstr ""
"Во втором триггере есть функция с аргументом ``user_name``, которая может"
" смотреть на ``box.session.user()`` и ``user_name``."

msgid ""
"The third trigger has a function with a ``user_name`` argument and a "
"``status`` argument, it can look at all three of: ``box.session.user()`` "
"and ``user_name`` and ``status``."
msgstr ""
"В третьем триггере есть функция с аргументом ``user_name`` и аргументом "
"``status``, которая может смотреть на ``box.session.user()`` и "
"``user_name``, и``status``."

msgid ""
"The second server instance will connect with :ref:`console.connect "
"<console-connect>`, and then will cause a display of the variables that "
"were set by the trigger functions."
msgstr ""
"Второй экземпляр сервера подключится по :ref:`console.connect <console-"
"connect>`, а затем отобразит переменные, определенные функциями с "
"триггером."

msgid ""
"-- On the first server instance, which listens on port 3301\n"
"box.cfg{listen=3301}\n"
"function function1()\n"
"  print('function 1, box.session.user()='..box.session.user())\n"
"  end\n"
"function function2(user_name)\n"
"  print('function 2, box.session.user()='..box.session.user())\n"
"  print('function 2, user_name='..user_name)\n"
"  end\n"
"function function3(user_name, status)\n"
"  print('function 3, box.session.user()='..box.session.user())\n"
"  print('function 3, user_name='..user_name)\n"
"  if status == true then\n"
"    print('function 3, status = true, authorization succeeded')\n"
"    end\n"
"  end\n"
"box.session.on_auth(function1)\n"
"box.session.on_auth(function2)\n"
"box.session.on_auth(function3)\n"
"box.schema.user.passwd('admin')"
msgstr ""
"-- На первом экземпляре сервера, прослушивание на котором настроено на "
"порт 3301\n"
"box.cfg{listen=3301}\n"
"function function1()\n"
"  print('function 1, box.session.user()='..box.session.user())\n"
"  end\n"
"function function2(user_name)\n"
"  print('function 2, box.session.user()='..box.session.user())\n"
"  print('function 2, user_name='..user_name)\n"
"  end\n"
"function function3(user_name, status)\n"
"  print('function 3, box.session.user()='..box.session.user())\n"
"  print('function 3, user_name='..user_name)\n"
"  if status == true then\n"
"    print('function 3, status = true, authorization succeeded')\n"
"    end\n"
"  end\n"
"box.session.on_auth(function1)\n"
"box.session.on_auth(function2)\n"
"box.session.on_auth(function3)\n"
"box.schema.user.passwd('admin')"

msgid ""
"-- On the second server instance, that connects to port 3301\n"
"console = require('console')\n"
"console.connect('admin:admin@localhost:3301')"
msgstr ""
"-- На втором экземпляре сервера, который подключается по порту 3301\n"
"console = require('console')\n"
"console.connect('admin:admin@localhost:3301')"

msgid "The result looks like this:"
msgstr "Теперь результат выглядит следующим образом:"

msgid ""
"function 3, box.session.user()=guest\n"
"function 3, user_name=admin\n"
"function 3, status = true, authorization succeeded\n"
"function 2, box.session.user()=guest\n"
"function 2, user_name=admin\n"
"function 1, box.session.user()=guest"
msgstr ""
