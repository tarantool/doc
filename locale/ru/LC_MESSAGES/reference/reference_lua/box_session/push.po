
msgid "box.session.push()"
msgstr ""

msgid ""
"Generate an out-of-band message. By \"out-of-band\" we mean an extra "
"message which supplements what is passed in a network via the usual "
"channels. Although ``box.session.push()`` can be called at any time, in "
"practice it is used with networks that are set up with :ref:`module "
"net.box <net_box-module>`, and it is invoked by the server (on the "
"\"remote database system\" to use our terminology for net.box), and the "
"client has options for getting such messages."
msgstr ""
"Создание внеполосного сообщения. Под внеполосным мы понимаем "
"дополнительное сообщение, которое дополняет то, что отправляется в сети "
"по обычным каналам. Хотя ``box.session.push()`` можно вызвать в любое "
"время, на практике эта функция используется в сетях, настроенных с "
"помощью :ref:`модуля net.box <net_box-module>`, и вызывается сервером (на"
" \"удаленной системе с базой данных\", если использовать нашу "
"терминологию для net.box), а у клиента есть возможность принимать такие "
"сообщения."

msgid "This function returns an error if the session is disconnected."
msgstr "Функция возвращает ошибку, если сессия была прервана."

msgid "Parameters"
msgstr "Параметры"

msgid "what to send"
msgstr "что отправляется"

msgid ""
"an optional argument to indicate what the session is, as taken from an "
"earlier call to :doc:`/reference/reference_lua/box_session/sync`. If it "
"is omitted, the default is the current ``box.session.sync()`` value."
msgstr ""
"необязательный аргумент, который показывает информацию о сессии, "
"полученную из предшествующего вызова "
":doc:`/reference/reference_lua/box_session/sync`. Если не указать, по "
"умолчанию используется текущее значение ``box.session.sync()``."

msgid "rtype"
msgstr "тип возвращаемого значения"

msgid "{nil, error} or true:"
msgstr "{nil, ошибка} или true:"

msgid ""
"If the result is an error, then the first part of the return is ``nil`` "
"and the second part is the error object."
msgstr ""
"Если результатом будет ошибка, то вернется ``nil`` вместе с объектом "
"ошибки."

msgid ""
"If the result is not an error, then the return is the boolean value "
"``true``."
msgstr ""
"Если результатом будет не ошибка, то вернется логическое значение "
"``true`` (правда)."

msgid ""
"When the return is ``true``, the message has gone to the network buffer "
"as a :ref:`packet <box_protocol-iproto_protocol>` with the code "
"IPROTO_CHUNK (0x80)."
msgstr ""
"Если возвращается ``true``, сообщение отправлено в буфер сети в виде "
":ref:`пакета <box_protocol-iproto_protocol>` с кодом IPROTO_CHUNK (0x80)."

msgid ""
"The server's sole job is to call ``box.session.push()``, there is no "
"automatic mechanism for showing that the message was received."
msgstr ""
"Единственная задача сервера -- вызвать ``box.session.push()``, поскольку "
"нет автоматического механизма, который показал бы, что сообщение "
"получено."

msgid ""
"The client's job is to check for such messages after it sends something "
"to the server. The major client methods -- :ref:`conn:call <net_box-"
"call>`, :ref:`conn:eval <net_box-eval>`, :ref:`conn:select <conn-"
"select>`, :ref:`conn:insert <conn-insert>`, :ref:`conn:replace <conn-"
"replace>`, :ref:`conn:update <conn-update>`, :ref:`conn:upsert <conn-"
"upsert>`, :ref:`delete <conn-delete>` -- may cause the server to send a "
"message."
msgstr ""
"Задача клиента заключается в том, чтобы проверять наличие таких сообщений"
" после отправки чего-либо на сервер. Основные клиентские методы -- "
":ref:`conn:call <net_box-call>`, :ref:`conn:eval <net_box-eval>`, "
":ref:`conn:select <conn-select>`, :ref:`conn:insert <conn-insert>`, "
":ref:`conn:replace <conn-replace>`, :ref:`conn:update <conn-update>`, "
":ref:`conn:upsert <conn-upsert>`, :ref:`delete <conn-delete>` -- могут "
"привести к отправке такого сообщения сервером."

msgid ""
"Situation 1: when the client calls synchronously with the default "
"``{async=false}`` option. There are two optional additional options: "
":samp:`on_push={function-name}`, and :samp:`on_push_ctx={function-"
"argument}`. When the client receives an out-of-band message for the "
"session, it invokes \"function-name(function-argument)\". For example, "
"with options ``{on_push=table.insert, on_push_ctx=messages}``, the client"
" will insert whatever it receives into a table named 'messages'."
msgstr ""
"Ситуация 1: когда клиент делает синхронный вызов со значением параметра "
"``{async=false}`` по умолчанию. Есть два необязательных дополнительных "
"параметра: :samp:`on_push={function-name}` и :samp:`on_push_ctx"
"={function-argument}`. Когда клиент получает внеполосное сообщение в "
"сессии, он вызывает \"имя-функции(аргумент-функции)\". Например, с такими"
" значениями параметров: ``{on_push=table.insert, on_push_ctx=messages}`` "
"-- клиент произведет вставку полученных данных в таблицу под названием "
"'messages'."

msgid ""
"Situation 2: when the client calls asynchronously with the non-default "
"``{async=true}`` option. Here ``on_push`` and ``on_push_ctx`` are not "
"allowed, but the messages can be seen by calling ``pairs()`` in a loop."
msgstr ""
"Ситуация 2: когда клиент делает асинхронный вызов с измененным значением "
"параметра ``{async=true}``. Здесь не разрешены ``on_push`` и "
"``on_push_ctx``, но сообщения можно увидеть путем вызова ``pairs()`` в "
"цикле."

msgid ""
"Situation 2 complication: ``pairs()`` is subject to timeout. So there is "
"an optional argument = timeout per iteration. If timeout occurs before "
"there is a new message or a final response, there is an error return. To "
"check for an error one can use the first loop parameter (if the loop "
"starts with \"for i, message in future:pairs()\" then the first loop "
"parameter is i). If it is ``box.NULL`` then the second parameter (in our "
"example, \"message\") is the error object."
msgstr ""
"Осложненная ситуация 2: ``pairs()`` зависит от времени ожидания. Таким "
"образом, есть необязательный аргумент -- время ожидания для итерации. "
"Если время ожидания истечет до получения нового сообщения или "
"окончательного ответа, вернется ошибка. Чтобы проверить наличие ошибки, "
"можно использовать первый параметр в цикле (если цикл начинается с \"for "
"i, message in future:pairs()\", то первым параметром в цикле будет i). "
"Если это будет ``box.NULL``, то второй параметр (в нашем примере "
"\"message\") -- это объект ошибки."

msgid "**Example:**"
msgstr "**Пример:**"

msgid ""
"-- Make two shells. On Shell#1 set up a \"server\", and\n"
"-- in it have a function that includes box.session.push:\n"
"box.cfg{listen=3301}\n"
"box.schema.user.grant('guest','read,write,execute','universe')\n"
"x = 0\n"
"fiber = require('fiber')\n"
"function server_function() x=x+1; fiber.sleep(1); box.session.push(x); "
"end\n"
"\n"
"-- On Shell#2 connect to this server as a \"client\" that\n"
"-- can handle Lua (such as another Tarantool server operating\n"
"-- as a client), and initialize a table where we'll get messages:\n"
"net_box = require('net.box')\n"
"conn = net_box.connect(3301)\n"
"messages_from_server = {}\n"
"\n"
"-- On Shell#2 remotely call the server function and receive\n"
"-- a SYNCHRONOUS out-of-band message:\n"
"conn:call('server_function', {},\n"
"          {is_async = false,\n"
"           on_push = table.insert,\n"
"           on_push_ctx = messages_from_server})\n"
"messages_from_server\n"
"-- After a 1-second pause that is caused by the fiber.sleep()\n"
"-- request inside server_function, the result in the\n"
"--  messages_from_server table will be: 1. Like this:\n"
"-- tarantool> messages_from_server\n"
"-- ---\n"
"-- - - 1\n"
"-- ...\n"
"-- Good. That shows that box.session.push(x) worked,\n"
"-- because we know that x was 1.\n"
"\n"
"-- On Shell#2 remotely call the same server function and\n"
"-- get an ASYNCHRONOUS out-of-band message. For this we cannot\n"
"-- use on_push and on_push_ctx options, but we can use pairs():\n"
"future = conn:call('server_function', {}, {is_async = true})\n"
"messages = {}\n"
"keys = {}\n"
"for i, message in future:pairs() do\n"
"    table.insert(messages, message) table.insert(keys, i) end\n"
"messages\n"
"future:wait_result(1000)\n"
"for i, message in future:pairs() do\n"
"    table.insert(messages, message) table.insert(keys, i) end\n"
"messages\n"
"-- There is no pause because conn:call does not wait for\n"
"-- server_function to finish. The first time that we go through\n"
"-- the pairs() loop, we see the messages table is empty. Like this:\n"
"-- tarantool> messages\n"
"-- ---\n"
"-- - - 2\n"
"--   - []\n"
"-- ...\n"
"-- That is okay because the server hasn't yet called\n"
"-- box.session.push(). The second time that we go through\n"
"-- the pairs() loop, we see the value of x at the time of\n"
"-- the second call to box.session.push(). Like this:\n"
"-- tarantool> messages\n"
"-- ---\n"
"-- - - 2\n"
"--   - &0 []\n"
"--   - 2\n"
"--   - *0\n"
"-- ...\n"
"-- Good. That shows that the message was asynchronous, and\n"
"-- that box.session.push() did its job."
msgstr ""
"-- Создайте две оболочки. В оболочке №1 настройте сервер, а\n"
"-- в нем функцию, которая содержит box.session.push:\n"
"box.cfg{listen=3301}\n"
"box.schema.user.grant('guest','read,write,execute','universe')\n"
"x = 0\n"
"fiber = require('fiber')\n"
"function server_function() x=x+1; fiber.sleep(1); box.session.push(x); "
"end\n"
"\n"
"-- В оболочке №2 подключитесь к серверу в качестве клиента, который\n"
"-- поддерживает Lua (как второй Tarantool-сервер, работающий\n"
"-- в качестве клиента), и создайте таблицу, в которую мы будем получать "
"сообщения:\n"
"net_box = require('net.box')\n"
"conn = net_box.connect(3301)\n"
"messages_from_server = {}\n"
"\n"
"-- В оболочке №2 удаленно вызовите функцию и получите\n"
"-- СИНХРОННОЕ внеполосное сообщение:\n"
"conn:call('server_function', {},\n"
"          {is_async = false,\n"
"           on_push = table.insert,\n"
"           on_push_ctx = messages_from_server})\n"
"messages_from_server\n"
"-- Через секунду, во время которой происходит запрос fiber.sleep()\n"
"-- в server_function, результат в таблице\n"
"--  messages_from_server будет следующим: 1. Проверим:\n"
"-- tarantool> messages_from_server\n"
"-- ---\n"
"-- - - 1\n"
"-- ...\n"
"-- Хорошо. Это означает, что box.session.push(x) сработала,\n"
"-- поскольку мы знаем, что x был 1.\n"
"\n"
"-- В оболочке №2 удаленно вызовите ту же самую функцию\n"
"-- для получения АСИНХРОННОГО внеполосного сообщения. При этом мы не "
"можем\n"
"-- использовать параметры on_push и on_push_ctx, но можем использовать "
"pairs():\n"
"future = conn:call('server_function', {}, {is_async = true})\n"
"messages = {}\n"
"keys = {}\n"
"for i, message in future:pairs() do\n"
"    table.insert(messages, message) table.insert(keys, i) end\n"
"messages\n"
"future:wait_result(1000)\n"
"for i, message in future:pairs() do\n"
"    table.insert(messages, message) table.insert(keys, i) end\n"
"messages\n"
"-- Задержки нет, поскольку conn:call не ждет\n"
"-- окончания вызова функции server_function. После первой итерации\n"
"-- цикла pairs(), видим, что таблица пуста. Это выглядит так:\n"
"-- tarantool> messages\n"
"-- ---\n"
"-- - - 2\n"
"--   - []\n"
"-- ...\n"
"-- Это нормально, поскольку сервер еще не вызвал\n"
"-- box.session.push(). При второй итерации\n"
"-- цикла pairs(), видим значение x во время\n"
"-- второго вызова box.session.push(). Так:\n"
"-- tarantool> messages\n"
"-- ---\n"
"-- - - 2\n"
"--   - &0 []\n"
"--   - 2\n"
"--   - *0\n"
"-- ...\n"
"-- Хорошо. Это означает, что сообщение было асинхронным, и\n"
"-- box.session.push() выполнила свою задачу."
