
msgid "box.space._func"
msgstr ""

msgid ""
"``_func`` is a system space with function tuples made by "
":ref:`box.schema.func.create() <box_schema-func_create>` or "
":ref:`box.schema.func.create(func-name [, {options-with-body}]) "
"<box_schema-func_create_with-body>`."
msgstr ""
"``_func`` -- это системный спейс, который содержит кортежи с функциями, "
"созданными с помощью :ref:`box.schema.func.create() <box_schema-"
"func_create>` или :ref:`box.schema.func.create(func-name [, {options-"
"with-body}]) <box_schema-func_create_with-body>`."

msgid "Tuples in this space contain the following fields:"
msgstr "Кортежи в данном спейсе включают в себя следующие поля:"

msgid "id (integer identifier),"
msgstr ""

msgid "owner (integer identifier),"
msgstr ""

msgid "the function name,"
msgstr "имя функции,"

msgid "the setuid flag,"
msgstr ""

msgid "a language name (optional): 'LUA' (default) or 'C'."
msgstr "название языка (необязательно): 'LUA' (по умолчанию) or 'C'."

msgid "the body"
msgstr ""

msgid "the is_deterministic flag"
msgstr ""

msgid "the is_sandboxed flag"
msgstr ""

msgid "options"
msgstr ""

#, fuzzy
msgid ""
"If the function tuple was made in the older way without specification of "
"``body``, then the ``_func`` space will contain default values for the "
"body and the is_deterministic flag and the is_sandboxed flag. Such "
"function tuples are called \"not persistent\". You continue to create Lua"
" functions in the usual way, by saying ``function function_name () ... "
"end``, without adding anything in the ``_func`` space. The ``_func`` "
"space only exists for storing function tuples so that their names can be "
"used within :ref:`grant/revoke <authentication-owners_privileges>` "
"functions."
msgstr ""
"Спейс ``_func`` не содержит саму функцию. Lua-функции создаются "
"по-прежнему с помощью ``function имя_функции () ... end`` без каких-либо "
"добавлений в спейс ``_func``. Спейс ``_func`` предназначен лишь для "
"хранения кортежей с функциями так, чтобы их имена могли использоваться в "
"функциях :ref:`выдачи/отмены прав <authentication-owners_privileges>`."

msgid ""
"If the function tuple was made the newer way with specification of "
"``body``, then all the fields may contain non-default values. Such "
"functions are called \"persistent\". They should be invoked with "
":samp:`box.func.{func-name}:call([parameters])`."
msgstr ""

msgid "You can:"
msgstr "Доступны следующие операции:"

msgid ""
"Create a ``_func`` tuple with "
":doc:`/reference/reference_lua/box_schema/func_create`,"
msgstr ""
"Создание кортежа в ``_func`` с помощью "
":doc:`/reference/reference_lua/box_schema/func_create`,"

msgid ""
"Drop a ``_func`` tuple with "
":doc:`/reference/reference_lua/box_schema/func_drop`,"
msgstr ""
"Удаление кортежа в ``_func`` с помощью "
":doc:`/reference/reference_lua/box_schema/func_drop`,"

msgid ""
"Check whether a ``_func`` tuple exists with "
":doc:`/reference/reference_lua/box_schema/func_exists`."
msgstr ""
"Проверка наличия кортежа в ``_func`` с помощью "
":doc:`/reference/reference_lua/box_schema/func_exists`."

msgid "**Example:**"
msgstr "**Пример:**"

msgid ""
"In the following example, we create a function named ‘f7’, put it into "
"Tarantool's ``_func`` space and grant 'execute' privilege for this "
"function to 'guest' user."
msgstr ""
"В следующем примере создадим функцию с именем ‘f7’, поместим ее в спейс "
"``_func`` в Tarantool'е и выдадим права на 'выполнение' этой функции "
"пользователю 'guest'."

msgid ""
"tarantool> function f7()\n"
"         >  box.session.uid()\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> box.schema.func.create('f7')\n"
"---\n"
"...\n"
"tarantool> box.schema.user.grant('guest', 'execute', 'function', 'f7')\n"
"---\n"
"...\n"
"tarantool> box.schema.user.revoke('guest', 'execute', 'function', 'f7')\n"
"---\n"
"..."
msgstr ""
