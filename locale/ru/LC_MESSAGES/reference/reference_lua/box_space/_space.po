
msgid "box.space._space"
msgstr ""

msgid ""
"``_space`` is a system space. It contains all spaces hosted on the "
"current Tarantool instance, both system ones and created by users."
msgstr ""
"``_space`` – это системный спейс. Он содержит информацию о всех спейсах, "
"хранящихся в данном экземпляре Tarantool - как системные, так и созданные"
" пользователями."

msgid "Tuples in this space contain the following fields:"
msgstr ""

msgid "``id``,"
msgstr "``id``,"

msgid "``owner`` (= id of user who owns the space),"
msgstr "``owner`` (= идентификатор пользователя, которому принадлежит спейс),"

msgid "``name``, ``engine``, ``field_count``,"
msgstr "``name``, ``engine``, ``field_count``,"

msgid "``flags`` (e.g. temporary),"
msgstr "``flags`` (например, временный),"

#, fuzzy
msgid ""
"``format`` (as made by a :doc:`format clause "
"</reference/reference_lua/box_space/format>`)."
msgstr "``format`` (как задано через :ref:`оператор формата <box_space-format>`)."

#, fuzzy
msgid ""
"These fields are established by "
":doc:`/reference/reference_lua/box_schema/space_create`."
msgstr ""
"Эти поля определены с помощью :ref:`space.create() <box_schema-"
"space_create>`."

msgid "**Example #1:**"
msgstr ""

msgid ""
"The following function will display every simple field in all tuples of "
"``_space``."
msgstr ""
"Следующая функция отобразит все простые поля во всех кортежах спейса "
"``_space``."

msgid ""
"function example()\n"
"  local ta = {}\n"
"  local i, line\n"
"  for k, v in box.space._space:pairs() do\n"
"    i = 1\n"
"    line = ''\n"
"    while i <= #v do\n"
"      if type(v[i]) ~= 'table' then\n"
"        line = line .. v[i] .. ' '\n"
"      end\n"
"    i = i + 1\n"
"    end\n"
"    table.insert(ta, line)\n"
"  end\n"
"  return ta\n"
"end"
msgstr ""

msgid "Here is what ``example()`` returns in a typical installation:"
msgstr "Вот что при обычной установке вернет ``example()``:"

msgid ""
"tarantool> example()\n"
"---\n"
"- - '272 1 _schema memtx 0  '\n"
"  - '280 1 _space memtx 0  '\n"
"  - '281 1 _vspace sysview 0  '\n"
"  - '288 1 _index memtx 0  '\n"
"  - '296 1 _func memtx 0  '\n"
"  - '304 1 _user memtx 0  '\n"
"  - '305 1 _vuser sysview 0  '\n"
"  - '312 1 _priv memtx 0  '\n"
"  - '313 1 _vpriv sysview 0  '\n"
"  - '320 1 _cluster memtx 0  '\n"
"  - '512 1 tester memtx 0  '\n"
"  - '513 1 origin vinyl 0  '\n"
"  - '514 1 archive memtx 0  '\n"
"..."
msgstr ""

msgid "**Example #2:**"
msgstr ""

#, fuzzy
msgid ""
"The following requests will create a space using "
"``box.schema.space.create()`` with a :doc:`format clause "
"</reference/reference_lua/box_space/format>`, then retrieve the "
"``_space`` tuple for the new space. This illustrates the typical use of "
"the ``format`` clause, it shows the recommended names and data types for "
"the fields."
msgstr ""
"Следующая серия запросов создаст спейс, используя "
"``box.schema.space.create()`` с :ref:`оператором формата <box_space-"
"format>`, затем выберет кортеж из ``_space`` для нового спейса. Этот "
"пример иллюстрирует стандартное применение оператора ``format``, "
"показывая рекомендованные имена и типы данных для полей."

msgid ""
"tarantool> box.schema.space.create('TM', {\n"
"         >   id = 12345,\n"
"         >   format = {\n"
"         >     [1] = {[\"name\"] = \"field_1\"},\n"
"         >     [2] = {[\"type\"] = \"unsigned\"}\n"
"         >   }\n"
"         > })\n"
"---\n"
"- index: []\n"
"  on_replace: 'function: 0x41c67338'\n"
"  temporary: false\n"
"  id: 12345\n"
"  engine: memtx\n"
"  enabled: false\n"
"  name: TM\n"
"  field_count: 0\n"
"- created\n"
"...\n"
"tarantool> box.space._space:select(12345)\n"
"---\n"
"- - [12345, 1, 'TM', 'memtx', 0, {}, [{'name': 'field_1'}, {'type': "
"'unsigned'}]]\n"
"..."
msgstr ""
