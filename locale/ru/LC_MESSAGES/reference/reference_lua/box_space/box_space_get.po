
msgid "space_object:get()"
msgstr ""

msgid "Search for a tuple in the given space."
msgstr "Поиск кортежа в данном спейсе."

msgid "Parameters"
msgstr "Параметры"

msgid "an :ref:`object reference <app_server-object_reference>`"
msgstr "ref:`ссылка на объект <app_server-object_reference>`"

msgid "value to be matched against the index key, which may be multi-part."
msgstr "значение должно совпасть с индексным ключом, который может быть составным."

msgid "return"
msgstr "возвращает"

msgid "the tuple whose index key matches ``key``, or ``nil``."
msgstr "кортеж, ключ индекса в котором совпадает с ``key`` или ``nil``."

msgid "rtype"
msgstr "тип возвращаемого значения"

msgid "tuple"
msgstr ""

msgid "**Possible errors:** ``space_object`` does not exist."
msgstr "**Возможные ошибки:** ``space_object`` не существует"

msgid ""
"**Complexity factors:** Index size, Index type, Number of indexes "
"accessed, WAL settings."
msgstr ""
"**Факторы сложности** Размер индекса, тип индекса, количество индексов, к"
" которым получен доступ, настройки журнала упреждающей записи (WAL)."

msgid ""
"The ``box.space...select`` function returns a set of tuples as a Lua "
"table; the ``box.space...get`` function returns at most a single tuple. "
"And it is possible to get the first tuple in a space by appending "
"``[1]``. Therefore ``box.space.tester:get{1}`` has the same effect as "
"``box.space.tester:select{1}[1]``, if exactly one tuple is found."
msgstr ""
"Функция ``box.space...select`` вернет набор кортежей в виде Lua-таблицы; "
"функция ``box.space...get`` вернет самое большее один кортеж. Можно "
"получить первый кортеж в спейсе, добавив ``[1]``. Таким образом, "
"``box.space.tester:get{1}`` эквивалентна "
"``box.space.tester:select{1}[1]``, если найден только один кортеж."

msgid "**Example:**"
msgstr "**Пример:**"

msgid "box.space.tester:get{1}"
msgstr "box.space.tester:get{1}"

msgid ""
"**Using field names instead of field numbers:** `get()` can use field "
"names described by the optional :ref:`space_object:format() <box_space-"
"format>` clause. This is similar to a standard Lua feature, where a "
"component can be referenced by its name instead of its number. For "
"example, we can format the `tester` space with a field named `x` and use "
"the name `x` in the index definition:"
msgstr ""
"**Использование имен полей вместо номеров полей:** в `get()` можно "
"использовать имена полей, описанные в необязательном операторе "
":ref:`space_object:format() <box_space-format>`. Это аналогично "
"стандартной Lua-функции, где на компонент можно ссылаться по имени, а не "
"по номеру. Например, может форматировать спейс `tester` с полем под "
"названием `x` и использовать имя `x` в определении индекса:"

msgid ""
"box.space.tester:format({{name='x',type='scalar'}})\n"
"box.space.tester:create_index('I',{parts={'x'}})"
msgstr ""
"box.space.tester:format({{name='x',type='scalar'}})\n"
"box.space.tester:create_index('I',{parts={'x'}})"

msgid ""
"Then, if ``get`` or ``select`` retrieve a single tuple, we can reference "
"the field 'x' in the tuple by its name:"
msgstr ""
"Тогда если ``get`` или ``select`` вернут отдельный кортеж, можно "
"сослаться на поле 'x' в кортеже по имени:"

msgid ""
"box.space.tester:get{1}['x']\n"
"box.space.tester:select{1}[1]['x']"
msgstr ""
"box.space.tester:get{1}['x']\n"
"box.space.tester:select{1}[1]['x']"
