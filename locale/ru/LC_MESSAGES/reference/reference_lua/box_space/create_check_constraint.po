msgid ""
msgstr ""
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"X-Crowdin-Project: tarantool-docs\n"
"X-Crowdin-Project-ID: 442986\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /en/reference/reference_lua/box_space/create_check_constraint.pot\n"
"X-Crowdin-File-ID: 1092\n"
"Project-Id-Version: tarantool-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Russian\n"
"Language: ru_RU\n"
"PO-Revision-Date: 2021-04-13 22:32\n"

msgid "box.space.create_check_constraint()"
msgstr "box.space.create_check_constraint()"

msgid "Create a check constraint. A check constraint is a requirement that must be met when a tuple is inserted or updated in a space. Check constraints created with ``space_object:create_check_constraint`` have the same effect as check constraints created with an SQL CHECK() clause in a :ref:`CREATE TABLE statement <sql_create_table>`."
msgstr "Создание проверочного ограничения. Проверочное ограничение — это требование, которое должно соблюдаться при вставке или обновлении кортежа в спейсе. Проверочные ограничения, созданные с помощью ``space_object:create_check_constraint`` действуют так же, как проверочные ограничения, которые были созданы при помощи оператора SQL CHECK() в :ref:`выражении CREATE TABLE <sql_create_table>`."

msgid "Parameters"
msgstr "Параметры"

msgid "an :ref:`object reference <app_server-object_reference>`"
msgstr ":ref:`ссылка на объект <app_server-object_reference>`"

msgid "name of check constraint, which should conform to the :ref:`rules for object names <app_server-names>`"
msgstr "имя проверочного ограничения, которое должно соответствовать :ref:`правилам именования объектов <app_server-names>`"

msgid "SQL code of an expression which must return a boolean result"
msgstr "SQL-код выражения, которое должно возвращать результат типа boolean"

msgid "return"
msgstr "возвращает"

msgid "check constraint object"
msgstr "объект проверочного ограничения"

msgid "rtype"
msgstr "тип возвращаемого значения"

msgid "check_constraint_object"
msgstr "check_constraint_object"

msgid "The space must be formatted with :doc:`/reference/reference_lua/box_space/format` so that the expression can contain field names. The space must be empty. The space must not be a system space."
msgstr "Спейс должен быть форматирован с помощью :doc:`/reference/reference_lua/box_space/format`, чтобы выражение могло содержать имена полей. Спейс должен быть пустым. Спейс не должен быть системным."

msgid "The expression must return true or false and should be deterministic. The expression may be any SQL (not Lua) expression containing field names, built-in function names, literals, and operators. Not subqueries. If a field name contains lower case characters, it must be enclosed in \"double quotes\"."
msgstr "Выражение должно возвращать true или false и должно быть детерминированным. Это может быть любое SQL-выражение (не Lua), которое содержит имена полей, встроенные имена функций, литералы и операторы. Не подзапросы. Если имя поля содержит символы нижнего регистра, его следует заключить в \"двойные кавычки\"."

msgid "Check constraints are checked before the request is performed, at the same time as Lua :doc:`before_replace triggers </reference/reference_lua/box_space/before_replace>`. If there is more than one check constraint or before_replace trigger, then they are ordered according to time of creation. (This is a change from the earlier behavior of check constraints, which caused checking before the tuple was formed.)"
msgstr "Проверка ограничений производится перед выполнением запроса, одновременно с Lua-триггерами :doc:`before_replace </reference/reference_lua/box_space/before_replace>`. При наличии двух и более проверочных ограничений или триггеров before_replace они упорядочиваются по времени создания. (Это изменение предыдущего поведения проверочных ограничений, которое вызывало проверку до формирования кортежа)."

msgid "Check constraints can be dropped with :samp:`{space_object}.ck_constraint.{check_constraint_name}:drop()`."
msgstr "Проверочные ограничения можно удалить с помощью :samp:`{space_object}.ck_constraint.{check_constraint_name}:drop()`."

msgid "Check constraints can be disabled with :samp:`{space_object}.ck_constraint.{check_constraint_name}:enable(false)` or :samp:`{check_constraint_object}:enable(false)`. Check constraints can be enabled with :samp:`{space_object}.ck_constraint.{check_constraint_name}:enable(true)` or :samp:`{check_constraint_object}:enable(true)`. By default a check constraint is 'enabled' which means that the check is performed whenever the request is performed, but can be changed to 'disabled' which means that the check is not performed."
msgstr "Проверочные ограничения можно отключить с помощью :samp:`{space_object}.ck_constraint.{check_constraint_name}:enable(false)` или :samp:`{check_constraint_object}:enable(false)`. Проверочные ограничения можно включить с помощью :samp:`{space_object}.ck_constraint.{check_constraint_name}:enable(true)` или :samp:`{check_constraint_object}:enable(true)`. По умолчанию, проверочное ограничение включено, то есть при выполнении запроса производится проверка, но его можно отключить, то есть проверка производиться не будет."

msgid "During the recovery process, for example when the Tarantool server is starting, the check is not performed unless :ref:`force_recovery <cfg_binary_logging_snapshots-force_recovery>`. is specified."
msgstr "В процессе восстановления, например при запуске Tarantool-сервера, проверка производится, только если указан параметр :ref:`force_recovery <cfg_binary_logging_snapshots-force_recovery>`."

msgid "**Example:**"
msgstr "**Пример:**"

msgid "box.schema.space.create('t')\n"
"box.space.t:format({{name = 'f1', type = 'unsigned'},\n"
"                    {name = 'f2', type = 'string'},\n"
"                    {name = 'f3', type = 'string'}})\n"
"box.space.t:create_index('i')\n"
"box.space.t:create_check_constraint('c1', [[\"f2\" > 'A']])\n"
"box.space.t:create_check_constraint('c2',\n"
"                        [[\"f2\"=UPPER(\"f3\") AND NOT \"f2\" LIKE '__']])\n"
"-- This insert will fail, constraint c1 expression returns false\n"
"box.space.t:insert{1, 'A', 'A'}\n"
"-- This insert will fail, constraint c2 expression returns false\n"
"box.space.t:insert{1, 'B', 'c'}\n"
"-- This insert will succeed, both constraint expressions return true\n"
"box.space.t:insert{1, 'B', 'b'}\n"
"-- This update will fail, constraint c2 expression returns false\n"
"box.space.t:update(1, {{'=', 2, 'xx'}, {'=', 3, 'xx'}})"
msgstr "box.schema.space.create('t')\n"
"box.space.t:format({{name = 'f1', type = 'unsigned'},\n"
"                    {name = 'f2', type = 'string'},\n"
"                    {name = 'f3', type = 'string'}})\n"
"box.space.t:create_index('i')\n"
"box.space.t:create_check_constraint('c1', [[\"f2\" > 'A']])\n"
"box.space.t:create_check_constraint('c2',\n"
"                        [[\"f2\"=UPPER(\"f3\") AND NOT \"f2\" LIKE '__']])\n"
"-- Этот запрос вставки не выполнится, выражение с ограничением c1 возвращает false\n"
"box.space.t:insert{1, 'A', 'A'}\n"
"-- Этот запрос вставки не выполнится, выражение с ограничением c2 возвращает false\n"
"box.space.t:insert{1, 'B', 'c'}\n"
"-- Этот запрос вставки выполнится, оба выражения с ограничениями возвращают true\n"
"box.space.t:insert{1, 'B', 'b'}\n"
"-- Этот запрос обновления не выполнится, выражение с ограничением c2 возвращает false\n"
"box.space.t:update(1, {{'=', 2, 'xx'}, {'=', 3, 'xx'}})"

msgid "A list of check constraints is in :doc:`/reference/reference_lua/box_space/_ck_constraint`."
msgstr "Список проверочных ограничений представлен в :doc:`/reference/reference_lua/box_space/_ck_constraint`."

