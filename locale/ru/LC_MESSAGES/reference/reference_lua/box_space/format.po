
msgid "space_object:format()"
msgstr ""

msgid "Declare field names and :ref:`types <index-box_data-types>`."
msgstr "Объявление имен и :ref:`типов <index-box_data-types>` полей."

msgid "Parameters"
msgstr "Параметры"

msgid "an :ref:`object reference <app_server-object_reference>`"
msgstr "ref:`ссылка на объект <app_server-object_reference>`"

msgid "a list of field names and types"
msgstr "список имен и типов полей"

msgid "return"
msgstr "возвращает"

msgid "nil, unless format-clause is omitted"
msgstr "nil, если не указан оператор формата"

msgid "**Possible errors:**"
msgstr "**Возможные ошибки:**"

msgid "``space_object`` does not exist;"
msgstr "``space_object`` не существует,"

msgid "field names are duplicated;"
msgstr "дублируются имена полей;"

msgid "type is not legal."
msgstr "тип не поддерживается."

msgid ""
"Ordinarily Tarantool allows unnamed untyped fields. But with ``format`` "
"users can, for example, document that the Nth field is the surname field "
"and must contain strings. It is also possible to specify a format clause "
"in :doc:`box.schema.space.create() "
"</reference/reference_lua/box_schema/space_create>`."
msgstr ""
"Как правило, Tarantool допускает поля без имен и без указания типа. Но с "
"помощью ``format`` можно, например, задокументировать, что N-ное поле "
"представляет собой поле для фамилии и должно содержать строковое "
"значение. Также оператор формата можно указать в "
":doc:`box.schema.space.create() "
"</reference/reference_lua/box_schema/space_create>`."

msgid ""
"The format clause contains, for each field, a definition within braces: "
"``{name='...',type='...'[,is_nullable=...]}``, where:"
msgstr ""
"Оператор формата для каждого поля содержит определение в фигурных "
"скобках: ``{name='...',type='...'[,is_nullable=...]}``, где:"

msgid ""
"the ``name`` value may be any string, provided that two fields do not "
"have the same name;"
msgstr ""
"значение ``name`` может представлять собой любую строку при условии, что "
"у двух полей не будет одинаковых имен;"

msgid ""
"the ``type`` value may be any of allowed types: any | unsigned | string |"
" integer | number | boolean | array | map | scalar, but for creating an "
"index use only :ref:`indexed fields <index-box_indexed-field-types>`;"
msgstr ""
"значением ``type`` может быть любой из разрешенных типов: any | unsigned "
"| string | integer | number | boolean | array | map | scalar, но для "
"создания индекса следует использовать только :ref:`индексируемые типы "
"<index-box_indexed-field-types>`; "

msgid ""
"the optional ``is_nullable`` value may be either ``true`` or ``false`` "
"(the same as the requirement in :ref:`\"Options for "
"space_object:create_index\" <box_space-create_index-options>`). See also "
"the warning notice in section :ref:`Allowing null for an indexed key "
"<box_space-is_nullable>`."
msgstr ""
"значение необязательного параметра ``is_nullable`` может быть ``true`` "
"или ``false`` (такое же требование, как для :ref:`\"Параметров для "
"space_object:create_index\" <box_space-create_index-options>`). См. также"
" предупреждение в разделе :ref:`Разрешение использования нулевых значений"
" для индексируемого ключа<box_space-is_nullable>`."

msgid ""
"It is not legal for tuples to contain values that have the wrong type; "
"for example after ``box.space.tester:format({{' ',type='number'}})`` the "
"request ``box.space.tester:insert{'string-which-is-not-a-number'}`` will "
"cause an error."
msgstr ""
"В кортежах недопустимы значения неправильного типа; например, после "
"``box.space.tester:format({{' ',type='number'}})`` (тип = число) запрос "
"``box.space.tester:insert{'строка-которая-не-является-числом'}`` вызовет "
"ошибку."

msgid ""
"It is not legal for tuples to contain null values if "
"``is_nullable=false``, which is the default; for example after "
"``box.space.tester:format({{' ',type='number',is_nullable=false}})`` the "
"request ``box.space.tester:insert{nil,2}`` will cause an error."
msgstr ""
"В кортежах недопустимы нулевые значения, если ``is_nullable=false``, что "
"задано по умолчанию; например, после ``box.space.tester:format({{' "
"',type='number',is_nullable=false}})`` запрос "
"``box.space.tester:insert{nil,2}`` вызовет ошибку."

msgid ""
"It is legal for tuples to have more fields than are described by a format"
" clause. The way to constrain the number of fields is to specify a "
"space's :ref:`field_count <box_space-field_count>` member."
msgstr ""
"В кортежах может быть больше полей, чем описано в операторе формата. "
"Чтобы ограничить количество полей, необходимо указать элемент спейса "
":ref:`field_count <box_space-field_count>`."

msgid ""
"It is legal for tuples to have fewer fields than are described by a "
"format clause, if the omitted trailing fields are described with "
"``is_nullable=true``; for example after "
"``box.space.tester:format({{'a',type='number'},{'b',type='number',is_nullable=true}})``"
" the request ``box.space.tester:insert{2}`` will not cause a format-"
"related error."
msgstr ""
"В кортежах может быть меньше полей, чем описано в операторе формата, если"
" пропущенные завершающие поля описаны с помощью ``is_nullable=true``; "
"например после "
"``box.space.tester:format({{'a',type='number'},{'b',type='number',is_nullable=true}})``"
" запрос ``box.space.tester:insert{2}`` не приведет к ошибке формата."

msgid ""
"It is legal to use ``format`` on a space that already has a format, thus "
"replacing any previous definitions, provided that there is no conflict "
"with existing data or index definitions."
msgstr ""
"Можно использовать ``format`` для спейса, в котором уже определен формат,"
" заменяя таким образом предыдущие определения при условии, что нет "
"конфликта с существующими данными или определениями индекса."

msgid ""
"It is legal to use ``format`` to change the ``is_nullable`` flag; for "
"example after ``box.space.tester:format({{' "
"',type='scalar',is_nullable=false}})`` the request "
"``box.space.tester:format({{' ',type='scalar',is_nullable=true}})`` will "
"not cause an error -- and will not cause rebuilding of the space. But "
"going the other way and changing ``is_nullable`` from ``true`` to "
"``false`` might cause rebuilding and might cause an error if there are "
"existing tuples with nulls."
msgstr ""
"Можно использовать ``format`` для того, чтобы изменить значение флага "
"``is_nullable``; например, после ``box.space.tester:format({{' "
"',type='scalar',is_nullable=false}})`` запрос "
"``box.space.tester:format({{' ',type='scalar',is_nullable=true}})`` не "
"вызовет ошибку -- и не приведет к перестроению спейса. Но обратное "
"изменение значения ``is_nullable`` с ``true`` на ``false`` может вызвать "
"перестроение и привести к ошибке, если уже есть кортежи с нулевыми "
"значениями."

msgid "**Example:**"
msgstr "**Пример:**"

msgid ""
"box.space.tester:format({{name='surname',type='string'},{name='IDX',type='array'}})"
"\n"
"box.space.tester:format({{name='surname',type='string',is_nullable=true}})"
msgstr ""
"box.space.tester:format({{name='surname',type='string'},{name='IDX',type='array'}})"
"\n"
"box.space.tester:format({{name='surname',type='string',is_nullable=true}})"

msgid "There are legal variations of the format clause:"
msgstr "Можно использовать следующие варианты оператора:"

msgid "omitting both 'name=' and 'type=',"
msgstr "пропуск и 'name=', и 'type=',"

msgid "omitting 'type=' alone, and"
msgstr "пропуск 'type=' и"

msgid "adding extra braces."
msgstr "добавление дополнительных фигурных скобок."

msgid ""
"The following examples show all the variations, first for one field named"
" 'x', second for two fields named 'x' and 'y'."
msgstr ""
"В следующем примере иллюстрируются все варианты, первый для поля с именем"
" 'x', второй -- для двух полей с именами 'x' и 'y'."

msgid ""
"box.space.tester:format({{'x'}})\n"
"box.space.tester:format({{'x'},{'y'}})\n"
"box.space.tester:format({{name='x',type='scalar'}})\n"
"box.space.tester:format({{name='x',type='scalar'},{name='y',type='unsigned'}})"
"\n"
"box.space.tester:format({{name='x'}})\n"
"box.space.tester:format({{name='x'},{name='y'}})\n"
"box.space.tester:format({{'x',type='scalar'}})\n"
"box.space.tester:format({{'x',type='scalar'},{'y',type='unsigned'}})\n"
"box.space.tester:format({{'x','scalar'}})\n"
"box.space.tester:format({{'x','scalar'},{'y','unsigned'}})"
msgstr ""

msgid ""
"The following example shows how to create a space, format it with all "
"possible types, and insert into it."
msgstr ""
"В следующем примере показывается создание спейса, определение формата для"
" него со всеми возможными типа и вставка данных."

msgid ""
"tarantool> box.schema.space.create('t')\n"
"--- ...\n"
"tarantool> box.space.t:format({{name='1',type='any'},\n"
"         >                     {name='2',type='unsigned'},\n"
"         >                     {name='3',type='string'},\n"
"         >                     {name='4',type='number'},\n"
"         >                     {name='5',type='integer'},\n"
"         >                     {name='6',type='boolean'},\n"
"         >                     {name='7',type='scalar'},\n"
"         >                     {name='8',type='array'},\n"
"         >                     {name='9',type='map'}})\n"
"--- ...\n"
"tarantool> box.space.t:create_index('i',{parts={2,'unsigned'}})\n"
"--- ...\n"
"tarantool> box.space.t:insert{{'a'},      -- any\n"
"         >                    1,          -- unsigned\n"
"         >                    'W?',       -- string\n"
"         >                    5.5,        -- number\n"
"         >                    -0,         -- integer\n"
"         >                    true,       -- boolean\n"
"         >                    true,       -- scalar\n"
"         >                    {{'a'}},    -- array\n"
"         >                    {val=1}}    -- map\n"
"---\n"
"- [['a'], 1, 'W?', 5.5, 0, true, true, [['a']], {'val': 1}]\n"
"..."
msgstr ""

msgid ""
"Names specified with the format clause can be used in "
":ref:`space_object:get() <box_space-get>` and in "
":ref:`space_object:create_index() <box_space-create_index>` and in "
":doc:`/reference/reference_lua/box_tuple/field_name` and in "
":doc:`/reference/reference_lua/box_tuple/field_path`"
msgstr ""
"Имена, указанные с помощью оператора формата, можно использовать в "
":ref:`space_object:get() <box_space-get>`, в "
":ref:`space_object:create_index() <box_space-create_index>`, в "
":doc:`/reference/reference_lua/box_tuple/field_name` и в "
":doc:`/reference/reference_lua/box_tuple/field_path`."

msgid ""
"If the format clause is omitted, then the returned value is the table "
"that was used in a previous :samp:`{space_object}:format({format-"
"clause})` invocation. For example, after "
"``box.space.tester:format({{'x','scalar'}})``, "
"``box.space.tester:format()`` will return ``[{'name': 'x', 'type': "
"'scalar'}]``."
msgstr ""
"Если оператор формата не указан, то вернется таблица, которая "
"использовалась при предыдущем вызове "
":samp:`{объект-спейса}:format({оператор-формата})`. Например, после "
"``box.space.tester:format({{'x','scalar'}})``, "
"``box.space.tester:format()`` вернет ``[{'name': 'x', 'type': "
"'scalar'}]``."

msgid ""
"**Note re storage engine:** vinyl supports formatting of non-empty "
"spaces. Primary index definition cannot be formatted."
msgstr ""
"**Примечание про движок базы данных:** vinyl поддерживает форматирование "
"не пустых спейсов. Определение первичного индекса форматировать нельзя."
