
msgid "space_object:pairs()"
msgstr "space_object:pairs()"

#, fuzzy
msgid ""
"Search for a tuple or a set of tuples in the given space, and allow "
"iterating over one tuple at a time. To search by the specific index, use the"
" :ref:`box_index-pairs` method."
msgstr ""
"Поиск кортежа или набора кортежей в заданном спейсе и итерация по одному "
"кортежу за раз."

msgid "Parameters"
msgstr "Параметры"

msgid "an :ref:`object reference <app_server-object_reference>`"
msgstr ":ref:`ссылка на объект <app_server-object_reference>`"

msgid "value to be matched against the index key, which may be multi-part"
msgstr ""
"значение должно совпасть с индексным ключом, который может быть составным"

msgid ""
"the :ref:`iterator type <box_index-iterator-types>`. The default iterator "
"type is 'EQ'"
msgstr ""

msgid ""
"a tuple or the position of a tuple (:ref:`tuple_pos <box_index-tuple_pos>`) "
"after which ``pairs`` starts the search. You can pass an empty string or "
":ref:`box.NULL <box-null>` to this option to start the search from the first"
" tuple."
msgstr ""

msgid "return"
msgstr "возвращает"

#, fuzzy
msgid ""
"The `iterator <https://luafun.github.io/under_the_hood.html>`_, which can be"
" used in a ``for/end`` loop or with `totable() "
"<https://luafun.github.io/reducing.html#fun.totable>`_."
msgstr ""
"`итератор <https://luafun.github.io/under_the_hood.html>`_, который может "
"использовать в цикле for/end или с функцией `totable() "
"<https://luafun.github.io/reducing.html#fun.totable>`_"

msgid "**Possible errors:**"
msgstr "**Возможные ошибки:**"

#, fuzzy
msgid "no such space"
msgstr "Нет такого спейса."

#, fuzzy
msgid "wrong type"
msgstr "Неправильный тип."

#, fuzzy
msgid ""
":errcode:`ER_TRANSACTION_CONFLICT` if a transaction conflict is detected in "
"the :ref:`MVCC transaction mode <txn_mode_transaction-manager>`"
msgstr ""
":errcode:`ER_TRANSACTION_CONFLICT`, если транзакция стала конфликтной в "
":ref:`транзакционном режиме MVCC <txn_mode_transaction-manager>`."

msgid "iterator position is invalid"
msgstr ""

msgid "**Complexity factors:** Index size, Index type."
msgstr "**Факторы сложности:** Размер индекса, тип индекса."

#, fuzzy
msgid ""
"For information about iterators' internal structures, see the `\"Lua "
"Functional library\" <https://luafun.github.io/index.html>`_ documentation."
msgstr ""
"Для получения информации о внутренней структуре итераторов см. документацию "
"по библиотеке для функционального программирования в Lua `\"Lua Functional "
"library\" <https://luafun.github.io/index.html>`_."

#, fuzzy
msgid "**Examples:**"
msgstr "**Пример:**"

msgid ""
"Below are few examples of using ``pairs`` with different parameters. To try "
"out these examples, you need to bootstrap a Tarantool instance as described "
"in :ref:`Using data operations <box_space-operations-detailed-examples>`."
msgstr ""

msgid ""
"-- Insert test data --\n"
"tarantool> bands:insert{1, 'Roxette', 1986}\n"
"           bands:insert{2, 'Scorpions', 1965}\n"
"           bands:insert{3, 'Ace of Base', 1987}\n"
"           bands:insert{4, 'The Beatles', 1960}\n"
"           bands:insert{5, 'Pink Floyd', 1965}\n"
"           bands:insert{6, 'The Rolling Stones', 1962}\n"
"           bands:insert{7, 'The Doors', 1965}\n"
"           bands:insert{8, 'Nirvana', 1987}\n"
"           bands:insert{9, 'Led Zeppelin', 1968}\n"
"           bands:insert{10, 'Queen', 1970}\n"
"---\n"
"...\n"
"\n"
"-- Select all tuples by the primary index --\n"
"tarantool> for _, tuple in bands:pairs() do\n"
"               print(tuple)\n"
"           end\n"
"[1, 'Roxette', 1986]\n"
"[2, 'Scorpions', 1965]\n"
"[3, 'Ace of Base', 1987]\n"
"[4, 'The Beatles', 1960]\n"
"[5, 'Pink Floyd', 1965]\n"
"[6, 'The Rolling Stones', 1962]\n"
"[7, 'The Doors', 1965]\n"
"[8, 'Nirvana', 1987]\n"
"[9, 'Led Zeppelin', 1968]\n"
"[10, 'Queen', 1970]\n"
"---\n"
"...\n"
"\n"
"-- Select all tuples whose primary key values are between 3 and 6 --\n"
"tarantool> for _, tuple in bands:pairs(3, {iterator = \"GE\"}) do\n"
"             if (tuple[1] > 6) then break end\n"
"             print(tuple)\n"
"           end\n"
"[3, 'Ace of Base', 1987]\n"
"[4, 'The Beatles', 1960]\n"
"[5, 'Pink Floyd', 1965]\n"
"[6, 'The Rolling Stones', 1962]\n"
"---\n"
"...\n"
"\n"
"-- Select all tuples after the specified tuple --\n"
"tarantool> for _, tuple in bands:pairs({}, {after={7, 'The Doors', 1965}}) do\n"
"               print(tuple)\n"
"           end\n"
"[8, 'Nirvana', 1987]\n"
"[9, 'Led Zeppelin', 1968]\n"
"[10, 'Queen', 1970]\n"
"---\n"
"..."
msgstr ""

#~ msgid "see :doc:`/reference/reference_lua/box_index/pairs`"
#~ msgstr "см. :doc:`/reference/reference_lua/box_index/pairs`"

#~ msgid ""
#~ "For examples of complex ``pairs`` requests, where one can specify which "
#~ "index to search and what condition to use (for example \"greater than\" "
#~ "instead of \"equal to\"), see the later section "
#~ ":doc:`/reference/reference_lua/box_index/pairs`."
#~ msgstr ""
#~ "Чтобы посмотреть примеры сложных запросов ``pairs``, где можно указать "
#~ "индекс для поиска и используемое условие (например, \"больше чем\" вместо "
#~ "\"равен\"), см. раздел далее по тексту "
#~ ":doc:`/reference/reference_lua/box_index/pairs`."

#~ msgid ""
#~ "tarantool> s = box.schema.space.create('space33')\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> -- index 'X' has default parts {1, 'unsigned'}\n"
#~ "tarantool> s:create_index('X', {})\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> s:insert{0, 'Hello my '}, s:insert{1, 'Lua world'}\n"
#~ "---\n"
#~ "- [0, 'Hello my ']\n"
#~ "- [1, 'Lua world']\n"
#~ "...\n"
#~ "tarantool> tmp = ''\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> for k, v in s:pairs() do\n"
#~ "         >   tmp = tmp .. v[2]\n"
#~ "         > end\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> tmp\n"
#~ "---\n"
#~ "- Hello my Lua world\n"
#~ "..."
#~ msgstr ""
#~ "tarantool> s = box.schema.space.create('space33')\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> -- в индексе 'X' количество частей по умолчанию {1, 'unsigned'}\n"
#~ "tarantool> s:create_index('X', {})\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> s:insert{0, 'Hello my '}, s:insert{1, 'Lua world'}\n"
#~ "---\n"
#~ "- [0, 'Hello my ']\n"
#~ "- [1, 'Lua world']\n"
#~ "...\n"
#~ "tarantool> tmp = ''\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> for k, v in s:pairs() do\n"
#~ "         >   tmp = tmp .. v[2]\n"
#~ "         > end\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> tmp\n"
#~ "---\n"
#~ "- Hello my Lua world\n"
#~ "..."
