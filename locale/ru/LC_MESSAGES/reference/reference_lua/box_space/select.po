
msgid "space_object:select()"
msgstr "space_object:select()"

msgid ""
"Search for a tuple or a set of tuples in the given space by the primary key."
" To search by the specific index, use the "
":doc:`/reference/reference_lua/box_index/select` method."
msgstr ""

#, fuzzy
msgid ""
"Note that this method doesn't yield. For details, see :ref:`Cooperative "
"multitasking <app-cooperative_multitasking>`."
msgstr ""
"Поиск кортежа или набора кортежей в заданном спейсе. Этот метод не передает "
"управление (детали можно найти в разделе :ref:`Кооперативная многозадачность"
" <atomic-cooperative_multitasking>`)."

msgid "Parameters"
msgstr "Параметры"

#, fuzzy
msgid "an :ref:`object reference <app_server-object_reference>`."
msgstr ":ref:`ссылка на объект <app_server-object_reference>`"

#, fuzzy
msgid "a value to be matched against the index key, which may be multi-part."
msgstr ""
"значение должно совпасть с индексным ключом, который может быть составным."

msgid ""
"none, any, or all of the same options that "
":doc:`/reference/reference_lua/box_index/select` allows:  * "
"``options.iterator`` -- the :ref:`iterator type <box_index-iterator-types>`."
" The default iterator type is 'EQ'. * ``options.limit`` -- the maximum "
"number of tuples. * ``options.offset`` -- the number of tuples to skip. * "
"``options.after`` -- a tuple or the position of a tuple (:ref:`tuple_pos "
"<box_index-tuple_pos>`) after which ``select`` starts the search. You can "
"pass an empty string or :ref:`box.NULL <box-null>` to this option to start "
"the search from the first tuple. * ``options.fetch_pos`` -- if **true**, the"
" ``select`` method returns the position of the last selected tuple as the "
"second value.    .. NOTE::        The ``after`` and ``fetch_pos`` options "
"are supported for the ``TREE`` :ref:`index <index-types>` only."
msgstr ""

#, fuzzy
msgid ""
"none, any, or all of the same options that "
":doc:`/reference/reference_lua/box_index/select` allows:"
msgstr ""
"ни один, любой или все параметры, которые допускает "
":doc:`/reference/reference_lua/box_index/select`:"

#, fuzzy
msgid ""
"``options.iterator`` -- the :ref:`iterator type <box_index-iterator-types>`."
" The default iterator type is 'EQ'."
msgstr ""
"``options.iterator`` (:ref:`тип итератора <box_index-iterator-types>`)"

#, fuzzy
msgid "``options.limit`` -- the maximum number of tuples."
msgstr "``options.limit`` (максимальное количество кортежей)"

#, fuzzy
msgid "``options.offset`` -- the number of tuples to skip."
msgstr "``options.offset`` (количество пропускаемых кортежей)"

msgid ""
"``options.after`` -- a tuple or the position of a tuple (:ref:`tuple_pos "
"<box_index-tuple_pos>`) after which ``select`` starts the search. You can "
"pass an empty string or :ref:`box.NULL <box-null>` to this option to start "
"the search from the first tuple."
msgstr ""

msgid ""
"``options.fetch_pos`` -- if **true**, the ``select`` method returns the "
"position of the last selected tuple as the second value."
msgstr ""

msgid ""
"The ``after`` and ``fetch_pos`` options are supported for the ``TREE`` "
":ref:`index <index-types>` only."
msgstr ""

msgid "return"
msgstr "возвращает"

msgid "This function might return one or two values:"
msgstr ""

#, fuzzy
msgid ""
"The tuples whose primary-key fields are equal to the fields of the passed "
"key. If the number of passed fields is less than the number of fields in the"
" primary key, then only the passed fields are compared, so ``select{1,2}`` "
"matches a tuple whose primary key is ``{1,2,3}``."
msgstr ""
"кортежи, поля первичного ключа в которых равны полям переданного ключа. Если"
" количество переданных полей меньшей количества полей первичного ключа, "
"сопоставляются только переданные поля, то есть для ``select{1,2}`` "
"совпадением будет кортеж с первичным ключом ``{1,2,3}``."

msgid ""
"(Optionally) If ``options.fetch_pos`` is set to **true**, returns a "
"base64-encoded string representing the position of the last selected tuple "
"as the second value. If no tuples are fetched, returns ``nil``."
msgstr ""

msgid "rtype"
msgstr "тип возвращаемого значения"

msgid "array of tuples"
msgstr "массив кортежей"

msgid "(Optionally) string"
msgstr ""

msgid "**Possible errors:**"
msgstr "**Возможные ошибки:**"

#, fuzzy
msgid "no such space"
msgstr "Нет такого спейса."

#, fuzzy
msgid "wrong type"
msgstr "Неверный тип."

#, fuzzy
msgid ""
":errcode:`ER_TRANSACTION_CONFLICT` if a transaction conflict is detected in "
"the :ref:`MVCC transaction mode <txn_mode_transaction-manager>`"
msgstr ""
":errcode:`ER_TRANSACTION_CONFLICT`, если транзакция стала конфликтной в "
":ref:`транзакционном режиме MVCC <txn_mode_transaction-manager>`."

msgid "iterator position is invalid"
msgstr ""

msgid "**Complexity factors:** Index size, Index type."
msgstr "**Факторы сложности:** Размер индекса, тип индекса"

#, fuzzy
msgid "**Examples:**"
msgstr "**Пример:**"

msgid ""
"Below are few examples of using ``select`` with different parameters. To try"
" out these examples, you need to bootstrap a Tarantool instance as described"
" in :ref:`Using data operations <box_space-operations-detailed-examples>`."
msgstr ""

msgid ""
"-- Insert test data --\n"
"tarantool> bands:insert{1, 'Roxette', 1986}\n"
"           bands:insert{2, 'Scorpions', 1965}\n"
"           bands:insert{3, 'Ace of Base', 1987}\n"
"           bands:insert{4, 'The Beatles', 1960}\n"
"           bands:insert{5, 'Pink Floyd', 1965}\n"
"           bands:insert{6, 'The Rolling Stones', 1962}\n"
"           bands:insert{7, 'The Doors', 1965}\n"
"           bands:insert{8, 'Nirvana', 1987}\n"
"           bands:insert{9, 'Led Zeppelin', 1968}\n"
"           bands:insert{10, 'Queen', 1970}\n"
"---\n"
"...\n"
"\n"
"-- Select a tuple by the specified primary key --\n"
"tarantool> bands:select(4)\n"
"---\n"
"- - [4, 'The Beatles', 1960]\n"
"...\n"
"\n"
"-- Select maximum 3 tuples with the primary key value greater than 3 --\n"
"tarantool> bands:select({3}, {iterator='GT', limit = 3})\n"
"---\n"
"- - [4, 'The Beatles', 1960]\n"
"  - [5, 'Pink Floyd', 1965]\n"
"  - [6, 'The Rolling Stones', 1962]\n"
"...\n"
"\n"
"-- Select maximum 3 tuples after the specified tuple --\n"
"tarantool> bands:select({}, {after = {4, 'The Beatles', 1960}, limit = 3})\n"
"---\n"
"- - [5, 'Pink Floyd', 1965]\n"
"  - [6, 'The Rolling Stones', 1962]\n"
"  - [7, 'The Doors', 1965]\n"
"...\n"
"\n"
"-- Select first 3 tuples and fetch a last tuple's position --\n"
"tarantool> result, position = bands:select({}, {limit = 3, fetch_pos = true})\n"
"---\n"
"...\n"
"-- Then, pass this position as the 'after' parameter --\n"
"tarantool> bands:select({}, {limit = 3, after = position})\n"
"---\n"
"- - [4, 'The Beatles', 1960]\n"
"  - [5, 'Pink Floyd', 1965]\n"
"  - [6, 'The Rolling Stones', 1962]\n"
"..."
msgstr ""

#, fuzzy
msgid ""
"You can get a field from a tuple both by the field number and field name. "
"See example: :ref:`using field names instead of field numbers <box_space-"
"get_field_names>`."
msgstr ""
"Помните, что из кортежа можно получить поле как по номеру поля, так и по "
"имени поля, что более удобно. См. пример: :ref:`использование имен вместо "
"номеров полей <box_space-get_field_names>`."

#~ msgid ""
#~ "none, any or all of the same options that "
#~ ":doc:`/reference/reference_lua/box_index/select` allows:  * "
#~ "``options.iterator`` (:ref:`type of iterator <box_index-iterator-types>`) * "
#~ "``options.limit`` (maximum number of tuples) * ``options.offset`` (number of"
#~ " tuples to skip)"
#~ msgstr ""
#~ "ни один, любой или все параметры, которые допускает "
#~ ":doc:`/reference/reference_lua/box_index/select`: * ``options.iterator`` "
#~ "(:ref:`тип итератора <box_index-iterator-types>`) * ``options.limit`` "
#~ "(максимальное количество кортежей) * ``options.offset`` (количество "
#~ "пропускаемых кортежей)"

#~ msgid ""
#~ "A ``select`` request can also be done with a specific index and index "
#~ "options, which are the subject of "
#~ ":doc:`/reference/reference_lua/box_index/select`."
#~ msgstr ""
#~ "Запрос выборки ``select`` также можно выполнить со специальными параметрами "
#~ "индекса, которые указаны в :doc:`/reference/reference_lua/box_index/select`."

#~ msgid ""
#~ "tarantool> s = box.schema.space.create('tmp', {temporary=true})\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> s:create_index('primary',{parts = { {field = 1, type = 'unsigned'}, {field = 2, type = 'string'}} })\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> s:insert{1,'A'}\n"
#~ "---\n"
#~ "- [1, 'A']\n"
#~ "...\n"
#~ "tarantool> s:insert{1,'B'}\n"
#~ "---\n"
#~ "- [1, 'B']\n"
#~ "...\n"
#~ "tarantool> s:insert{1,'C'}\n"
#~ "---\n"
#~ "- [1, 'C']\n"
#~ "...\n"
#~ "tarantool> s:insert{2,'D'}\n"
#~ "---\n"
#~ "- [2, 'D']\n"
#~ "...\n"
#~ "tarantool> -- must equal both primary-key fields\n"
#~ "tarantool> s:select{1,'B'}\n"
#~ "---\n"
#~ "- - [1, 'B']\n"
#~ "...\n"
#~ "tarantool> -- must equal only one primary-key field\n"
#~ "tarantool> s:select{1}\n"
#~ "---\n"
#~ "- - [1, 'A']\n"
#~ "  - [1, 'B']\n"
#~ "  - [1, 'C']\n"
#~ "...\n"
#~ "tarantool> -- must equal 0 fields, so returns all tuples\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [1, 'A']\n"
#~ "  - [1, 'B']\n"
#~ "  - [1, 'C']\n"
#~ "  - [2, 'D']\n"
#~ "...\n"
#~ "tarantool> -- the first field must be greater than 0, and\n"
#~ "tarantool> -- skip the first tuple, and return up to\n"
#~ "tarantool> -- 2 tuples. This example's options all\n"
#~ "tarantool> -- depend on index characteristics so see\n"
#~ "tarantool> -- more explanation in index_object:select().\n"
#~ "tarantool> s:select({0},{iterator='GT',offset=1,limit=2})\n"
#~ "---\n"
#~ "- - [1, 'B']\n"
#~ "  - [1, 'C']\n"
#~ "..."
#~ msgstr ""
#~ "tarantool> s = box.schema.space.create('tmp', {temporary=true})\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> s:create_index('primary',{parts = { {field = 1, type = 'unsigned'}, {field = 2, type = 'string'}} })\n"
#~ "---\n"
#~ "...\n"
#~ "tarantool> s:insert{1,'A'}\n"
#~ "---\n"
#~ "- [1, 'A']\n"
#~ "...\n"
#~ "tarantool> s:insert{1,'B'}\n"
#~ "---\n"
#~ "- [1, 'B']\n"
#~ "...\n"
#~ "tarantool> s:insert{1,'C'}\n"
#~ "---\n"
#~ "- [1, 'C']\n"
#~ "...\n"
#~ "tarantool> s:insert{2,'D'}\n"
#~ "---\n"
#~ "- [2, 'D']\n"
#~ "...\n"
#~ "tarantool> -- необходимо совпадение с двумя полями первичного ключа\n"
#~ "tarantool> s:select{1,'B'}\n"
#~ "---\n"
#~ "- - [1, 'B']\n"
#~ "...\n"
#~ "tarantool> -- необходимо совпадение только одного поля первичного ключа\n"
#~ "tarantool> s:select{1}\n"
#~ "---\n"
#~ "- - [1, 'A']\n"
#~ "  - [1, 'B']\n"
#~ "  - [1, 'C']\n"
#~ "...\n"
#~ "tarantool> -- необходимо совпадение с 0 полей, поэтому возвращает все кортежи\n"
#~ "tarantool> s:select{}\n"
#~ "---\n"
#~ "- - [1, 'A']\n"
#~ "  - [1, 'B']\n"
#~ "  - [1, 'C']\n"
#~ "  - [2, 'D']\n"
#~ "...\n"
#~ "tarantool> -- первое поле должно быть больше 0,\n"
#~ "tarantool> -- пропуск первого кортежа и возврат до\n"
#~ "tarantool> -- 2 кортежей. Все параметры в данном примере\n"
#~ "tarantool> -- зависят от характеристик индекса, поэтому см.\n"
#~ "tarantool> -- более подробное описание в index_object:select().\n"
#~ "tarantool> s:select({0},{iterator='GT',offset=1,limit=2})\n"
#~ "---\n"
#~ "- - [1, 'B']\n"
#~ "  - [1, 'C']\n"
#~ "..."

#~ msgid ""
#~ "As the last request in the above example shows: to make complex ``select`` "
#~ "requests, where you can specify which index to search and what condition to "
#~ "use (for example \"greater than\" instead of \"equal to\") and how many "
#~ "tuples to return, it will be necessary to become familiar with "
#~ ":doc:`/reference/reference_lua/box_index/select`."
#~ msgstr ""
#~ "Как показано в последнем запросе вышеприведенного примера, чтобы выполнять "
#~ "сложные запросы выборки ``select``, где можно указать, в каком индексе "
#~ "производится поиск и с какими условиями (например, \"больше, чем\" вместо "
#~ "\"равный\"), а также необходимое количество возвращаемых кортежей, "
#~ "необходимо ознакомиться с :doc:`/reference/reference_lua/box_index/select`."

#~ msgid ""
#~ "For more usage scenarios and typical errors see :ref:`Example: using data "
#~ "operations <box_space-operations-detailed-examples>` further in this "
#~ "section."
#~ msgstr ""
#~ "Для получения дополнительной информации о сценариях использования и типичных"
#~ " ошибках, см. :ref:`Пример: использование операций с данными <box_space-"
#~ "operations-detailed-examples>` далее в разделе."
