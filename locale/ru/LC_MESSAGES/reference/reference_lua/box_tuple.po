
msgid "Submodule `box.tuple`"
msgstr "Вложенный модуль `box.tuple`"

msgid "Overview"
msgstr "Общие сведения"

msgid ""
"The ``box.tuple`` submodule provides read-only access for the ``tuple`` "
"userdata type. It allows, for a single :ref:`tuple <index-box_tuple>`: "
"selective retrieval of the field contents, retrieval of information about"
" size, iteration over all the fields, and conversion to a `Lua table "
"<https://www.lua.org/pil/2.5.html>`_."
msgstr ""
"Вложенный модуль ``box.tuple`` предоставляет доступ только для чтения к "
"пользовательским данным типа кортеж ``tuple``. С его помощью для "
"отдельного :ref:`кортежа <index-box_tuple>` можно сделать следующее: "
"выборочно искать содержимое поля, получать информацию о размере, "
"проводить итерацию по всем полям и выполнять преобразование в "
"`Lua-таблицу <https://www.lua.org/pil/2.5.html>`_."

msgid "Index"
msgstr "Индекс"

msgid "Below is a list of all ``box.tuple`` functions."
msgstr "Ниже приведен перечень всех функций модуля ``box.tuple``."

msgid "Name"
msgstr "Имя"

msgid "Use"
msgstr "Использование"

msgid ":ref:`box.tuple.new() <box_tuple-new>`"
msgstr ":ref:`box.tuple.new() <box_tuple-new>`"

msgid "Create a tuple"
msgstr "Создание кортежа"

msgid ":ref:`box.tuple.is() <box_tuple-is>`"
msgstr ":ref:`box.tuple.is() <box_tuple-is>`"

msgid "Check whether a given object is a tuple cdata object"
msgstr "Проверка, является ли переданный объект кортежем cdata"

msgid ":ref:`#tuple_object <box_tuple-count_fields>`"
msgstr ":ref:`#tuple_object <box_tuple-count_fields>`"

msgid "Count tuple fields"
msgstr "Подсчет полей кортежа"

msgid ":ref:`tuple_object:bsize() <box_tuple-bsize>`"
msgstr ":ref:`tuple_object:bsize() <box_tuple-bsize>`"

msgid "Get count of bytes in a tuple"
msgstr "Подсчет байтов в кортеже"

msgid ":ref:`tuple_object[field-number] <box_tuple-field_number>`"
msgstr ":ref:`tuple_object[field-number] <box_tuple-field_number>`"

msgid "Get a tuple's field by specifying a number"
msgstr "Получение поля кортежа по номеру"

msgid ":ref:`tuple_object[field-name] <box_tuple-field_name>`"
msgstr ":ref:`tuple_object[field-name] <box_tuple-field_name>`"

msgid "Get a tuple's field by specifying a name"
msgstr "Получение поля кортежа по имени"

msgid ":ref:`tuple_object[field-path] <box_tuple-field_path>`"
msgstr ":ref:`tuple_object[field-path] <box_tuple-field_path>`"

msgid "Get a tuple's fields or parts by specifying a path"
msgstr "Получение полей кортежа или компонентов по пути"

msgid ":ref:`tuple_object:find() <box_tuple-find>`"
msgstr ":ref:`tuple_object:find() <box_tuple-find>`"

msgid "Get the number of the first field matching the search value"
msgstr "Получение номера первого поля, совпадающего с искомым значением"

msgid ":ref:`tuple_object:findall() <box_tuple-find>`"
msgstr ":ref:`tuple_object:findall() <box_tuple-find>`"

msgid "Get the number of all fields matching the search value"
msgstr "Получение номеров всех полей, совпадающих с искомым значением"

#, fuzzy
msgid ":ref:`tuple_object:next() <box_tuple-next>`"
msgstr ":ref:`tuple_object:find() <box_tuple-find>`"

msgid "Get the next field value from tuple"
msgstr ""

#, fuzzy
msgid ":ref:`tuple_object:ipairs() <box_tuple-pairs>`"
msgstr ":ref:`tuple_object:pairs() <box_tuple-pairs>`"

msgid "Prepare for iterating"
msgstr "Подготовка к итерации"

msgid ":ref:`tuple_object:pairs() <box_tuple-pairs>`"
msgstr ":ref:`tuple_object:pairs() <box_tuple-pairs>`"

msgid ":ref:`tuple_object:totable() <box_tuple-totable>`"
msgstr ":ref:`tuple_object:totable() <box_tuple-totable>`"

msgid "Get a tuple's fields as a table"
msgstr "Получение полей кортежа в виде таблицы"

msgid ":ref:`tuple_object:tomap() <box_tuple-tomap>`"
msgstr ":ref:`tuple_object:tomap() <box_tuple-tomap>`"

msgid "Get a tuple's fields as a table along with key:value pairs"
msgstr "Получение полей кортежа в виде таблицы, а также пар ключ-значение"

msgid ":ref:`tuple_object:transform() <box_tuple-transform>`"
msgstr ":ref:`tuple_object:transform() <box_tuple-transform>`"

msgid "Remove (and replace) a tuple's fields"
msgstr "Удаление (и замена) полей кортежа"

msgid ":ref:`tuple_object:unpack() <box_tuple-unpack>`"
msgstr ":ref:`tuple_object:unpack() <box_tuple-unpack>`"

msgid "Get a tuple's fields"
msgstr "Получение полей кортежа"

msgid ":ref:`tuple_object:update() <box_tuple-update>`"
msgstr ":ref:`tuple_object:update() <box_tuple-update>`"

msgid "Update a tuple"
msgstr "Обновление кортежа"

#, fuzzy
msgid ":ref:`tuple_object:upsert() <box_tuple-upsert>`"
msgstr ":ref:`tuple_object:update() <box_tuple-update>`"

msgid "Update a tuple ignoring errors"
msgstr ""

msgid ""
"Construct a new tuple from either a scalar or a Lua table. Alternatively,"
" one can get new tuples from tarantool's :ref:`select <box_space-select>`"
" or :ref:`insert <box_space-insert>` or :ref:`replace <box_space-"
"replace>` or :ref:`update <box_space-update>` requests, which can be "
"regarded as statements that do ``new()`` implicitly."
msgstr ""
"Создание нового кортежа либо из скаляра, либо из Lua-таблицы.  Возможен и"
" вариант получения новых кортежей из запросов :ref:`select <box_space-"
"select>` или :ref:`insert <box_space-insert>`. или :ref:`replace "
"<box_space-replace>`, или :ref:`update <box_space-update>` Tarantool'а, "
"которые можно рассматривать в качестве операторов, косвенно выполняющих "
"операцию создания ``new()``."

msgid "Parameters"
msgstr "Параметры"

msgid "the value that will become the tuple contents."
msgstr "значение, которое станет содержимым кортежа."

msgid "return"
msgstr "возвращается"

msgid "a new tuple"
msgstr "новый кортеж"

msgid "rtype"
msgstr "тип возвращаемого значения"

msgid "tuple"
msgstr "кортеж"

msgid ""
"In the following example, ``x`` will be a new table object containing one"
" tuple and ``t`` will be a new tuple object. Saying ``t`` returns the "
"entire tuple ``t``."
msgstr ""
"В следующем примере ``x`` будет представлять собой новый объект таблицы, "
"который содержит один кортеж, а ``t`` будет представлять собой объект "
"кортежа. Если ввести команду ``t``, будет получен весь кортеж ``t``."

msgid "**Example:**"
msgstr "**Пример:**"

msgid ""
"tarantool> x = box.space.tester:insert{\n"
"         >   33,\n"
"         >   tonumber('1'),\n"
"         >   tonumber64('2')\n"
"         > }:totable()\n"
"---\n"
"...\n"
"tarantool> t = box.tuple.new{'abc', 'def', 'ghi', 'abc'}\n"
"---\n"
"...\n"
"tarantool> t\n"
"---\n"
"- ['abc', 'def', 'ghi', 'abc']\n"
"..."
msgstr ""
"tarantool> x = box.space.tester:insert{\n"
"         >   33,\n"
"         >   tonumber('1'),\n"
"         >   tonumber64('2')\n"
"         > }:totable()\n"
"---\n"
"...\n"
"tarantool> t = box.tuple.new{'abc', 'def', 'ghi', 'abc'}\n"
"---\n"
"...\n"
"tarantool> t\n"
"---\n"
"- ['abc', 'def', 'ghi', 'abc']\n"
"..."

msgid ""
"A function to check whether a given object is a tuple cdata object. Never"
" raises nor returns an error."
msgstr ""
"Функция для проверки, является ли переданный объект кортежем cdata. "
"Никогда не выдает и не возвращает ошибку."

msgid "true or false"
msgstr "true или false"

msgid "boolean"
msgstr ""

msgid ""
"The ``#`` operator in Lua means \"return count of components\". So, if "
"``t`` is a tuple instance, ``#t`` will return the number of fields."
msgstr ""
"Оператор ``#`` на языке Lua означает \"вернуть количество компонентов\". "
"Таким образом, если ``t`` представляет собой кортеж, то ``#t`` вернет "
"количество полей."

msgid "number"
msgstr "число"

msgid ""
"In the following example, a tuple named ``t`` is created and then the "
"number of fields in ``t`` is returned."
msgstr ""
"В следующем примере создается кортеж под названием ``t``, а затем "
"возвращается количество полей в кортеже ``t``."

msgid ""
"tarantool> t = box.tuple.new{'Fld#1', 'Fld#2', 'Fld#3', 'Fld#4'}\n"
"---\n"
"...\n"
"tarantool> #t\n"
"---\n"
"- 4\n"
"..."
msgstr ""
"tarantool> t = box.tuple.new{'Fld#1', 'Fld#2', 'Fld#3', 'Fld#4'}\n"
"---\n"
"...\n"
"tarantool> #t\n"
"---\n"
"- 4\n"
"..."

msgid ""
"If ``t`` is a tuple instance, ``t:bsize()`` will return the number of "
"bytes in the tuple. With both the memtx storage engine and the vinyl "
"storage engine the default maximum is one megabyte "
"(:ref:`memtx_max_tuple_size <cfg_storage-memtx_max_tuple_size>` or "
":ref:`vinyl_max_tuple_size <cfg_storage-vinyl_max_tuple_size>`). Every "
"field has one or more \"length\" bytes preceding the actual contents, so "
"``bsize()`` returns a value which is slightly greater than the sum of the"
" lengths of the contents."
msgstr ""
"Если ``t`` -- это экземпляр кортежа, то ``t:bsize()`` вернет количество "
"байтов в кортеже. Как для движка базы данных memtx, так и для движка "
"vinyl максимальное количество, используемое по умолчанию, составляет один"
" мегабайт (:ref:`memtx_max_tuple_size <cfg_storage-memtx_max_tuple_size>`"
" или :ref:`vinyl_max_tuple_size <cfg_storage-vinyl_max_tuple_size>`). В "
"каждом поле есть один или более байтов \"длины\", которые предваряют само"
" содержимое поля, поэтому ``bsize()`` вернет значение, которое "
"незначительно больше, чем сумма длин всего содержимого."

msgid ""
"The value does not include the size of \"struct tuple\" (for the current "
"size of this structure look in the `tuple.h "
"<https://github.com/tarantool/tarantool/blob/2.1/src/box/tuple.h>`_ file "
"in Tarantool's source code)."
msgstr ""
"Значение не содержит размер кортежа \"struct tuple\" (чтобы узнать "
"текущий размер данной структуры, посмотрите файл `tuple.h "
"<https://github.com/tarantool/tarantool/blob/2.1/src/box/tuple.h>`_ в "
"исходном коде Tarantool'а)."

msgid "number of bytes"
msgstr "количество байтов"

msgid ""
"In the following example, a tuple named ``t`` is created which has three "
"fields, and for each field it takes one byte to store the length and "
"three bytes to store the contents, and then there is one more byte to "
"store a count of the number of fields, so ``bsize()`` returns "
"``3*(1+3)+1``. This is the same as the size of the string that "
":ref:`msgpack.encode({'aaa','bbb','ccc'}) <msgpack-encode>` would return."
msgstr ""
"В следующем примере создается кортеж с именем ``t``, в котором три поля, "
"и для каждого поля один байт занимает хранение длины, и три байта "
"занимает хранение содержимого, кроме того, один бит используется на "
"ресурсы, поэтому ``bsize()`` вернет ``3*(1+3)+1``. Такой же размер строки"
" вернула бы функция :ref:`msgpack.encode({'aaa','bbb','ccc'}) <msgpack-"
"encode>`."

msgid ""
"tarantool> t = box.tuple.new{'aaa', 'bbb', 'ccc'}\n"
"---\n"
"...\n"
"tarantool> t:bsize()\n"
"---\n"
"- 13\n"
"..."
msgstr ""
"tarantool> t = box.tuple.new{'aaa', 'bbb', 'ccc'}\n"
"---\n"
"...\n"
"tarantool> t:bsize()\n"
"---\n"
"- 13\n"
"..."

msgid ""
"If ``t`` is a tuple instance, ``t[field-number]`` will return the field "
"numbered field-number in the tuple. The first field is ``t[1]``."
msgstr ""
"Если ``t`` -- это экземпляр кортежа, то ``t[номер-поля]`` вернет поле под"
" номером номер-поля в кортеже. Первое поле -- это ``t[1]``."

msgid "field value."
msgstr "значение поля."

msgid "lua-value"
msgstr "Lua-значение"

msgid ""
"In the following example, a tuple named ``t`` is created and then the "
"second field in ``t`` is returned."
msgstr ""
"В следующем примере создается кортеж под названием ``t``, а затем "
"возвращается второе поле в кортеже ``t``."

msgid ""
"tarantool> t = box.tuple.new{'Fld#1', 'Fld#2', 'Fld#3', 'Fld#4'}\n"
"---\n"
"...\n"
"tarantool> t[2]\n"
"---\n"
"- Fld#2\n"
"..."
msgstr ""
"tarantool> t = box.tuple.new{'Fld#1', 'Fld#2', 'Fld#3', 'Fld#4'}\n"
"---\n"
"...\n"
"tarantool> t[2]\n"
"---\n"
"- Fld#2\n"
"..."

#, fuzzy
msgid ""
"If ``t`` is a tuple instance, ``t['field-name']`` will return the field "
"named 'field-name' in the tuple. Fields have names if the tuple has been "
"retrieved from a space that has an associated :ref:`format <box_space-"
"format>`. :samp:`t[{lua-variable-name}]` will do the same thing if ``lua-"
"variable-name`` contains ``'field-name'``."
msgstr ""
"Если ``t`` -- это экземпляр кортежа, то ``t['field-name']`` вернет поле "
"под названием `field-name` в кортеже. У полей есть имена, если кортеж был"
" получен из спейса с определенным :ref:`форматом <box_space-format>`."

msgid ""
"There is a variation which the `Lua manual "
"<https://www.lua.org/pil/2.5.html>`_ calls \"syntactic sugar\": use ``t"
".field-name`` as an equivalent of ``t['field-name']``."
msgstr ""

msgid ""
"In the following example, a tuple named ``t`` is returned from "
"``replace`` and then the second field in ``t`` named 'field2' is "
"returned."
msgstr ""
"В следующем примере кортеж под названием ``t`` возвращается после "
"операции замены, а затем возвращается второе поле с именем 'field2' в "
"кортеже ``t``."

msgid ""
"tarantool> format = {}\n"
"---\n"
"...\n"
"tarantool> format[1] = {name = 'field1', type = 'unsigned'}\n"
"---\n"
"...\n"
"tarantool> format[2] = {name = 'field2', type = 'string'}\n"
"---\n"
"...\n"
"tarantool> s = box.schema.space.create('test', {format = format})\n"
"---\n"
"...\n"
"tarantool> pk = s:create_index('pk')\n"
"---\n"
"...\n"
"tarantool> t = s:replace{1, 'Я'}\n"
"---\n"
"...\n"
"tarantool> t['field2']\n"
"---\n"
"- Я\n"
"..."
msgstr ""
"tarantool> format = {}\n"
"---\n"
"...\n"
"tarantool> format[1] = {name = 'field1', type = 'unsigned'}\n"
"---\n"
"...\n"
"tarantool> format[2] = {name = 'field2', type = 'string'}\n"
"---\n"
"...\n"
"tarantool> s = box.schema.space.create('test', {format = format})\n"
"---\n"
"...\n"
"tarantool> pk = s:create_index('pk')\n"
"---\n"
"...\n"
"tarantool> t = s:replace{1, 'Я'}\n"
"---\n"
"...\n"
"tarantool> t['field2']\n"
"---\n"
"- Я\n"
"..."

msgid ""
"If ``t`` is a tuple instance, ``t['path']`` will return the field or "
"subset of fields that are in ``path``. ``path`` must be a well formed "
"JSON specification. ``path`` may contain field names if the tuple has "
"been retrieved from a space that has an associated :ref:`format "
"<box_space-format>`."
msgstr ""
"Если ``t`` -- это экземпляр кортежа, то ``t['path']`` вернет поле или ряд"
" полей, которые находятся в ``path``. Параметр ``path`` должен "
"представлять собой правильную JSON-спецификацию. ``path`` может содержать"
" имена полей, если кортеж был получен из спейса с заданным :ref:`форматом"
" <box_space-format>`."

msgid ""
"To prevent ambiguity, Tarantool first tries to interpret the request as "
":ref:`tuple_object[field-number] <box_tuple-field_number>` or "
":ref:`tuple_object[field-name] <box_tuple-field_name>`. If and only if "
"that fails, Tarantool tries to interpret the request as ``tuple_object"
"[field-path]``."
msgstr ""
"Во избежание неоднозначности Tarantool сначала пытается интерпретировать "
"запрос как :ref:`tuple_object[field-number] <box_tuple-field_number>` или"
"  :ref:`tuple_object[field-name] <box_tuple-field_name>`. И только в том "
"случае, если это не удается, Tarantool пытается интерпретировать запрос "
"как ``tuple_object[field-path]``."

msgid ""
"The path must be a well formed JSON specification, but it may be preceded"
" by '.'. The '.' is a signal that the path acts as a suffix for the "
"tuple."
msgstr ""
"Путь path должен представлять собой правильную JSON-спецификацию, но в "
"начале может стоять '.'. Символ '.' означает, что путь выступает в "
"качестве суффикса для кортежа."

msgid ""
"The advantage of specifying a path is that Tarantool will use it to "
"search through a tuple body and get only the tuple part, or parts, that "
"are actually necessary."
msgstr ""
"При указании пути Tarantool воспользуется им для поиска по телу кортежа и"
" вернет только тот компонент кортежа, который действительно необходим."

msgid ""
"In the following example, a tuple named ``t`` is returned from "
"``replace`` and then only the relevant part (in this case, matching a "
"name) of a relevant field is returned. Namely: the second field, the "
"sixth part, the value following 'value='."
msgstr ""
"В следующем примере кортеж под названием ``t`` возвращается после "
"операции замены, а затем возвращается только необходимый компонент (в "
"данном случае совпадение имени) соответствующего поля. В частности: "
"второе поле, шестой компонент, значение после 'value='."

msgid ""
"tarantool> format = {}\n"
"---\n"
"...\n"
"tarantool> format[1] = {name = 'field1', type = 'unsigned'}\n"
"---\n"
"...\n"
"tarantool> format[2] = {name = 'field2', type = 'array'}\n"
"---\n"
"...\n"
"tarantool> format[3] = {name = 'field4', type = 'string' }\n"
"---\n"
"...\n"
"tarantool> format[4] = {name = \"[2][6]['пw']['Я']\", type = 'string'}\n"
"---\n"
"...\n"
"tarantool> s = box.schema.space.create('test', {format = format})\n"
"---\n"
"...\n"
"tarantool> pk = s:create_index('pk')\n"
"---\n"
"...\n"
"tarantool> field2 = {1, 2, 3, \"4\", {5,6,7}, {пw={Я=\"п\"}, key=\"V!\", "
"value=\"K!\"}}\n"
"---\n"
"...\n"
"tarantool> t = s:replace{1, field2, \"123456\", \"Not K!\"}\n"
"---\n"
"...\n"
"tarantool> t[\"[2][6]['value']\"]\n"
"---\n"
"- K!\n"
"..."
msgstr ""
"tarantool> format = {}\n"
"---\n"
"...\n"
"tarantool> format[1] = {name = 'field1', type = 'unsigned'}\n"
"---\n"
"...\n"
"tarantool> format[2] = {name = 'field2', type = 'array'}\n"
"---\n"
"...\n"
"tarantool> format[3] = {name = 'field4', type = 'string' }\n"
"---\n"
"...\n"
"tarantool> format[4] = {name = \"[2][6]['пw']['Я']\", type = 'string'}\n"
"---\n"
"...\n"
"tarantool> s = box.schema.space.create('test', {format = format})\n"
"---\n"
"...\n"
"tarantool> pk = s:create_index('pk')\n"
"---\n"
"...\n"
"tarantool> field2 = {1, 2, 3, \"4\", {5,6,7}, {пw={Я=\"п\"}, key=\"V!\", "
"value=\"K!\"}}\n"
"---\n"
"...\n"
"tarantool> t = s:replace{1, field2, \"123456\", \"Not K!\"}\n"
"---\n"
"...\n"
"tarantool> t[\"[2][6]['value']\"]\n"
"---\n"
"- K!\n"
"..."

msgid ""
"If ``t`` is a tuple instance, ``t:find(search-value)`` will return the "
"number of the first field in ``t`` that matches the search value, and "
"``t:findall(search-value [, search-value ...])`` will return numbers of "
"all fields in ``t`` that match the search value. Optionally one can put a"
" numeric argument ``field-number`` before the search-value to indicate "
"“start searching at field number ``field-number``.”"
msgstr ""
"Если ``t`` -- это экземпляр кортежа, то ``t:find(search-value)`` вернет "
"номер первого поля в ``t``, которое совпадает с искомым значением, а "
"``t:findall(search-value [, search-value ...])`` вернет номера всех колей"
" в ``t``, которые совпадают с искомым значением. Можно дополнительно "
"добавить числовой аргумент ``field-number`` перед search-value, чтобы "
"задать условие “начинать поиск с номера поля ``field-number``.”"

msgid "the number of the field in the tuple."
msgstr "номер поля в кортеже."

msgid ""
"In the following example, a tuple named ``t`` is created and then: the "
"number of the first field in ``t`` which matches 'a' is returned, then "
"the numbers of all the fields in ``t`` which match 'a' are returned, then"
" the numbers of all the fields in t which match 'a' and are at or after "
"the second field are returned."
msgstr ""
"В следующем примере создается кортеж с именем ``t``, а затем: "
"возвращается номер первого поля в ``t``, которое совпадает с 'a', затем "
"возвращаются номера всех полей в ``t``, которые совпадают с 'a', затем "
"возвращаются номера всех полей в t, которые совпадают с 'a', и находятся "
"на втором месте или далее."

msgid ""
"tarantool> t = box.tuple.new{'a', 'b', 'c', 'a'}\n"
"---\n"
"...\n"
"tarantool> t:find('a')\n"
"---\n"
"- 1\n"
"...\n"
"tarantool> t:findall('a')\n"
"---\n"
"- 1\n"
"- 4\n"
"...\n"
"tarantool> t:findall(2, 'a')\n"
"---\n"
"- 4\n"
"..."
msgstr ""
"tarantool> t = box.tuple.new{'a', 'b', 'c', 'a'}\n"
"---\n"
"...\n"
"tarantool> t:find('a')\n"
"---\n"
"- 1\n"
"...\n"
"tarantool> t:findall('a')\n"
"---\n"
"- 1\n"
"- 4\n"
"...\n"
"tarantool> t:findall(2, 'a')\n"
"---\n"
"- 4\n"
"..."

msgid ""
"An analogue of the Lua ``next()`` function, but for a tuple object. When "
"called without arguments, ``tuple:next()`` returns the first field from a"
" tuple. Otherwise, it returns the field next to the indicated position."
msgstr ""

msgid ""
"However ``tuple:next()`` is not really efficient, and it is better to use"
" :ref:`tuple:pairs()/ipairs() <box_tuple-pairs>`."
msgstr ""

msgid "field number and field value"
msgstr ""

#, fuzzy
msgid "number and field type"
msgstr "количество байтов"

msgid ""
"tarantool> tuple = box.tuple.new({5, 4, 3, 2, 0})\n"
"---\n"
"...\n"
"\n"
"tarantool> tuple:next()\n"
"---\n"
"- 1\n"
"- 5\n"
"...\n"
"\n"
"tarantool> tuple:next(1)\n"
"---\n"
"- 2\n"
"- 4\n"
"...\n"
"\n"
"tarantool> ctx, field = tuple:next()\n"
"---\n"
"...\n"
"\n"
"tarantool> while field do\n"
"         > print(field)\n"
"         > ctx, field = tuple:next(ctx)\n"
"         > end\n"
"5\n"
"4\n"
"3\n"
"2\n"
"0\n"
"---\n"
"..."
msgstr ""

msgid ""
"In Lua, `lua-table-value:pairs() <https://www.lua.org/pil/7.3.html>`_ is "
"a method which returns: ``function``, ``lua-table-value``, ``nil``. "
"Tarantool has extended this so that ``tuple-value:pairs()`` returns: "
"``function``, ``tuple-value``, ``nil``. It is useful for Lua iterators, "
"because Lua iterators traverse a value's components until an end marker "
"is reached."
msgstr ""

msgid ""
"``tuple_object:ipairs()`` is the same as ``pairs()``, because tuple "
"fields are always integers."
msgstr ""

msgid "function, tuple-value, nil"
msgstr "функция, значение кортежа, nil"

msgid "function, lua-value, nil"
msgstr "функция, Lua-значение, nil"

msgid ""
"In the following example, a tuple named ``t`` is created and then all its"
" fields are selected using a Lua for-end loop."
msgstr ""
"В следующем примере создается кортеж под названием ``t``, а затем все его"
" поля выбираются с помощью Lua-цикла for."

msgid ""
"tarantool> t = box.tuple.new{'Fld#1', 'Fld#2', 'Fld#3', 'Fld#4', 'Fld#5'}"
"\n"
"---\n"
"...\n"
"tarantool> tmp = ''\n"
"---\n"
"...\n"
"tarantool> for k, v in t:pairs() do\n"
"         >   tmp = tmp .. v\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> tmp\n"
"---\n"
"- Fld#1Fld#2Fld#3Fld#4Fld#5\n"
"..."
msgstr ""
"tarantool> t = box.tuple.new{'Fld#1', 'Fld#2', 'Fld#3', 'Fld#4', 'Fld#5'}"
"\n"
"---\n"
"...\n"
"tarantool> tmp = ''\n"
"---\n"
"...\n"
"tarantool> for k, v in t:pairs() do\n"
"         >   tmp = tmp .. v\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> tmp\n"
"---\n"
"- Fld#1Fld#2Fld#3Fld#4Fld#5\n"
"..."

msgid ""
"If ``t`` is a tuple instance, ``t:totable()`` will return all fields, "
"``t:totable(1)`` will return all fields starting with field number 1, "
"``t:totable(1,5)`` will return all fields between field number 1 and "
"field number 5."
msgstr ""
"Если ``t`` -- это экземпляр кортежа, то ``t:totable()`` вернет все поля, "
"``t:totable(1)`` вернет все поля, начиная с поля №1, ``t:totable(1,5)`` "
"вернет все поля между полем №1 и полем №5."

msgid "It is preferable to use ``t:totable()`` rather than ``t:unpack()``."
msgstr "Рекомендуется использовать ``t:totable()``, а не ``t:unpack()``."

msgid "field(s) from the tuple"
msgstr "поле или поля из кортежа"

msgid "lua-table"
msgstr "Lua-таблица"

msgid ""
"In the following example, a tuple named ``t`` is created, then all its "
"fields are selected, then the result is returned."
msgstr ""
"В следующем примере создается кортеж под названием ``t``, а затем "
"делается выборка всех полей, возвращается результат."

msgid ""
"tarantool> t = box.tuple.new{'Fld#1', 'Fld#2', 'Fld#3', 'Fld#4', 'Fld#5'}"
"\n"
"---\n"
"...\n"
"tarantool> t:totable()\n"
"---\n"
"- ['Fld#1', 'Fld#2', 'Fld#3', 'Fld#4', 'Fld#5']\n"
"..."
msgstr ""
"tarantool> t = box.tuple.new{'Fld#1', 'Fld#2', 'Fld#3', 'Fld#4', 'Fld#5'}"
"\n"
"---\n"
"...\n"
"tarantool> t:totable()\n"
"---\n"
"- ['Fld#1', 'Fld#2', 'Fld#3', 'Fld#4', 'Fld#5']\n"
"..."

msgid ""
"A `Lua table <https://www.lua.org/pil/2.5.html>`_ can have indexed "
"values, also called key:value pairs. For example, here:"
msgstr ""
"В `Lua-таблице <https://www.lua.org/pil/2.5.html>`_ могут быть "
"индексированные значения, которые также называются пары ключ-значение. "
"Например, здесь:"

msgid "a = {}; a['field1'] = 10; a['field2'] = 20"
msgstr "a = {}; a['field1'] = 10; a['field2'] = 20"

msgid "``a`` is a table with \"field1: 10\" and \"field2: 20\"."
msgstr "``a`` -- это таблица с \"field1: 10\" и \"field2: 20\"."

msgid ""
"The :ref:`tuple_object:totable() <box_tuple-totable>` function only "
"returns a table containing the values. But the ``tuple_object:tomap()`` "
"function returns a table containing not only the values, but also the "
"key:value pairs."
msgstr ""
"Функция :ref:`tuple_object:totable() <box_tuple-totable>` вернет только "
"таблицу со значениями. А функция ``tuple_object:tomap()`` вернет таблицу "
"не только со значениями, но и с парами ключ-значение."

msgid ""
"This only works if the tuple comes from a space that has been formatted "
"with a :ref:`format clause <box_space-format>`."
msgstr ""
"Это сработает только в том случае, если кортеж приходит из спейса, "
"который был форматирован посредством :ref:`оператора формата <box_space-"
"format>`."

msgid ""
"the only possible option is ``names_only``.  If ``names_only`` is false "
"or omitted (default), then all the fields will appear twice, first with "
"numeric headings and second with name headings.  If ``names_only`` is "
"true, then all the fields will appear only once, with name headings."
msgstr ""
"единственный доступный параметр -- ``names_only``.  Если ``names_only`` "
"принимает значение false или не указан (по умолчанию), то все поля "
"появятся дважды: сначала с числовыми заголовками, а затем с именными "
"заголовками. Если же ``names_only`` = true, то все поля будут выведены "
"один раз с именными заголовками."

msgid "the only possible option is ``names_only``."
msgstr "единственный доступный параметр -- ``names_only``."

msgid ""
"If ``names_only`` is false or omitted (default), then all the fields will"
" appear twice, first with numeric headings and second with name headings."
msgstr ""
"Если ``names_only`` принимает значение false или не указан (по "
"умолчанию), то все поля появятся дважды: сначала с числовыми заголовками,"
" а затем с именными заголовками."

msgid ""
"If ``names_only`` is true, then all the fields will appear only once, "
"with name headings."
msgstr ""
"Если же ``names_only`` = true, то все поля будут выведены один раз с "
"именными заголовками."

msgid "field-number:value pair(s) and key:value pair(s) from the tuple"
msgstr "пары номер-поля:значение и пары ключ:значение из кортежа"

msgid ""
"In the following example, a tuple named ``t1`` is returned from a space "
"that has been formatted, then tables named ``t1map1`` and ``t1map2`` are "
"produced from ``t1``."
msgstr ""
"В следующем примере возвращается кортеж с именем ``t1`` из спейса после "
"форматирования, затем таблицы с именами ``t1map`` и ``t1map2`` создаются "
"из ``t1``."

msgid ""
"format = {{'field1', 'unsigned'}, {'field2', 'unsigned'}}\n"
"s = box.schema.space.create('test', {format = format})\n"
"s:create_index('pk',{parts={1,'unsigned',2,'unsigned'}})\n"
"t1 = s:insert{10, 20}\n"
"t1map = t1:tomap()\n"
"t1map_names_only = t1:tomap({names_only=true})"
msgstr ""
"format = {{'field1', 'unsigned'}, {'field2', 'unsigned'}}\n"
"s = box.schema.space.create('test', {format = format})\n"
"s:create_index('pk',{parts={1,'unsigned',2,'unsigned'}})\n"
"t1 = s:insert{10, 20}\n"
"t1map = t1:tomap()\n"
"t1map_names_only = t1:tomap({names_only=true})"

msgid ""
"``t1map`` will contain \"1: 10\", \"2: 20\", \"field1: 10\", \"field2: "
"20\"."
msgstr ""
"``t1map`` будет содержать \"1: 10\", \"2: 20\", \"field1: 10\", \"field2:"
" 20\"."

msgid "``t1map_names_only`` will contain \"field1: 10\", \"field2: 20\"."
msgstr "``t1map_names_only`` будет содержать \"field1: 10\" и \"field2: 20\"."

msgid ""
"If ``t`` is a tuple instance, :samp:`t:transform({start-field-number"
"},{fields-to-remove})` will return a tuple where, starting from field "
"``start-field-number``, a number of fields (``fields-to-remove``) are "
"removed. Optionally one can add more arguments after ``fields-to-remove``"
" to indicate new values that will replace what was removed."
msgstr ""
"Если ``t`` -- это экземпляр кортежа, то :samp:`t:transform({start-field-"
"number},{fields-to-remove})` вернет кортеж, где, начиная с поля ``start-"
"field-number``, удаляется количество полей (``fields-to-remove``). "
"Дополнительно можно добавить аргументы после ``fields-to-remove``, чтобы "
"указать новые значения на замену удаленных."

msgid ""
"If the original tuple comes from a space that has been formatted with a "
":ref:`format clause <box_space-format>`, the formatting will not be "
"preserved for the result tuple."
msgstr ""
"Если первоначальный кортеж приходит из спейса, который был форматирован "
"посредством :ref:`оператора формата <box_space-format>`, форматирование "
"возвращаемого кортежа не сохранится."

msgid "base 1, may be negative"
msgstr "начиная с 1, может быть отрицательным"

msgid ""
"In the following example, a tuple named ``t`` is created and then, "
"starting from the second field, two fields are removed but one new one is"
" added, then the result is returned."
msgstr ""
"В следующем примере создается кортеж под названием ``t``, а затем, "
"начиная со второго поля, удаляются два поля, а одно новое поле "
"добавляется, затем возвращается результат."

msgid ""
"tarantool> t = box.tuple.new{'Fld#1', 'Fld#2', 'Fld#3', 'Fld#4', 'Fld#5'}"
"\n"
"---\n"
"...\n"
"tarantool> t:transform(2, 2, 'x')\n"
"---\n"
"- ['Fld#1', 'x', 'Fld#4', 'Fld#5']\n"
"..."
msgstr ""
"tarantool> t = box.tuple.new{'Fld#1', 'Fld#2', 'Fld#3', 'Fld#4', 'Fld#5'}"
"\n"
"---\n"
"...\n"
"tarantool> t:transform(2, 2, 'x')\n"
"---\n"
"- ['Fld#1', 'x', 'Fld#4', 'Fld#5']\n"
"..."

msgid ""
"If ``t`` is a tuple instance, ``t:unpack()`` will return all fields, "
"``t:unpack(1)`` will return all fields starting with field number 1, "
"``t:unpack(1,5)`` will return all fields between field number 1 and field"
" number 5."
msgstr ""
"Если ``t`` -- это экземпляр кортежа, то ``t:unpack()`` вернет все поля, "
"``t:unpack(1)`` вернет все поля, начиная с поля №1, ``t:unpack(1,5)`` "
"вернет все поля между полем №1 и полем №5."

msgid "field(s) from the tuple."
msgstr "поле или поля из кортежа."

msgid "lua-value(s)"
msgstr "Lua-значение(я)"

msgid ""
"In the following example, a tuple named ``t`` is created and then all its"
" fields are selected, then the result is returned."
msgstr ""
"В следующем примере создается кортеж под названием ``t``, а затем "
"делается выборка всех полей, возвращается результат."

msgid ""
"tarantool> t = box.tuple.new{'Fld#1', 'Fld#2', 'Fld#3', 'Fld#4', 'Fld#5'}"
"\n"
"---\n"
"...\n"
"tarantool> t:unpack()\n"
"---\n"
"- Fld#1\n"
"- Fld#2\n"
"- Fld#3\n"
"- Fld#4\n"
"- Fld#5\n"
"..."
msgstr ""
"tarantool> t = box.tuple.new{'Fld#1', 'Fld#2', 'Fld#3', 'Fld#4', 'Fld#5'}"
"\n"
"---\n"
"...\n"
"tarantool> t:unpack()\n"
"---\n"
"- Fld#1\n"
"- Fld#2\n"
"- Fld#3\n"
"- Fld#4\n"
"- Fld#5\n"
"..."

msgid "Update a tuple."
msgstr "Обновление кортежа."

#, fuzzy
msgid ""
"This function updates a tuple which is not in a space. Compare the "
"function :extsamp:`box.space.{*{space-name}*}:update({*{key}*}, "
"{{{*{format}*}, {*{field_identifier}*}, {*{value}*}}, ...})` which "
"updates a tuple in a space."
msgstr ""
"Эта функция обновляет кортеж, который находится не в спейсе. Ср. функцию "
":extsamp:`box.space.{*{space-name}*}:update({*{key}*}, {{{*{format}*}, "
"{*{field_no}*}, {*{value}*}}, ...})`, которая обновляет кортеж в спейсе."

#, fuzzy
msgid ""
"For details: see the description for ``operator``, ``field_identifier``, "
"and ``value`` in the section :ref:`box.space.space-name:update{key, "
"format, {field_identifier, value}...) <box_space-update>`."
msgstr ""
"Более подробную информацию см. в описании ``operator``, ``field_no`` и "
"``value`` в разделе :ref:`box.space.space-name:update{key, format, "
"{field_number, value}...) <box_space-update>`."

msgid ""
"If the original tuple comes from a space that has been formatted with a "
":ref:`format clause <box_space-format>`, the formatting will be preserved"
" for the result tuple."
msgstr ""
"Если первоначальный кортеж приходит из спейса, который был форматирован "
"посредством :ref:`оператора формата <box_space-format>`, форматирование "
"возвращаемого кортежа сохранится."

msgid "operation type represented in string (e.g. '``=``' for 'assign new value')"
msgstr ""
"тип операции, представленный строкой (например, '``=``' означает "
"'присвоить новое значение')"

msgid ""
"what field the operation will apply to. The field number can be negative,"
" meaning the position from the end of tuple. (#tuple + negative field "
"number + 1)"
msgstr ""
"к какому полю применяется операция. Номер поля может быть отрицательным, "
"что означает, что позиция рассчитывается с конца кортежа. (#кортеж + "
"отрицательный номер поля + 1)"

msgid "what value will be applied"
msgstr "какое значение применяется"

msgid "new tuple"
msgstr "новый кортеж"

msgid ""
"In the following example, a tuple named ``t`` is created and then its "
"second field is updated to equal 'B'."
msgstr ""
"В следующем примере создается кортеж под названием ``t``, а затем второе "
"поле обновляется до равного 'B'."

msgid ""
"tarantool> t = box.tuple.new{'Fld#1', 'Fld#2', 'Fld#3', 'Fld#4', 'Fld#5'}"
"\n"
"---\n"
"...\n"
"tarantool> t:update({{'=', 2, 'B'}})\n"
"---\n"
"- ['Fld#1', 'B', 'Fld#3', 'Fld#4', 'Fld#5']\n"
"..."
msgstr ""
"tarantool> t = box.tuple.new{'Fld#1', 'Fld#2', 'Fld#3', 'Fld#4', 'Fld#5'}"
"\n"
"---\n"
"...\n"
"tarantool> t:update({{'=', 2, 'B'}})\n"
"---\n"
"- ['Fld#1', 'B', 'Fld#3', 'Fld#4', 'Fld#5']\n"
"..."

msgid ""
"Since Tarantool 2.3 a tuple can also be updated via :ref:`JSON paths"
"<json_paths-module>`."
msgstr ""
"Начиная с версии Tarantool 2.3 кортеж можно обновить с помощью "
":ref:`JSON-путей <json_paths-module>`."

msgid ""
"The same as ``tuple_object:update()``, but ignores errors. In case of an "
"error the tuple is left intact, but an error message is printed. Only "
"client errors are ignored, such as a bad field type, or wrong field "
"index/name. System errors, such as OOM, are not ignored and raised just "
"like with a normal ``update()``. Note that only bad operations are "
"ignored. All correct operations are applied."
msgstr ""

#, fuzzy
msgid ""
"operation type represented as a string (e.g. '``=``' for 'assign new "
"value')"
msgstr ""
"тип операции, представленный строкой (например, '``=``' означает "
"'присвоить новое значение')"

#, fuzzy
msgid ""
"the field to which the operation will be applied. The field number can be"
" negative, meaning the position from the end of tuple. (#tuple + negative"
" field number + 1)"
msgstr ""
"к какому полю применяется операция. Номер поля может быть отрицательным, "
"что означает, что позиция рассчитывается с конца кортежа. (#кортеж + "
"отрицательный номер поля + 1)"

#, fuzzy
msgid "the value which will be applied"
msgstr "какое значение применяется"

msgid "See the following example where one operation is applied, and one is not."
msgstr ""

msgid ""
"tarantool> t = box.tuple.new({1, 2, 3})\n"
"tarantool> t2 = t:upsert({{'=', 5, 100}})\n"
"UPSERT operation failed:\n"
"ER_NO_SUCH_FIELD_NO: Field 5 was not found in the tuple\n"
"---\n"
"...\n"
"\n"
"tarantool> t\n"
"---\n"
"- [1, 2, 3]\n"
"...\n"
"\n"
"tarantool> t2\n"
"---\n"
"- [1, 2, 3]\n"
"...\n"
"\n"
"tarantool> t2 = t:upsert({{'=', 5, 100}, {'+', 1, 3}})\n"
"UPSERT operation failed:\n"
"ER_NO_SUCH_FIELD_NO: Field 5 was not found in the tuple\n"
"---\n"
"...\n"
"\n"
"tarantool> t\n"
"---\n"
"- [1, 2, 3]\n"
"...\n"
"\n"
"tarantool> t2\n"
"---\n"
"- [4, 2, 3]\n"
"..."
msgstr ""

msgid "Example"
msgstr "Пример"

msgid ""
"This function will illustrate how to convert tuples to/from Lua tables "
"and lists of scalars:"
msgstr ""
"Представленная ниже функция проиллюстрирует, как можно преобразовать "
"кортежи в Lua-таблицы и списки скаляров и обратно:"

msgid ""
"tuple = box.tuple.new({scalar1, scalar2, ... scalar_n}) -- scalars to "
"tuple\n"
"lua_table = {tuple:unpack()}                            -- tuple to Lua "
"table\n"
"lua_table = tuple:totable()                             -- tuple to Lua "
"table\n"
"scalar1, scalar2, ... scalar_n = tuple:unpack()         -- tuple to "
"scalars\n"
"tuple = box.tuple.new(lua_table)                        -- Lua table to "
"tuple"
msgstr ""
"tuple = box.tuple.new({scalar1, scalar2, ... scalar_n}) -- скаляры в "
"кортеж\n"
"lua_table = {tuple:unpack()}                            -- кортеж в "
"Lua-таблицу\n"
"lua_table = tuple:totable()                             -- кортеж в "
"Lua-таблицу\n"
"scalar1, scalar2, ... scalar_n = tuple:unpack()         -- кортеж в "
"скаляры\n"
"tuple = box.tuple.new(lua_table)                        -- Lua-таблицу в "
"кортеж"

msgid ""
"Then it will find the field that contains 'b', remove that field from the"
" tuple, and display how many bytes remain in the tuple. The function uses"
" Tarantool ``box.tuple`` functions ``new()``, ``unpack()``, ``find()``, "
"``transform()``, ``bsize()``."
msgstr ""
"Затем она найдет поле, которое содержит значение 'b', удалит это поле из "
"кортежа и отобразит количество байтов, оставшихся в кортеже. Данная "
"функция использует следующие функции ``box.tuple`` Tarantool'а: "
"``new()``, ``unpack()``, ``find()``, ``transform()``, ``bsize()``."

msgid ""
"function example()\n"
"  local tuple1, tuple2, lua_table_1, scalar1, scalar2, scalar3, "
"field_number\n"
"  local luatable1 = {}\n"
"  tuple1 = box.tuple.new({'a', 'b', 'c'})\n"
"  luatable1 = tuple1:totable()\n"
"  scalar1, scalar2, scalar3 = tuple1:unpack()\n"
"  tuple2 = box.tuple.new(luatable1[1],luatable1[2],luatable1[3])\n"
"  field_number = tuple2:find('b')\n"
"  tuple2 = tuple2:transform(field_number, 1)\n"
"  return 'tuple2 = ' , tuple2 , ' # of bytes = ' , tuple2:bsize()\n"
"end"
msgstr ""
"function example()\n"
"  local tuple1, tuple2, lua_table_1, scalar1, scalar2, scalar3, "
"field_number\n"
"  local luatable1 = {}\n"
"  tuple1 = box.tuple.new({'a', 'b', 'c'})\n"
"  luatable1 = tuple1:totable()\n"
"  scalar1, scalar2, scalar3 = tuple1:unpack()\n"
"  tuple2 = box.tuple.new(luatable1[1],luatable1[2],luatable1[3])\n"
"  field_number = tuple2:find('b')\n"
"  tuple2 = tuple2:transform(field_number, 1)\n"
"  return 'tuple2 = ' , tuple2 , ' # of bytes = ' , tuple2:bsize()\n"
"end"

msgid "... And here is what happens when one invokes the function:"
msgstr "... А вот что происходит, когда вызывается функция:"

msgid ""
"tarantool> example()\n"
"---\n"
"- tuple2 =\n"
"- ['a', 'c']\n"
"- ' # of bytes = '\n"
"- 5\n"
"..."
msgstr ""
"tarantool> example()\n"
"---\n"
"- tuple2 =\n"
"- ['a', 'c']\n"
"- ' # of bytes = '\n"
"- 5\n"
"..."

#~ msgid ""
#~ "In Lua, `lua-table-value:pairs() "
#~ "<https://www.lua.org/pil/7.3.html>`_ is a method "
#~ "which returns: ``function``, ``lua-table-"
#~ "value``, ``nil``."
#~ msgstr ""
#~ "В языке Lua метод `lua-table-"
#~ "value:pairs() <https://www.lua.org/pil/7.3.html>`_ "
#~ "возвращает: ``функцию``, ``значение-Lua-таблицы``, "
#~ "``nil``."

#~ msgid ""
#~ "Tarantool has extended this so that "
#~ "``tuple-value:pairs()`` returns: ``function``, "
#~ "``tuple-value``, ``nil``. It is useful"
#~ " for Lua iterators, because Lua "
#~ "iterators traverse a value's components "
#~ "until an end marker is reached."
#~ msgstr ""
#~ "В Tarantool'е этот метод расширен так,"
#~ " что ``tuple-value:pairs()`` возвращает: "
#~ "``функцию``, ``значение-кортежа``, ``nil``. Это "
#~ "нужно для Lua-итераторов, поскольку они "
#~ "обходят компоненты значения до тех пор,"
#~ " пока не достигнут маркера окончания."
