
msgid "tuple_object[field-path]"
msgstr ""

msgid ""
"If ``t`` is a tuple instance, ``t['path']`` will return the field or "
"subset of fields that are in ``path``. ``path`` must be a well formed "
"JSON specification. ``path`` may contain field names if the tuple has "
"been retrieved from a space that has an associated :ref:`format "
"<box_space-format>`."
msgstr ""
"Если ``t`` -- это экземпляр кортежа, то ``t['path']`` вернет поле или ряд"
" полей, которые находятся в ``path``. Параметр ``path`` должен "
"представлять собой правильную JSON-спецификацию. ``path`` может содержать"
" имена полей, если кортеж был получен из спейса с заданным :ref:`форматом"
" <box_space-format>`."

msgid ""
"To prevent ambiguity, Tarantool first tries to interpret the request as "
":doc:`/reference/reference_lua/box_tuple/field_number` or "
":doc:`/reference/reference_lua/box_tuple/field_name`. If and only if that"
" fails, Tarantool tries to interpret the request as ``tuple_object[field-"
"path]``."
msgstr ""
"Во избежание неоднозначности Tarantool сначала пытается интерпретировать "
"запрос как :doc:`/reference/reference_lua/box_tuple/field_number` или "
":doc:`/reference/reference_lua/box_tuple/field_name`. И только в том "
"случае, если это не удается, Tarantool пытается интерпретировать запрос "
"как ``tuple_object[field-path]``."

msgid ""
"The path must be a well formed JSON specification, but it may be preceded"
" by '.'. The '.' is a signal that the path acts as a suffix for the "
"tuple."
msgstr ""
"Путь path должен представлять собой правильную JSON-спецификацию, но в "
"начале может стоять '.'. Символ '.' означает, что путь выступает в "
"качестве суффикса для кортежа."

msgid ""
"The advantage of specifying a path is that Tarantool will use it to "
"search through a tuple body and get only the tuple part, or parts, that "
"are actually necessary."
msgstr ""
"При указании пути Tarantool воспользуется им для поиска по телу кортежа и"
" вернет только тот компонент кортежа, который действительно необходим."

msgid ""
"In the following example, a tuple named ``t`` is returned from "
"``replace`` and then only the relevant part (in this case, matching a "
"name) of a relevant field is returned. Namely: the second field, the "
"sixth part, the value following 'value='."
msgstr ""
"В следующем примере кортеж под названием ``t`` возвращается после "
"операции замены, а затем возвращается только необходимый компонент (в "
"данном случае совпадение имени) соответствующего поля. В частности: "
"второе поле, шестой компонент, значение после 'value='."

msgid ""
"tarantool> format = {}\n"
"---\n"
"...\n"
"tarantool> format[1] = {name = 'field1', type = 'unsigned'}\n"
"---\n"
"...\n"
"tarantool> format[2] = {name = 'field2', type = 'array'}\n"
"---\n"
"...\n"
"tarantool> format[3] = {name = 'field4', type = 'string' }\n"
"---\n"
"...\n"
"tarantool> format[4] = {name = \"[2][6]['пw']['Я']\", type = 'string'}\n"
"---\n"
"...\n"
"tarantool> s = box.schema.space.create('test', {format = format})\n"
"---\n"
"...\n"
"tarantool> pk = s:create_index('pk')\n"
"---\n"
"...\n"
"tarantool> field2 = {1, 2, 3, \"4\", {5,6,7}, {пw={Я=\"п\"}, key=\"V!\", "
"value=\"K!\"}}\n"
"---\n"
"...\n"
"tarantool> t = s:replace{1, field2, \"123456\", \"Not K!\"}\n"
"---\n"
"...\n"
"tarantool> t[\"[2][6]['value']\"]\n"
"---\n"
"- K!\n"
"..."
msgstr ""
