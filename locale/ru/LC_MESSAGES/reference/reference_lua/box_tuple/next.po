msgid ""
msgstr ""
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"X-Crowdin-Project: tarantool-docs\n"
"X-Crowdin-Project-ID: 442986\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /en/reference/reference_lua/box_tuple/next.pot\n"
"X-Crowdin-File-ID: 968\n"
"Project-Id-Version: tarantool-docs\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Language-Team: Russian\n"
"Language: ru_RU\n"
"PO-Revision-Date: 2021-04-16 05:03\n"

msgid "tuple_object:next()"
msgstr ""

msgid "An analogue of the Lua ``next()`` function, but for a tuple object. When called without arguments, ``tuple:next()`` returns the first field from a tuple. Otherwise, it returns the field next to the indicated position."
msgstr "Аналог функции Lua ``next()``, но для кортежа. При вызове без аргументов, ``tuple:next()`` возвращает первое поле из кортежа. В противном случае возвращается поле рядом с указанной позицией."

msgid "However ``tuple:next()`` is not really efficient, and it is better to use :doc:`tuple:pairs()/ipairs() </reference/reference_lua/box_tuple/pairs>`."
msgstr "Однако ``tuple:next()`` не очень эффективен, и лучше использовать :doc:`tuple:pairs()/ipairs() </reference/reference_lua/box_tuple/pairs>`."

msgid "return"
msgstr "возвращает"

msgid "field number and field value"
msgstr "номер и значение поля"

msgid "rtype"
msgstr "тип возвращаемого значения"

msgid "number and field type"
msgstr "число (number) и тип поля"

msgid "tarantool> tuple = box.tuple.new({5, 4, 3, 2, 0})\n"
"---\n"
"...\n\n"
"tarantool> tuple:next()\n"
"---\n"
"- 1\n"
"- 5\n"
"...\n\n"
"tarantool> tuple:next(1)\n"
"---\n"
"- 2\n"
"- 4\n"
"...\n\n"
"tarantool> ctx, field = tuple:next()\n"
"---\n"
"...\n\n"
"tarantool> while field do\n"
"         > print(field)\n"
"         > ctx, field = tuple:next(ctx)\n"
"         > end\n"
"5\n"
"4\n"
"3\n"
"2\n"
"0\n"
"---\n"
"..."
msgstr ""

