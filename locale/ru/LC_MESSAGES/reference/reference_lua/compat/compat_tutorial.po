
msgid "Tutorial: Module compat"
msgstr ""

msgid ""
"This tutorial covers the following ``compat`` module API and its usage:"
msgstr ""

msgid "Listing options"
msgstr ""

msgid ""
"The options list is serialized in the interactive console with additional "
"details for user convenience:"
msgstr ""

msgid "All non-obsolete options in order new > old > default."
msgstr ""

msgid ""
"Serialization returns array-like table with tables ``{<option> = <value>}``."
msgstr ""

msgid ""
"The result of compat serialization can still be indexed as a normal key-"
"value table."
msgstr ""

msgid ""
"tarantool> compat = require('compat')\n"
"---\n"
"...\n"
"\n"
"tarantool> compat\n"
"---\n"
"- - json_escape_forward_slash: new\n"
"- - option_2: old\n"
"- - option_default_old: default (old)\n"
"- - option_default_new: default (new)\n"
"..."
msgstr ""

msgid "Listing options details"
msgstr ""

msgid "``current`` – the state of the option."
msgstr ""

msgid "``default`` – the default state of the option."
msgstr ""

msgid ""
"``brief`` – text options description with a link to more detailed "
"description."
msgstr ""

msgid ""
"tarantool> compat.option_default_new\n"
"---\n"
"- current: old\n"
"default: new\n"
"brief: <...>\n"
"..."
msgstr ""

msgid "Changing option value"
msgstr ""

msgid ""
"You can do it directly, or by passing a table with option-value. Possible "
"values to assign are 'new' , 'old', and 'default'."
msgstr ""

msgid ""
"tarantool> compat.json_escape_forward_slash = 'old'\n"
"---\n"
"...\n"
"\n"
"tarantool> compat{json_escape_forward_slash = 'new', option_2 = 'default'}\n"
"---\n"
"..."
msgstr ""

msgid "Restoring defaults"
msgstr ""

msgid "By setting 'default' value to an option:"
msgstr ""

msgid ""
"tarantool> compat.option_2 = 'default'\n"
"---\n"
"...\n"
"\n"
"tarantool> compat.option_2\n"
"---\n"
"- current: default\n"
"- default: new\n"
"- brief: <...>\n"
"..."
msgstr ""

msgid "Getting compat setup with compat.dump()"
msgstr ""

msgid ""
"tarantool> compat({\n"
"         >     obsolete_set_explicitly = 'new',\n"
"         >     option_set_old = 'old',\n"
"         >     option_set_new = 'new'\n"
"         > })\n"
"---\n"
"...\n"
"\n"
"tarantool> compat\n"
"---\n"
"- - option_set_old: old\n"
"- - option_set_new: new\n"
"- - option_default_old: default (old)\n"
"- - option_default_new: default (new)\n"
"...\n"
"\n"
"# Obsolete options are not returned in serialization, but have the following values:\n"
"# - obsolete_option_default: default (new)\n"
"# - obsolete_set_explicitly: new\n"
"\n"
"# nil does output obsolete unset options as 'default'\n"
"tarantool> compat.dump()\n"
"---\n"
"- require('compat')({\n"
"            option_set_old          = 'old',\n"
"            option_set_new          = 'new',\n"
"            option_default_old      = 'default',\n"
"            option_default_new      = 'default',\n"
"            obsolete_option_default = 'default', -- obsolete since X.Y\n"
"            obsolete_set_explicitly = 'new',     -- obsolete since X.Y\n"
"    })\n"
"...\n"
"\n"
"# 'current' is the same as nil with default set to current values\n"
"tarantool> compat.dump('current')\n"
"---\n"
"- require('compat')({\n"
"            option_set_old          = 'old',\n"
"            option_set_new          = 'new',\n"
"            option_default_old      = 'old',\n"
"            option_default_new      = 'new',\n"
"            obsolete_option_default = 'new',     -- obsolete since X.Y\n"
"            obsolete_set_explicitly = 'new',     -- obsolete since X.Y\n"
"    })\n"
"...\n"
"\n"
"# 'new' outputs obsolete as 'new'.\n"
"tarantool> compat.dump('new')\n"
"---\n"
"- require('compat')({\n"
"            option_set_old          = 'new',\n"
"            option_set_new          = 'new',\n"
"            option_default_old      = 'new',\n"
"            option_default_new      = 'new',\n"
"            obsolete_option_default = 'new',     -- obsolete since X.Y\n"
"            obsolete_set_explicitly = 'new',     -- obsolete since X.Y\n"
"    })\n"
"...\n"
"\n"
"# 'old' outputs obsolete options as 'new'.\n"
"tarantool> compat.dump('old')\n"
"---\n"
"- require('compat')({\n"
"            option_set_old          = 'old',\n"
"            option_set_new          = 'old',\n"
"            option_default_old      = 'old',\n"
"            option_default_new      = 'old',\n"
"            obsolete_option_default = 'new',     -- obsolete since X.Y\n"
"            obsolete_set_explicitly = 'new',     -- obsolete since X.Y\n"
"    })\n"
"...\n"
"\n"
"# 'default' does output obsolete options as default.\n"
"tarantool> dump('default')\n"
"---\n"
"- require('compat')({\n"
"            option_set_old          = 'default',\n"
"            option_set_new          = 'default',\n"
"            option_default_old      = 'default',\n"
"            option_default_new      = 'default',\n"
"            obsolete_option_default = 'default', -- obsoleted since X.Y\n"
"            obsolete_set_explicitly = 'default', -- obsoleted since X.Y\n"
"    })\n"
"..."
msgstr ""

msgid "Setting all options to a specific value with compat.dump()"
msgstr ""

msgid "use compat.dump() to get a specific configuration"
msgstr ""

msgid "copy and paste it into console (or use loadstring())"
msgstr ""

msgid ""
"tarantool> compat.dump('new')\n"
"---\n"
"- require('compat')({\n"
"      option_2 = 'new',\n"
"      json_escape_forward_slash = 'new',\n"
"  })\n"
"...\n"
"tarantool> require('compat')({\n"
"      option_2 = 'new',\n"
"      json_escape_forward_slash = 'new',\n"
"  })\n"
"---\n"
"...\n"
"\n"
"tarantool> compat\n"
"---\n"
"- - json_escape_forward_slash: new\n"
"- - option_2: new\n"
"..."
msgstr ""

msgid "Adding an option during runtime"
msgstr ""

msgid "User must provide a table with:"
msgstr ""

msgid "name (string)"
msgstr ""

msgid "default (’new’ / ’old’)"
msgstr ""

msgid "brief (explanation of the option, can be multiline string)"
msgstr ""

msgid ""
"obsolete (’X.Y’ / nil) — tarantool version that marked option as obsolete. "
"When nil, option is treated as non-obsolete)"
msgstr ""

msgid ""
"action function (argument - boolean is_new, changes the behavior "
"accordingly)"
msgstr ""

msgid ""
"run_action_now (true / false / nil) if add_options should run action "
"afterwards, false by default"
msgstr ""

msgid "Option hot reload:"
msgstr ""

msgid ""
"You can change an existing option in runtime using add_option(), it will "
"update all the fields but keep currently selected behavior if any. The new "
"action will be called afterwards."
msgstr ""

#, python-format
msgid ""
"tarantool> compat.add_option{\n"
"                 name = 'option_4',\n"
"                 default = 'new',\n"
"                 brief = \"<...>\",\n"
"                 obsolete = nil,          -- you can explicitly mark the option as non-obsolete\n"
"                 action = function(is_new)\n"
"                      print((\"option_4 action was called with is_new = %s!\"):format(is_new))\n"
"                 end,\n"
"                 run_action_now = true\n"
"           }\n"
"option_4 postaction was called with is_new = true!\n"
"---\n"
"...\n"
"\n"
"tarantool> compat.add_option{             -- hot reload of option_4\n"
"                 name = 'option_4',\n"
"                 default = 'old',         -- different default\n"
"                 brief = \"<...>\",\n"
"                 action = function(is_new)\n"
"                      print((\"new option_4 action was called with is_new = %s!\"):format(is_new))\n"
"                 end\n"
"           }\n"
"---\n"
"...         -- action is not called by default"
msgstr ""
