# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-06 14:05+0000\n"
"PO-Revision-Date: 2019-12-06 16:16+0300\n"
"Last-Translator: \n"
"Language: ru\n"
"Language-Team: \n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

msgid "Module `crypto`"
msgstr "Модуль `crypto`"

msgid "Overview"
msgstr "Общие сведения"

msgid ""
"\"Crypto\" is short for \"Cryptography\", which generally refers to the "
"production of a digest value from a function (usually a `Cryptographic "
"hash function`_), applied against a string. Tarantool's ``crypto`` module"
" supports ten types of cryptographic hash functions (AES_, DES_, DSS_, "
"MD4_, MD5_, MDC2_, RIPEMD_, SHA-1_, SHA-2_). Some of the crypto "
"functionality is also present in the :ref:`digest` module."
msgstr ""
"\"Crypto\" -- это сокращенно \"криптография\", что обычно означает "
"производство значения дайджеста из функции (как правило, "
"криптографической хеш-функции -- `Cryptographic hash function`_), "
"примененной к строке. Модуль ``crypto`` Tarantool'а поддерживает десять "
"типов криптографических хеш-функций (AES_, DES_, DSS_, MD4_, MD5_, MDC2_,"
" RIPEMD_, SHA-1_, SHA-2_). В модуле :ref:`digest` также есть некоторые "
"криптографические функции."

msgid "Index"
msgstr "Указатель"

msgid "Below is a list of all ``crypto`` functions."
msgstr "Ниже приведен перечень всех функций модуля ``crypto``."

msgid "Name"
msgstr "Имя"

msgid "Use"
msgstr "Назначение"

msgid ":ref:`crypto.cipher.{algorithm}.{cipher_mode}.encrypt() <crypto-cipher>`"
msgstr ":ref:`crypto.cipher.{algorithm}.{cipher_mode}.encrypt() <crypto-cipher>`"

msgid "Encrypt a string"
msgstr "Шифрование строки"

msgid ":ref:`crypto.cipher.{algorithm}.{cipher_mode}.decrypt() <crypto-cipher>`"
msgstr ":ref:`crypto.cipher.{algorithm}.{cipher_mode}.decrypt() <crypto-cipher>`"

msgid "Decrypt a string"
msgstr "Расшифрование строки"

msgid ":ref:`crypto.digest.{algorithm}() <crypto-digest>`"
msgstr ":ref:`crypto.digest.{algorithm}() <crypto-digest>`"

msgid "Get a digest"
msgstr "Получение дайджеста"

msgid ":ref:`crypto.hmac.{algorithm}() <crypto-hmac>`"
msgstr ":ref:`crypto.hmac.{algorithm}() <crypto-hmac>`"

msgid "Get a hash key"
msgstr "Получение хеш-ключа"

msgid ""
"Pass or return a cipher derived from the string, key, and (optionally, "
"sometimes) initialization vector. The four choices of algorithms:"
msgstr ""
"Передача или возврат шифрованного сообщения, полученного из строки, ключа"
" и (необязательно) вектора инициализации. Четыре алгоритма на выбор:"

msgid "aes128 - aes-128 (with 192-bit binary strings using AES)"
msgstr "aes128 - aes-128 (128-битные двоичные строки с использованием AES)"

msgid "aes192 - aes-192 (with 192-bit binary strings using AES)"
msgstr "aes192 - aes-192 (192-битные двоичные строки с использованием AES)"

msgid "aes256 - aes-256 (with 256-bit binary strings using AES)"
msgstr "aes256 - aes-256 (256-битные двоичные строки с использованием AES)"

msgid ""
"des    - des (with 56-bit binary strings using DES, though DES is not "
"recommended)"
msgstr ""
"des    - des (56-битные двоичные строки с использованием DES, хотя "
"использование DES не рекомендуется)"

msgid "Four choices of block cipher modes are also available:"
msgstr "Также доступны четыре режима блочного шифрования на выбор:"

msgid "cbc - Cipher Block Chaining"
msgstr "cbc - Сцепление блоков шифротекста "

msgid "cfb - Cipher Feedback"
msgstr "cfb - Обратная связь по шифротексту"

msgid "ecb - Electronic Codebook"
msgstr "ecb - Электронная кодовая книга"

msgid "ofb - Output Feedback"
msgstr "ofb - Обратная связь по выходу"

msgid "For more information, read the article about `Encryption Modes`_"
msgstr ""
"Для получения дополнительной информации, см. статью о режимах шифрования "
"`Encryption Modes`_"

msgid "**Example:**"
msgstr "**Пример:**"

msgid ""
"_16byte_iv='1234567890123456'\n"
"_16byte_pass='1234567890123456'\n"
"e=crypto.cipher.aes128.cbc.encrypt('string', _16byte_pass, _16byte_iv)\n"
"crypto.cipher.aes128.cbc.decrypt(e,  _16byte_pass, _16byte_iv)"
msgstr ""
"_16byte_iv='1234567890123456'\n"
"_16byte_pass='1234567890123456'\n"
"e=crypto.cipher.aes128.cbc.encrypt('string', _16byte_pass, _16byte_iv)\n"
"crypto.cipher.aes128.cbc.decrypt(e,  _16byte_pass, _16byte_iv)"

msgid ""
"Pass or return a digest derived from the string. The eleven algorithm "
"choices:"
msgstr "Передача или возврат дайджеста из строки. Выбор из одиннадцати алгоритмов:"

msgid "dss - dss (using DSS)"
msgstr "dss - dss (с использованием DSS)"

msgid "dss1 - dss (using DSS-1)"
msgstr "dss1 - dss (с использованием DSS-1)"

msgid "md4 - md4 (with 128-bit binary strings using MD4)"
msgstr "md4 - md4 (128-битные двоичные строки с использованием MD4)"

msgid "md5 - md5 (with 128-bit binary strings using MD5)"
msgstr "md5 - md5 (128-битные двоичные строки с использованием MD5)"

msgid "mdc2 - mdc2 (using MDC2)"
msgstr "mdc2 - mdc2 (с использованием MDC2)"

msgid "ripemd160 - ripemd (with 160-bit binary strings using RIPEMD-160)"
msgstr ""
"ripemd160 - ripemd (160-битные двоичные строки с использованием "
"RIPEMD-160)"

msgid "sha1 - sha-1 (with 160-bit binary strings using SHA-1)"
msgstr "sha1 - sha-1 (160-битные двоичные строки с использованием SHA-1)"

msgid "sha224 - sha-224 (with 224-bit binary strings using SHA-2)"
msgstr "sha224 - sha-224 (224-битные двоичные строки с использованием SHA-2)"

msgid "sha256 - sha-256 (with 256-bit binary strings using SHA-2)"
msgstr "sha256 - sha-256 (256-битные двоичные строки с использованием SHA-2)"

msgid "sha384 - sha-384 (with 384-bit binary strings using SHA-2)"
msgstr "sha384 - sha-384 (384-битные двоичные строки с использованием SHA-2)"

msgid "sha512 - sha-512(with 512-bit binary strings using SHA-2)."
msgstr "sha512 - sha-512(512-битные двоичные строки с использованием SHA-2)."

msgid ""
"crypto.digest.md4('string')\n"
"crypto.digest.sha512('string')"
msgstr ""
"crypto.digest.md4('string')\n"
"crypto.digest.sha512('string')"

msgid ""
"Pass a key and a string. The result is an `HMAC "
"<https://en.wikipedia.org/wiki/HMAC>`_ message authentication code. The "
"eight algorithm choices:"
msgstr ""
"Передача ключа и строки. Результатом будет код аутентификации сообщения "
"`HMAC <https://ru.wikipedia.org/wiki/HMAC>`_. 8 алгоритмов на выбор:"

msgid "md4 or md4_hex - md4 (with 128-bit binary strings using MD4)"
msgstr "md4 или md4_hex - md4 (128-битные двоичные строки с использованием MD4)"

msgid "md5 or md5_hex - md5 (with 128-bit binary strings using MD5)"
msgstr "md5 или md5_hex - md5 (128-битные двоичные строки с использованием MD5)"

msgid ""
"ripemd160 or ripemd160_hex - ripemd (with 160-bit binary strings using "
"RIPEMD-160)"
msgstr ""
"ripemd160 или ripemd160_hex - ripemd (160-битные двоичные строки с "
"использованием RIPEMD-160)"

msgid "sha1 or sha1_hex - sha-1 (with 160-bit binary strings using SHA-1)"
msgstr ""
"sha1 или sha1_hex - sha-1 (160-битные двоичные строки с использованием "
"SHA-1)"

msgid "sha224 or sha224_hex - sha-224 (with 224-bit binary strings using SHA-2)"
msgstr ""
"sha224 или sha224_hex - sha-224 (224-битные двоичные строки с "
"использованием SHA-2)"

msgid "sha256 or sha256_hex - sha-256 (with 256-bit binary strings using SHA-2)"
msgstr ""
"sha256 или sha256_hex - sha-256 (256-битные двоичные строки с "
"использованием SHA-2)"

msgid "sha384 or sha384_hex - sha-384 (with 384-bit binary strings using SHA-2)"
msgstr ""
"sha384 или sha384_hex - sha-384 (384-битные двоичные строки с "
"использованием SHA-2)"

msgid "sha512 or sha512_hex - sha-512(with 512-bit binary strings using SHA-2)."
msgstr ""
"sha512 или sha512_hex - sha-512(512-битные двоичные строки с "
"использованием SHA-2)."

msgid ""
"crypto.hmac.md4('key', 'string')\n"
"crypto.hmac.md4_hex('key', 'string')"
msgstr ""
"crypto.hmac.md4('key', 'string')\n"
"crypto.hmac.md4_hex('key', 'string')"

msgid "Incremental methods in the crypto module"
msgstr "Инкрементальные методы в модуле ``crypto``"

msgid ""
"Suppose that a digest is done for a string 'A', then a new part 'B' is "
"appended to the string, then a new digest is required. The new digest "
"could be recomputed for the whole string 'AB', but it is faster to take "
"what was computed before for 'A' and apply changes based on the new part "
"'B'. This is called multi-step or \"incremental\" digesting, which "
"Tarantool supports for all crypto functions."
msgstr ""
"Предположим, что вычислен дайджест для строки 'A', затем часть 'B' "
"добавляется в строку, необходим новый дайджест. Новый дайджест можно "
"пересчитать для всей строки 'AB', но быстрее будет взять вычисленный "
"дайджест для 'A' и внести изменения на основании добавленной части 'B'. "
"Это называется многошаговым процессом или \"инкрементным\" "
"хеш-суммированием, которое поддерживает Tarantool поддерживает для всех "
"криптографических функций."

msgid ""
"crypto = require('crypto')\n"
"\n"
"-- print aes-192 digest of 'AB', with one step, then incrementally\n"
"key = 'key/key/key/key/key/key/'\n"
"iv =  'iviviviviviviviv'\n"
"print(crypto.cipher.aes192.cbc.encrypt('AB', key, iv))\n"
"c = crypto.cipher.aes192.cbc.encrypt.new(key)\n"
"c:init(nil, iv)\n"
"c:update('A')\n"
"c:update('B')\n"
"print(c:result())\n"
"c:free()\n"
"\n"
"-- print sha-256 digest of 'AB', with one step, then incrementally\n"
"print(crypto.digest.sha256('AB'))\n"
"c = crypto.digest.sha256.new()\n"
"c:init()\n"
"c:update('A')\n"
"c:update('B')\n"
"print(c:result())\n"
"c:free()"
msgstr ""
"crypto = require('crypto')\n"
"\n"
"-- вывести дайджест 'AB' по aes-192 пошагово, затем с инкрементом\n"
"key = 'key/key/key/key/key/key/'\n"
"iv =  'iviviviviviviviv'\n"
"print(crypto.cipher.aes192.cbc.encrypt('AB', key, iv))\n"
"c = crypto.cipher.aes192.cbc.encrypt.new(key)\n"
"c:init(nil, iv)\n"
"c:update('A')\n"
"c:update('B')\n"
"print(c:result())\n"
"c:free()\n"
"\n"
"-- вывести дайджест 'AB' по sha-256 пошагово, затем с инкрементом\n"
"print(crypto.digest.sha256('AB'))\n"
"c = crypto.digest.sha256.new()\n"
"c:init()\n"
"c:update('A')\n"
"c:update('B')\n"
"print(c:result())\n"
"c:free()"

msgid "Getting the same results from digest and crypto modules"
msgstr "Получение одинаковых результатов из модулей digest и crypto"

msgid ""
"The following functions are equivalent. For example, the ``digest`` "
"function and the ``crypto`` function will both produce the same result."
msgstr ""
"Следующие функции равноценны. Например, функция ``digest`` и функция "
"``crypto`` приведут к одному результату."

msgid ""
"crypto.cipher.aes256.cbc.encrypt('x',b32,b16)==digest.aes256cbc.encrypt('x',b32,b16)"
"\n"
"crypto.digest.md4('string') == digest.md4('string')\n"
"crypto.digest.md5('string') == digest.md5('string')\n"
"crypto.digest.sha1('string') == digest.sha1('string')\n"
"crypto.digest.sha224('string') == digest.sha224('string')\n"
"crypto.digest.sha256('string') == digest.sha256('string')\n"
"crypto.digest.sha384('string') == digest.sha384('string')\n"
"crypto.digest.sha512('string') == digest.sha512('string')"
msgstr ""
"crypto.cipher.aes256.cbc.encrypt('x',b32,b16)==digest.aes256cbc.encrypt('x',b32,b16)"
"\n"
"crypto.digest.md4('string') == digest.md4('string')\n"
"crypto.digest.md5('string') == digest.md5('string')\n"
"crypto.digest.sha1('string') == digest.sha1('string')\n"
"crypto.digest.sha224('string') == digest.sha224('string')\n"
"crypto.digest.sha256('string') == digest.sha256('string')\n"
"crypto.digest.sha384('string') == digest.sha384('string')\n"
"crypto.digest.sha512('string') == digest.sha512('string')"
