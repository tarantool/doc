# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-06 14:05+0000\n"
"PO-Revision-Date: 2019-12-06 16:16+0300\n"
"Last-Translator: \n"
"Language: ru\n"
"Language-Team: \n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

msgid "Module `csv`"
msgstr "Модуль `csv`"

msgid "Overview"
msgstr "Общие сведения"

msgid ""
"The ``csv`` module handles records formatted according to Comma-"
"Separated-Values (CSV) rules."
msgstr ""
"Модуль ``csv`` обрабатывает записи, форматированные в соответствии с "
"правилами CSV (значения, разделенные запятыми)."

msgid "The default formatting rules are:"
msgstr "По умолчанию, используются следующие правила форматирования:"

msgid ""
"Lua `escape sequences`_ such as \\\\n or \\\\10 are legal within strings "
"but not within files,"
msgstr ""
"Escape-последовательности `escape sequences`_ в Lua, такие как \\\\n или "
"\\\\10, можно использовать в строках, но не в файлах,"

msgid "Commas designate end-of-field,"
msgstr "Запятые обозначают конец поля,"

msgid "Line feeds, or line feeds plus carriage returns, designate end-of-record,"
msgstr ""
"Символы перевода строки или перевода строки плюс возврата каретки "
"означают конец записи,"

msgid "Leading or trailing spaces are ignored,"
msgstr "Начальные и конечные пробелы игнорируются,"

msgid "Quote marks may enclose fields or parts of fields,"
msgstr "Кавычками могут обрамляться поля или компоненты полей,"

msgid ""
"When enclosed by quote marks, commas and line feeds and spaces are "
"treated as ordinary characters, and a pair of quote marks \"\" is treated"
" as a single quote mark."
msgstr ""
"При обрамлении кавычками запятые, символы перевода строки и пробелы "
"считаются обычными символами, а двойные кавычки \"\" считаются "
"одинарными."

msgid "The possible options which can be passed to csv functions are:"
msgstr "Параметры, которые можно передать в функции модуля csv:"

msgid ""
":samp:`delimiter = {string}` (default: comma) -- single-byte character to"
" designate end-of-field"
msgstr ""
":samp:`delimiter = {строка}` (по умолчанию: запятая) -- однобайтовый "
"символ для обозначения конца поля"

msgid ""
":samp:`quote_char = {string}` (default: quote mark) -- single-byte "
"character to designate encloser of string"
msgstr ""
":samp:`quote_char = {строка}` (по умолчанию: кавычка) -- однобайтовый "
"символ для обозначения закрытия строки"

msgid ""
":samp:`chunk_size = {number}` (default: 4096) -- number of characters to "
"read at once (usually for file-IO efficiency)"
msgstr ""
":samp:`chunk_size = {число}` (по умолчанию: 4096) -- число символов для "
"одновременного чтения (обычно для эффективности файлового ввода-вывода)"

msgid ""
":samp:`skip_head_lines = {number}` (default: 0) -- number of lines to "
"skip at the start (usually for a header)"
msgstr ""
":samp:`skip_head_lines = {число}` (по умолчанию: 0) -- число строк, "
"которые пропускаются в начале (обычно для заголовка)"

msgid "Index"
msgstr "Указатель"

msgid "Below is a list of all ``csv`` functions."
msgstr "Ниже приведен перечень всех функций модуля ``csv``."

msgid "Name"
msgstr "Имя"

msgid "Use"
msgstr "Назначение"

msgid ":ref:`csv.load() <csv-load>`"
msgstr ":ref:`csv.load() <csv-load>`"

msgid "Load a CSV file"
msgstr "Загрузка CSV-файла"

msgid ":ref:`csv.dump() <csv-dump>`"
msgstr ":ref:`csv.dump() <csv-dump>`"

msgid "Transform input into a CSV-formatted string"
msgstr "Преобразование входного значения в строку формата CSV"

msgid ":ref:`csv.iterate() <csv-iterate>`"
msgstr ":ref:`csv.iterate() <csv-iterate>`"

msgid "Iterate over CSV records"
msgstr "Итерация по записям в формате CSV"

msgid ""
"Get CSV-formatted input from ``readable`` and return a table as output. "
"Usually ``readable`` is either a string or a file opened for reading. "
"Usually :samp:`{options}` is not specified."
msgstr ""
"Получение входного значения в формате CSV из ``readable`` и возврат "
"таблицы в качестве выходного значения. Обычно ``readable`` представляет "
"собой либо строку, либо открытый для чтения файл. Как правило, параметры "
":samp:`{options}` не указываются."

msgid "Parameters"
msgstr "Параметры"

msgid ""
"a string, or any object which has a read() method, formatted according to"
" the CSV rules"
msgstr "строка или любой объект с методом read(), форматированный по правилам CSV "

msgid "see :ref:`above <csv-options>`"
msgstr "см. :ref:`выше <csv-options>`"

msgid "return"
msgstr "возвращает"

msgid "loaded_value"
msgstr "загруженное значение"

msgid "rtype"
msgstr "тип возвращаемого значения"

msgid "table"
msgstr "таблица"

msgid "**Example:**"
msgstr "**Пример:**"

msgid ""
"Readable string has 3 fields, field#2 has comma and space so use quote "
"marks:"
msgstr ""
"В читаемой строке 3 поля, поле №2 содержит запятую и пробел, поэтому "
"следует использовать кавычки:"

msgid ""
"tarantool> csv = require('csv')\n"
"---\n"
"...\n"
"tarantool> csv.load('a,\"b,c \",d')\n"
"---\n"
"- - - a\n"
"    - 'b,c '\n"
"    - d\n"
"..."
msgstr ""
"tarantool> csv = require('csv')\n"
"---\n"
"...\n"
"tarantool> csv.load('a,\"b,c \",d')\n"
"---\n"
"- - - a\n"
"    - 'b,c '\n"
"    - d\n"
"..."

msgid ""
"Readable string contains 2-byte character = Cyrillic Letter Palochka: "
"(This displays a palochka if and only if character set = UTF-8.)"
msgstr ""
"В читаемой строке 2-байтный символ = Палочка в кириллице: (Отобразит "
"палочку только в том случае, если кодировка = UTF-8.)"

msgid ""
"tarantool> csv.load('a\\\\211\\\\128b')\n"
"---\n"
"- - - a\\211\\128b\n"
"..."
msgstr ""
"tarantool> csv.load('a\\\\211\\\\128b')\n"
"---\n"
"- - - a\\211\\128b\n"
"..."

msgid "Semicolon instead of comma for the delimiter:"
msgstr "Точка с запятой вместо запятой в виде символа разделителя:"

msgid ""
"tarantool> csv.load('a,b;c,d', {delimiter = ';'})\n"
"---\n"
"- - - a,b\n"
"    - c,d\n"
"..."
msgstr ""
"tarantool> csv.load('a,b;c,d', {delimiter = ';'})\n"
"---\n"
"- - - a,b\n"
"    - c,d\n"
"..."

msgid ""
"Readable file :file:`./file.csv` contains two CSV records. Explanation of"
" ``fio`` is in section :ref:`fio <fio-section>`. Source CSV file and "
"example respectively:"
msgstr ""
"Читаемый файл :file:`./file.csv` содержит две записи в формате CSV. "
"Объяснение блока ``fio`` дается в разделе :ref:`fio <fio-section>`. "
"Исходный CSV-файл и пример соответственно:"

msgid ""
"tarantool> -- input in file.csv is:\n"
"tarantool> -- a,\"b,c \",d\n"
"tarantool> -- a\\\\211\\\\128b\n"
"tarantool> fio = require('fio')\n"
"---\n"
"...\n"
"tarantool> f = fio.open('./file.csv', {'O_RDONLY'})\n"
"---\n"
"...\n"
"tarantool> csv.load(f, {chunk_size = 4096})\n"
"---\n"
"- - - a\n"
"    - 'b,c '\n"
"    - d\n"
"  - - a\\\\211\\\\128b\n"
"...\n"
"tarantool> f:close()\n"
"---\n"
"- true\n"
"..."
msgstr ""
"tarantool> -- входное значение в файле file.csv:\n"
"tarantool> -- a,\"b,c \",d\n"
"tarantool> -- a\\\\211\\\\128b\n"
"tarantool> fio = require('fio')\n"
"---\n"
"...\n"
"tarantool> f = fio.open('./file.csv', {'O_RDONLY'})\n"
"---\n"
"...\n"
"tarantool> csv.load(f, {chunk_size = 4096})\n"
"---\n"
"- - - a\n"
"    - 'b,c '\n"
"    - d\n"
"  - - a\\\\211\\\\128b\n"
"...\n"
"tarantool> f:close()\n"
"---\n"
"- true\n"
"..."

msgid ""
"Get table input from ``csv-table`` and return a CSV-formatted string as "
"output. Or, get table input from ``csv-table`` and put the output in "
"``writable``. Usually :samp:`{options}` is not specified. Usually "
"``writable``, if specified, is a file opened for writing. "
":ref:`csv.dump() <csv-dump>` is the reverse of :ref:`csv.load() <csv-"
"load>`."
msgstr ""
"Получение входного значения из таблицы ``csv-table`` и возврат строки в "
"формате CSV в качестве выходного значения. Или получение входного "
"значения из таблицы ``csv-table`` и размещение выходного значения в "
"``writable``. Обычно параметры :samp:`{options}` не указываются. Как "
"правило, если указан ``writable``, то это открытый для чтения файл. "
":ref:`csv.dump() <csv-dump>` -- это операция, обратная :ref:`csv.load() "
"<csv-load>`."

msgid "a table which can be formatted according to the CSV rules."
msgstr "таблица, которую можно форматировать в соответствии с правилами CSV"

msgid "optional. see :ref:`above <csv-options>`"
msgstr "необязательно. См. :ref:`выше <csv-options>`"

msgid "any object which has a ``write()`` method"
msgstr "любой объект с методом ``write()``"

msgid "dumped_value"
msgstr "записанное значение"

msgid "string, which is written to ``writable`` if specified"
msgstr "строка, которая записывается в объект ``writable``, если указан"

msgid "CSV-table has 3 fields, field#2 has \",\" so result has quote marks"
msgstr ""
"В таблице формата CSV 3 поля, поле №2 содержит \",\" поэтому результат "
"включает в себя кавычки"

msgid ""
"tarantool> csv = require('csv')\n"
"---\n"
"...\n"
"tarantool> csv.dump({'a','b,c ','d'})\n"
"---\n"
"- 'a,\"b,c \",d\n"
"\n"
"'\n"
"..."
msgstr ""
"tarantool> csv = require('csv')\n"
"---\n"
"...\n"
"tarantool> csv.dump({'a','b,c ','d'})\n"
"---\n"
"- 'a,\"b,c \",d\n"
"\n"
"'\n"
"..."

msgid "Round Trip: from string to table and back to string"
msgstr "Круговое преобразование: из строки в таблицу и обратно в строку"

msgid ""
"tarantool> csv_table = csv.load('a,b,c')\n"
"---\n"
"...\n"
"tarantool> csv.dump(csv_table)\n"
"---\n"
"- 'a,b,c\n"
"\n"
"'\n"
"..."
msgstr ""
"tarantool> csv_table = csv.load('a,b,c')\n"
"---\n"
"...\n"
"tarantool> csv.dump(csv_table)\n"
"---\n"
"- 'a,b,c\n"
"\n"
"'\n"
"..."

msgid ""
"Form a Lua iterator function for going through CSV records one field at a"
" time. Use of an iterator is strongly recommended if the amount of data "
"is large (ten or more megabytes)."
msgstr ""
"Создание Lua-функции с итератором для прохода по записям в формате CSV по"
" одному полю за раз. Настоятельно рекомендуется использовать итератор для"
" большого объема данных (10 мегабайт и более)."

msgid "Lua iterator function"
msgstr "Lua-функция с итератором"

msgid "iterator function"
msgstr "функция с итератором"

msgid ""
":ref:`csv.iterate() <csv-iterate>` is the low level of :ref:`csv.load() "
"<csv-load>` and :ref:`csv.dump() <csv-dump>`. To illustrate that, here is"
" a function which is the same as the :ref:`csv.load() <csv-load>` "
"function, as seen in `the Tarantool source code`_."
msgstr ""
":ref:`csv.iterate() <csv-iterate>` -- это :ref:`csv.load() <csv-load>` и "
":ref:`csv.dump() <csv-dump>` низкого уровня. Чтобы это доказать, "
"используем функцию, которая совпадает с функцией  :ref:`csv.load() <csv-"
"load>`, как можно увидеть в исходном коде Tarantool'а (`the Tarantool "
"source code`_)."

msgid ""
"tarantool> load = function(readable, opts)\n"
"         >   opts = opts or {}\n"
"         >   local result = {}\n"
"         >   for i, tup in csv.iterate(readable, opts) do\n"
"         >     result[i] = tup\n"
"         >   end\n"
"         >   return result\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> load('a,b,c')\n"
"---\n"
"- - - a\n"
"    - b\n"
"    - c\n"
"..."
msgstr ""
"tarantool> load = function(readable, opts)\n"
"         >   opts = opts or {}\n"
"         >   local result = {}\n"
"         >   for i, tup in csv.iterate(readable, opts) do\n"
"         >     result[i] = tup\n"
"         >   end\n"
"         >   return result\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> load('a,b,c')\n"
"---\n"
"- - - a\n"
"    - b\n"
"    - c\n"
"..."
