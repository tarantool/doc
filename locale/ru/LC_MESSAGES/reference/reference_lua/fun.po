# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-06 14:05+0000\n"
"PO-Revision-Date: 2019-12-06 16:16+0300\n"
"Last-Translator: \n"
"Language: ru\n"
"Language-Team: \n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

msgid "Module `fun`"
msgstr "Модуль `fun`"

msgid ""
"Luafun, also known as the Lua Functional Library, takes advantage of the "
"features of LuaJIT to help users create complex functions. Inside the "
"module are \"sequence processors\" such as ``map``, ``filter``, "
"``reduce``, ``zip`` -- they take a user-written function as an argument "
"and run it against every element in a sequence, which can be faster or "
"more convenient than a user-written loop. Inside the module are "
"\"generators\" such as ``range``, ``tabulate``, and ``rands`` -- they "
"return a bounded or boundless series of values. Within the module are "
"\"reducers\", \"filters\", \"composers\" ... or, in short, all the "
"important features found in languages like Standard ML, Haskell, or "
"Erlang."
msgstr ""
"Luafun, также известная как библиотека для функционального "
"программирования в Lua, пользуется преимуществами LuaJIT, чтобы помочь "
"пользователям создавать сложные функции. Модуль включает в себя "
"\"последовательные процессоры\", такие как ``map``, ``filter``, "
"``reduce``, ``zip`` -- они берут написанную пользователем функцию в "
"качестве аргумента и применяют ее к каждому элементу в "
"последовательности, что может работать быстрее или более удобно, чем "
"написанный пользователем цикл. Модуль включает в себя \"генераторы\", "
"такие как ``range``, ``tabulate`` и ``rands`` -- они возвращают "
"ограниченный или неограниченный ряд значений. Модуль включает в себя "
"\"преобразователи\", \"фильтры\", \"компоновщики\" ... или, коротко "
"говоря, все важные функции из таких языков, как Standard ML, Haskell или "
"Erlang."

msgid ""
"The full documentation is `On the luafun section of github`_. However, "
"the first chapter can be skipped because installation is already done, "
"it's inside Tarantool. All that is needed is the usual ``require`` "
"request. After that, all the operations described in the Lua fun manual "
"will work, provided they are preceded by the name returned by the "
"``require`` request. For example:"
msgstr ""
"Вся документация находится по ссылке `On the luafun section of github`_. "
"Однако, первую главу можно пропустить, поскольку установка уже выполнена "
"в пределах Tarantool'а. Единственное, что нужно сделать, -- выполнить "
"обычный запрос ``require``. После этого сработают все операции, описанные"
" в руководстве по работе с библиотекой для функционального "
"программирования в Lua,  при условии, что перед ними указывается имя, "
"возвращенное запросом ``require``. Например:"

msgid ""
"tarantool> fun = require('fun')\n"
"---\n"
"...\n"
"tarantool> for _k, a in fun.range(3) do\n"
"         >   print(a)\n"
"         > end\n"
"1\n"
"2\n"
"3\n"
"---\n"
"..."
msgstr ""
"tarantool> fun = require('fun')\n"
"---\n"
"...\n"
"tarantool> for _k, a in fun.range(3) do\n"
"         >   print(a)\n"
"         > end\n"
"1\n"
"2\n"
"3\n"
"---\n"
"..."
