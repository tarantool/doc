# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-06 14:05+0000\n"
"PO-Revision-Date: 2019-12-06 16:16+0300\n"
"Last-Translator: \n"
"Language: ru\n"
"Language-Team: \n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

msgid "Module `iconv`"
msgstr "Модуль `iconv`"

msgid "Overview"
msgstr "Общие сведения"

msgid ""
"The ``iconv`` module provides a way to convert a string with one encoding"
" to a string with another encoding, for example from ASCII to UTF-8. It "
"is based on the POSIX iconv routines."
msgstr ""
"Модуль ``iconv`` предоставляет метод конвертации строки с одним типом "
"кодировки в строку с другим типом кодировки, например из ASCII в UTF-8. "
"Он основывается на процедурах с iconv в POSIX."

msgid ""
"An exact list of the available encodings may depend on environment. "
"Typically the list includes ASCII, BIG5, KOI8R, LATIN8, MS-GREEK, SJIS, "
"and about 100 others. For a complete list, type ``iconv --list`` on a "
"terminal."
msgstr ""
"Точный список доступных кодировок зависит от окружения. Как правило, в "
"список входят ASCII, BIG5, KOI8R, LATIN8, MS-GREEK, SJIS и около 100 "
"других. Чтобы увидеть общий список, введите команду ``iconv --list`` в "
"терминале."

msgid "Index"
msgstr "Указатель"

msgid "Below is a list of all ``iconv`` functions."
msgstr "Ниже приведен перечень всех функций модуля ``iconv``."

msgid "Name"
msgstr "Имя"

msgid "Use"
msgstr "Назначение"

msgid ":ref:`iconv.new() <iconv-new>`"
msgstr ":ref:`iconv.new() <iconv-new>`"

msgid "Create an iconv instance"
msgstr "Создание экземпляра iconv"

msgid ":ref:`iconv.converter() <iconv-converter>`"
msgstr ":ref:`iconv.converter() <iconv-converter>`"

msgid "Perform conversion on a string"
msgstr "Преобразование строки"

msgid "Construct a new iconv instance."
msgstr "Создание нового iconv-экземпляра."

msgid "Parameters"
msgstr "Параметры"

msgid "the name of the encoding that we will convert to."
msgstr "название будущей кодировки."

msgid "the name of the encoding that we will convert from."
msgstr "название используемой кодировки."

msgid "return"
msgstr "возвращает"

msgid "a new iconv instance -- in effect, a callable function"
msgstr "новый экземпляр iconv -- на самом деле, вызываемая функция"

msgid "rtype"
msgstr "тип возвращаемого значения"

msgid "userdata"
msgstr "пользовательские данные"

msgid "If either parameter is not a valid name, there will be an error message."
msgstr ""
"Если значение одного из параметров представляет собой недопустимое имя, "
"появится сообщение об ошибке."

msgid "**Example:**"
msgstr "**Пример:**"

msgid ""
"tarantool> converter = require('iconv').new('UTF8', 'ASCII')\n"
"---\n"
"..."
msgstr ""
"tarantool> converter = require('iconv').new('UTF8', 'ASCII')\n"
"---\n"
"..."

msgid "Convert."
msgstr "Преобразование."

msgid "param string input-string"
msgstr "param string input-string"

msgid "the string to be converted (the \"from\" string)"
msgstr "строка для преобразования (\"из\")"

msgid "the string that results from the conversion (the \"to\" string)"
msgstr "строка, получаемая в результате преобразования (\"в\")"

msgid ""
"If anything in input-string cannot be converted, there will be an error "
"message and the result string will be unchanged."
msgstr ""
"Если что-либо в строке input-string нельзя преобразовать, появится "
"сообщение об ошибке, строка останется неизменной."

msgid ""
"We know that the Unicode code point for \"Д\" (CYRILLIC CAPITAL LETTER "
"DE) is hexadecimal 0414 according to the character database of Unicode_. "
"Therefore that is what it will look like in UTF-16. We know that "
"Tarantool typically uses the UTF-8 character set. So make a from-UTF-8"
"-to-UTF-16 converter, use string.hex('Д') to show what Д's encoding looks"
" like in the UTF-8 source, and use string.hex('Д'-after-conversion) to "
"show what it looks like in the UTF-16 target. Since the result is 0414, "
"we see that iconv conversion works. (Different iconv implementations "
"might use different names, for example UTF-16BE instead of UTF16BE.)"
msgstr ""
"Мы знаем, что кодовая точка для заглавной буквы \"Д\" в Unicode "
"представляет собой шестнадцатеричное число 0414 в соответствии с таблицей"
" символов Unicode_. Таким образом, так она будет выглядеть в UTF-16. Мы "
"знаем, что как правило, Tarantool использует набор символов UTF-8. "
"Поэтому для создания конвертора из UTF-8 в UTF-16 используем "
"string.hex('Д'), чтобы показать, как выглядит кодировка Д в исходном "
"наборе символов UTF-8, а затем используем string.hex('Д'-after-"
"conversion), чтобы показать, как она будет выглядеть в целевом наборе "
"символов UTF-16. Поскольку результатом будет 0414, видим, что "
"преобразование с помощью iconv сработало. (В разных реализациях iconv "
"могут использоваться разные имена, например UTF-16BE вместо UTF16BE.)"

msgid ""
"tarantool> string.hex('Д')\n"
"---\n"
"- d094\n"
"...\n"
"\n"
"tarantool> converter = require('iconv').new('UTF16BE', 'UTF8')\n"
"---\n"
"...\n"
"\n"
"tarantool> utf16_string = converter('Д')\n"
"---\n"
"...\n"
"\n"
"tarantool> string.hex(utf16_string)\n"
"---\n"
"- '0414'\n"
"..."
msgstr ""
"tarantool> string.hex('Д')\n"
"---\n"
"- d094\n"
"...\n"
"\n"
"tarantool> converter = require('iconv').new('UTF16BE', 'UTF8')\n"
"---\n"
"...\n"
"\n"
"tarantool> utf16_string = converter('Д')\n"
"---\n"
"...\n"
"\n"
"tarantool> string.hex(utf16_string)\n"
"---\n"
"- '0414'\n"
"..."
