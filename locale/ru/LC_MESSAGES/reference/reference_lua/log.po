
msgid "Module log"
msgstr "Модуль log"

msgid "Overview"
msgstr "Общие сведения"

msgid ""
"Tarantool provides a set of :ref:`options <cfg_logging>` used to configure "
"logging in various ways: you can set a level of logging, specify where to "
"send the log's output, configure a log format, and so on. The ``log`` module"
" allows you to configure logging in your application and provides additional"
" capabilities, for example, logging custom messages and rotating log files."
msgstr ""

msgid "Index"
msgstr "Указатель"

msgid "Below is a list of all ``log`` functions."
msgstr "Ниже приведен перечень всех функций и элементов модуля ``log``."

msgid "Name"
msgstr "Имя"

msgid "Use"
msgstr "Назначение"

#, fuzzy
msgid ":ref:`log.cfg({}) <log-cfg>`"
msgstr ":ref:`log.rotate() <log-rotate>`"

#, fuzzy
msgid "Configure a logger"
msgstr "PID регистратора записи в журнале"

msgid ""
":ref:`log.error() <log-ug_message>` |br| :ref:`log.warn() <log-ug_message>` "
"|br| :ref:`log.info() <log-ug_message>` |br| :ref:`log.verbose() <log-"
"ug_message>` |br| :ref:`log.debug() <log-ug_message>`"
msgstr ""
":ref:`log.error() <log-ug_message>` |br| :ref:`log.warn() <log-ug_message>` "
"|br| :ref:`log.info() <log-ug_message>` |br| :ref:`log.verbose() <log-"
"ug_message>` |br| :ref:`log.debug() <log-ug_message>`"

msgid "Log a message with the specified level"
msgstr ""

#, fuzzy
msgid ":ref:`log.pid() <log-pid>`"
msgstr ":ref:`log.logger_pid() <log-logger_pid>`"

msgid "Get the PID of a logger"
msgstr "Получение PID регистратора записи в журнале"

msgid ":ref:`log.rotate() <log-rotate>`"
msgstr ":ref:`log.rotate() <log-rotate>`"

msgid "Rotate a log file"
msgstr "Ротация файла журнала"

#, fuzzy
msgid ":ref:`log.new() <log-new>`"
msgstr ":ref:`log.rotate() <log-rotate>`"

msgid "Create a new logger with the specified name"
msgstr ""

msgid "Configure logging options. The following options are available:"
msgstr ""

msgid "``level``: Specifies the level of detail the log has."
msgstr ""

msgid "Learn more: :ref:`log_level <cfg_logging-log_level>`."
msgstr ""

msgid ""
"``log``: Specifies where to send the log's output, for example, to a file, "
"pipe, or system logger."
msgstr ""

msgid "Learn more: :ref:`log <cfg_logging-log>`."
msgstr ""

msgid ""
"``nonblock``: If **true**, Tarantool does not block during logging when the "
"system is not ready for writing, and drops the message instead."
msgstr ""

msgid "Learn more: :ref:`log_nonblock <cfg_logging-log_nonblock>`."
msgstr ""

msgid "``format``: Specifies the log format: 'plain' or 'json'."
msgstr ""

msgid "Learn more: :ref:`log_format <cfg_logging-log_format>`."
msgstr ""

msgid ""
"``modules``: Configures the specified log levels for different modules."
msgstr ""

msgid "Learn more: :ref:`log_modules <cfg_logging-log_modules>`."
msgstr ""

msgid ""
"The example below shows how to set the log level to 'debug' and how to send "
"the resulting log to the 'tarantool.log' file:"
msgstr ""

msgid ""
"log = require('log')\n"
"log.cfg{ level='debug', log='tarantool.log'}"
msgstr ""

msgid ""
"Note that calling ``log.cfg()`` before ``box.cfg()`` takes into account "
"logging options specified using :ref:`environment variables <box-cfg-params-"
"env>`, such as ``TT_LOG`` and ``TT_LOG_LEVEL``."
msgstr ""

msgid ""
"Log a message with the specified logging level. You can learn more about the"
" available levels from the :ref:`log_level <cfg_logging-log_level>` property"
" description."
msgstr ""

msgid "The example below shows how to log a message with the ``info`` level:"
msgstr ""

msgid ""
"log = require('log')\n"
"\n"
"-- Prints 'warn' messages --\n"
"log.warn('Warning message')\n"
"--[[\n"
"2023-07-20 11:03:57.029 [16300] main/103/interactive/tarantool [C]:-1 W> Warning message\n"
"---\n"
"...\n"
"--]]\n"
msgstr ""

msgid "Parameters"
msgstr "Параметры"

#, python-format
msgid ""
"A log message.  * A message can be a string.  * A message may contain "
"C-style format specifiers ``%d`` or ``%s``. Example:    .. code-block:: lua"
"        box.cfg{}       log = require('log')       log.info('Info %s', "
"box.info.version)  * A message may be a scalar data type or a table. "
"Example:    .. code-block:: lua        log = require('log')       "
"log.error({500,'Internal error'})"
msgstr ""

#, fuzzy
msgid "A log message."
msgstr "``сообщение``."

msgid "A message can be a string."
msgstr ""

#, python-format
msgid ""
"A message may contain C-style format specifiers ``%d`` or ``%s``. Example:"
msgstr ""

#, python-format
msgid ""
"box.cfg{}\n"
"log = require('log')\n"
"log.info('Info %s', box.info.version)"
msgstr ""

msgid "A message may be a scalar data type or a table. Example:"
msgstr ""

msgid ""
"log = require('log')\n"
"log.error({500,'Internal error'})"
msgstr ""

msgid "return"
msgstr "возвращает"

msgid "nil"
msgstr "nil"

msgid "The actual output will be a line in the log, containing:"
msgstr ""
"Выходное значение будет представлять собой строку в журнале, которая "
"содержит следующее:"

#, fuzzy
msgid "the current timestamp"
msgstr "текущая временная отметка,"

#, fuzzy
msgid "a module name"
msgstr "название модуля,"

#, fuzzy
msgid "'E', 'W', 'I', 'V' or 'D' depending on the called function"
msgstr ""
"'E', 'W', 'I', 'V' или 'D' в зависимости от ``log_level_function_name`` и"

#, fuzzy
msgid "``message``"
msgstr "``сообщение``."

#, fuzzy
msgid ""
"Note that the message will not be logged if the severity level corresponding"
" to the called function is less than :ref:`log_level <cfg_logging-"
"log_level>`."
msgstr ""
"Вывода не будет, если ``log_level_function_name`` соответствует типу больше,"
" чем :ref:`log_level <cfg_logging-log_level>`."

msgid ""
"A PID of a logger. You can use this PID to send a signal to a log rotation "
"program, so it can rotate logs."
msgstr ""

msgid ""
"Rotate the log. For example, you need to call this function to continue "
"logging after a log rotation program renames or moves a file with the latest"
" logs."
msgstr ""

msgid "**Since:** :doc:`2.11.0 </release/2.11.0>`"
msgstr ""

msgid ""
"Create a new logger with the specified name. You can configure a specific "
"log level for a new logger using the :ref:`log_modules <cfg_logging-"
"log_modules>` configuration property."
msgstr ""

#, fuzzy
msgid "a logger name"
msgstr "название модуля,"

msgid "a logger instance"
msgstr ""

#, fuzzy
msgid "**Example:**"
msgstr "Пример"

msgid ""
"The code snippet below shows how to set the ``verbose`` level for "
"``module1`` and the ``error`` level for ``module2``:"
msgstr ""

msgid ""
"box_cfg = { log_level = 'warn',\n"
"            log_modules = {\n"
"                module1 = 'verbose',\n"
"                module2 = 'error' }\n"
"}\n"
msgstr ""

msgid ""
"To create the ``module1`` and ``module2`` loggers, call the ``new()`` "
"function:"
msgstr ""

msgid ""
"-- Creates new loggers --\n"
"module1_log = require('log').new('module1')\n"
"module2_log = require('log').new('module2')\n"
msgstr ""

msgid ""
"Then, you can call functions corresponding to different logging levels to "
"make sure that events with severities above or equal to the given levels are"
" shown:"
msgstr ""

msgid ""
"-- Prints 'info' messages --\n"
"module1_log.info('Info message from module1')\n"
"--[[\n"
"[16300] main/103/interactive/module1 I> Info message from module1\n"
"---\n"
"...\n"
"--]]\n"
"\n"
"-- Swallows 'debug' messages --\n"
"module1_log.debug('Debug message from module1')\n"
"--[[\n"
"---\n"
"...\n"
"--]]\n"
"\n"
"-- Swallows 'info' messages --\n"
"module2_log.info('Info message from module2')\n"
"--[[\n"
"---\n"
"...\n"
"--]]\n"
msgstr ""

msgid ""
"At the same time, the events with severities below the specified levels are "
"swallowed."
msgstr ""

#~ msgid ""
#~ "The Tarantool server puts all diagnostic messages in a log file specified by"
#~ " the :ref:`log <cfg_logging-log>` configuration parameter. Diagnostic "
#~ "messages may be either system-generated by the server's internal code, or "
#~ "user-generated with the :samp:`log.{log_level_function_name}` function."
#~ msgstr ""
#~ "Сервер Tarantool сохраняет все сообщения об ошибке в файл журнала, указанный"
#~ " в конфигурационном параметре :ref:`log <cfg_logging-log>`. Сообщения об "
#~ "ошибке могут быть созданы либо системой с помощью внутреннего кода сервера, "
#~ "либо пользователем с помощью функции :samp:`log.{log_level_function_name}`."

#~ msgid ""
#~ "As explained in the description of :ref:`log_format <cfg_logging-"
#~ "log_format>` configuration setting, there are two possible formats for log "
#~ "entries:"
#~ msgstr ""
#~ "Как сказано в описании параметра :ref:`log_format <cfg_logging-log_format>`,"
#~ " записи в журнале могут сохраняться в одном из двух форматов:"

#~ msgid "'plain' (the default), or"
#~ msgstr "'plain' (по умолчанию) или"

#~ msgid "'json' (with more detail and with JSON labels)."
#~ msgstr "'json' (более детально с JSON-метками)."

#~ msgid ""
#~ "Here is what a log entry looks like after ``box.cfg{log_format='plain'}``:"
#~ msgstr ""
#~ "Вот как будет выглядеть запись в журнале после выполнения "
#~ "``box.cfg{log_format='plain'}``:"

#~ msgid ""
#~ "2017-10-16 11:36:01.508 [18081] main/101/interactive I> set 'log_format' "
#~ "configuration option to \"plain\""
#~ msgstr ""
#~ "2017-10-16 11:36:01.508 [18081] main/101/interactive I> set 'log_format' "
#~ "configuration option to \"plain\""

#~ msgid ""
#~ "Here is what a log entry looks like after ``box.cfg{log_format='json'}``:"
#~ msgstr ""
#~ "Вот как будет выглядеть запись в журнале после выполнения "
#~ "``box.cfg{log_format='json'}``:"

#~ msgid ""
#~ "{\"time\": \"2017-10-16T11:36:17.996-0600\",\n"
#~ "\"level\": \"INFO\",\n"
#~ "\"message\": \"set 'log_format' configuration option to \\\"json\\\"\",\n"
#~ "\"pid\": 18081,|\n"
#~ "\"cord_name\": \"main\",\n"
#~ "\"fiber_id\": 101,\n"
#~ "\"fiber_name\": \"interactive\",\n"
#~ "\"file\": \"builtin\\/box\\/load_cfg.lua\",\n"
#~ "\"line\": 317}"
#~ msgstr ""
#~ "{\"time\": \"2017-10-16T11:36:17.996-0600\",\n"
#~ "\"level\": \"INFO\",\n"
#~ "\"message\": \"set 'log_format' configuration option to \\\"json\\\"\",\n"
#~ "\"pid\": 18081,|\n"
#~ "\"cord_name\": \"main\",\n"
#~ "\"fiber_id\": 101,\n"
#~ "\"fiber_name\": \"interactive\",\n"
#~ "\"file\": \"builtin\\/box\\/load_cfg.lua\",\n"
#~ "\"line\": 317}"

#~ msgid "Write a user-generated message to a log file"
#~ msgstr "Запись сгенерированного пользователем сообщения в файл журнала"

#~ msgid ""
#~ "Output a user-generated message to the :ref:`log file <cfg_logging-log>`, "
#~ "given log_level_function_name = ``error`` or ``warn`` or ``info`` or "
#~ "``verbose`` or ``debug``."
#~ msgstr ""
#~ "Запись созданного пользователем сообщения в :ref:`файл журнала <cfg_logging-"
#~ "log>` при условии, что log_level_function_name = ``error`` или ``warn``, или"
#~ " ``info``, или ``verbose``, или ``debug``."

#~ msgid ""
#~ "As explained in the description of the configuration setting for "
#~ ":ref:`log_level <cfg_logging-log_level>`, there are seven levels of detail:"
#~ msgstr ""
#~ "Как поясняется в описании настроек конфигурации :ref:`log_level "
#~ "<cfg_logging-log_level>`, есть семь уровней детализации:"

#~ msgid "1 – ``SYSERROR``"
#~ msgstr "1 – ``SYSERROR``"

#~ msgid "2 – ``ERROR`` -- this corresponds to ``log.error(...)``"
#~ msgstr "2 – ``ERROR`` -- соответствует ``log.error(...)``"

#~ msgid "3 – ``CRITICAL``"
#~ msgstr "3 – ``CRITICAL``"

#~ msgid "4 – ``WARNING``  -- this corresponds to ``log.warn(...)``"
#~ msgstr "4 – ``WARNING``  -- соответствует ``log.warn(...)``"

#~ msgid "5 – ``INFO`` -- this corresponds to ``log.info(...)``"
#~ msgstr "5 – ``INFO`` -- соответствует ``log.info(...)``"

#~ msgid "6 – ``VERBOSE``  -- this corresponds to ``log.verbose(...)``"
#~ msgstr "6 – ``VERBOSE``  -- соответствует ``log.verbose(...)``"

#~ msgid "7 – ``DEBUG`` -- this corresponds to ``log.debug(...)``"
#~ msgstr "7 – ``DEBUG`` -- соответствует ``log.debug(...)``"

#~ msgid ""
#~ "For example, if ``box.cfg.log_level`` is currently 5 (the default value), "
#~ "then ``log.error(...)``, ``log.warn(...)`` and ``log.info(...)`` messages "
#~ "will go to the log file. However, ``log.verbose(...)`` and "
#~ "``log.debug(...)`` messages will not go to the log file, because they "
#~ "correspond to higher levels of detail."
#~ msgstr ""
#~ "Например, если уровень ``box.cfg.log_level`` в данный момент -- 5 (по "
#~ "умолчанию), то сообщения ``log.error(...)``, ``log.warn(...)`` и "
#~ "``log.info(...)`` будут записываться в файл журнала. Однако, сообщения "
#~ "``log.verbose(...)`` и ``log.debug(...)`` не будут записываться в файл "
#~ "журнала, поскольку они соответствуют более высоким уровням детализации."

#~ msgid ""
#~ "Usually a string.  Messages may contain C-style format specifiers %d or %s, "
#~ "so :samp:`log.error('...%d...%s', {x}, {y})` will work if ``x`` is a number "
#~ "and ``y`` is a string.  Less commonly, messages may be other scalar data "
#~ "types, or even tables. So :code:`log.error({'x',18.7,true})` will work."
#~ msgstr ""
#~ "Как правило, строка.  Сообщения могут содержать спецификаторы формата в "
#~ "стиле C: %d или %s, то есть :samp:`log.error('...%d...%s', {x}, {y})` "
#~ "сработает, если ``x`` -- это число, а ``y`` -- это строка.  В редких случаях"
#~ " сообщения могут представлять собой другие скалярные типы данных или даже "
#~ "таблицы. Поэтому :code:`log.error({'x',18.7,true})` сработает."

#~ msgid "Usually a string."
#~ msgstr "Как правило, строка."

#~ msgid ""
#~ "Messages may contain C-style format specifiers %d or %s, so "
#~ ":samp:`log.error('...%d...%s', {x}, {y})` will work if ``x`` is a number and"
#~ " ``y`` is a string."
#~ msgstr ""
#~ "Сообщения могут содержать спецификаторы формата в стиле C: %d или %s, то "
#~ "есть :samp:`log.error('...%d...%s', {x}, {y})` сработает, если ``x`` -- это "
#~ "число, а ``y`` -- это строка."

#~ msgid ""
#~ "Less commonly, messages may be other scalar data types, or even tables. So "
#~ ":code:`log.error({'x',18.7,true})` will work."
#~ msgstr ""
#~ "В редких случаях сообщения могут представлять собой другие скалярные типы "
#~ "данных или даже таблицы. Поэтому :code:`log.error({'x',18.7,true})` "
#~ "сработает."

#~ msgid "Rotate the log."
#~ msgstr "Ротация журнала."

#~ msgid ""
#~ "$ tarantool\n"
#~ "tarantool> box.cfg{log_level=3, log='tarantool.txt'}\n"
#~ "tarantool> log = require('log')\n"
#~ "tarantool> log.error('Error')\n"
#~ "tarantool> log.info('Info %s', box.info.version)\n"
#~ "tarantool> os.exit()"
#~ msgstr ""
#~ "$ tarantool\n"
#~ "tarantool> box.cfg{log_level=3, log='tarantool.txt'}\n"
#~ "tarantool> log = require('log')\n"
#~ "tarantool> log.error('Error')\n"
#~ "tarantool> log.info('Info %s', box.info.version)\n"
#~ "tarantool> os.exit()"

#~ msgid ""
#~ "$ less tarantool.txt\n"
#~ "2017-09-20 ... [68617] main/101/interactive C> version 1.7.5-31-ge939c6ea6\n"
#~ "2017-09-20 ... [68617] main/101/interactive C> log level 3\n"
#~ "2017-09-20 ... [68617] main/101/interactive [C]:-1 E> Error"
#~ msgstr ""
#~ "$ less tarantool.txt\n"
#~ "2017-09-20 ... [68617] main/101/interactive C> version 1.7.5-31-ge939c6ea6\n"
#~ "2017-09-20 ... [68617] main/101/interactive C> log level 3\n"
#~ "2017-09-20 ... [68617] main/101/interactive [C]:-1 E> Error"

#~ msgid ""
#~ "The 'Error' line is visible in ``tarantool.txt`` preceded by the letter E."
#~ msgstr "Строке 'Error' в файле ``tarantool.txt`` предшествует буква \"E\"."

#~ msgid "The 'Info' line is not present because the ``log_level`` is 3."
#~ msgstr "Строка 'Info' отсутствует, потому что ``log_level`` -- 3."
