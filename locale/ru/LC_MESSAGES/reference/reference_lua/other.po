
msgid "Other package components"
msgstr "Прочие компоненты пакета"

msgid ""
"All the Tarantool modules are, at some level, inside a package which, "
"appropriately, is named ``package``. There are also miscellaneous functions "
"and variables which are outside all modules."
msgstr ""

msgid "Name"
msgstr "Имя"

msgid "Use"
msgstr "Назначение"

msgid ":ref:`tonumber64() <other-tonumber64>`"
msgstr ":ref:`tonumber64() <other-tonumber64>`"

msgid "Convert a string or a Lua number to a 64-bit integer"
msgstr "Конвертация строки или Lua-числа в 64-битное целое число"

msgid ":ref:`dostring() <other-dostring>`"
msgstr ":ref:`dostring() <other-dostring>`"

msgid "Parse and execute an arbitrary chunk of Lua code"
msgstr "Анализ и выполнение произвольного Lua-кода"

msgid ":ref:`package.path <other-package_path>`"
msgstr ":ref:`package.path <other-package_path>`"

msgid "Get file paths used to search for Lua modules"
msgstr ""

msgid ":ref:`package.cpath <other-package_cpath>`"
msgstr ":ref:`package.cpath <other-package_cpath>`"

msgid "Get file paths used to search for C modules"
msgstr ""

msgid ":ref:`package.loaded <other-package_loaded>`"
msgstr ":ref:`package.loaded <other-package_loaded>`"

msgid "Show Lua or C modules loaded by Tarantool"
msgstr ""

msgid ":ref:`package.searchroot <other-package_searchroot>`"
msgstr ":ref:`package.searchroot <other-package_searchroot>`"

msgid "Get the root path for a directory search"
msgstr ""

msgid ":ref:`package.setsearchroot <other-package_setsearchroot>`"
msgstr ":ref:`package.setsearchroot <other-package_setsearchroot>`"

msgid "Set the root path for a directory search"
msgstr ""

msgid ""
"Convert a string or a Lua number to a 64-bit integer. The input value can be"
" expressed in decimal, binary (for example 0b1010), or hexadecimal (for "
"example -0xffff). The result can be used in arithmetic, and the arithmetic "
"will be 64-bit integer arithmetic rather than floating-point arithmetic. "
"(Operations on an unconverted Lua number use floating-point arithmetic.) The"
" ``tonumber64()`` function is added by Tarantool; the name is global."
msgstr ""
"Конвертация строки или Lua-числа в 64-битное целое число. Входное значение "
"может быть выражено десятичным, двоичным (например, 0b1010) или "
"шестнадцатеричным (например, -0xffff) числом. Результат может использоваться"
" в арифметике, причем скорее в 64-битной целочисленной арифметике, а не в "
"арифметике в системе с плавающей запятой. (Операции с неконвертированными "
"Lua-числами выполняются в арифметике в системе с плавающей запятой.) Функция"
" ``tonumber64()`` в Tarantool является глобальной."

msgid "**Example:**"
msgstr "**Пример:**"

msgid ""
"tarantool> type(123456789012345), type(tonumber64(123456789012345))\n"
"---\n"
"- number\n"
"- number\n"
"...\n"
"tarantool> i = tonumber64('1000000000')\n"
"---\n"
"...\n"
"tarantool> type(i), i / 2, i - 2, i * 2, i + 2, i % 2, i ^ 2\n"
"---\n"
"- number\n"
"- 500000000\n"
"- 999999998\n"
"- 2000000000\n"
"- 1000000002\n"
"- 0\n"
"- 1000000000000000000\n"
"..."
msgstr ""
"tarantool> type(123456789012345), type(tonumber64(123456789012345))\n"
"---\n"
"- number\n"
"- number\n"
"...\n"
"tarantool> i = tonumber64('1000000000')\n"
"---\n"
"...\n"
"tarantool> type(i), i / 2, i - 2, i * 2, i + 2, i % 2, i ^ 2\n"
"---\n"
"- number\n"
"- 500000000\n"
"- 999999998\n"
"- 2000000000\n"
"- 1000000002\n"
"- 0\n"
"- 1000000000000000000\n"
"..."

msgid ""
"**Warning:** There is an underlying LuaJIT library that operates with C "
"rules. Therefore you should expect odd results if you compare unsigned and "
"signed (for example 0ULL > -1LL is false), or if you use numbers outside the"
" 64-bit integer range (for example 9223372036854775808LL is negative). Also "
"you should be aware that :samp:`type({number-literal-ending-in-ULL})` is "
"cdata, not a Lua arithmetic type, which prevents direct use with some "
"functions in Lua libraries such as `math "
"<https://www.lua.org/manual/5.1/manual.html#5.6>`_. See the `LuaJIT "
"reference <http://luajit.org/ext_ffi_semantics.html>`_ and look for the "
"phrase \"64 bit integer arithmetic\". and the phrase \"64 bit integer "
"comparison\". Or see the comments on `Issue#4089 "
"<https://github.com/tarantool/tarantool/issues/4089>`_."
msgstr ""

msgid ""
"Parse and execute an arbitrary chunk of Lua code. This function is mainly "
"useful to define and run Lua code without having to introduce changes to the"
" global Lua environment."
msgstr ""
"Анализ и выполнение произвольного Lua-кода. Данная функция используется "
"преимущественно для определения и выполнения Lua-кода без необходимости "
"внесения изменений в глобальное Lua-окружение."

msgid "Parameters"
msgstr "Параметры"

msgid "Lua code"
msgstr "Lua-код"

msgid ""
"zero or more scalar values which will be appended to, or substitute for, "
"items in the Lua chunk."
msgstr ""
"ноль или другие скалярные значения, которые заменяются или к которым "
"прибавляются значения."

msgid "return"
msgstr "возвращает"

msgid "whatever is returned by the Lua code chunk."
msgstr "то, что возвращает Lua-код."

msgid ""
"Possible errors: If there is a compilation error, it is raised as a Lua "
"error."
msgstr "Возможные ошибки: Ошибка компиляции появляется как Lua-ошибка."

msgid ""
"tarantool> dostring('abc')\n"
"---\n"
"error: '[string \"abc\"]:1: ''='' expected near ''<eof>'''\n"
"...\n"
"tarantool> dostring('return 1')\n"
"---\n"
"- 1\n"
"...\n"
"tarantool> dostring('return ...', 'hello', 'world')\n"
"---\n"
"- hello\n"
"- world\n"
"...\n"
"tarantool> dostring([[\n"
"         >   local f = function(key)\n"
"         >     local t = box.space.tester:select{key}\n"
"         >     if t ~= nil then\n"
"         >       return t[1]\n"
"         >     else\n"
"         >       return nil\n"
"         >     end\n"
"         >   end\n"
"         >   return f(...)]], 1)\n"
"---\n"
"- null\n"
"..."
msgstr ""
"tarantool> dostring('abc')\n"
"---\n"
"error: '[string \"abc\"]:1: ''='' expected near ''<eof>'''\n"
"...\n"
"tarantool> dostring('return 1')\n"
"---\n"
"- 1\n"
"...\n"
"tarantool> dostring('return ...', 'hello', 'world')\n"
"---\n"
"- hello\n"
"- world\n"
"...\n"
"tarantool> dostring([[\n"
"         >   local f = function(key)\n"
"         >     local t = box.space.tester:select{key}\n"
"         >     if t ~= nil then\n"
"         >       return t[1]\n"
"         >     else\n"
"         >       return nil\n"
"         >     end\n"
"         >   end\n"
"         >   return f(...)]], 1)\n"
"---\n"
"- null\n"
"..."

msgid ""
"Get file paths used to search for Lua :ref:`modules <app_server-modules>`. "
"For example, these paths are used to find modules loaded using the "
"``require()`` directive."
msgstr ""

#, fuzzy
msgid "See also: :ref:`package.searchroot() <other-package_searchroot>`"
msgstr ":ref:`package.searchroot <other-package_searchroot>`"

msgid ""
"Get file paths used to search for C :ref:`modules <app_server-modules>`. For"
" example, these paths are used to find modules loaded using the "
"``require()`` directive."
msgstr ""

msgid ""
"Show Lua or C modules loaded by Tarantool, so that their functions and "
"members are available. ``loaded`` shows both pre-loaded modules and modules "
"added using the ``require()`` directive."
msgstr ""

msgid ""
"Return the current search root, which defines the path to the root directory"
" from which dependencies are loaded. By default, the search root is the "
"current directory."
msgstr ""

msgid ""
"The current directory is obtained using :ref:`debug.sourcedir() <debug-"
"sourcedir>`."
msgstr ""

#, fuzzy
msgid "**Example**"
msgstr "**Пример:**"

msgid "Suppose the application has the following structure:"
msgstr ""

msgid ""
"/home/testuser/myapp\n"
"├── .rocks/share/tarantool/\n"
"│   └── foo.lua\n"
"├── init.lua\n"
"└── modules\n"
"    └── bar.lua"
msgstr ""

msgid ""
"In this case, modules are placed in the same directory as the application "
"initialization file. If you :ref:`run the application <app_server-"
"launching_app_binary>` using the ``tarantool`` command from the ``myapp`` "
"directory, ..."
msgstr ""

msgid "/home/testuser/myapp$ tarantool init.lua"
msgstr ""

msgid ""
"... the search root is ``/home/testuser/myapp`` and Tarantool finds all "
"modules in this directory automatically. This means that to load the ``foo``"
" and ``modules.bar`` modules in ``init.lua``, you only need to add the "
"corresponding ``require`` directives:"
msgstr ""

msgid ""
"-- init.lua --\n"
"require('foo')\n"
"require('modules.bar')"
msgstr ""

msgid ""
"Starting with :doc:`2.11.0 </release/2.11.0>`, you can also run the "
"application using the ``tarantool`` command from the directory other than "
"``myapp``:"
msgstr ""

msgid "/home/testuser$ tarantool myapp/init.lua"
msgstr ""

msgid ""
"In this case, the path to the initialization file (``/home/testuser/myapp``)"
" is added to search paths for modules."
msgstr ""

msgid ""
"To load modules placed outside of the path to the application directory, use"
" :ref:`package.setsearchroot() <other-package_setsearchroot>`."
msgstr ""

msgid ""
"Set the search root, which defines the path to the root directory from which"
" dependencies are loaded. By default, the search root is the current "
"directory (see :ref:`package.searchroot() <other-package_searchroot>`)."
msgstr ""

msgid ""
"a relative or absolute path to the search root. If ``search-root`` is a "
"relative path, it is expanded to an absolute path. You can omit this "
"argument or set it to :ref:`box.NULL <box-null>` to reset the search root to"
" the current directory."
msgstr ""

msgid ""
"Suppose external modules are stored outside the application directory, for "
"example:"
msgstr ""

msgid ""
"/home/testuser/\n"
"├── myapp\n"
"│   └── init.lua\n"
"└── mymodules\n"
"    ├── .rocks/share/tarantool/\n"
"    │   └── foo.lua\n"
"    └── modules\n"
"        └── bar.lua"
msgstr ""

msgid ""
"In this case, you can specify the ``/home/testuser/mymodules`` path as the "
"search root for modules in the following way:"
msgstr ""

msgid ""
"-- init.lua --\n"
"package.setsearchroot('/home/testuser/mymodules')"
msgstr ""

msgid ""
"Then, you can load the ``foo`` and ``bar`` modules using the ``require()`` "
"directive:"
msgstr ""

#~ msgid ""
#~ "**Warning:** There is an underlying LuaJIT library that operates with C "
#~ "rules. Therefore you should expect odd results if you compare unsigned and "
#~ "signed (for example 0ULL > -1LL is false), or if you use numbers outside the"
#~ " 64-bit integer range (for example 9223372036854775808LL is negative). Also "
#~ "you should be aware that :samp:`type({number-literal-ending-in-ULL})` and "
#~ ":samp:`type(tonumber64({number-with-more-than-14-digits}))` is cdata, not a "
#~ "Lua arithmetic type, which prevents direct use with some functions in Lua "
#~ "libraries such as `math <https://www.lua.org/manual/5.1/manual.html#5.6>`_. "
#~ "See the `LuaJIT reference <http://luajit.org/ext_ffi_semantics.html>`_ and "
#~ "look for the phrase \"64 bit integer arithmetic\". and the phrase \"64 bit "
#~ "integer comparison\". Or see the comments on `Issue#4089 "
#~ "<https://github.com/tarantool/tarantool/issues/4089>`_."
#~ msgstr ""

#~ msgid "Where Tarantool looks for Lua additions"
#~ msgstr ""

#~ msgid "Where Tarantool looks for C additions"
#~ msgstr ""

#~ msgid "What Tarantool has already looked for and found"
#~ msgstr ""

#~ msgid ""
#~ "This is a string that Tarantool uses to search for Lua modules, especially "
#~ "important for ``require()``. See :ref:`Modules, rocks and applications "
#~ "<app_server-modules>`."
#~ msgstr ""

#~ msgid ""
#~ "This is a string that Tarantool uses to search for C modules, especially "
#~ "important for ``require()``. See :ref:`Modules, rocks and applications "
#~ "<app_server-modules>`."
#~ msgstr ""

#~ msgid ""
#~ "This is a string that shows what Lua or C modules Tarantool has loaded, so "
#~ "that their functions and members are available. Initially it has all the "
#~ "pre-loaded modules, which don't need ``require()``."
#~ msgstr ""

#~ msgid ""
#~ "Set the search root. The search root is the root directory from which "
#~ "dependencies are loaded."
#~ msgstr ""

#~ msgid "the path. Default = current directory."
#~ msgstr ""

#~ msgid ""
#~ "The search-root string must contain a relative or absolute path. If it is a "
#~ "relative path, then it will be expanded to an absolute path. If search-root "
#~ "is omitted, or is box.NULL, then the search root is reset to the current "
#~ "directory, which is found with debug.sourcedir()."
#~ msgstr ""

#~ msgid "Example:"
#~ msgstr "Пример:"

#~ msgid ""
#~ "Suppose that a Lua file ``myapp/init.lua`` is the project root. |br| Suppose"
#~ " the current path is ``/home/tara``. |br| Add this as the first line of "
#~ "``myapp/init.lua``: |br| :code:`package.setsearchroot()` |br| Start the "
#~ "project with |br| :code:`$ tarantool myapp/init.lua` |br| The search root "
#~ "will be the default, made absolute: ``/home/tara/myapp``. Within the Lua "
#~ "application all dependencies will be searched relative to "
#~ "``/home/tara/myapp``."
#~ msgstr ""

#~ msgid ""
#~ "Return a string with the current search root. After "
#~ "``package.setsearchroot('/home')`` the returned string will be ``/home'``."
#~ msgstr ""
