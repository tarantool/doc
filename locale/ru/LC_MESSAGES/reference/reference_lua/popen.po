
msgid "Module `popen`"
msgstr ""

msgid "Overview"
msgstr ""

msgid ""
"The ``popen`` module supports execution of external programs. It is "
"similar to Python's `subprocess() "
"<https://docs.python.org/3.8/library/subprocess.html>`_ or Ruby's `Open3 "
"<https://docs.ruby-lang.org/en/2.0.0/Open3.html>`_. However, Tarantool's "
"``popen`` module does not have all the helpers that those languages "
"provide, it provides only basic functions. ``popen`` uses the `vfork() "
"<https://pubs.opengroup.org/onlinepubs/009695399/functions/vfork.html>`_ "
"system call to create an object, so the caller thread is blocked until "
"execution of a child process begins."
msgstr ""

msgid "The ``popen`` module provides two functions to create the popen object:"
msgstr ""

msgid ""
":ref:`popen.shell <popen-shell>` which is similar to the libc `popen "
"<https://www.gnu.org/software/libc/manual/html_node/Pipe-"
"to-a-Subprocess.html>`_ syscall"
msgstr ""

msgid ""
":ref:`popen.new <popen-new>` to create a popen object with more specific "
"options"
msgstr ""

msgid ""
"Either function returns a handle which we will call ``popen_handle`` or "
"``ph``. With the handle one can execute methods."
msgstr ""

msgid "Index"
msgstr ""

msgid "Below is a list of all ``popen`` functions and handle methods."
msgstr ""

msgid "Name"
msgstr ""

msgid "Use"
msgstr ""

msgid ":ref:`popen.shell() <popen-shell>`"
msgstr ""

msgid "Execute a shell command"
msgstr ""

msgid ":ref:`popen.new() <popen-new>`"
msgstr ""

msgid "Execute a child program in a new process"
msgstr ""

msgid ":ref:`popen_handle:read() <popen-read>`"
msgstr ""

msgid "Read data from a child peer"
msgstr ""

msgid ":ref:`popen_handle:write() <popen-write>`"
msgstr ""

msgid "Write a string to stdin stream of a child process"
msgstr ""

msgid ":ref:`popen_handle:shutdown() <popen-shutdown>`"
msgstr ""

msgid "Close parent's ends of std* fds"
msgstr ""

msgid ":ref:`popen_handle:terminate() <popen-terminate>`"
msgstr ""

msgid "Send SIGTERM signal to a child process"
msgstr ""

msgid ":ref:`popen_handle:kill() <popen-kill>`"
msgstr ""

msgid "Send SIGKILL signal to a child process"
msgstr ""

msgid ":ref:`popen_handle:signal() <popen-signal>`"
msgstr ""

msgid "Send signal to a child process"
msgstr ""

msgid ":ref:`popen_handle:info() <popen-info>`"
msgstr ""

msgid "Return information about the popen handle"
msgstr ""

msgid ":ref:`popen_handle:wait() <popen-wait>`"
msgstr ""

msgid "Wait until a child process gets exited or signaled"
msgstr ""

msgid ":ref:`popen_handle:close() <popen-close>`"
msgstr ""

msgid "Close a popen handle"
msgstr ""

msgid ":ref:`Module constants <popen-constants>`"
msgstr ""

msgid "Module constants"
msgstr ""

msgid ":ref:`Handle fields <popen-handle_fields>`"
msgstr ""

msgid "Handle fields"
msgstr ""

msgid "Execute a shell command."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "a command to run, mandatory"
msgstr ""

msgid "communication mode, optional"
msgstr ""

msgid "return"
msgstr ""

msgid "(if success) a popen handle, which we will call ``popen_handle`` or ``ph``"
msgstr ""

msgid "(if failure) ``nil, err``"
msgstr ""

msgid ""
"Possible errors: if a parameter is incorrect, the result is "
"IllegalParams: incorrect type or value of a parameter. For other possible"
" errors, see :ref:`popen.new() <popen-new>`."
msgstr ""

msgid "The possible ``mode`` values are:"
msgstr ""

msgid "'w'    which enables :ref:`popen_handle:write() <popen-write>`"
msgstr ""

msgid "'r'    which enables :ref:`popen_handle:read() <popen-read>`"
msgstr ""

msgid ""
"'R'    which enables :ref:`popen_handle:read({stderr = true}) <popen-"
"read>`"
msgstr ""

msgid "nil    which means inherit parent's std* file descriptors"
msgstr ""

msgid "Several mode characters can be set together, for example 'rw', 'rRw'."
msgstr ""

msgid ""
"The ``shell`` function is just a shortcut for :ref:`popen.new({command}, "
"opts) <popen-new>` with ``opts.shell.setsid`` and "
"``opts.shell.group_signal`` both set to `true`, and with ``opts.stdin`` "
"and ``opts.stdout`` and ``opts.stderr`` all set based on the ``mode`` "
"parameter."
msgstr ""

msgid ""
"All std* streams are inherited from the parent by default unless it is "
"changed using mode: 'r' for stdout, 'R' for stderr, or 'w' for stdin."
msgstr ""

msgid "**Example:**"
msgstr ""

msgid ""
"This is the equivalent of the 'sh -c date' command. It starts a process, "
"runs 'date', reads the output, and closes the popen object (``ph``)."
msgstr ""

msgid ""
"local popen = require('popen')\n"
"-- Run the program and save its handle.\n"
"local ph = popen.shell('date', 'r')\n"
"-- Read program's output, strip trailing newline.\n"
"local date = ph:read():rstrip()\n"
"-- Free resources. The process is killed (but 'date'\n"
"-- exits itself anyway).\n"
"ph:close()\n"
"print(date)"
msgstr ""

msgid ""
"Unix defines a text file as a sequence of lines. Each line is terminated "
"by a newline (\\\\n) symbol. The same convention is usually applied for "
"text output of a command. So, when it is redirected to a file, the file "
"will be correct."
msgstr ""

msgid ""
"However, internally an application usually operates on strings, which are"
" *not* terminated by newline (for example literals for error messages). "
"The newline is usually added just before a string is written for the "
"outside world (stdout, console or log). That is why the example above "
"contains ``rstrip()``."
msgstr ""

msgid "Execute a child program in a new process."
msgstr ""

msgid ""
"an array of a program to run with command line options, mandatory; "
"absolute path to the program is required when ``opts.shell`` is false "
"(default)"
msgstr ""

msgid "table of options, optional"
msgstr ""

msgid "Possible raised errors are:"
msgstr ""

msgid "IllegalParams: incorrect type or value of a parameter"
msgstr ""

msgid "IllegalParams: group signal is set, while setsid is not"
msgstr ""

msgid "Possible error reasons when ``nil, err`` is returned are:"
msgstr ""

msgid ""
"SystemError: dup(), fcntl(), pipe(), vfork() or close() fails in the "
"parent process"
msgstr ""

msgid ""
"SystemError: (temporary restriction) the parent process has closed stdin,"
" stdout or stderr"
msgstr ""

msgid "OutOfMemory: unable to allocate the handle or a temporary buffer"
msgstr ""

msgid "Possible ``opts`` items are:"
msgstr ""

msgid "``opts.stdin`` (action on STDIN_FILENO)"
msgstr ""

msgid "``opts.stdout`` (action on STDOUT_FILENO)"
msgstr ""

msgid "``opts.stderr`` (action on STDERR_FILENO)"
msgstr ""

msgid "The ``opts`` table file descriptor actions may be:"
msgstr ""

msgid ""
"``popen.opts.INHERIT`` (== 'inherit') [default] inherit the fd from the "
"parent"
msgstr ""

msgid "``popen.opts.DEVNULL`` (== 'devnull') open /dev/null on the fd"
msgstr ""

msgid "``popen.opts.CLOSE`` (== 'close') close the fd"
msgstr ""

msgid ""
"``popen.opts.PIPE`` (== 'pipe') feed data from fd to parent, or from "
"parent to fd, using a pipe"
msgstr ""

msgid ""
"The ``opts`` table may contain an ``env`` table of environment variables "
"to be used inside a process. Each ``opts.env`` item may be a key-value "
"pair (key is a variable name, value is a variable value)."
msgstr ""

msgid "If ``opts.env`` is not set then the current environment is inherited."
msgstr ""

msgid "If ``opts.env`` is an empty table, then the environment will be dropped."
msgstr ""

msgid ""
"If ``opts.env`` is set to a non-empty table, then the environment will be"
" replaced."
msgstr ""

msgid "The ``opts`` table may contain these boolean items:"
msgstr ""

msgid "Default"
msgstr ""

msgid "opts.shell"
msgstr ""

msgid "false"
msgstr ""

msgid ""
"If true, then run a child process via ``sh -c \"${opts.argv}\"``. If "
"false, then call the executable directly."
msgstr ""

msgid "opts.setsid"
msgstr ""

msgid ""
"If true, then run the program in a new session. If false, then run the "
"program in the Tarantool instance's session and process group."
msgstr ""

msgid "opts.close_fds"
msgstr ""

msgid "true"
msgstr ""

msgid ""
"If true, then close all inherited fds from the parent. If false, then do "
"not close all inherited fds from the parent."
msgstr ""

msgid "opts.restore_signals"
msgstr ""

msgid ""
"If true, then reset all signal actions modified in the parent's process. "
"If false, then inherit all signal actions modified in the parent's "
"process."
msgstr ""

msgid "opts.group_signal"
msgstr ""

msgid ""
"If true, then send signal to a child process group, if and only if "
"``opts.setsid`` is enabled. If false, then send signal to a child process"
" only."
msgstr ""

msgid "opts.keep_child"
msgstr ""

msgid ""
"If true, then do not send SIGKILL to a child process (or to a process "
"group if ``opts.group_signal`` true). If false, then do send SIGKILL to a"
" child process (or to a process group if ``opts.group_signal`` is true) "
"at :ref:`popen_handle:close() <popen-close>` or when Lua GC collects the "
"handle."
msgstr ""

msgid ""
"The returned ``ph`` handle provides a :ref:`popen_handle:close() <popen-"
"close>` method for explicitly releasing all occupied resources, including"
" the child process itself if ``opts.keep_child`` is not set). However, if"
" the ``close()`` method is not called for a handle during its lifetime, "
"the Lua GC will trigger the same freeing actions."
msgstr ""

msgid ""
"Tarantool recommends using ``opts.setsid`` plus ``opts.group_signal`` if "
"a child process may spawn its own children and if they should all be "
"killed together."
msgstr ""

msgid ""
"A signal will not be sent if the child process is already dead. Otherwise"
" we might kill another process that occupies the same PID later. This "
"means that if the child process dies before its own children die, then "
"the function will not send a signal to the process group even when "
"``opts.setsid`` and ``opts.group_signal`` are set."
msgstr ""

msgid ""
"Use :ref:`os.environ() <os-environ>` to pass a copy of the current "
"environment with several replacements (see example 2 below)."
msgstr ""

msgid "**Example 1**"
msgstr ""

msgid ""
"This is the equivalent of the ``sh -c date`` command. It starts a "
"process, runs 'date', reads the output, and closes the popen object "
"(``ph``)."
msgstr ""

msgid ""
"local popen = require('popen')\n"
"\n"
"local ph = popen.new({'/bin/date'}, {\n"
"    stdout = popen.opts.PIPE,\n"
"})\n"
"local date = ph:read():rstrip()\n"
"ph:close()\n"
"print(date) -- e.g. Thu 16 Apr 2020 01:40:56 AM MSK"
msgstr ""

msgid "**Example 2**"
msgstr ""

msgid ""
"Example 2 is quite similar to Example 1, but sets an environment variable"
" and uses the shell builtin 'echo' to show it."
msgstr ""

msgid ""
"local popen = require('popen')\n"
"local env = os.environ()\n"
"env['FOO'] = 'bar'\n"
"local ph = popen.new({'echo \"${FOO}\"'}, {\n"
"    stdout = popen.opts.PIPE,\n"
"    shell = true,\n"
"    env = env,\n"
"})\n"
"local res = ph:read():rstrip()\n"
"ph:close()\n"
"print(res) -- bar"
msgstr ""

msgid "**Example 3**"
msgstr ""

msgid "Example 3 demonstrates how to capture a child's stderr."
msgstr ""

msgid ""
"local popen = require('popen')\n"
"local ph = popen.new({'echo hello >&2'}, { -- !!\n"
"    stderr = popen.opts.PIPE,              -- !!\n"
"    shell = true,\n"
"})\n"
"local res = ph:read({stderr = true}):rstrip()\n"
"ph:close()\n"
"print(res) -- hello"
msgstr ""

msgid "**Example 4**"
msgstr ""

msgid ""
"Example 4 demonstrates how to run a stream program (like ``grep``, "
"``sed`` and so on), write to its stdin and read from its stdout."
msgstr ""

msgid ""
"The example assumes that input data are small enough to fit in a pipe "
"buffer (typically 64 KiB, but this depends on the platform and its "
"configuration)."
msgstr ""

msgid ""
"If a process writes lengthy data, it will get stuck in "
":ref:`popen_handle:write() <popen-write>`. To handle this case: call "
":ref:`popen_handle:read() <popen-read>` in a loop in another fiber (start"
" it before the first ``:write()``)."
msgstr ""

msgid ""
"If a process writes lengthy text to stderr, it may get stick in "
"``write()`` because the stderr pipe buffer becomes full. To handle this "
"case: read stderr in a separate fiber."
msgstr ""

msgid ""
"local function call_jq(input, filter)\n"
"    -- Start jq process, connect to stdin, stdout and stderr.\n"
"    local jq_argv = {'/usr/bin/jq', '-M', '--unbuffered', filter}\n"
"    local ph, err = popen.new(jq_argv, {\n"
"        stdin = popen.opts.PIPE,\n"
"        stdout = popen.opts.PIPE,\n"
"        stderr = popen.opts.PIPE,\n"
"    })\n"
"    if ph == nil then return nil, err end\n"
"    -- Write input data to child's stdin and send EOF.\n"
"    local ok, err = ph:write(input)\n"
"    if not ok then return nil, err end\n"
"    ph:shutdown({stdin = true})\n"
"    -- Read everything until EOF.\n"
"    local chunks = {}\n"
"    while true do\n"
"        local chunk, err = ph:read()\n"
"        if chunk == nil then\n"
"            ph:close()\n"
"            return nil, err\n"
"        end\n"
"        if chunk == '' then break end -- EOF\n"
"        table.insert(chunks, chunk)\n"
"    end\n"
"    -- Read diagnostics from stderr if any.\n"
"    local err = ph:read({stderr = true})\n"
"    if err ~= '' then\n"
"        ph:close()\n"
"        return nil, err\n"
"    end\n"
"    -- Glue all chunks, strip trailing newline.\n"
"    return table.concat(chunks):rstrip()\n"
"end"
msgstr ""

msgid "popen handle methods"
msgstr ""

msgid "Read data from a child peer."
msgstr ""

msgid ""
"handle of a child process created with :ref:`popen.new() <popen-new>` or "
":ref:`popen.shell() <popen-shell>`"
msgstr ""

msgid "options"
msgstr ""

msgid ""
"Possible errors, raised on incorrect parameters or when the fiber is "
"cancelled:"
msgstr ""

msgid "IllegalParams:    incorrect type or value of a parameter"
msgstr ""

msgid "IllegalParams:    called on a closed handle"
msgstr ""

msgid "IllegalParams:    opts.stdout and opts.stderr are both set"
msgstr ""

msgid ""
"IllegalParams:    a requested IO operation is not supported by the handle"
" (stdout / stderr is not piped)"
msgstr ""

msgid "IllegalParams:    attempt to operate on a closed file descriptor"
msgstr ""

msgid "FiberIsCancelled: cancelled by an outside code"
msgstr ""

msgid "true on success, false on error"
msgstr ""

msgid "rtype"
msgstr ""

msgid "(if success) string with read value, empty string if EOF"
msgstr ""

msgid "Possible opts items are:"
msgstr ""

msgid ""
"``opts.stdout`` (boolean, default ``true``, if ``true`` then read from "
"stdout)"
msgstr ""

msgid ""
"``opts.stderr`` (boolean, default ``false``, if ``true`` then read from "
"stderr)"
msgstr ""

msgid "``opts.timeout`` (number, default 100 years, time quota in seconds)"
msgstr ""

msgid ""
"In other words: by default ``read()`` reads from stdout, but reads from "
"stderr if one sets ``opts.stderr`` to ``true`` (it is not legal to set "
"both ``opts.stdout`` and ``opts.stderr`` to ``true``)."
msgstr ""

msgid "SocketError: an IO error occurs at read()"
msgstr ""

msgid "TimedOut:    exceeded the opts.timeout quota"
msgstr ""

msgid "OutOfMemory: no memory space for a buffer to read into"
msgstr ""

msgid "LuajitError: (\"not enough memory\"): no memory space for the Lua string"
msgstr ""

msgid "Write string ``str`` to stdin stream of a child process."
msgstr ""

msgid "string to write"
msgstr ""

msgid "(if success) boolean = true"
msgstr ""

msgid ""
"Possible opts items are: ``opts.timeout`` (number, default 100 years, "
"time quota in seconds)."
msgstr ""

msgid "IllegalParams:    string length is greater then SSIZE_MAX"
msgstr ""

msgid ""
"IllegalParams:    a requested IO operation is not supported by the handle"
" (stdin is not piped)"
msgstr ""

msgid "SocketError: an IO error occurs at write()"
msgstr ""

msgid "TimedOut:    exceeded opts.timeout quota"
msgstr ""

msgid ""
"``write()`` may yield forever if the child process does not read data "
"from stdin and a pipe buffer becomes full. The size of this pipe buffer "
"depends on the platform. Set ``opts.timeout`` when unsure."
msgstr ""

msgid ""
"When ``opts.timeout`` is not set, the ``write()`` blocks (yields the "
"fiber) until all data is written or an error happens."
msgstr ""

msgid "Close parent's ends of std* fds."
msgstr ""

msgid "Possible `opts` items are:"
msgstr ""

msgid "``opts.stdin`` (boolean) close parent's end of stdin"
msgstr ""

msgid "``opts.stdout`` (boolean) close parent's end of stdout"
msgstr ""

msgid "``opts.stderr`` (boolean) close parent's end of stderr"
msgstr ""

msgid "We may use the term std* to mean any one of these items."
msgstr ""

msgid "IllegalParams:  an incorrect handle parameter"
msgstr ""

msgid "IllegalParams:  called on a closed handle"
msgstr ""

msgid "IllegalParams:  neither stdin, stdout nor stderr is chosen"
msgstr ""

msgid ""
"IllegalParams:  a requested IO operation is not supported by the handle "
"(one of std* is not piped)"
msgstr ""

msgid ""
"The main reason to use ``shutdown()`` is to send EOF to a child's stdin. "
"However the parent's end of stdout / stderr may be closed too."
msgstr ""

msgid ""
"``shutdown()`` does not fail on already closed fds (idempotence). "
"However, it fails on an attempt to close the end of a pipe that never "
"existed. In other words, only those std* options that were set to "
"``popen.opts.PIPE`` during handle creation may be used here (for "
":ref:`popen.shell() <popen-shell>`: 'r' corresponds to stdout, 'R' to "
"stderr and 'w' to stdin)."
msgstr ""

msgid ""
"``shutdown()`` does not close any fds on a failure: either all requested "
"fds are closed or none of them."
msgstr ""

msgid ""
"local popen = require('popen')\n"
"local ph = popen.shell('sed s/foo/bar/', 'rw')\n"
"ph:write('lorem foo ipsum')\n"
"ph:shutdown({stdin = true})\n"
"local res = ph:read()\n"
"ph:close()\n"
"print(res) -- lorem bar ipsum"
msgstr ""

msgid "Send SIGTERM signal to a child process."
msgstr ""

msgid ""
"see :ref:`popen_handle:signal() <popen-signal>` for errors and return "
"values"
msgstr ""

msgid ""
"``terminate()`` only sends a SIGTERM signal. It does *not* free any "
"resources (such as popen handle memory and file descriptors)."
msgstr ""

msgid "Send SIGKILL signal to a child process."
msgstr ""

msgid ""
"``kill()`` only sends a SIGKILL signal. It does *not* free any resources "
"(such as popen handle memory and file descriptors)."
msgstr ""

msgid "Send signal to a child process."
msgstr ""

msgid "signal to send"
msgstr ""

msgid "(if success) `true` (signal is sent)"
msgstr ""

msgid "Possible raised errors:"
msgstr ""

msgid "IllegalParams:    an incorrect handle parameter"
msgstr ""

msgid "Possible error values for ``nil, err``:"
msgstr ""

msgid ""
"SystemError: a process does not exists any more (this may also be "
"returned for a zombie process or when all processes in a group are "
"zombies (but see note re Mac OS below)"
msgstr ""

msgid "SystemError: invalid signal number"
msgstr ""

msgid ""
"SystemError: no permission to send a signal to a process or a process "
"group (this is returned on Mac OS when a signal is sent to a process "
"group, where a group leader is a zombie (or when all processes in it are "
"zombies, details re uncertain) (this may also appear due to other "
"reasons, details are uncertain)"
msgstr ""

msgid ""
"If ``opts.setsid`` and ``opts.group_signal`` are set for the handle, the "
"signal is sent to the process group rather than to the process. See "
":ref:`popen.new() <popen-new>` for details about group signaling. "
"Warning: On Mac OS it is possible that a process in the group will not "
"receive the signal, particularly if the process has just been forked "
"(this may be due to a race condition)."
msgstr ""

msgid ""
"Note: The module offers ``popen.signal.SIG*`` constants, because some "
"signals have different numbers on different platforms."
msgstr ""

msgid "Return information about the popen handle."
msgstr ""

msgid "(if success) formatted result"
msgstr ""

msgid "res"
msgstr ""

msgid "IllegalParams: an incorrect handle parameter"
msgstr ""

msgid "IllegalParams: called on a closed handle"
msgstr ""

msgid "The result format is:"
msgstr ""

msgid ""
"{\n"
"    pid = <number> or <nil>,\n"
"    command = <string>,\n"
"    opts = <table>,\n"
"    status = <table>,\n"
"    stdin = one-of(\n"
"        popen.stream.OPEN   (== 'open'),\n"
"        popen.stream.CLOSED (== 'closed'),\n"
"        nil,\n"
"    ),\n"
"    stdout = one-of(\n"
"        popen.stream.OPEN   (== 'open'),\n"
"        popen.stream.CLOSED (== 'closed'),\n"
"        nil,\n"
"    ),\n"
"    stderr = one-of(\n"
"        popen.stream.OPEN   (== 'open'),\n"
"        popen.stream.CLOSED (== 'closed'),\n"
"        nil,\n"
"    ),\n"
"}"
msgstr ""

msgid ""
"``pid`` is a process id of the process when it is alive, otherwise "
"``pid`` is nil."
msgstr ""

msgid ""
"``command`` is a concatenation of space-separated arguments that were "
"passed to ``execve()``. Multiword arguments are quoted. Quotes inside "
"arguments are not escaped."
msgstr ""

msgid ""
"``opts`` is a table of handle options as in the :ref:`popen.new() <popen-"
"new>` ``opts`` parameter. ``opts.env`` is not shown here, because the "
"environment variables map is not stored in a handle."
msgstr ""

msgid ""
"``status`` is a table that represents a process status in the following "
"format:"
msgstr ""

msgid ""
"{\n"
"    state = one-of(\n"
"        popen.state.ALIVE    (== 'alive'),\n"
"        popen.state.EXITED   (== 'exited'),\n"
"        popen.state.SIGNALED (== 'signaled'),\n"
"    )\n"
"    -- Present when `state` is 'exited'.\n"
"    exit_code = <number>,\n"
"    -- Present when `state` is 'signaled'.\n"
"    signo = <number>,\n"
"    signame = <string>,\n"
"}"
msgstr ""

msgid ""
"``stdin``, ``stdout``, and ``stderr`` reflect the status of the parent's "
"end of a piped stream. If a stream is not piped, the field is not present"
" (``nil``). If it is piped, the status may be either "
"``popen.stream.OPEN`` (== 'open') or ``popen.stream.CLOSED`` (== "
"'closed'). The status may be changed from 'open' to 'closed' by a "
":ref:`popen_handle:shutdown({std... = true}) <popen-shutdown>` call."
msgstr ""

msgid "(on Tarantool console)"
msgstr ""

msgid ""
"tarantool> require('popen').new({'/usr/bin/touch', '/tmp/foo'})\n"
"---\n"
"- command: /usr/bin/touch /tmp/foo\n"
"  status:\n"
"    state: alive\n"
"  opts:\n"
"    stdout: inherit\n"
"    stdin: inherit\n"
"    group_signal: false\n"
"    keep_child: false\n"
"    close_fds: true\n"
"    restore_signals: true\n"
"    shell: false\n"
"    setsid: false\n"
"    stderr: inherit\n"
"  pid: 9499\n"
"..."
msgstr ""

msgid ""
"tarantool> require('popen').shell('grep foo', 'wrR')\n"
"---\n"
"- stdout: open\n"
"  command: sh -c 'grep foo'\n"
"  stderr: open\n"
"  status:\n"
"    state: alive\n"
"  stdin: open\n"
"  opts:\n"
"    stdout: pipe\n"
"    stdin: pipe\n"
"    group_signal: true\n"
"    keep_child: false\n"
"    close_fds: true\n"
"    restore_signals: true\n"
"    shell: true\n"
"    setsid: true\n"
"    stderr: pipe\n"
"  pid: 10497\n"
"..."
msgstr ""

msgid "Wait until a child process gets exited or signaled."
msgstr ""

msgid ""
"The formatted result is a process status table (the same as the "
"``status`` component of the table returned by :ref:`popen_handle:info() "
"<popen-info>`)."
msgstr ""

msgid "Close a popen handle."
msgstr ""

msgid "(if success) true"
msgstr ""

msgid ""
"Possible diagnostics when ``nil, err`` is returned (do not consider them "
"as errors):"
msgstr ""

msgid ""
"SystemError: no permission to send a signal to a process or a process "
"group (This diagnostic may appear due to Mac OS behavior on zombies when "
"``opts.group_signal`` is set, see :ref:`popen_handle:signal() <popen-"
"signal>`. It may appear for other reasons, details are unclear.)"
msgstr ""

msgid ""
"The return is always ``true`` when a process is known to be dead (for "
"example, after :ref:`popen_handle:wait() <popen-wait>` no signal will be "
"sent, so no 'failure' may appear)."
msgstr ""

msgid ""
"``close()`` kills a process using SIGKILL and releases all resources "
"associated with the popen handle."
msgstr ""

msgid "Details about signaling:"
msgstr ""

msgid "The signal is sent only when opts.keep_child is not set."
msgstr ""

msgid ""
"The signal is sent only when a process is alive according to the "
"information available on current event loop iteration. (There is a gap "
"here: a zombie may be signaled; it is harmless.)"
msgstr ""

msgid ""
"The signal is sent to a process or a process group depending on "
"``opts.group_signal``. (See :ref:`popen.new() <popen-new>` for details of"
" group signaling)."
msgstr ""

msgid ""
"Resources are released regardless whether or not a signal sending "
"succeeds: fds are closed, memory is released, the handle is marked as "
"closed."
msgstr ""

msgid ""
"No operation is possible on a closed handle except ``close()``, which is "
"always successful on a closed handle (idempotence)."
msgstr ""

msgid ""
"``close()`` may return ``true`` or ``nil, err``, but it always frees the "
"handle resources. So any return value usually means success for a caller."
" The return values are purely informational: they are for logging or some"
" kind of reporting."
msgstr ""

msgid "**Handle fields**"
msgstr ""

msgid ""
"popen_handle.pid\n"
"popen_handle.command\n"
"popen_handle.opts\n"
"popen_handle.status\n"
"popen_handle.stdin\n"
"popen_handle.stdout\n"
"popen_handle.stderr"
msgstr ""

msgid "See :ref:`popen_handle:info() <popen-info>` for details."
msgstr ""

msgid "**Module constants**"
msgstr ""

msgid ""
"- popen.opts\n"
"  - INHERIT (== 'inherit')\n"
"  - DEVNULL (== 'devnull')\n"
"  - CLOSE   (== 'close')\n"
"  - PIPE    (== 'pipe')\n"
"\n"
"- popen.signal\n"
"  - SIGTERM (== 9)\n"
"  - SIGKILL (== 15)\n"
"  - ...\n"
"\n"
"- popen.state\n"
"  - ALIVE    (== 'alive')\n"
"  - EXITED   (== 'exited')\n"
"  - SIGNALED (== 'signaled')\n"
"\n"
"- popen.stream\n"
"  - OPEN    (== 'open')\n"
"  - CLOSED  (== 'closed')"
msgstr ""

#~ msgid ""
#~ "The `popen` module supports execution of"
#~ " external programs. It is similar to"
#~ " Python's `subprocess() "
#~ "<https://docs.python.org/3.8/library/subprocess.html>`_ or "
#~ "Ruby's `Open3 <https://docs.ruby-"
#~ "lang.org/en/2.0.0/Open3.html>`_. However, Tarantool's "
#~ "`popen` module does not have all "
#~ "the helpers that those languages "
#~ "provide, it provides only basic "
#~ "functions. `popen` uses the `vfork() "
#~ "<https://pubs.opengroup.org/onlinepubs/009695399/functions/vfork.html>`_"
#~ " system call to create an object, "
#~ "so the caller thread is blocked "
#~ "until execution of a child process "
#~ "begins."
#~ msgstr ""

#~ msgid ""
#~ "The `popen` module provides two "
#~ "functions to create the popen object:"
#~ " :ref:`popen.shell <popen-shell>` which is"
#~ " similar to the libc `popen "
#~ "<https://www.gnu.org/software/libc/manual/html_node/Pipe-"
#~ "to-a-Subprocess.html>`_ syscall, and :ref:`popen.new"
#~ " <popen-new>` to create a popen "
#~ "object with more specific options. "
#~ "Either function returns a handle which"
#~ " we will call `popen_handle` or `ph`."
#~ " With the handle one can execute "
#~ "methods."
#~ msgstr ""

#~ msgid ""
#~ "if success, a popen handle, which "
#~ "we will call `popen_handle` or `ph`. "
#~ "if failure, `nil, err`."
#~ msgstr ""

#~ msgid ""
#~ "The possible `mode` values are: |br| "
#~ "'w'    which enables :ref:`popen_handle:write() "
#~ "<popen-write>`, |br| 'r'    which "
#~ "enables :ref:`popen_handle:read() <popen-read>`, "
#~ "|br| 'R'    which enables "
#~ ":ref:`popen_handle:read(stderr = true) <popen-"
#~ "read>`, |br| nil    which means inherit"
#~ " parent's std* file descriptors. |br| "
#~ "Several mode characters can be set "
#~ "together, for example 'rw', 'rRw'."
#~ msgstr ""

#~ msgid ""
#~ "The `shell` function is just a "
#~ "shortcut for :ref:`popen.new({command}, opts) "
#~ "<popen-new>` with opts.shell.setsid and "
#~ "opts.shell.group_signal both set to `true`,"
#~ " and with opts.stdin and opts.stdout "
#~ "and opts.stderr all set based on "
#~ "the `mode` parameter."
#~ msgstr ""

#~ msgid ""
#~ "This is the equivalent of the 'sh"
#~ " -c date' command. It starts a "
#~ "process, runs 'date', reads the output,"
#~ " and closes the popen object (`ph`)."
#~ msgstr ""

#~ msgid ""
#~ "Unix defines a text file as a "
#~ "sequence of lines. Each line is "
#~ "terminated by a newline (\\\\n) symbol."
#~ " The same convention is usually "
#~ "applied for text output of a "
#~ "command so, when it is redirected "
#~ "to a file, the file will be "
#~ "correct."
#~ msgstr ""

#~ msgid ""
#~ "However, internally an application usually "
#~ "operates on strings, which are *not* "
#~ "terminated by newline (for example "
#~ "literals for error messages). The "
#~ "newline is usually added just before "
#~ "a string is written for the "
#~ "outside world (stdout, console or log)."
#~ " That is why the example above "
#~ "contains `rstrip()`."
#~ msgstr ""

#~ msgid ""
#~ "an array of a program to run "
#~ "with command line options, mandatory; "
#~ "absolute path to the program is "
#~ "required when opts.shell is false "
#~ "(default)"
#~ msgstr ""

#~ msgid ""
#~ "Possible raised errors are: |br| \"- "
#~ "IllegalParams: incorrect type or value "
#~ "of a parameter\",  |br| \"- "
#~ "IllegalParams: group signal is set, "
#~ "while setsid is not\". |br| Possible "
#~ "error reasons when `nil, err` is "
#~ "returned are: |br| \"- SystemError: "
#~ "dup(), fcntl(), pipe(), vfork() or "
#~ "close() fails in the parent process\","
#~ " |br| \"- SystemError: (temporary "
#~ "restriction) the parent process has "
#~ "closed stdin, stdout or stderr\", |br|"
#~ " \"- OutOfMemory: unable to allocate "
#~ "the handle or a temporary buffer\"."
#~ msgstr ""

#~ msgid ""
#~ "Possible `opts` items are: `opts.stdin` "
#~ "(action on STDIN_FILENO), `opts.stdout` "
#~ "(action on STDOUT_FILENO), `opts.stderr` "
#~ "(action on STDERR_FILENO)."
#~ msgstr ""

#~ msgid ""
#~ "The `opts` table file descriptor actions"
#~ " may be |br| `popen.opts.INHERIT` (== "
#~ "'inherit') [default] inherit the fd from"
#~ " the parent, |br| `popen.opts.DEVNULL` (=="
#~ " 'devnull') open /dev/null on the fd,"
#~ " |br| `popen.opts.CLOSE` (== 'close') close"
#~ " the fd |br| `popen.opts.PIPE` (== "
#~ "'pipe') feed data from fd to "
#~ "parent, or from parent to fd, "
#~ "using a pipe."
#~ msgstr ""

#~ msgid ""
#~ "The `opts` table may contain an "
#~ "`env` table of environment variables to"
#~ " be used inside a process. Each "
#~ "`opts.env` item may be a key-value"
#~ " pair (key is a variable name, "
#~ "value is a variable value). If "
#~ "`opts.env` is not set then the "
#~ "current environment is inherited. If "
#~ "`opts.env` is an empty table, then "
#~ "the environment will be dropped. If "
#~ "`opts.env` is set to a non-empty"
#~ " table, then the environment will be"
#~ " replaced."
#~ msgstr ""

#~ msgid "The `opts` table may contain these boolean items:"
#~ msgstr ""

#~ msgid ""
#~ "If true, then send signal to a "
#~ "child process group, if and only "
#~ "if opts.setsid is enabled. If false, "
#~ "then send signal to a child "
#~ "process only."
#~ msgstr ""

#~ msgid ""
#~ "If true, then do not send SIGKILL"
#~ " to a child process (or to a"
#~ " process group if opts.group_signal true)."
#~ " If false, then do send SIGKILL "
#~ "to a child process (or to a "
#~ "process group if opts.group_signal is "
#~ "true) at :ref:`popen_handle:close() <popen-"
#~ "close>` or when Lua GC collects "
#~ "the handle."
#~ msgstr ""

#~ msgid ""
#~ "The returned `ph` handle provides a "
#~ ":ref:`popen_handle:close() <popen-close>` method "
#~ "for explicitly releasing all occupied "
#~ "resources, including the child process "
#~ "itself if `opts.keep_child` is not set)."
#~ " However, if the `close()` method is"
#~ " not called for a handle during "
#~ "its lifetime, the Lua GC will "
#~ "trigger the same freeing actions."
#~ msgstr ""

#~ msgid ""
#~ "Tarantool recommends using `opts.setsid` plus"
#~ " `opts.group_signal` if a child process "
#~ "may spawn its own children and if"
#~ " they should all be killed together."
#~ msgstr ""

#~ msgid ""
#~ "A signal will not be sent if "
#~ "the child process is already dead. "
#~ "Otherwise otherwise we might kill "
#~ "another process that occupies the same"
#~ " PID later. This means that if "
#~ "the child process dies before its "
#~ "own children die, then the function "
#~ "will not send a signal to the "
#~ "process group even when opts.setsid and"
#~ " opts.group_signal are set."
#~ msgstr ""

#~ msgid ""
#~ "Example 4 demonstrates how to run "
#~ "a stream program (like `grep`, `sed` "
#~ "and so on), write to its stdin "
#~ "and read from its stdout."
#~ msgstr ""

#~ msgid ""
#~ "If a process writes lengthy data, "
#~ "it will get stuck in "
#~ ":ref:`popen_handle:write() <popen-write>`. To "
#~ "handle this case: call "
#~ ":ref:`popen_handle:read() <popen-read>` in a"
#~ " loop in another fiber (start it "
#~ "before the first :write())."
#~ msgstr ""

#~ msgid ""
#~ "If a process writes lengthy text "
#~ "to stderr, it may get stick in "
#~ "`write()` because the stderr pipe buffer"
#~ " becomes full. To handle this case:"
#~ " read stderr in a separate fiber."
#~ msgstr ""

#~ msgid ""
#~ "handle of a child process created "
#~ "with :ref:`popen.new() <popen-new>` or "
#~ ":ref:`popen.shell() <popen-shell>`."
#~ msgstr ""

#~ msgid ""
#~ "(if success) string with read value, "
#~ "empty string if EOF. (if failure) "
#~ "`nil, err`."
#~ msgstr ""

#~ msgid ""
#~ "Possible opts items are: |br| "
#~ "`opts.stdout` (boolean, default `true`, if "
#~ "`true` then read from stdout), |br| "
#~ "`opts.stderr` (boolean, default `false`, if"
#~ " `true` then read from stderr), |br|"
#~ " `opts.timeout` (number, default 100 years,"
#~ " time quota in seconds). |br| In "
#~ "other words: by default `read()` reads"
#~ " from stdout, but reads from stderr"
#~ " if one sets `opts.stderr` to `true`"
#~ " (it is not legal to set both"
#~ " `opts.stdout` and `opts.stderr` to "
#~ "`true`)."
#~ msgstr ""

#~ msgid ""
#~ "Possible raised errors are: |br| \"- "
#~ "IllegalParams:    incorrect type or value "
#~ "of a parameter\", |br| \"- "
#~ "IllegalParams:    called on a closed "
#~ "handle\", |br| \"- IllegalParams:    "
#~ "opts.stdout and opts.stderr are both "
#~ "set\", |br| \"- IllegalParams:    a "
#~ "requested IO operation is not supported"
#~ " by the handle (stdout / stderr "
#~ "is not piped)\", |br| \"- IllegalParams:"
#~ "    attempt to operate on a closed"
#~ " file descriptor\", |br| \"- "
#~ "FiberIsCancelled: cancelled by an outside "
#~ "code\". |br| Possible error reasons when"
#~ " `nil, err` is returned are: |br| "
#~ "\"- SocketError: an IO error occurs "
#~ "at read()\", |br| \"- TimedOut:    "
#~ "exceeded the `opts.timeout` quota\", |br| "
#~ "\"- OutOfMemory: no memory space for "
#~ "a buffer to read into\", |br| \"-"
#~ "  LuajitError: (\"not enough memory\"): no"
#~ " memory space for the Lua string\"."
#~ msgstr ""

#~ msgid "Write string `str` to stdin stream of a child process."
#~ msgstr ""

#~ msgid "(if success) boolean = true. (if failure) `nil, err`."
#~ msgstr ""

#~ msgid ""
#~ "Possible raised errors are: |br| \"- "
#~ "IllegalParams:    incorrect type or value "
#~ "of a parameter\", |br| \"- "
#~ "IllegalParams:    called on a closed "
#~ "handle\", |br| \"- IllegalParams:    string"
#~ " length is greater then SSIZE_MAX\", "
#~ "|br| \"- IllegalParams:    a requested "
#~ "IO operation is not supported by "
#~ "the handle (stdin is not piped)\", "
#~ "|br| \"- IllegalParams:    attempt to "
#~ "operate on a closed file descriptor\","
#~ " |br| \"- FiberIsCancelled: cancelled by"
#~ " an outside code\". |br| Possible "
#~ "error reasons when `nil, err` is "
#~ "returned are: |br| \"- SocketError: an"
#~ " IO error occurs at write()\", \"-"
#~ " TimedOut:    exceeded `opts.timeout` quota\"."
#~ msgstr ""

#~ msgid ""
#~ "`write()` may yield forever if the "
#~ "child process does not read data "
#~ "from stdin and a pipe buffer "
#~ "becomes full. The size of this "
#~ "pipe buffer depends on the platform. "
#~ "Set `opts.timeout` when unsure."
#~ msgstr ""

#~ msgid ""
#~ "When `opts.timeout` is not set, the "
#~ "`write()` blocks (yields the fiber) "
#~ "until all data is written or an"
#~ " error happens."
#~ msgstr ""

#~ msgid "(if success) boolean = true."
#~ msgstr ""

#~ msgid ""
#~ "Possible `opts` items are: |br| "
#~ "opts.stdin (boolean) close parent's end "
#~ "of stdin, |br| opts.stdout (boolean) "
#~ "close parent's end of stdout, |br| "
#~ "opts.stderr (boolean) close parent's end "
#~ "of stderr. |br| We may use the "
#~ "term std* to mean any one of "
#~ "these items."
#~ msgstr ""

#~ msgid ""
#~ "Possible raised errors are: |br| \"- "
#~ "IllegalParams:  an incorrect handle "
#~ "parameter\", |br| \"- IllegalParams:  called"
#~ " on a closed handle\", |br| \"- "
#~ "IllegalParams:  neither stdin, stdout nor "
#~ "stderr is choosen\", |br| \"- "
#~ "IllegalParams:  a requested IO operation "
#~ "is not supported by the handle "
#~ "(one of std* is not piped)\"."
#~ msgstr ""

#~ msgid ""
#~ "The main reason to use `shutdown()` "
#~ "is to send EOF to a child's "
#~ "stdin. However the parent's end of "
#~ "stdout / stderr may be closed too."
#~ msgstr ""

#~ msgid ""
#~ "`shutdown()` does not fail on already"
#~ " closed fds (idempotence). However, it "
#~ "fails on an attempt to close the"
#~ " end of a pipe that never "
#~ "existed. In other words, only those "
#~ "std* options that were set to "
#~ "popen.opts.PIPE during handle creation may "
#~ "be used here (for :ref:`popen.shell() "
#~ "<popen-shell>`: 'r' corresponds to stdout,"
#~ " 'R' to stderr and 'w' to "
#~ "stdin)."
#~ msgstr ""

#~ msgid ""
#~ "`shutdown()` does not close any fds "
#~ "on a failure: either all requested "
#~ "fds are closed or none of them."
#~ msgstr ""

#~ msgid ""
#~ "`terminate()` only sends a SIGTERM "
#~ "signal. It does *not* free any "
#~ "resources (such as popen handle memory"
#~ " and file descriptors)."
#~ msgstr ""

#~ msgid ""
#~ "`kill()` only sends a SIGKILL signal."
#~ " It does *not* free any resources "
#~ "(such as popen handle memory and "
#~ "file descriptors)."
#~ msgstr ""

#~ msgid "`true` if success (signal is sent), `nil, err` if failure."
#~ msgstr ""

#~ msgid ""
#~ "Possible raised errors: |br| \"- "
#~ "IllegalParams:    an incorrect handle "
#~ "parameter\", \"- IllegalParams:    called on"
#~ " a closed handle\". |br| Possible "
#~ "error values for `nil, err`: |br| "
#~ "\"- SystemError: a process does not "
#~ "exists any more\" (this may also "
#~ "be returned for a zombie process "
#~ "or when all processes in a group"
#~ " are zombies (but see note re "
#~ "Mac OS below), |br| \"- SystemError: "
#~ "invalid signal number\", |br| \"- "
#~ "SystemError: no permission to send a "
#~ "signal to a process or a process"
#~ " group\" (this is returned on Mac "
#~ "OS when a signal is sent to "
#~ "a process group, where a group "
#~ "leader is a zombie (or when all"
#~ " processes in it are zombies, details"
#~ " re uncertain) (this may also appear"
#~ " due to other reasons, details are"
#~ " uncertain)."
#~ msgstr ""

#~ msgid ""
#~ "If `opts.setsid` and `opts.group_signal` are"
#~ " set for the handle, the signal "
#~ "is sent to the process group "
#~ "rather than to the process. See "
#~ ":ref:`popen.new() <popen-new>` for details "
#~ "about group signaling."
#~ msgstr ""

#~ msgid ""
#~ "Note: The module offers popen.signal.SIG* "
#~ "constants, because some signals have "
#~ "different numbers on different platforms."
#~ msgstr ""

#~ msgid ""
#~ "Possible raised errors are: |br| \"- "
#~ "IllegalParams: an incorrect handle "
#~ "parameter\", |br| \"- IllegalParams: called"
#~ " on a closed handle\"."
#~ msgstr ""

#~ msgid ""
#~ "`pid` is a process id of the "
#~ "process when it is alive, otherwise "
#~ "`pid` is nil."
#~ msgstr ""

#~ msgid ""
#~ "`command` is a concatenation of "
#~ "space-separated arguments that were passed"
#~ " to execve(). Multiword arguments are "
#~ "quoted. Quotes inside arguments are not"
#~ " escaped."
#~ msgstr ""

#~ msgid ""
#~ "`opts` is a table of handle "
#~ "options as in the :ref:`popen.new() "
#~ "<popen-new>` `opts` parameter. `opts.env` "
#~ "is not shown here, because the "
#~ "environment variables map is not stored"
#~ " in a handle."
#~ msgstr ""

#~ msgid ""
#~ "`status` is a table that represents "
#~ "a process status in the following "
#~ "format:"
#~ msgstr ""

#~ msgid ""
#~ "`stdin`, `stdout`, and `stderr` reflect "
#~ "the status of the parent's end of"
#~ " a piped stream. If a stream is"
#~ " not piped, the field is not "
#~ "present (`nil`). If it is piped, "
#~ "the status may be either "
#~ "popen.stream.OPEN (== 'open') or "
#~ "popen.stream.CLOSED (== 'closed'). The status"
#~ " may be changed from 'open' to "
#~ "'closed' by a :ref:`popen_handle:shutdown({std..."
#~ " = true}) <popen-shutdown>` call."
#~ msgstr ""

#~ msgid ""
#~ "Possible raised errors are: |br| \"- "
#~ "IllegalParams: an incorrect handle "
#~ "parameter\", |br| \"- IllegalParams: called"
#~ " on a closed handle\"\", |br| \"- "
#~ "FiberIsCancelled: cancelled by an outside "
#~ "code\"."
#~ msgstr ""

#~ msgid ""
#~ "The formatted result is a process "
#~ "status table (the same as the "
#~ "`status` component of the table returned"
#~ " by :ref:`popen_handle:info() <popen-info>`)."
#~ msgstr ""

#~ msgid "(if success) true, (if failure) `nil, err`"
#~ msgstr ""

#~ msgid ""
#~ "Possible raised errors are: |br| \"- "
#~ "IllegalParams: an incorrect handle "
#~ "parameter\". |br| Possible diagnostics when"
#~ " `nil, err` is returned (do not "
#~ "consider them as errors): |br| \"- "
#~ "SystemError: no permission to send a "
#~ "signal to a process or a process"
#~ " group\" (This diagnostic may appear "
#~ "due to Mac OS behavior on zombies"
#~ " when `opts.group_signal` is set, see "
#~ ":ref:`popen_handle:signal() <popen-signal>`. It "
#~ "may appear for other reasons, details"
#~ " are unclear.)"
#~ msgstr ""

#~ msgid ""
#~ "The return is always `true` when a"
#~ " process is known to be dead "
#~ "(for example, after :ref:`popen_handle:wait() "
#~ "<popen-wait>` no signal will be sent,"
#~ " so no 'failure' may appear)."
#~ msgstr ""

#~ msgid ""
#~ "`close()` kills a process using SIGKILL"
#~ " and releases all resources assosiated "
#~ "with the popen handle."
#~ msgstr ""

#~ msgid ""
#~ "Details about signaling: |br| - The "
#~ "signal is sent only when opts.keep_child"
#~ " is not set. |br| - The signal"
#~ " is sent only when a process is"
#~ " alive according to the information "
#~ "available on current event loop "
#~ "iteration. (There is a gap here: a"
#~ " zombie may be signaled; it is "
#~ "harmless.) |br| - The signal is "
#~ "sent to a process or a grocess "
#~ "group depending on opts.group_signal. (see "
#~ ":ref:`popen.new() <popen-new>` for details "
#~ "of group signaling)."
#~ msgstr ""

#~ msgid ""
#~ "No operation is possible on a "
#~ "closed handle except `close()`, which is"
#~ " always successful on a closed handle"
#~ " (idempotence)."
#~ msgstr ""

#~ msgid ""
#~ "`close()` may return `true` or `nil, "
#~ "err`, but it always frees the "
#~ "handle resources. So any return value"
#~ " usually means success for a caller."
#~ " The return values are purely "
#~ "informational: they are for logging or"
#~ " some kind of reporting."
#~ msgstr ""

#~ msgid ""
#~ ":ref:`popen.shell <popen-shell>` which is "
#~ "similar to the libc `popen "
#~ "<https://www.gnu.org/software/libc/manual/html_node/Pipe-"
#~ "to-a-Subprocess.html>`_ syscall, and"
#~ msgstr ""

#~ msgid ""
#~ ":ref:`popen.new <popen-new>` to create a"
#~ " popen object with more specific "
#~ "options."
#~ msgstr ""

#~ msgid "'w'    which enables :ref:`popen_handle:write() <popen-write>`,"
#~ msgstr ""

#~ msgid "'r'    which enables :ref:`popen_handle:read() <popen-read>`,"
#~ msgstr ""

#~ msgid ""
#~ "'R'    which enables :ref:`popen_handle:read(stderr"
#~ " = true) <popen-read>`,"
#~ msgstr ""

#~ msgid "nil    which means inherit parent's std* file descriptors."
#~ msgstr ""

#~ msgid "\"- IllegalParams: incorrect type or value of a parameter\""
#~ msgstr ""

#~ msgid "\"- IllegalParams: group signal is set, while setsid is not\""
#~ msgstr ""

#~ msgid ""
#~ "\"- SystemError: dup(), fcntl(), pipe(), "
#~ "vfork() or close() fails in the "
#~ "parent process\""
#~ msgstr ""

#~ msgid ""
#~ "\"- SystemError: (temporary restriction) the"
#~ " parent process has closed stdin, "
#~ "stdout or stderr\""
#~ msgstr ""

#~ msgid "\"- OutOfMemory: unable to allocate the handle or a temporary buffer\""
#~ msgstr ""

#~ msgid ""
#~ "If true, then run a child process"
#~ " via 'sh -c \"${opts.argv}\"'. If "
#~ "false, then call the executable "
#~ "directly."
#~ msgstr ""

#~ msgid "\"- IllegalParams:    incorrect type or value of a parameter\""
#~ msgstr ""

#~ msgid "\"- IllegalParams:    called on a closed handle\""
#~ msgstr ""

#~ msgid "\"- IllegalParams:    opts.stdout and opts.stderr are both set\""
#~ msgstr ""

#~ msgid ""
#~ "\"- IllegalParams:    a requested IO "
#~ "operation is not supported by the "
#~ "handle (stdout / stderr is not "
#~ "piped)\""
#~ msgstr ""

#~ msgid "\"- IllegalParams:    attempt to operate on a closed file descriptor\""
#~ msgstr ""

#~ msgid "\"- FiberIsCancelled: cancelled by an outside code\""
#~ msgstr ""

#~ msgid "\"- SocketError: an IO error occurs at read()\""
#~ msgstr ""

#~ msgid "\"- TimedOut:    exceeded the `opts.timeout` quota\""
#~ msgstr ""

#~ msgid "\"- OutOfMemory: no memory space for a buffer to read into\""
#~ msgstr ""

#~ msgid ""
#~ "\"-  LuajitError: (\"not enough memory\"): "
#~ "no memory space for the Lua "
#~ "string\""
#~ msgstr ""

#~ msgid "\"- IllegalParams:    string length is greater then SSIZE_MAX\""
#~ msgstr ""

#~ msgid ""
#~ "\"- IllegalParams:    a requested IO "
#~ "operation is not supported by the "
#~ "handle (stdin is not piped)\""
#~ msgstr ""

#~ msgid "\"- SocketError: an IO error occurs at write()\""
#~ msgstr ""

#~ msgid "\"- TimedOut:    exceeded `opts.timeout` quota\""
#~ msgstr ""

#~ msgid "\"- IllegalParams:  an incorrect handle parameter\""
#~ msgstr ""

#~ msgid "\"- IllegalParams:  called on a closed handle\""
#~ msgstr ""

#~ msgid "\"- IllegalParams:  neither stdin, stdout nor stderr is choosen\""
#~ msgstr ""

#~ msgid ""
#~ "\"- IllegalParams:  a requested IO "
#~ "operation is not supported by the "
#~ "handle (one of std* is not "
#~ "piped)\""
#~ msgstr ""

#~ msgid ""
#~ "see :ref:`popen_handle:signal() <popen-signal>` "
#~ "for errors and return values."
#~ msgstr ""

#~ msgid "\"- IllegalParams:    an incorrect handle parameter\""
#~ msgstr ""

#~ msgid ""
#~ "\"- SystemError: a process does not "
#~ "exists any more\" (this may also "
#~ "be returned for a zombie process "
#~ "or when all processes in a group"
#~ " are zombies (but see note re "
#~ "Mac OS below)"
#~ msgstr ""

#~ msgid "\"- SystemError: invalid signal number\""
#~ msgstr ""

#~ msgid ""
#~ "\"- SystemError: no permission to send"
#~ " a signal to a process or a "
#~ "process group\" (this is returned on "
#~ "Mac OS when a signal is sent "
#~ "to a process group, where a group"
#~ " leader is a zombie (or when "
#~ "all processes in it are zombies, "
#~ "details re uncertain) (this may also "
#~ "appear due to other reasons, details "
#~ "are uncertain)."
#~ msgstr ""

#~ msgid "\"- IllegalParams: an incorrect handle parameter\""
#~ msgstr ""

#~ msgid "\"- IllegalParams: called on a closed handle\""
#~ msgstr ""

#~ msgid ""
#~ "Possible raised errors are: * \"- "
#~ "IllegalParams: an incorrect handle parameter\""
#~ " * \"- IllegalParams: called on a "
#~ "closed handle\" * \"- FiberIsCancelled: "
#~ "cancelled by an outside code\""
#~ msgstr ""

#~ msgid ""
#~ "\"- SystemError: no permission to send"
#~ " a signal to a process or a "
#~ "process group\" (This diagnostic may "
#~ "appear due to Mac OS behavior on"
#~ " zombies when ``opts.group_signal`` is set,"
#~ " see :ref:`popen_handle:signal() <popen-signal>`."
#~ " It may appear for other reasons, "
#~ "details are unclear.)"
#~ msgstr ""

#~ msgid ""
#~ "Possible errors: if a parameter is "
#~ "incorrect, the result is \"IllegalParams: "
#~ "incorrect type or value of a "
#~ "parameter\". For other possible errors, "
#~ "see :ref:`popen.new() <popen-new>`."
#~ msgstr ""

#~ msgid "\"IllegalParams: incorrect type or value of a parameter\""
#~ msgstr ""

#~ msgid "\"IllegalParams: group signal is set, while setsid is not\""
#~ msgstr ""

#~ msgid ""
#~ "\"SystemError: dup(), fcntl(), pipe(), vfork()"
#~ " or close() fails in the parent "
#~ "process\""
#~ msgstr ""

#~ msgid ""
#~ "\"SystemError: (temporary restriction) the "
#~ "parent process has closed stdin, stdout"
#~ " or stderr\""
#~ msgstr ""

#~ msgid "\"OutOfMemory: unable to allocate the handle or a temporary buffer\""
#~ msgstr ""

#~ msgid "**popen handle methods**"
#~ msgstr ""

#~ msgid "\"IllegalParams:    incorrect type or value of a parameter\""
#~ msgstr ""

#~ msgid "\"IllegalParams:    called on a closed handle\""
#~ msgstr ""

#~ msgid "\"IllegalParams:    opts.stdout and opts.stderr are both set\""
#~ msgstr ""

#~ msgid ""
#~ "\"IllegalParams:    a requested IO operation"
#~ " is not supported by the handle "
#~ "(stdout / stderr is not piped)\""
#~ msgstr ""

#~ msgid "\"IllegalParams:    attempt to operate on a closed file descriptor\""
#~ msgstr ""

#~ msgid "\"FiberIsCancelled: cancelled by an outside code\""
#~ msgstr ""

#~ msgid "\"SocketError: an IO error occurs at read()\""
#~ msgstr ""

#~ msgid "\"TimedOut:    exceeded the `opts.timeout` quota\""
#~ msgstr ""

#~ msgid "\"OutOfMemory: no memory space for a buffer to read into\""
#~ msgstr ""

#~ msgid ""
#~ "\"LuajitError: (\"not enough memory\"): no "
#~ "memory space for the Lua string\""
#~ msgstr ""

#~ msgid ""
#~ "Possible opts items are: `opts.timeout` "
#~ "(number, default 100 years, time quota"
#~ " in seconds)."
#~ msgstr ""

#~ msgid "\"IllegalParams:    string length is greater then SSIZE_MAX\""
#~ msgstr ""

#~ msgid ""
#~ "\"IllegalParams:    a requested IO operation"
#~ " is not supported by the handle "
#~ "(stdin is not piped)\""
#~ msgstr ""

#~ msgid "\"SocketError: an IO error occurs at write()\""
#~ msgstr ""

#~ msgid "\"TimedOut:    exceeded `opts.timeout` quota\""
#~ msgstr ""

#~ msgid "\"IllegalParams:  an incorrect handle parameter\""
#~ msgstr ""

#~ msgid "\"IllegalParams:  called on a closed handle\""
#~ msgstr ""

#~ msgid "\"IllegalParams:  neither stdin, stdout nor stderr is choosen\""
#~ msgstr ""

#~ msgid ""
#~ "\"IllegalParams:  a requested IO operation "
#~ "is not supported by the handle "
#~ "(one of std* is not piped)\""
#~ msgstr ""

#~ msgid "\"IllegalParams:    an incorrect handle parameter\""
#~ msgstr ""

#~ msgid ""
#~ "\"SystemError: a process does not exists"
#~ " any more\" (this may also be "
#~ "returned for a zombie process or "
#~ "when all processes in a group are"
#~ " zombies (but see note re Mac "
#~ "OS below)"
#~ msgstr ""

#~ msgid "\"SystemError: invalid signal number\""
#~ msgstr ""

#~ msgid ""
#~ "\"SystemError: no permission to send a"
#~ " signal to a process or a "
#~ "process group\" (this is returned on "
#~ "Mac OS when a signal is sent "
#~ "to a process group, where a group"
#~ " leader is a zombie (or when "
#~ "all processes in it are zombies, "
#~ "details re uncertain) (this may also "
#~ "appear due to other reasons, details "
#~ "are uncertain)"
#~ msgstr ""

#~ msgid ""
#~ "If ``opts.setsid`` and ``opts.group_signal`` "
#~ "are set for the handle, the signal"
#~ " is sent to the process group "
#~ "rather than to the process. See "
#~ ":ref:`popen.new() <popen-new>` for details "
#~ "about group signaling."
#~ msgstr ""

#~ msgid "\"IllegalParams: an incorrect handle parameter\""
#~ msgstr ""

#~ msgid "\"IllegalParams: called on a closed handle\""
#~ msgstr ""

#~ msgid ""
#~ "\"SystemError: no permission to send a"
#~ " signal to a process or a "
#~ "process group\" (This diagnostic may "
#~ "appear due to Mac OS behavior on"
#~ " zombies when ``opts.group_signal`` is set,"
#~ " see :ref:`popen_handle:signal() <popen-signal>`."
#~ " It may appear for other reasons, "
#~ "details are unclear.)"
#~ msgstr ""
