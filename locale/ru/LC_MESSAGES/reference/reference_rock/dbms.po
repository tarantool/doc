# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-06 14:05+0000\n"
"PO-Revision-Date: 2019-12-06 16:16+0300\n"
"Last-Translator: \n"
"Language: ru\n"
"Language-Team: \n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

msgid "SQL DBMS Modules"
msgstr "Модули СУБД SQL"

msgid ""
"The discussion here in the reference is about incorporating and using two"
" modules that have already been created: the \"SQL DBMS rocks\" for MySQL"
" and PostgreSQL."
msgstr ""
"В данном разделе справочника рассматривается внедрение и использование "
"двух уже созданных модулей: сторонние библиотеки СУБД SQL для MySQL и "
"PostgreSQL."

msgid ""
"To call another DBMS from Tarantool, the essential requirements are: "
"another DBMS, and Tarantool. The module which connects Tarantool to "
"another DBMS may be called a \"connector\". Within the module there is a "
"shared library which may be called a \"driver\"."
msgstr ""
"Для вызова другой СУБД из Tarantool'а нужно: другая СУБД и Tarantool. "
"Модуль, который соединяет другую СУБД может называться коннектором. В "
"модуле есть библиотека общего пользования, которая может называться "
"драйвером."

msgid ""
"Tarantool supplies DBMS connector modules with the module manager for "
"Lua, LuaRocks. So the connector modules may be called \"rocks\"."
msgstr ""
"Tarantool предоставляет модули-коннекторы для СУБД вместе с менеджером "
"модулей для Lua под названием LuaRocks."

msgid ""
"The Tarantool rocks allow for connecting to SQL servers and executing SQL"
" statements the same way that a MySQL or PostgreSQL client does. The SQL "
"statements are visible as Lua methods. Thus Tarantool can serve as a "
"\"MySQL Lua Connector\" or \"PostgreSQL Lua Connector\", which would be "
"useful even if that was all Tarantool could do. But of course Tarantool "
"is also a DBMS, so the module also is useful for any operations, such as "
"database copying and accelerating, which work best when the application "
"can work on both SQL and Tarantool inside the same Lua routine. The "
"methods for connect/select/insert/etc. are similar to the ones in the "
":ref:`net.box <net_box-module>` module."
msgstr ""
"Модули Tarantool'а позволяют подключаться к SQL-серверам и выполнять "
"SQL-запросы так же, как это делает клиент MySQL или PostgreSQL. Операторы"
" SQL доступны как Lua-методы. Таким образом, Tarantool может служить "
"Lua-коннектором для MySQL или Lua-коннектором для PostgreSQL, что было бы"
" полезно, даже если бы Tarantool больше ничего не умел. Но конечно же, "
"Tarantool также представляет собой СУБД, поэтому модуль используется для "
"любых операций, таких как копирование и ускорение базы данных, которые "
"максимально эффективно, если приложение может работать как с SQL, так и с"
" Tarantool в пределах одной Lua-процедуры. Методы подключения / выборки /"
" вставки / и т.д. аналогичны методам модуля :ref:`net.box <net_box-"
"module>`."

msgid ""
"From a user's point of view the MySQL and PostgreSQL rocks are very "
"similar, so the following sections -- \"MySQL Example\" and \"PostgreSQL "
"Example\" -- contain some redundancy."
msgstr ""
"С точки зрения пользователя, модули для MySQL и PostgreSQL очень похожи, "
"поэтому следующие разделы -- \"Пример для MySQL\" и \"Пример для "
"PostgreSQL\" -- слегка избыточны."

msgid "MySQL Example"
msgstr "Пример для MySQL"

msgid ""
"This example assumes that MySQL 5.5 or MySQL 5.6 or MySQL 5.7 has been "
"installed. Recent MariaDB versions will also work, the MariaDB C "
"connector is used. The package that matters most is the MySQL client "
"developer package, typically named something like libmysqlclient-dev. The"
" file that matters most from this package is libmysqlclient.so or a "
"similar name. One can use ``find`` or ``whereis`` to see what directories"
" these files are installed in."
msgstr ""
"В данном примере предполагается, что установлены MySQL 5.5, MySQL 5.6 или"
" MySQL 5.7. Последние версии MariaDB также подойдут, используется "
"коннектор к MariaDB для C. Самым важным пакетом будет пакет для "
"разработчиков клиента MySQL, который обычно называется libmysqlclient-"
"dev. Наиболее важным файлом из этого пакета будет файл libmysqlclient.so "
"или с похожим названием. Можно использовать `` find`` или `` whereis``, "
"чтобы узнать, в каких директориях установлены эти файлы."

msgid ""
"It will be necessary to install Tarantool's MySQL driver shared library, "
"load it, and use it to connect to a MySQL server instance. After that, "
"one can pass any MySQL statement to the server instance and receive "
"results, including multiple result sets."
msgstr ""
"Также нужно будет установить библиотеку общего пользования Tarantool'а с "
"драйвером для MySQL, загрузить ее и использовать для подключения к "
"экземпляру MySQL-сервера. После этого можно передавать любой оператор "
"MySQL на экземпляр сервера и получать результаты, включая наборы "
"результатов."

msgid "Installation"
msgstr "Установка"

msgid ""
"Check the instructions for `downloading and installing a binary package "
"<http://tarantool.org/download.html>`_ that apply for the environment "
"where Tarantool was installed. In addition to installing ``tarantool``, "
"install ``tarantool-dev``. For example, on Ubuntu, add the line:"
msgstr ""
"Проверьте инструкции по `загрузке и установке бинарного пакета "
"<http://tarantool.org/download.html>`_, которые применимы к среде, где "
"установлен Tarantool. Помимо установки ``tarantool``, установите "
"``tarantool-dev``. Например, в Ubuntu добавьте строку:"

msgid "$ sudo apt-get install tarantool-dev"
msgstr "$ sudo apt-get install tarantool-dev"

msgid "Now, for the MySQL driver shared library, there are two ways to install:"
msgstr ""
"Что касается библиотеки общего пользования с драйвером для MySQL, ее "
"можно установить двумя способами:"

msgid "With LuaRocks"
msgstr "Из LuaRocks"

msgid ""
"Begin by installing luarocks and making sure that tarantool is among the "
"upstream servers, as in the instructions on `rocks.tarantool.org`_, the "
"Tarantool luarocks page. Now execute this:"
msgstr ""
"Начните с установки luarocks. Убедитесь, что tarantool указан в серверах,"
" как описано на странице сторонних модулей Tarantool'а "
"`rocks.tarantool.org`_. Затем выполните:"

msgid ""
"luarocks install mysql [MYSQL_LIBDIR = *path*]\n"
"                       [MYSQL_INCDIR = *path*]\n"
"                       [--local]"
msgstr ""
"luarocks install mysql [MYSQL_LIBDIR = *path*]\n"
"                       [MYSQL_INCDIR = *path*]\n"
"                       [--local]"

msgid "For example:"
msgstr "Пример:"

msgid "$ luarocks install mysql MYSQL_LIBDIR=/usr/local/mysql/lib"
msgstr "$ luarocks install mysql MYSQL_LIBDIR=/usr/local/mysql/lib"

msgid "With GitHub"
msgstr "Из GitHub"

msgid ""
"Go the site `github.com/tarantool/mysql`_. Follow the instructions there,"
" saying:"
msgstr ""
"Перейдите по ссылке `github.com/tarantool/mysql`_. Следуя инструкциям, "
"введите команду:"

msgid ""
"$ git clone https://github.com/tarantool/mysql.git\n"
"$ cd mysql && cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo\n"
"$ make\n"
"$ make install"
msgstr ""
"$ git clone https://github.com/tarantool/mysql.git\n"
" $ cd mysql && cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo\n"
" $ make\n"
" $ make install"

msgid ""
"At this point it is a good idea to check that the installation produced a"
" file named ``driver.so``, and to check that this file is on a directory "
"that is searched by the ``require`` request."
msgstr ""
"На данном этапе желательно проверить, что после установки появился файл "
"под названием ``driver.so``, а также проверить, что этот файл находится в"
" директории, которую можно найти по запросу ``require``."

msgid "Connecting"
msgstr "Подключение"

msgid ""
"Begin by making a ``require`` request for the mysql driver. We will "
"assume that the name is ``mysql`` in further examples."
msgstr ""
"Начните с выполнения запроса ``require`` для драйвера mysql. В дальнейших"
" примерах у него будет имя ``mysql``."

msgid "mysql = require('mysql')"
msgstr "mysql = require('mysql')"

msgid "Now, say:"
msgstr "Теперь выполните:"

msgid "*connection_name* = mysql.connect(*connection options*)"
msgstr "*имя_подключения* = mysql.connect(*параметры подключения*)"

msgid "The connection-options parameter is a table. Possible options are:"
msgstr "Параметры подключения включены в таблицу. Доступные параметры:"

msgid ":samp:`host = {host-name}` - string, default value = 'localhost'"
msgstr ":samp:`host = {имя-хоста}` -- строка, значение по умолчанию = 'localhost'"

msgid ":samp:`port = {port-number}` - number, default value = 3306"
msgstr ":samp:`port = {номер-порта}` -- число, значение по умолчанию = 3306"

msgid ""
":samp:`user = {user-name}` - string, default value is operating-system "
"user name"
msgstr ""
":samp:`user = {имя-пользователя}` -- строка, значение по умолчанию -- имя"
" пользователя в операционной системе"

msgid ":samp:`password = {password}` - string, default value is blank"
msgstr ":samp:`password = {пароль}` -- строка, по умолчанию пустая"

msgid ":samp:`db = {database-name}` - string, default value is blank"
msgstr ":samp:`db = {имя-базы-данных}` -- строка, по умолчанию пустая"

msgid ":samp:`raise = {true|false}` - boolean, default value is false"
msgstr ""
":samp:`raise = {true|false}` -- логическое значение, по умолчанию, false "
"(ложь)"

msgid ""
"The option names, except for `raise`, are similar to the names that "
"MySQL's mysql client uses, for details see the MySQL manual at "
"`dev.mysql.com/doc/refman/5.6/en/connecting.html`_. The `raise` option "
"should be set to :codenormal:`true` if errors should be raised when "
"encountered. To connect with a Unix socket rather than with TCP, specify "
"``host = 'unix/'`` and :samp:`port = {socket-name}`."
msgstr ""
"Имена параметров, за исключением `raise`, похожи на имена, которые "
"используются в MySQL-клиенте mysql, для получения подробной информации "
"см. руководство по MySQL по ссылке "
"`dev.mysql.com/doc/refman/5.6/en/connecting.html`_. Значение параметра "
"`raise` следует указать как :codenormal:`true`, если ошибки должны "
"возникать при обнаружении. Чтобы подключиться по Unix-сокету, а не по "
"TCP, укажите ``host = 'unix/'`` и :samp:`port = {имя-сокета}`."

msgid "Example, using a table literal enclosed in {braces}:"
msgstr "Пример с использованием таблицы, заключенной в {фигурные скобки}:"

msgid ""
"conn = mysql.connect({\n"
"    host = '127.0.0.1',\n"
"    port = 3306,\n"
"    user = 'p',\n"
"    password = 'p',\n"
"    db = 'test',\n"
"    raise = true\n"
"})\n"
"-- OR\n"
"conn = mysql.connect({\n"
"    host = 'unix/',\n"
"    port = '/var/run/mysqld/mysqld.sock'\n"
"})"
msgstr ""
"conn = mysql.connect({\n"
"     host = '127.0.0.1',\n"
"     port = 3306,\n"
"     user = 'p',\n"
"     password = 'p',\n"
"     db = 'test',\n"
"     raise = true\n"
" })\n"
"-- ИЛИ\n"
"conn = mysql.connect({\n"
"    host = 'unix/',\n"
"    port = '/var/run/mysqld/mysqld.sock'\n"
"})"

msgid "Example, creating a function which sets each option in a separate line:"
msgstr ""
"Пример с созданием функции, которая определяет параметры в отдельных "
"строках:"

msgid ""
"tarantool> -- Connection function. Usage: conn = mysql_connect()\n"
"tarantool> function mysql_connection()\n"
"         >   local p = {}\n"
"         >   p.host = 'widgets.com'\n"
"         >   p.db = 'test'\n"
"         >   conn = mysql.connect(p)\n"
"         >   return conn\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> conn = mysql_connect()\n"
"---\n"
"..."
msgstr ""
"tarantool> -- Функция подключения. Использование: conn = mysql_connect()\n"
"tarantool> function mysql_connection()\n"
"         >   local p = {}\n"
"         >   p.host = 'widgets.com'\n"
"         >   p.db = 'test'\n"
"         >   conn = mysql.connect(p)\n"
"         >   return conn\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> conn = mysql_connect()\n"
"---\n"
"..."

msgid "We will assume that the name is 'conn' in further examples."
msgstr "Предполагаем, что в дальнейших примерах будет использоваться имя 'conn'."

msgid "How to ping"
msgstr "Как проверить связь"

msgid "To ensure that a connection is working, the request is:"
msgstr "Чтобы убедиться, что подключение работает, следует использовать запрос:"

msgid "*connection-name*:ping()"
msgstr "*имя-соединение*:ping()"

msgid "**Example:**"
msgstr "**Пример:**"

msgid ""
"tarantool> conn:ping()\n"
"---\n"
"- true\n"
"..."
msgstr ""
"tarantool> conn:ping()\n"
"---\n"
"- true\n"
"..."

msgid "Executing a statement"
msgstr "Исполнение оператора"

msgid "For all MySQL statements, the request is:"
msgstr "Для всех операторов MySQL запрос будет:"

msgid "*connection-name*:execute(*sql-statement* [, *parameters*])"
msgstr "*имя-соединения*:execute(*sql-оператор* [, *параметры*])"

msgid ""
"where ``sql-statement`` is a string, and the optional ``parameters`` are "
"extra values that can be plugged in to replace any question marks "
"(\"?\"s) in the SQL statement."
msgstr ""
"где ``sql-statement`` -- это строка, а необязательные параметры -- это "
"дополнительные значения, которыми можно заменить любые знаки вопроса "
"(\"?\") в SQL-операторе."

msgid ""
"tarantool> conn:execute('select table_name from "
"information_schema.tables')\n"
"---\n"
"- - table_name: ALL_PLUGINS\n"
"  - table_name: APPLICABLE_ROLES\n"
"  - table_name: CHARACTER_SETS\n"
"  <...>\n"
"- 78\n"
"..."
msgstr ""
"tarantool> conn:execute('select table_name from "
"information_schema.tables')\n"
"---\n"
"- - table_name: ALL_PLUGINS\n"
"  - table_name: APPLICABLE_ROLES\n"
"  - table_name: CHARACTER_SETS\n"
"  <...>\n"
"- 78\n"
"..."

msgid "Closing connection"
msgstr "Закрытие соединения"

msgid "To end a session that began with ``mysql.connect``, the request is:"
msgstr ""
"Чтобы закрыть сессию, которую открыли с помощью ``mysql.connect``, "
"используется следующий запрос:"

msgid "*connection-name*:close()"
msgstr "*имя-соединения*:close()"

msgid ""
"tarantool> conn:close()\n"
"---\n"
"..."
msgstr ""
"tarantool> conn:close()\n"
"---\n"
"..."

msgid ""
"For further information, including examples of rarely-used requests, see "
"the README.md file at `github.com/tarantool/mysql`_."
msgstr ""
"Для получения дополнительной информации, включая примеры редко "
"используемых запросов, см. файл README.md по ссылке "
"`github.com/tarantool/mysql`_."

msgid "Example"
msgstr "Пример"

msgid ""
"The example was run on an Ubuntu 12.04 (\"precise\") machine where "
"tarantool had been installed in a /usr subdirectory, and a copy of MySQL "
"had been installed on ~/mysql-5.5. The mysqld server instance is already "
"running on the local host 127.0.0.1."
msgstr ""
"Пример выполняется на машине с ОС Ubuntu 12.04 (Precise Pangolin), где "
"Tarantool установлен в поддиректорию /usr, а копия MySQL установлена в "
"~/mysql-5.5. Экземпляр сервера mysqld уже запущен на localhost 127.0.0.1."

msgid ""
"$ export TMDIR=~/mysql-5.5\n"
"$ # Check that the include subdirectory exists by looking\n"
"$ # for .../include/mysql.h. (If this fails, there's a chance\n"
"$ # that it's in .../include/mysql/mysql.h instead.)\n"
"$ [ -f $TMDIR/include/mysql.h ] && echo \"OK\" || echo \"Error\"\n"
"OK\n"
"\n"
"$ # Check that the library subdirectory exists and has the\n"
"$ # necessary .so file.\n"
"$ [ -f $TMDIR/lib/libmysqlclient.so ] && echo \"OK\" || echo \"Error\"\n"
"OK\n"
"\n"
"$ # Check that the mysql client can connect using some factory\n"
"$ # defaults: port = 3306, user = 'root', user password = '',\n"
"$ # database = 'test'. These can be changed, provided one uses\n"
"$ # the changed values in all places.\n"
"$ $TMDIR/bin/mysql --port=3306 -h 127.0.0.1 --user=root \\\n"
"    --password= --database=test\n"
"Welcome to the MySQL monitor.  Commands end with ; or \\g.\n"
"Your MySQL connection id is 25\n"
"Server version: 5.5.35 MySQL Community Server (GPL)\n"
"...\n"
"Type 'help;' or '\\h' for help. Type '\\c' to clear ...\n"
"\n"
"$ # Insert a row in database test, and quit.\n"
"mysql> CREATE TABLE IF NOT EXISTS test (s1 INT, s2 VARCHAR(50));\n"
"Query OK, 0 rows affected (0.13 sec)\n"
"mysql> INSERT INTO test.test VALUES (1,'MySQL row');\n"
"Query OK, 1 row affected (0.02 sec)\n"
"mysql> QUIT\n"
"Bye\n"
"\n"
"$ # Install luarocks\n"
"$ sudo apt-get -y install luarocks | grep -E \"Setting up|already\"\n"
"Setting up luarocks (2.0.8-2) ...\n"
"\n"
"$ # Set up the Tarantool rock list in ~/.luarocks,\n"
"$ # following instructions at rocks.tarantool.org\n"
"$ mkdir ~/.luarocks\n"
"$ echo \"rocks_servers = {[[http://rocks.tarantool.org/]]}\" >> \\\n"
"    ~/.luarocks/config.lua\n"
"\n"
"$ # Ensure that the next \"install\" will get files from Tarantool\n"
"$ # master repository. The resultant display is normal for Ubuntu\n"
"$ # 12.04 precise\n"
"$ cat /etc/apt/sources.list.d/tarantool.list\n"
"deb http://tarantool.org/dist/1.7/ubuntu/ precise main\n"
"deb-src http://tarantool.org/dist/1.7/ubuntu/ precise main\n"
"\n"
"$ # Install tarantool-dev. The displayed line should show version = 1.6\n"
"$ sudo apt-get -y install tarantool-dev | grep -E \"Setting up|already\"\n"
"Setting up tarantool-dev (1.6.6.222.g48b98bb~precise-1) ...\n"
"$\n"
"\n"
"$ # Use luarocks to install locally, that is, relative to $HOME\n"
"$ luarocks install mysql MYSQL_LIBDIR=/usr/local/mysql/lib --local\n"
"Installing http://rocks.tarantool.org/mysql-scm-1.rockspec...\n"
"... (more info about building the Tarantool/MySQL driver appears here)\n"
"mysql scm-1 is now built and installed in ~/.luarocks/\n"
"\n"
"$ # Ensure driver.so now has been created in a place\n"
"$ # tarantool will look at\n"
"$ find ~/.luarocks -name \"driver.so\"\n"
"~/.luarocks/lib/lua/5.1/mysql/driver.so\n"
"\n"
"$ # Change directory to a directory which can be used for\n"
"$ # temporary tests. For this example we assume that the name\n"
"$ # of this directory is /home/pgulutzan/tarantool_sandbox.\n"
"$ # (Change \"/home/pgulutzan\" to whatever is the user's actual\n"
"$ # home directory for the machine that's used for this test.)\n"
"$ cd /home/pgulutzan/tarantool_sandbox\n"
"\n"
"$ # Start the Tarantool server instance. Do not use a Lua initialization "
"file.\n"
"\n"
"$ tarantool\n"
"tarantool: version 1.7.0-222-g48b98bb\n"
"type 'help' for interactive help\n"
"tarantool>"
msgstr ""
"$ export TMDIR=~/mysql-5.5\n"
"$ # Проверьте, что создана поддиректория include, путем поиска\n"
"$ # .../include/mysql.h. (Если нет, то можно проверить\n"
"$ # .../include/mysql/mysql.h.)\n"
"$ [ -f $TMDIR/include/mysql.h ] && echo \"OK\" || echo \"Error\"\n"
"OK\n"
"\n"
"$ # Проверьте, что создана поддиректория library, а в ней\n"
"$ # необходимый файл .so.\n"
"$ [ -f $TMDIR/lib/libmysqlclient.so ] && echo \"OK\" || echo \"Error\"\n"
"OK\n"
"\n"
"$ # Проверьте, что mysql-клиент может подключиться, с помощью настроек\n"
"$ # по умолчанию: порт = 3306, пользователь = 'root', пароль пользователя"
" = '',\n"
"$ # база данных = 'test'. Эти настройки можно изменить, используя\n"
"$ # измененные значения.\n"
"$ $TMDIR/bin/mysql --port=3306 -h 127.0.0.1 --user=root \\\n"
"    --password= --database=test\n"
"Welcome to the MySQL monitor.  Commands end with ; or \\g.\n"
"Your MySQL connection id is 25\n"
"Server version: 5.5.35 MySQL Community Server (GPL)\n"
"...\n"
"Type 'help;' or '\\h' for help. Type '\\c' to clear ...\n"
"\n"
"$ # Вставьте строку в базу данных test и завершите работу.\n"
"mysql> CREATE TABLE IF NOT EXISTS test (s1 INT, s2 VARCHAR(50));\n"
"Query OK, 0 rows affected (0.13 sec)\n"
"mysql> INSERT INTO test.test VALUES (1,'MySQL row');\n"
"Query OK, 1 row affected (0.02 sec)\n"
"mysql> QUIT\n"
"Bye\n"
"\n"
"$ # Установите luarocks\n"
"$ sudo apt-get -y install luarocks | grep -E \"Setting up|already\"\n"
"Setting up luarocks (2.0.8-2) ...\n"
"\n"
"$ # Настройте список сторонних модулей Tarantool'а в ~/.luarocks,\n"
"$ # следуя инструкциям по ссылке rocks.tarantool.org\n"
"$ mkdir ~/.luarocks\n"
"$ echo \"rocks_servers = {[[http://rocks.tarantool.org/]]}\" >> \\\n"
"    ~/.luarocks/config.lua\n"
"\n"
"$ # Убедитесь, что при следующей установке будут использованы файлы из "
"главного\n"
"$ # хранилища Tarantool'а. Получаем результат, нормальный для Ubuntu\n"
"$ # 12.04 Precise Pangolin\n"
"$ cat /etc/apt/sources.list.d/tarantool.list\n"
"deb http://tarantool.org/dist/1.7/ubuntu/ precise main\n"
"deb-src http://tarantool.org/dist/1.7/ubuntu/ precise main\n"
"\n"
"$ # Установите tarantool-dev. Строка на экране должна показать версию 1.6"
"\n"
"$ sudo apt-get -y install tarantool-dev | grep -E \"Setting up|already\"\n"
"Setting up tarantool-dev (1.6.6.222.g48b98bb~precise-1) ...\n"
"$\n"
"\n"
"$ # Используйте luarocks для локальной установки, то есть в $HOME\n"
"$ luarocks install mysql MYSQL_LIBDIR=/usr/local/mysql/lib --local\n"
"Installing http://rocks.tarantool.org/mysql-scm-1.rockspec...\n"
"... (здесь будет еще информация о сборке драйвера Tarantool/MySQL)\n"
"mysql scm-1 is now built and installed in ~/.luarocks/\n"
"\n"
"$ # Убедитесь, что driver.so создан в месте,\n"
"$ # где Tarantool будет искать его\n"
"$ find ~/.luarocks -name \"driver.so\"\n"
"~/.luarocks/lib/lua/5.1/mysql/driver.so\n"
"\n"
"$ # Измените директорию на директорию, которую можно использовать для\n"
"$ # временного тестирования. В данном примере предполагаем, что имя\n"
"$ # этой директории будет /home/pgulutzan/tarantool_sandbox.\n"
"$ # (Измените \"/home/pgulutzan\" на фактическую корневую директорию\n"
"$ # пользователя машины, используемой для тестирования.)\n"
"$ cd /home/pgulutzan/tarantool_sandbox\n"
"\n"
"$ # Запустите экземпляр Tarantool-сервера. Не используйте файл "
"инициализации Lua.\n"
"\n"
"$ tarantool\n"
"tarantool: version 1.7.0-222-g48b98bb\n"
"type 'help' for interactive help\n"
"tarantool>"

msgid ""
"Configure tarantool and load mysql module. Make sure that tarantool "
"doesn't reply \"error\" for the call to \"require()\"."
msgstr ""
"Настройте Tarantool и загрузите модуль mysql. Убедитесь, что Tarantool не"
" выбрасывает ошибку в ответ на вызов \"require()\"."

msgid ""
"tarantool> box.cfg{}\n"
"...\n"
"tarantool> mysql = require('mysql')\n"
"---\n"
"..."
msgstr ""
"tarantool> box.cfg{}\n"
"...\n"
"tarantool> mysql = require('mysql')\n"
"---\n"
"..."

msgid ""
"Create a Lua function that will connect to the MySQL server instance, "
"(using some factory default values for the port and user and password), "
"retrieve one row, and display the row. For explanations of the statement "
"types used here, read the Lua tutorial earlier in the Tarantool user "
"manual."
msgstr ""
"Создайте Lua-функцию, которая подключится к экземпляру MySQL-сервера "
"(используя значения по умолчанию для параметров порта, пользователя и "
"пароля), выберите одну строку и выведите ее на экран. Описание "
"используемых здесь типов операторов вы можете найти в практикуме по Lua в"
" руководстве пользователя Tarantool'а."

msgid ""
"tarantool> function mysql_select ()\n"
"         >   local conn = mysql.connect({\n"
"         >     host = '127.0.0.1',\n"
"         >     port = 3306,\n"
"         >     user = 'root',\n"
"         >     db = 'test'\n"
"         >   })\n"
"         >   local test = conn:execute('SELECT * FROM test WHERE s1 = 1')"
"\n"
"         >   local row = ''\n"
"         >   for i, card in pairs(test) do\n"
"         >       row = row .. card.s2 .. ' '\n"
"         >       end\n"
"         >   conn:close()\n"
"         >   return row\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> mysql_select()\n"
"---\n"
"- 'MySQL row '\n"
"..."
msgstr ""
"tarantool> function mysql_select ()\n"
"         >   local conn = mysql.connect({\n"
"         >     host = '127.0.0.1',\n"
"         >     port = 3306,\n"
"         >     user = 'root',\n"
"         >     db = 'test'\n"
"         >   })\n"
"         >   local test = conn:execute('SELECT * FROM test WHERE s1 = 1')"
"\n"
"         >   local row = ''\n"
"         >   for i, card in pairs(test) do\n"
"         >       row = row .. card.s2 .. ' '\n"
"         >       end\n"
"         >   conn:close()\n"
"         >   return row\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> mysql_select()\n"
"---\n"
"- 'MySQL row '\n"
"..."

msgid ""
"Observe the result. It contains \"MySQL row\". So this is the row that "
"was inserted into the MySQL database. And now it's been selected with the"
" Tarantool client."
msgstr ""
"Просмотрите результат. В нем есть строка \"MySQL row\". Это и есть "
"строка, которая была вставлена в базу данных MySQL. А сейчас она выделена"
" с помощью Tarantool-клиента."

msgid "PostgreSQL Example"
msgstr "Пример для PostgreSQL "

msgid ""
"This example assumes that PostgreSQL 8 or PostgreSQL 9 has been "
"installed. More recent versions should also work. The package that "
"matters most is the PostgreSQL developer package, typically named "
"something like libpq-dev. On Ubuntu this can be installed with:"
msgstr ""
"В данном примере предполагается, что установлены PostgreSQL 8 или "
"PostgreSQL 9. Более поздние версии  также должны сработать. Самым важным "
"пакетом будет пакет для разработчиков клиента PostgreSQL, который обычно "
"называется libpq-dev. На Ubuntu его можно установить следующим образом:"

msgid "$ sudo apt-get install libpq-dev"
msgstr "$ sudo apt-get install libpq-dev"

msgid ""
"However, because not all platforms are alike, for this example the "
"assumption is that the user must check that the appropriate PostgreSQL "
"files are present and must explicitly state where they are when building "
"the Tarantool/PostgreSQL driver. One can use ``find`` or ``whereis`` to "
"see what directories PostgreSQL files are installed in."
msgstr ""
"Однако, не все платформы одинаковы, поэтому в данном примере "
"предполагается, что пользователь должен проверить наличие нужных "
"PostgreSQL-файлов, а также явным образом прописать, где они находятся, "
"для сборки драйвера Tarantool/PostgreSQL. Для поиска директорий, где "
"установлены PostgreSQL-файлы, можно воспользоваться командами ``find`` "
"или ``whereis``."

msgid ""
"It will be necessary to install Tarantool's PostgreSQL driver shared "
"library, load it, and use it to connect to a PostgreSQL server instance. "
"After that, one can pass any PostgreSQL statement to the server instance "
"and receive results."
msgstr ""
"Также нужно будет установить библиотеку общего пользования Tarantool'а с "
"драйвером для PostgreSQL, загрузить ее и использовать для подключения к "
"экземпляру PostgreSQL-сервера. После этого можно передавать любой "
"оператор PostgreSQL на экземпляр сервера и получать результаты."

msgid ""
"Now, for the PostgreSQL driver shared library, there are two ways to "
"install:"
msgstr ""
"Что касается библиотеки общего пользования с драйвером для PostgreSQL, ее"
" можно установить двумя способами:"

msgid ""
"luarocks install pg [POSTGRESQL_LIBDIR = *path*]\n"
"                    [POSTGRESQL_INCDIR = *path*]\n"
"                    [--local]"
msgstr ""
"luarocks install pg [POSTGRESQL_LIBDIR = *путь*]\n"
"                    [POSTGRESQL_INCDIR = *путь*]\n"
"                    [--local]"

msgid "$ luarocks install pg POSTGRESQL_LIBDIR=/usr/local/postgresql/lib"
msgstr "$ luarocks install pg POSTGRESQL_LIBDIR=/usr/local/postgresql/lib"

msgid ""
"Go the site `github.com/tarantool/pg`_. Follow the instructions there, "
"saying:"
msgstr ""
"Перейдите по ссылке `github.com/tarantool/pg`_. Следуя инструкциям, "
"введите команду:"

msgid ""
"$ git clone https://github.com/tarantool/pg.git\n"
"$ cd pg && cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo\n"
"$ make\n"
"$ make install"
msgstr ""
"$ git clone https://github.com/tarantool/pg.git\n"
"$ cd pg && cmake . -DCMAKE_BUILD_TYPE=RelWithDebInfo\n"
"$ make\n"
"$ make install"

msgid ""
"Begin by making a ``require`` request for the pg driver. We will assume "
"that the name is ``pg`` in further examples."
msgstr ""
"Начните с выполнения запроса ``require`` для драйвера pg. В дальнейших "
"примерах у него будет имя ``pg``."

msgid "pg = require('pg')"
msgstr "pg = require('pg')"

msgid "*connection_name* = pg.connect(*connection options*)"
msgstr "*имя_подключения* = pg.connect(*параметры подключения*)"

msgid ":samp:`port = {port-number}` - number, default value = 5432"
msgstr ":samp:`port = {номер-порта}` -- число, значение по умолчанию = 5432"

msgid ""
":samp:`pass = {password}` or :samp:`password = {password}` - string, "
"default value is blank"
msgstr ""
":samp:`pass = {пароль}` или :samp:`password = {пароль}` -- строка, по "
"умолчанию пустая"

msgid "The names are similar to the names that PostgreSQL itself uses."
msgstr "Имена параметров похожи на имена, которые используются в PostgreSQL."

msgid ""
"conn = pg.connect({\n"
"    host = '127.0.0.1',\n"
"    port = 5432,\n"
"    user = 'p',\n"
"    password = 'p',\n"
"    db = 'test'\n"
"})"
msgstr ""
"conn = pg.connect({\n"
"    host = '127.0.0.1',\n"
"    port = 5432,\n"
"    user = 'p',\n"
"    password = 'p',\n"
"    db = 'test'\n"
"})"

msgid ""
"tarantool> function pg_connect()\n"
"         >   local p = {}\n"
"         >   p.host = 'widgets.com'\n"
"         >   p.db = 'test'\n"
"         >   p.user = 'postgres'\n"
"         >   p.password = 'postgres'\n"
"         >   local conn = pg.connect(p)\n"
"         >   return conn\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> conn = pg_connect()\n"
"---\n"
"..."
msgstr ""
"tarantool> function pg_connect()\n"
"         >   local p = {}\n"
"         >   p.host = 'widgets.com'\n"
"         >   p.db = 'test'\n"
"         >   p.user = 'postgres'\n"
"         >   p.password = 'postgres'\n"
"         >   local conn = pg.connect(p)\n"
"         >   return conn\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> conn = pg_connect()\n"
"---\n"
"..."

msgid "For all PostgreSQL statements, the request is:"
msgstr "Для всех операторов PostgreSQL запрос будет:"

msgid ""
"where ``sql-statement`` is a string, and the optional ``parameters`` are "
"extra values that can be plugged in to replace any placeholders ($1 $2 $3"
" etc.) in the SQL statement."
msgstr ""
"где ``sql-statement`` -- это строка, а необязательные параметры -- это "
"дополнительные значения, которыми можно заменить любые местозаполнители "
"($1 $2 $3 и т.д.) в SQL-операторе."

msgid ""
"tarantool> conn:execute('select tablename from pg_tables')\n"
"---\n"
"- - tablename: pg_statistic\n"
"  - tablename: pg_type\n"
"  - tablename: pg_authid\n"
"  <...>\n"
"..."
msgstr ""
"tarantool> conn:execute('select tablename from pg_tables')\n"
"---\n"
"- - tablename: pg_statistic\n"
"  - tablename: pg_type\n"
"  - tablename: pg_authid\n"
"  <...>\n"
"..."

msgid "To end a session that began with ``pg.connect``, the request is:"
msgstr ""
"Чтобы закрыть сессию, которую открыли с помощью ``pg.connect``, "
"используется следующий запрос:"

msgid ""
"For further information, including examples of rarely-used requests, see "
"the README.md file at `github.com/tarantool/pg`_."
msgstr ""
"Для получения дополнительной информации, включая примеры редко "
"используемых запросов, см. файл README.md по ссылке "
"`github.com/tarantool/pg`_."

msgid ""
"The example was run on an Ubuntu 12.04 (\"precise\") machine where "
"tarantool had been installed in a /usr subdirectory, and a copy of "
"PostgreSQL had been installed on /usr. The PostgreSQL server instance is "
"already running on the local host 127.0.0.1."
msgstr ""
"Пример выполняется на машине с ОС Ubuntu 12.04 (Precise Pangolin), где "
"Tarantool установлен в поддиректорию /usr, а копия PostgreSQL установлена"
" в /usr. Экземпляр сервера PostgreSQL уже запущен на localhost 127.0.0.1."

msgid ""
"$ # Check that the include subdirectory exists\n"
"$ # by looking for /usr/include/postgresql/libpq-fe-h.\n"
"$ [ -f /usr/include/postgresql/libpq-fe.h ] && echo \"OK\" || echo "
"\"Error\"\n"
"OK\n"
"\n"
"$ # Check that the library subdirectory exists and has the necessary .so "
"file.\n"
"$ [ -f /usr/lib/x86_64-linux-gnu/libpq.so ] && echo \"OK\" || echo "
"\"Error\"\n"
"OK\n"
"\n"
"$ # Check that the psql client can connect using some factory defaults:\n"
"$ # port = 5432, user = 'postgres', user password = 'postgres',\n"
"$ # database = 'postgres'. These can be changed, provided one changes\n"
"$ # them in all places. Insert a row in database postgres, and quit.\n"
"$ psql -h 127.0.0.1 -p 5432 -U postgres -d postgres\n"
"Password for user postgres:\n"
"psql (9.3.10)\n"
"SSL connection (cipher: DHE-RSA-AES256-SHA, bits: 256)\n"
"Type \"help\" for help.\n"
"\n"
"postgres=# CREATE TABLE test (s1 INT, s2 VARCHAR(50));\n"
"CREATE TABLE\n"
"postgres=# INSERT INTO test VALUES (1,'PostgreSQL row');\n"
"INSERT 0 1\n"
"postgres=# \\q\n"
"$\n"
"\n"
"$ # Install luarocks\n"
"$ sudo apt-get -y install luarocks | grep -E \"Setting up|already\"\n"
"Setting up luarocks (2.0.8-2) ...\n"
"\n"
"$ # Set up the Tarantool rock list in ~/.luarocks,\n"
"$ # following instructions at rocks.tarantool.org\n"
"$ mkdir ~/.luarocks\n"
"$ echo \"rocks_servers = {[[http://rocks.tarantool.org/]]}\" >> \\\n"
"        ~/.luarocks/config.lua\n"
"\n"
"$ # Ensure that the next \"install\" will get files from Tarantool master"
"\n"
"$ # repository. The resultant display is normal for Ubuntu 12.04 precise\n"
"$ cat /etc/apt/sources.list.d/tarantool.list\n"
"deb http://tarantool.org/dist/1.7/ubuntu/ precise main\n"
"deb-src http://tarantool.org/dist/1.7/ubuntu/ precise main\n"
"\n"
"$ # Install tarantool-dev. The displayed line should show version = 1.7\n"
"$ sudo apt-get -y install tarantool-dev | grep -E \"Setting up|already\"\n"
"Setting up tarantool-dev (1.7.0.222.g48b98bb~precise-1) ...\n"
"$\n"
"\n"
"$ # Use luarocks to install locally, that is, relative to $HOME\n"
"$ luarocks install pg POSTGRESQL_LIBDIR=/usr/lib/x86_64-linux-gnu --local"
"\n"
"Installing http://rocks.tarantool.org/pg-scm-1.rockspec...\n"
"... (more info about building the Tarantool/PostgreSQL driver appears "
"here)\n"
"pg scm-1 is now built and installed in ~/.luarocks/\n"
"\n"
"$ # Ensure driver.so now has been created in a place\n"
"$ # tarantool will look at\n"
"$ find ~/.luarocks -name \"driver.so\"\n"
"~/.luarocks/lib/lua/5.1/pg/driver.so\n"
"\n"
"$ # Change directory to a directory which can be used for\n"
"$ # temporary tests. For this example we assume that the\n"
"$ # name of this directory is $HOME/tarantool_sandbox.\n"
"$ # (Change \"$HOME\" to whatever is the user's actual\n"
"$ # home directory for the machine that's used for this test.)\n"
"cd $HOME/tarantool_sandbox\n"
"\n"
"$ # Start the Tarantool server instance. Do not use a Lua initialization "
"file.\n"
"\n"
"$ tarantool\n"
"tarantool: version 1.7.0-412-g803b15c\n"
"type 'help' for interactive help\n"
"tarantool>"
msgstr ""
"$ # Проверьте, что создана поддиректория include, путем поиска\n"
"$ # /usr/include/postgresql/libpq-fe-h.\n"
"$ [ -f /usr/include/postgresql/libpq-fe.h ] && echo \"OK\" || echo "
"\"Error\"\n"
"OK\n"
"\n"
"$ # Проверьте, что создана поддиректория library, а в ней необходимый "
"файл .so.\n"
"$ [ -f /usr/lib/x86_64-linux-gnu/libpq.so ] && echo \"OK\" || echo "
"\"Error\"\n"
"OK\n"
"\n"
"$ # Проверьте, что psql-клиент может подключиться, с помощью настроек по "
"умолчанию:\n"
"$ # порт = 5432, пользователь = 'postgres', пароль пользователя = "
"'postgres',\n"
"$ # база данных = 'postgres'. Эти настройки можно изменить, используя\n"
"$ # измененные значения. Вставьте строку в базу данных postgres и "
"завершите работу.\n"
"$ psql -h 127.0.0.1 -p 5432 -U postgres -d postgres\n"
"Password for user postgres:\n"
"psql (9.3.10)\n"
"SSL connection (cipher: DHE-RSA-AES256-SHA, bits: 256)\n"
"Type \"help\" for help.\n"
"\n"
"postgres=# CREATE TABLE test (s1 INT, s2 VARCHAR(50));\n"
"CREATE TABLE\n"
"postgres=# INSERT INTO test VALUES (1,'PostgreSQL row');\n"
"INSERT 0 1\n"
"postgres=# \\q\n"
"$\n"
"\n"
"$ # Установите luarocks\n"
"$ sudo apt-get -y install luarocks | grep -E \"Setting up|already\"\n"
"Setting up luarocks (2.0.8-2) ...\n"
"\n"
"$ # Настройте список сторонних модулей Tarantool'а в ~/.luarocks,\n"
"$ # следуя инструкциям по ссылке rocks.tarantool.org\n"
"$ mkdir ~/.luarocks\n"
"$ echo \"rocks_servers = {[[http://rocks.tarantool.org/]]}\" >> \\\n"
"        ~/.luarocks/config.lua\n"
"\n"
"$ # Убедитесь, что при следующей установке будут использованы файлы из "
"главного\n"
"$ # хранилища Tarantool'а. Получаем результат, нормальный для Ubuntu "
"12.04 Precise Pangolin\n"
"$ cat /etc/apt/sources.list.d/tarantool.list\n"
"deb http://tarantool.org/dist/1.7/ubuntu/ precise main\n"
"deb-src http://tarantool.org/dist/1.7/ubuntu/ precise main\n"
"\n"
"$ # Установите tarantool-dev. Строка на экране должна показать версию 1.7"
"\n"
"$ sudo apt-get -y install tarantool-dev | grep -E \"Setting up|already\"\n"
"Setting up tarantool-dev (1.7.0.222.g48b98bb~precise-1) ...\n"
"$\n"
"\n"
"$ # Используйте luarocks для локальной установки, то есть в $HOME\n"
"$ luarocks install pg POSTGRESQL_LIBDIR=/usr/lib/x86_64-linux-gnu --local"
"\n"
"Installing http://rocks.tarantool.org/pg-scm-1.rockspec...\n"
"... (здесь будет еще информация о сборке драйвера Tarantool/PostgreSQL)\n"
"pg scm-1 is now built and installed in ~/.luarocks/\n"
"\n"
"$ # Убедитесь, что driver.so создан в месте,\n"
"$ # где Tarantool будет искать его\n"
"$ find ~/.luarocks -name \"driver.so\"\n"
"~/.luarocks/lib/lua/5.1/pg/driver.so\n"
"\n"
"$ # Измените директорию на директорию, которую можно использовать для\n"
"$ # временного тестирования. В данном примере предполагаем, что имя\n"
"$ # name этой директории будет $HOME/tarantool_sandbox.\n"
"$ # (Измените \"$HOME\" на фактическую корневую директорию\n"
"$ # машины, используемой для тестирования.)\n"
"cd $HOME/tarantool_sandbox\n"
"\n"
"$ # Запустите экземпляр Tarantool-сервера. Не используйте файл "
"инициализации Lua.\n"
"\n"
"$ tarantool\n"
"tarantool: version 1.7.0-412-g803b15c\n"
"type 'help' for interactive help\n"
"tarantool>"

msgid ""
"Configure tarantool and load pg module. Make sure that tarantool doesn't "
"reply \"error\" for the call to \"require()\"."
msgstr ""
"Настройте Tarantool и загрузите модуль pg. Убедитесь, что Tarantool не "
"выбрасывает ошибку в ответ на вызов \"require()\"."

msgid ""
"tarantool> box.cfg{}\n"
"...\n"
"tarantool> pg = require('pg')\n"
"---\n"
"..."
msgstr ""
"tarantool> box.cfg{}\n"
"...\n"
"tarantool> pg = require('pg')\n"
"---\n"
"..."

msgid ""
"Create a Lua function that will connect to a PostgreSQL server, (using "
"some factory default values for the port and user and password), retrieve"
" one row, and display the row. For explanations of the statement types "
"used here, read the Lua tutorial earlier in the Tarantool user manual."
msgstr ""
"Создайте Lua-функцию, которая подключится к PostgreSQL-серверу (используя"
" значения по умолчанию для параметров порта, пользователя и пароля), "
"выберите одну строку и выведите ее на экран. Описание используемых здесь "
"типов операторов вы можете найти в практикуме по Lua в руководстве "
"пользователя Tarantool'а."

msgid ""
"tarantool> function pg_select ()\n"
"         >   local conn = pg.connect({\n"
"         >     host = '127.0.0.1',\n"
"         >     port = 5432,\n"
"         >     user = 'postgres',\n"
"         >     password = 'postgres',\n"
"         >     db = 'postgres'\n"
"         >   })\n"
"         >   local test = conn:execute('SELECT * FROM test WHERE s1 = 1')"
"\n"
"         >   local row = ''\n"
"         >   for i, card in pairs(test) do\n"
"         >       row = row .. card.s2 .. ' '\n"
"         >       end\n"
"         >   conn:close()\n"
"         >   return row\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> pg_select()\n"
"---\n"
"- 'PostgreSQL row '\n"
"..."
msgstr ""
"tarantool> function pg_select ()\n"
"         >   local conn = pg.connect({\n"
"         >     host = '127.0.0.1',\n"
"         >     port = 5432,\n"
"         >     user = 'postgres',\n"
"         >     password = 'postgres',\n"
"         >     db = 'postgres'\n"
"         >   })\n"
"         >   local test = conn:execute('SELECT * FROM test WHERE s1 = 1')"
"\n"
"         >   local row = ''\n"
"         >   for i, card in pairs(test) do\n"
"         >       row = row .. card.s2 .. ' '\n"
"         >       end\n"
"         >   conn:close()\n"
"         >   return row\n"
"         > end\n"
"---\n"
"...\n"
"tarantool> pg_select()\n"
"---\n"
"- 'PostgreSQL row '\n"
"..."

msgid ""
"Observe the result. It contains \"PostgreSQL row\". So this is the row "
"that was inserted into the PostgreSQL database. And now it's been "
"selected with the Tarantool client."
msgstr ""
"Просмотрите результат. В нем есть строка \"PostgreSQL row\". Это и есть "
"строка, которая была вставлена в базу данных PostgreSQL. А сейчас она "
"выделена с помощью Tarantool-клиента."
