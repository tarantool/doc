# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the Tarantool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
msgid ""
msgstr ""
"Project-Id-Version: Tarantool 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-06 14:05+0000\n"
"PO-Revision-Date: 2019-12-06 16:16+0300\n"
"Last-Translator: \n"
"Language: ru\n"
"Language-Team: \n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

msgid "Module `shard`"
msgstr "Модуль `shard`"

msgid ""
"With sharding, the tuples of a tuple set are distributed to multiple "
"nodes, with a Tarantool database server instance on each node. With this "
"arrangement, each instance is handling only a subset of the total data, "
"so larger loads can be handled by simply adding more computers to a "
"network."
msgstr ""
"Во время шардинга кортежи из набора кортежей распределяются по нескольким"
" узлам, на каждом из которых есть экземпляр сервера базы данных "
"Tarantool'а. При таком распределении каждый экземпляр обрабатывает только"
" подмножество общих данных, поэтому появляется возможность обрабатывать "
"данные при больших нагрузках путем простого добавления большего "
"количества компьютеров в сеть."

msgid ""
"The Tarantool `shard` module has facilities for creating shards, as well "
"as analogues for the data-manipulation functions of the box library "
"(select, insert, replace, update, delete)."
msgstr ""
"Модуль Tarantool'а `shard` позволяет создавать шарды, а также аналоги "
"функций по управлению данными из библиотеки box (select, insert, replace,"
" update, delete)."

msgid "First some terminology:"
msgstr "Для начала введем терминологию:"

msgid "**Consistent hash**"
msgstr "**Консистентное хеширование**"

msgid ""
"The `shard` module distributes according to a hash algorithm, that is, it"
" applies a hash function to a tuple's primary-key value in order to "
"decide which shard the tuple belongs to. The hash function is `consistent"
" <https://en.wikipedia.org/wiki/Consistent_hashing>`_ so that changing "
"the number of servers will not affect results for many keys. The specific"
" hash function that the `shard` module uses is :ref:`digest.guava "
"<digest-guava>` in the :codeitalic:`digest` module."
msgstr ""
"Модуль `shard` распределяет данные в соответствии с алгоритмом "
"хеширования, то есть применяет хеш-функцию к значению первичного ключа "
"кортежа, что определить к какому шарду относится кортеж. Хеш-функция "
"является `консистентной "
"<https://en.wikipedia.org/wiki/Consistent_hashing>`_, поэтому изменение "
"количества серверов не повлияет на результат для множества ключей. Модуль"
" `shard` использует специальную хеш-функцию :ref:`digest.guava <digest-"
"guava>` из модуля :codeitalic:`digest`."

msgid "**Instance**"
msgstr "**Экземпляр**"

msgid ""
"A currently-running in-memory copy of the Tarantool server, sometimes "
"called a \"server instance\". Usually each shard is associated with one "
"instance, or, if both sharding and replicating are going on, each shard "
"is associated with one replica set."
msgstr ""
"Запущенная in-memory копия Tarantool-сервера иногда называется "
"экземпляром сервера. Как правило, каждый шард ассоциирован с одним "
"экземпляром, или же, если выполняется и шардинг, и репликация, каждый "
"шард ассоциирован с одним набором реплик."

msgid "**Queue**"
msgstr "**Очередь**"

msgid ""
"A temporary list of recent update requests. Sometimes called "
"\"batching\". Since updates to a sharded database can be slow, it may "
"speed up throughput to send requests to a queue rather than wait for the "
"update to finish on every node. The `shard` module has functions for "
"adding requests to the queue, which it will process without further "
"intervention. Queuing is optional."
msgstr ""
"Временный список последних запросов обновления. Иногда называется "
"\"пакетная обработка\". Поскольку обновления в базу данных с шардингом "
"могут быть замедлены, ускорить выполнение можно путем отправки запросов в"
" очередь вместо ожидания окончания обновления на каждом узле. В модуле "
"`shard` присутствуют функции для добавления запросов в очередь, которые "
"будут затем обработаны без дополнительных действий. Использование очереди"
" необязательно."

msgid "**Redundancy**"
msgstr "**Резервирование по принципу избыточности**"

msgid "The number of replicated data copies in each shard."
msgstr "Количество копий реплицируемых данных в каждом шарде."

msgid "**Replica**"
msgstr "**Реплика**"

msgid "An instance which is part of a replica set."
msgstr "Экземпляр, который входит в набор реплик."

msgid "**Replica set**"
msgstr "**Набор реплик**"

msgid ""
"Often a single shard is associated with a single instance; however, often"
" the shard is replicated. When a shard is replicated, the multiple "
"instances (\"replicas\"), which handle the shard's replicated data, are a"
" \"replica set\"."
msgstr ""
"Часто отдельный шард ассоциирован с отдельным экземпляром. Однако, часто "
"шард реплицируется. Когда шард реплицируется, множество экземпляров "
"(\"реплики\"), которые обрабатывают реплицируемые данные шарда, "
"составляют \"набор реплик\"."

msgid "**Replicated data**"
msgstr "**Реплицируемые данные**"

msgid ""
"A complete copy of the data. The `shard` module handles both sharding and"
" replication. One shard can contain one or more replicated data copies. "
"When a write occurs, the write is attempted on every replicated data copy"
" in turn. The `shard` module does not use the built-in replication "
"feature."
msgstr ""
"Полная копия данных. Модуль `shard` обрабатывает как шардинг, так и "
"репликацию. Один шард может содержать одну или несколько копий "
"реплицируемых данных. Попытки записи производятся по очереди на каждую "
"копию реплицируемых данных. Модуль `shard` не использует встроенную "
"функцию репликации."

msgid "**Shard**"
msgstr "**Шард**"

msgid ""
"A subset of the tuples in the database partitioned according to the value"
" returned by the consistent hash function. Usually each shard is on a "
"separate node, or a separate set of nodes (for example if redundancy = 3 "
"then the shard will be on three nodes)."
msgstr ""
"Подмножество кортежей в базе данных, разделенное по значению, которое "
"возвращает консистентная хеш-функция. Как правило, каждый шард находится "
"на отдельном узле или отдельном наборе узлов (например, если "
"резервирование = 3, то шард будет на трех узлах)."

msgid "**Zone**"
msgstr "**Зона**"

msgid ""
"A physical location where the nodes are closely connected, with the same "
"security and backup and access points. The simplest example of a zone is "
"a single computer with a single Tarantool-server instance. A shard's "
"replicated data copies should be in different zones."
msgstr ""
"Физическое местоположение, где узлы тесно связаны, с одинаковыми точками "
"безопасности, резервного копирования и доступа. Простейшим примером зоны "
"является один компьютер с одним экземпляром Tarantool-сервера. Копии "
"реплицируемых данных на шарде должны находиться в разных зонах."

msgid ""
"The `shard` package is distributed separately from the main `tarantool` "
"package. To acquire it, do a separate installation:"
msgstr ""
"Пакет `shard` распространяется отдельно от основного пакета `Tarantool`. "
"Для работы с ним выполните установку отдельно:"

msgid "with Tarantool 1.7.4+, say:"
msgstr "либо на версии Tarantool'а 1.7.4+ выполните команду:"

msgid "$ tarantoolctl rocks install shard"
msgstr "$ tarantoolctl rocks install shard"

msgid "install with `yum` or `apt`, for example on Ubuntu say:"
msgstr ""
"либо установите с помощью `yum` или `apt`, например, на Ubuntu выполните "
"команду:"

msgid "$ sudo apt-get install tarantool-shard"
msgstr "$ sudo apt-get install tarantool-shard"

msgid ""
"or download from GitHub `tarantool/shard` and use the Lua files as "
"described in the `README <https://github.com/tarantool/shard>`_."
msgstr ""
"либо скачайте из GitHub `tarantool/shard` и используйте Lua-файлы, как "
"описано в файле `README <https://github.com/tarantool/shard>`_."

msgid "Then, before using the module, say ``shard = require('shard')``."
msgstr ""
"Затем перед использованием модуля выполните команду ``shard = "
"require('shard')``."

msgid "The most important function is:"
msgstr "Самой необходимой функцией модуля является"

msgid "shard.init(*shard-configuration*)"
msgstr "shard.init(*настройка-шарда*)"

msgid "This must be called for every shard."
msgstr "Ее следует вызывать для каждого шарда."

msgid "The shard configuration is a table with these fields:"
msgstr "Настройка шарда представляет собой таблицу со следующими полями:"

msgid "`servers` (a list of URIs of nodes and the zones the nodes are in)"
msgstr ""
"`servers` -- серверы, т.е. список URI узлов и зон, в которых находятся "
"узлы"

msgid "`login` (the user name which applies for accessing via the `shard` module)"
msgstr ""
"`login` -- имя пользователя, которое используется для доступа по модулю "
"`shard`"

msgid "`password` (the password for the login)"
msgstr "`password` -- пароль для имени пользователя"

msgid "`redundancy` (a number, minimum 1)"
msgstr "`redundancy` -- резервирование, число, минимум 1"

msgid ""
"`binary` (a port number that this host is listening on, on the current "
"host, (distinguishable from the 'listen' port specified by `box.cfg`)"
msgstr ""
"`binary` -- номер порта, на котором настроено прослушивание для текущего "
"хоста (отличный от порта 'listen', который определяет `box.cfg`)"

msgid "Possible errors:"
msgstr "Возможные ошибки:"

msgid "redundancy should not be greater than the number of servers;"
msgstr ""
"значение параметра redundancy (резервирование) не должно быть больше "
"количества серверов;"

msgid "the servers must be alive;"
msgstr "серверы должны быть рабочими;"

msgid ""
"two replicated data copies of the same shard should not be in the same "
"zone."
msgstr ""
"две копии реплицируемых данных одного шарда не должны находиться в одной "
"зоне."

msgid "Example: `shard.init` syntax for one shard"
msgstr "Пример: синтаксис `shard.init` для одного шарда"

msgid "The number of replicated data copies per shard (redundancy) is 3."
msgstr ""
"Количество копий реплицируемых данных на один шард (redundancy -- "
"резервирование) равно 3."

msgid "The number of instances is 3."
msgstr "Количество экземпляров равно 3."

msgid "The `shard` module will conclude that there is only one shard."
msgstr "Модуль `shard` делает вывод, что существует только один шард."

msgid ""
"tarantool> cfg = {\n"
"         >   servers = {\n"
"         >     { uri = 'localhost:33131', zone = '1' },\n"
"         >     { uri = 'localhost:33132', zone = '2' },\n"
"         >     { uri = 'localhost:33133', zone = '3' }\n"
"         >   },\n"
"         >   login = 'test_user',\n"
"         >   password = 'pass',\n"
"         >   redundancy = '3',\n"
"         >   binary = 33131,\n"
"         > }\n"
"---\n"
"...\n"
"tarantool> shard.init(cfg)\n"
"---\n"
"..."
msgstr ""
"tarantool> cfg = {\n"
"         >   servers = {\n"
"         >     { uri = 'localhost:33131', zone = '1' },\n"
"         >     { uri = 'localhost:33132', zone = '2' },\n"
"         >     { uri = 'localhost:33133', zone = '3' }\n"
"         >   },\n"
"         >   login = 'test_user',\n"
"         >   password = 'pass',\n"
"         >   redundancy = '3',\n"
"         >   binary = 33131,\n"
"         > }\n"
"---\n"
"...\n"
"tarantool> shard.init(cfg)\n"
"---\n"
"..."

msgid "Example: `shard.init` syntax for three shards"
msgstr "Пример: синтаксис `shard.init` для трех шардов"

msgid ""
"This describes three shards. Each shard has two replicated data copies. "
"Since the number of servers is 7, and the number of replicated data "
"copies per shard is 2, and dividing 7 / 2 leaves a remainder of 1, one of"
" the servers will not be used. This is not necessarily an error, because "
"perhaps one of the servers in the list is not alive."
msgstr ""
"Здесь описаны три шарда. Каждый шард содержит две копии реплицируемых "
"данных. Поскольку количество серверов равно 7, количество копий "
"реплицируемых данных на один шард равно 2, а деление 7 на 2 дает в "
"остатке 1, -- один из серверов не будет использоваться. Это необязательно"
" должно быть ошибкой, поскольку один из серверов может быть нерабочим."

msgid ""
"tarantool> cfg = {\n"
"         >   servers = {\n"
"         >     { uri = 'host1:33131', zone = '1' },\n"
"         >     { uri = 'host2:33131', zone = '2' },\n"
"         >     { uri = 'host3:33131', zone = '3' },\n"
"         >     { uri = 'host4:33131', zone = '4' },\n"
"         >     { uri = 'host5:33131', zone = '5' },\n"
"         >     { uri = 'host6:33131', zone = '6' },\n"
"         >     { uri = 'host7:33131', zone = '7' }\n"
"         >   },\n"
"         >   login = 'test_user',\n"
"         >   password = 'pass',\n"
"         >   redundancy = '2',\n"
"         >   binary = 33131,\n"
"         > }\n"
"---\n"
"...\n"
"tarantool> shard.init(cfg)\n"
"---\n"
"..."
msgstr ""
"tarantool> cfg = {\n"
"         >   servers = {\n"
"         >     { uri = 'host1:33131', zone = '1' },\n"
"         >     { uri = 'host2:33131', zone = '2' },\n"
"         >     { uri = 'host3:33131', zone = '3' },\n"
"         >     { uri = 'host4:33131', zone = '4' },\n"
"         >     { uri = 'host5:33131', zone = '5' },\n"
"         >     { uri = 'host6:33131', zone = '6' },\n"
"         >     { uri = 'host7:33131', zone = '7' }\n"
"         >   },\n"
"         >   login = 'test_user',\n"
"         >   password = 'pass',\n"
"         >   redundancy = '2',\n"
"         >   binary = 33131,\n"
"         > }\n"
"---\n"
"...\n"
"tarantool> shard.init(cfg)\n"
"---\n"
"..."

msgid ""
"Every data-access function in the `box` module has an analogue in the "
"`shard` module:"
msgstr ""
"Каждой функции взаимодействия с данными модуля `box` соответствует "
"функция в модуле `shard`:"

msgid ""
"shard[*space-name*].insert{...}\n"
"shard[*space-name*].replace{...}\n"
"shard[*space-name*].delete{...}\n"
"shard[*space-name*].select{...}\n"
"shard[*space-name*].update{...}\n"
"shard[*space-name*].auto_increment{...}"
msgstr ""
"shard[*имя-спейса*].insert{...}\n"
"shard[*имя-спейса*].replace{...}\n"
"shard[*имя-спейса*].delete{...}\n"
"shard[*имя-спейса*].select{...}\n"
"shard[*имя-спейса*].update{...}\n"
"shard[*имя-спейса*].auto_increment{...}"

msgid ""
"For example, to insert in table T in a sharded database you simply say "
"``shard.T:insert{...}`` instead of ``box.space.T:insert{...}``."
msgstr ""
"Например, чтобы выполнить вставку в таблицу T в базе данных с шардингом, "
"просто выполните команду ``shard.T:insert{...}`` вместо "
"``box.space.T:insert{...}``."

msgid "A ``shard.T:select{}`` request without a primary key will cause an error."
msgstr "Запрос ``shard.T:select{}`` без первичного ключа вызовет ошибку."

msgid "Every queued data-access function has an analogue in the `shard` module:"
msgstr ""
"Каждой функции модуля `box` для взаимодействия с данными, поставленной в "
"очередь, соответствует функция в модуле `shard`:"

msgid ""
"shard[*space-name*].q_insert{...}\n"
"shard[*space-name*].q_replace{...}\n"
"shard[*space-name*].q_delete{...}\n"
"shard[*space-name*].q_select{...}\n"
"shard[*space-name*].q_update{...}\n"
"shard[*space-name*].q_auto_increment{...}"
msgstr ""
"shard[*имя-спейса*].q_insert{...}\n"
"shard[*имя-спейса*].q_replace{...}\n"
"shard[*имя-спейса*].q_delete{...}\n"
"shard[*имя-спейса*].q_select{...}\n"
"shard[*имя-спейса*].q_update{...}\n"
"shard[*имя-спейса*].q_auto_increment{...}"

msgid ""
"The user must add an `operation_id`. For details of queued data-access "
"functions, and of maintenance-related functions, see the `README "
"<https://github.com/tarantool/shard>`_."
msgstr ""
"Пользователь должен добавить `operation_id`. Чтобы получить "
"дополнительную информацию о функциях для взаимодействия с данными, "
"поставленными в очередь, и о функциях, предназначенных для обслуживания, "
"см. файл `README <https://github.com/tarantool/shard>`_."

msgid "Example: shard, minimal configuration"
msgstr "Пример: шард, минимальная настройка"

msgid ""
"There is only one shard, and that shard contains only one replicated data"
" copy. So this isn't illustrating the features of either replication or "
"sharding, it's only illustrating what the syntax is, and what the "
"messages look like, that anyone could duplicate in a minute or two with "
"the magic of cut-and-paste."
msgstr ""
"Создан только один шард, который содержит только одну копию реплицируемых"
" данных. Таким образом, данный пример не иллюстрирует возможности "
"репликации или шардинга, он показывает синтаксис и отображаемые "
"сообщения, что каждый может повторить за пару минут лишь с помощью "
"вырезания и вставки."

msgid ""
"$ mkdir ~/tarantool_sandbox_1\n"
"$ cd ~/tarantool_sandbox_1\n"
"$ rm -r *.snap\n"
"$ rm -r *.xlog\n"
"$ ~/tarantool-1.7/src/tarantool\n"
"\n"
"tarantool> box.cfg{listen = 3301}\n"
"tarantool> box.schema.space.create('tester')\n"
"tarantool> box.space.tester:create_index('primary', {})\n"
"tarantool> box.schema.user.create('test_user', {password = 'pass'})\n"
"tarantool> box.schema.user.grant('test_user', 'read,write,execute', "
"'universe')\n"
"tarantool> cfg = {\n"
"         >   servers = {\n"
"         >       { uri = 'localhost:3301', zone = '1' },\n"
"         >   },\n"
"         >   login = 'test_user';\n"
"         >   password = 'pass';\n"
"         >   redundancy = 1;\n"
"         >   binary = 3301;\n"
"         > }\n"
"tarantool> shard = require('shard')\n"
"tarantool> shard.init(cfg)\n"
"tarantool> -- Now put something in ...\n"
"tarantool> shard.tester:insert{1,'Tuple #1'}"
msgstr ""
"$ mkdir ~/tarantool_sandbox_1\n"
"$ cd ~/tarantool_sandbox_1\n"
"$ rm -r *.snap\n"
"$ rm -r *.xlog\n"
"$ ~/tarantool-1.7/src/tarantool\n"
"\n"
"tarantool> box.cfg{listen = 3301}\n"
"tarantool> box.schema.space.create('tester')\n"
"tarantool> box.space.tester:create_index('primary', {})\n"
"tarantool> box.schema.user.create('test_user', {password = 'pass'})\n"
"tarantool> box.schema.user.grant('test_user', 'read,write,execute', "
"'universe')\n"
"tarantool> cfg = {\n"
"         >   servers = {\n"
"         >       { uri = 'localhost:3301', zone = '1' },\n"
"         >   },\n"
"         >   login = 'test_user';\n"
"         >   password = 'pass';\n"
"         >   redundancy = 1;\n"
"         >   binary = 3301;\n"
"         > }\n"
"tarantool> shard = require('shard')\n"
"tarantool> shard.init(cfg)\n"
"tarantool> -- Введите что-нибудь ...\n"
"tarantool> shard.tester:insert{1,'Tuple #1'}"

msgid ""
"If you cut and paste the above, then the result, showing only the "
"requests and responses for `shard.init` and `shard.tester`, should look "
"approximately like this:"
msgstr ""
"Если вырезать и вставить вышеуказанное, то результат с запросами и "
"ответами только для `shard.init` и `shard.tester` должен выглядеть "
"примерно так:"

msgid ""
"<...>\n"
"tarantool> shard.init(cfg)\n"
"2017-09-06 ... I> Sharding initialization started...\n"
"2017-09-06 ... I> establishing connection to cluster servers...\n"
"2017-09-06 ... I> connected to all servers\n"
"2017-09-06 ... I> started\n"
"2017-09-06 ... I> redundancy = 1\n"
"2017-09-06 ... I> Adding localhost:3301 to shard 1\n"
"2017-09-06 ... I> shards = 1\n"
"2017-09-06 ... I> Done\n"
"---\n"
"- true\n"
"...\n"
"tarantool> -- Now put something in ...\n"
"---\n"
"...\n"
"tarantool> shard.tester:insert{1,'Tuple #1'}\n"
"---\n"
"- - [1, 'Tuple #1']\n"
"..."
msgstr ""
"<...>\n"
"tarantool> shard.init(cfg)\n"
"2017-09-06 ... I> Sharding initialization started...\n"
"2017-09-06 ... I> establishing connection to cluster servers...\n"
"2017-09-06 ... I> connected to all servers\n"
"2017-09-06 ... I> started\n"
"2017-09-06 ... I> redundancy = 1\n"
"2017-09-06 ... I> Adding localhost:3301 to shard 1\n"
"2017-09-06 ... I> shards = 1\n"
"2017-09-06 ... I> Done\n"
"---\n"
"- true\n"
"...\n"
"tarantool> -- Введите что--нибудь...\n"
"---\n"
"...\n"
"tarantool> shard.tester:insert{1,'Tuple #1'}\n"
"---\n"
"- - [1, 'Tuple #1']\n"
"..."

msgid "Example: shard, scaling out"
msgstr "Пример: шард, горизонтальное масштабирование"

msgid ""
"There are two shards, and each shard contains one replicated data copy. "
"This requires two nodes. In real life the two nodes would be two "
"computers, but for this illustration the requirement is merely: start two"
" shells, which we'll call Terminal#1 and Terminal #2."
msgstr ""
"Созданы два шарда, каждый из которых содержит одну копию реплицируемых "
"данных. В реальной жизни два узла будут представлены двумя компьютерами, "
"для примера же требуется использовать две оболочки, которые мы назовем "
"\"терминал №1\" и \"терминал №2\"."

msgid "On Terminal #1, say:"
msgstr "В первом терминале введите:"

msgid ""
"$ mkdir ~/tarantool_sandbox_1\n"
"$ cd ~/tarantool_sandbox_1\n"
"$ rm -r *.snap\n"
"$ rm -r *.xlog\n"
"$ ~/tarantool-1.7/src/tarantool\n"
"\n"
"tarantool> box.cfg{listen = 3301}\n"
"tarantool> box.schema.space.create('tester')\n"
"tarantool> box.space.tester:create_index('primary', {})\n"
"tarantool> box.schema.user.create('test_user', {password = 'pass'})\n"
"tarantool> box.schema.user.grant('test_user', 'read,write,execute', "
"'universe')\n"
"tarantool> console = require('console')\n"
"tarantool> cfg = {\n"
"         >   servers = {\n"
"         >     { uri = 'localhost:3301', zone = '1' },\n"
"         >     { uri = 'localhost:3302', zone = '2' },\n"
"         >   },\n"
"         >   login = 'test_user',\n"
"         >   password = 'pass',\n"
"         >   redundancy = 1,\n"
"         >   binary = 3301,\n"
"         > }\n"
"tarantool> shard = require('shard')\n"
"tarantool> shard.init(cfg)\n"
"tarantool> -- Now put something in ...\n"
"tarantool> shard.tester:insert{1,'Tuple #1'}"
msgstr ""
"$ mkdir ~/tarantool_sandbox_1\n"
"$ cd ~/tarantool_sandbox_1\n"
"$ rm -r *.snap\n"
"$ rm -r *.xlog\n"
"$ ~/tarantool-1.7/src/tarantool\n"
"\n"
"tarantool> box.cfg{listen = 3301}\n"
"tarantool> box.schema.space.create('tester')\n"
"tarantool> box.space.tester:create_index('primary', {})\n"
"tarantool> box.schema.user.create('test_user', {password = 'pass'})\n"
"tarantool> box.schema.user.grant('test_user', 'read,write,execute', "
"'universe')\n"
"tarantool> console = require('console')\n"
"tarantool> cfg = {\n"
"         >   servers = {\n"
"         >     { uri = 'localhost:3301', zone = '1' },\n"
"         >     { uri = 'localhost:3302', zone = '2' },\n"
"         >   },\n"
"         >   login = 'test_user',\n"
"         >   password = 'pass',\n"
"         >   redundancy = 1,\n"
"         >   binary = 3301,\n"
"         > }\n"
"tarantool> shard = require('shard')\n"
"tarantool> shard.init(cfg)\n"
"tarantool> -- Введите что-нибудь ...\n"
"tarantool> shard.tester:insert{1,'Tuple #1'}"

msgid "On Terminal #2, say:"
msgstr "Во втором терминале введите:"

msgid ""
"$ mkdir ~/tarantool_sandbox_2\n"
"$ cd ~/tarantool_sandbox_2\n"
"$ rm -r *.snap\n"
"$ rm -r *.xlog\n"
"$ ~/tarantool-1.7/src/tarantool\n"
"\n"
"tarantool> box.cfg{listen = 3302}\n"
"tarantool> box.schema.space.create('tester')\n"
"tarantool> box.space.tester:create_index('primary', {})\n"
"tarantool> box.schema.user.create('test_user', {password = 'pass'})\n"
"tarantool> box.schema.user.grant('test_user', 'read,write,execute', "
"'universe')\n"
"tarantool> console = require('console')\n"
"tarantool> cfg = {\n"
"         >   servers = {\n"
"         >     { uri = 'localhost:3301', zone = '1' };\n"
"         >     { uri = 'localhost:3302', zone = '2' };\n"
"         >   };\n"
"         >   login = 'test_user';\n"
"         >   password = 'pass';\n"
"         >   redundancy = 1;\n"
"         >   binary = 3302;\n"
"         > }\n"
"tarantool> shard = require('shard')\n"
"tarantool> shard.init(cfg)\n"
"tarantool> -- Now get something out ...\n"
"tarantool> shard.tester:select{1}"
msgstr ""
"$ mkdir ~/tarantool_sandbox_2\n"
"$ cd ~/tarantool_sandbox_2\n"
"$ rm -r *.snap\n"
"$ rm -r *.xlog\n"
"$ ~/tarantool-1.7/src/tarantool\n"
"\n"
"tarantool> box.cfg{listen = 3302}\n"
"tarantool> box.schema.space.create('tester')\n"
"tarantool> box.space.tester:create_index('primary', {})\n"
"tarantool> box.schema.user.create('test_user', {password = 'pass'})\n"
"tarantool> box.schema.user.grant('test_user', 'read,write,execute', "
"'universe')\n"
"tarantool> console = require('console')\n"
"tarantool> cfg = {\n"
"         >   servers = {\n"
"         >     { uri = 'localhost:3301', zone = '1' };\n"
"         >     { uri = 'localhost:3302', zone = '2' };\n"
"         >   };\n"
"         >   login = 'test_user';\n"
"         >   password = 'pass';\n"
"         >   redundancy = 1;\n"
"         >   binary = 3302;\n"
"         > }\n"
"tarantool> shard = require('shard')\n"
"tarantool> shard.init(cfg)\n"
"tarantool> -- Выведите что-нибудь ...\n"
"tarantool> shard.tester:select{1}"

msgid ""
"What will appear on Terminal #1 is: a loop of error messages saying "
"\"Connection refused\" and \"server check failure\". This is normal. It "
"will go on until Terminal #2 process starts."
msgstr ""
"На терминале №1 появится цикл сообщений с ошибками типа \"Connection "
"refused\" (в подключении отказано) и \"server check failure\" (отказ "
"проверки сервера). Это нормально. Сообщения будут появляться, пока не "
"начнется процесс на терминале №2."

msgid "What will appear on Terminal #2, at the end, should look like this:"
msgstr "В конце, на терминале №2 появится примерно следующее:"

msgid ""
"tarantool> shard.tester:select{1}\n"
"---\n"
"- - - [1, 'Tuple #1']\n"
"..."
msgstr ""
"tarantool> shard.tester:select{1}\n"
"---\n"
"- - - [1, 'Tuple #1']\n"
"..."

msgid ""
"This shows that what was inserted by Terminal #1 can be selected by "
"Terminal #2, via the `shard` module."
msgstr ""
"Данный пример показывает, что введенная на терминале №1 информация может "
"быть извлечена на терминале №2 с помощью модуля `shard`."

msgid "For details, see the `README <https://github.com/tarantool/shard>`_."
msgstr ""
"Для получения подробной информации см. файл `README "
"<https://github.com/tarantool/shard>`_."
