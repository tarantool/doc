
msgid "SQL user guide"
msgstr ""

msgid ""
"The User Guide describes how users can start up with SQL with Tarantool, and"
" necessary concepts."
msgstr ""

msgid "Heading"
msgstr ""

msgid "Summary"
msgstr "Введение"

msgid ":ref:`Getting Started <sql_getting_started>`"
msgstr ""

msgid "Typing SQL statements on a console"
msgstr ""

msgid ":ref:`Supported Syntax <sql_supported_syntax>`"
msgstr ""

msgid "For example what characters are allowed"
msgstr ""

msgid ":ref:`Concepts <sql_concepts>`"
msgstr ""

msgid ""
"tokens, literals, identifiers, operands, operators, expressions, statements"
msgstr ""

msgid ":ref:`Data type conversion <sql_data_type_conversion>`"
msgstr ""

msgid "Casting, implicit or explicit"
msgstr ""

msgid "Getting Started"
msgstr ""

msgid ""
"The explanations for installing and starting the Tarantool server are in "
"earlier chapters of the Tarantool manual."
msgstr ""
"Пояснения по установке и запуску сервера Tarantool приведены в предыдущих "
"главах руководства по Tarantool."

msgid ""
"To get started specifically with the SQL features, using Tarantool as a "
"client, execute these requests:"
msgstr ""

msgid ""
"box.cfg{}\n"
"box.execute([[VALUES ('hello');]])"
msgstr ""

msgid "The bottom of the screen should now look like this:"
msgstr ""

msgid ""
"tarantool> box.execute([[VALUES ('hello');]])\n"
"---\n"
"- metadata:\n"
"  - name: COLUMN_1\n"
"    type: string\n"
"  rows:\n"
"  - ['hello']\n"
"..."
msgstr ""

msgid "That's an SQL statement done with Tarantool."
msgstr ""

msgid ""
"Now you are ready to execute any SQL statements via the connection. For "
"example"
msgstr ""

msgid ""
"box.execute([[CREATE TABLE things (id INTEGER PRIMARY key,\n"
"                                   remark STRING);]])\n"
"box.execute([[INSERT INTO things VALUES (55, 'Hello SQL world!');]])\n"
"box.execute([[SELECT * FROM things WHERE id > 0;]])"
msgstr ""

msgid "And you will see the results of the SQL query."
msgstr ""

msgid ""
"For the rest of this chapter, the :ref:`box.execute([[...]]) <box-sql>` "
"enclosure will not be shown. Examples will simply say what a piece of syntax"
" looks like, such as ``SELECT 'hello';`` |br| and users should know that "
"must be entered as |br| ``box.execute([[SELECT 'hello';]])`` |br| It is also"
" legal to enclose SQL statements inside single or double quote marks instead"
" of [[ ... ]]."
msgstr ""

msgid "Supported Syntax"
msgstr ""

msgid ""
"Keywords, for example CREATE or INSERT or VALUES, may be entered in either "
"upper case or lower case."
msgstr ""

msgid ""
"Literal values, for example ``55`` or ``'Hello SQL world!'``, should be "
"entered without single quote marks if they are numeric, and should be "
"entered with single quote marks if they are strings."
msgstr ""

msgid ""
"Object names, for example table1 or column1, should usually be entered "
"without double quote marks and are subject to some restrictions. They may be"
" enclosed in double quote marks and in that case they are subject to fewer "
"restrictions."
msgstr ""

msgid ""
"Almost all keywords are :ref:`reserved <sql_reserved_words>`, which means "
"that they cannot be used as object names unless they are enclosed in double "
"quote marks."
msgstr ""

msgid ""
"Comments may be between ``/*`` and ``*/`` (bracketed) or between ``--`` and "
"the end of a line (simple)."
msgstr ""

msgid ""
"INSERT /* This is a bracketed comment */ INTO t VALUES (5);\n"
"INSERT INTO t VALUES (5); -- this is a simple comment"
msgstr ""

msgid ""
"Expressions, for example ``a + b`` or ``a > b AND NOT a <= b``, may have "
"arithmetic operators ``+ - / *``, may have comparison operators ``= > < <= "
">= LIKE``, and may be combined with ``AND OR NOT``, with optional "
"parentheses."
msgstr ""
"Выражения, например ``a + b`` или ``a > b AND NOT a <= b``, могут содержать "
"арифметические операторы ``+ - / *`` и операторы сравнения ``= > < <= >= "
"LIKE``, а также могут использоваться вместе с ``AND OR NOT``, при этом "
"круглые скобки необязательны."

msgid "Concepts"
msgstr ""

msgid ""
"In the :ref:`SQL beginners' guide <sql_beginners_guide>` we discussed: |br| "
"What are: relational databases, tables, views, rows, and columns? |br| What "
"are: transactions, write-ahead logs, commits and rollbacks? |br| What are: "
"security considerations? |br| How do we: add, delete, or update rows in "
"tables? |br| How do we: work inside transactions with commits and/or "
"rollbacks? |br| How do we: select, join, filter, group, and sort rows?"
msgstr ""

msgid ""
"Tarantool has a \"schema\". A schema is a container for all database "
"objects. A schema may be called a \"database\" in other DBMS implementations"
msgstr ""

msgid ""
"Tarantool allows four types of \"database objects\" to be created within the"
" schema: tables, triggers, indexes, and constraints. Within tables, there "
"are \"columns\"."
msgstr ""

msgid ""
"Almost all Tarantool SQL statements begin with a reserved-word \"verb\" such"
" as INSERT, and end optionally with a semicolon. For example: ``INSERT INTO "
"t VALUES (1);``"
msgstr ""

msgid ""
"A Tarantool SQL database and a Tarantool NoSQL database are the same thing. "
"However, some operations are only possible with SQL, and others are only "
"possible with NoSQL. Mixing SQL statements with NoSQL requests is allowed."
msgstr ""

msgid "Tokens"
msgstr ""

msgid ""
"The token is the minimum SQL-syntax unit that Tarantool understands. These "
"are the types of tokens:"
msgstr ""

msgid ""
"Keywords -- official words in the language, for example ``SELECT`` |br| "
"Literals -- constants for numerics or strings, for example ``15.7`` or "
"``'Taranto'`` |br| Identifiers -- for example column55 or table_of_accounts "
"|br| Operators (strictly speaking \"non-alphabetic operators\") -- for "
"example ``* / + - ( ) , ; < = >=``"
msgstr ""
"Ключевые слова --- официальные слова языка, например ``SELECT``. |br| "
"Литералы --- числовые или строковые константы, например ``15.7`` или "
"``'Taranto'``. |br| Идентификаторы --- имена объектов, например ``column55``"
" или ``table_of_accounts``. |br| Операторы (строго говоря, неалфавитные "
"операторы) --- математические операторы, например ``* / + - ( ) , ; < = "
">=``."

msgid ""
"Tokens can be separated from each other by one or more separators: |br| * "
"White space characters: tab (U+0009), line feed (U+000A), vertical tab "
"(U+000B), form feed (U+000C), carriage return (U+000D), space (U+0020), next"
" line (U+0085), and all the rare characters in Unicode classes Zl and Zp and"
" Zs. For a full list see https://github.com/tarantool/tarantool/issues/2371."
" |br| * Bracketed comments (beginning with ``/*`` and ending with ``*/``) "
"|br| * Simple comments (beginning with ``--`` and ending with line feed) "
"|br| Separators are not necessary before or after operators. |br| Separators"
" are necessary after keywords or numerics or ordinary identifiers, unless "
"the following token is an operator. |br| Thus Tarantool can understand this "
"series of six tokens: |br| ``SELECT'a'FROM/**/t;`` |br| but for readability "
"one would usually use spaces to separate tokens: |br| ``SELECT 'a' FROM /**/"
" t;``"
msgstr ""
"Токены могут быть отделены друг от друга одним или несколькими "
"разделителями. |br| * Символы-разделители: табуляция (U+0009), перевод "
"строки (U+000A), вертикальная табуляция (U+000B), смена страницы (U+000C), "
"возврат каретки (U+000D), пробел (U+0020), следующая строка (U+0085), а "
"также все редкие символы классов Zl, Zp и Zs Юникода. Полный список символов"
" вы найдете на странице https://github.com/tarantool/tarantool/issues/2371. "
"|br| * Комментарии (начинаются с ``/*`` и заканчиваются ``*/``). |br| * "
"Однострочные комментарии (начинаются с ``--`` и заканчиваются переводом "
"строки). |br| Разделители не нужны ни перед операторами, ни после них. |br| "
"Разделители необходимы после ключевых слов, числовых значений или обычных "
"идентификаторов, если только следующий токен не является оператором. |br| "
"Таким образом, Tarantool может понять следующую серию из шести токенов: |br|"
" ``SELECT'a'FROM/**/t;`` |br| Но для удобства чтения токены обычно разделяют"
" пробелами: |br| ``SELECT 'a' FROM /**/ t;``"

msgid "Literals"
msgstr ""

msgid ""
"There are five kinds of literals: BOOLEAN INTEGER DOUBLE STRING VARBINARY."
msgstr ""

msgid ""
"BOOLEAN literals:  |br| TRUE | FALSE | UNKNOWN |br| A literal has :ref:`data"
" type = BOOLEAN <sql_data_type_boolean>` if it is the keyword TRUE or FALSE."
" UNKNOWN is a synonym for NULL. A literal may have type = BOOLEAN if it is "
"the keyword NULL and there is no context to indicate a different data type."
msgstr ""

msgid ""
"INTEGER literals: |br| [plus-sign | minus-sign] digit [digit ...] |br| or, "
"for a hexadecimal integer literal, |br| [plus-sign | minus-sign] 0X | 0x "
"hexadecimal-digit [hexadecimal-digit ...] |br| Examples: 5, -5, +5, 55555, "
"0X55, 0x55 |br| Hexadecimal 0X55 is equal to decimal 85. A literal has "
":ref:`data type = INTEGER <sql_data_type_integer>` if it contains only "
"digits and is in the range  -9223372036854775808 to +18446744073709551615, "
"integers outside that range are illegal."
msgstr ""

msgid ""
"DOUBLE literals: |br| [plus-sign | minus-sign] [digit [digit ...]] period "
"[digit [digit ...]] |br| [E|e [plus-sign | minus-sign] digit ...] |br| "
"Examples: .0, 1.0, 1E5, 1.1E5. |br| A literal has :ref:`data type = DOUBLE "
"<sql_data_type_double>` if it contains a period, or contains \"E\". DOUBLE "
"literals are also known as floating-point literals or approximate-numeric "
"literals. To represent \"Inf\" (infinity), write a real numeric outside the "
"double-precision numeric range, for example 1E309. To represent \"nan\" (not"
" a number), write an expression that does not result in a real numeric, for "
"example 0/0, using Tarantool/NoSQL. This will appear as NULL in "
"Tarantool/SQL. In an earlier version literals containing periods were "
"considered to be :ref:`NUMBER <sql_data_type_number>` literals. In a future "
"version \"nan\" may not appear as NULL."
msgstr ""
"DOUBLE: |br| [+ | -] [цифра [цифра ...]] точка [цифра [цифра ...]] |br| [E|e"
" [+ | -] цифра ...] |br| Примеры: ``.0``, ``1.0``, ``1E5``, ``1.1E5``. "
"Значение имеет :ref:`тип данных DOUBLE <sql_data_type_double>`, если оно "
"содержит десятичную точку или \"E\". Значения типа DOUBLE также известны как"
" значения с плавающей точкой или приблизительные числа. Чтобы представить "
"значение \"Inf\" (бесконечность), запишите вещественное число вне диапазона "
"double, например, ``1E309``. Чтобы представить \"NaN\" (Not a Number, "
"нечисловое значение), напишите с помощью Tarantool/NoSQL выражение, "
"результат которого не является действительным числом, например ``0/0``. В "
"Tarantool/SQL результат будет отображаться как ``NULL``. В предыдущих "
"версиях значения, содержащие десятичную точку, считались значениями типа "
":ref:`NUMBER <sql_data_type_number>`. В будущем \"NaN\" может не "
"отображаться как ``NULL``."

msgid ""
"STRING literals: |br| [quote] [character ...] [quote] |br| Examples: "
"``'ABC'``, ``'AB''C'`` |br| A literal has :ref:`data type type = STRING "
"<sql_data_type_string>` if it is a sequence of zero or more characters "
"enclosed in single quotes. The sequence ``''``  (two single quotes in a row)"
" is treated as ``'`` (a single quote) when enclosed in quotes, that is, "
"``'A''B'`` is interpreted as ``A'B``."
msgstr ""

msgid ""
"VARBINARY literals: |br| X|x [quote] [hexadecimal-digit-pair ...] [quote] "
"|br| Example: ``X'414243'``, which will be displayed as ``'ABC'``. |br| A "
"literal has :ref:`data type = VARBINARY <sql_data_type_varbinary>` "
"(\"variable-length binary\") if it is the letter X followed by quotes "
"containing pairs of hexadecimal digits, representing byte values."
msgstr ""

msgid ""
"Here are four ways to put non-ASCII characters,such as the Greek letter α "
"alpha, in string literals: |br| First make sure that your shell program is "
"set to accept characters as UTF-8. A simple way to check is |br| ``SELECT "
"hex(cast('α' as VARBINARY));`` If the result is CEB1 -- which is the "
"hexadecimal value for the UTF-8 representation of α -- it is good. |br| (1) "
"Simply enclose the character inside ``'...'``, |br| ``'α'`` |br| or |br| (2)"
" Find out what is the hexadecimal code for the UTF-8 representation of α, "
"and enclose that inside ``X'...'``, then cast to STRING because ``X'...'`` "
"literals are data type VARBINARY not STRING, |br| ``CAST(X'CEB1' AS "
"STRING)`` |br| or |br| (3) Find out what is the Unicode code point for α, "
"and pass that to the :ref:`CHAR function <sql_function_char>`. |br| "
"``CHAR(945)  /* remember that this is α as data type STRING not VARBINARY "
"*/`` |br| (4) Enclose statements inside double quotes and include Lua "
"escapes, for example ``box.execute(\"SELECT '\\206\\177';\")`` |br| One can "
"use the concatenation operator ``||`` to combine characters made with any of"
" these methods."
msgstr ""
"Вот четыре способа поместить в строки символы, не относящиеся к стандарту "
"ASCII, например, греческую букву альфа, α: |br| Сначала убедитесь, что ваша "
"shell-программа настроена для приема символов в UTF-8. Простой способ "
"проверки --- выполнить ``SELECT hex(cast('α' as VARBINARY));``. Если "
"результатом будет ``CEB1`` --- шестнадцатеричное значение "
"UTF-8-представления α --- значит, все настроено верно. |br| 1. Заключите "
"символ в одинарные кавычки ``'...'``, |br| ``'α'``. |br| 2. Узнайте "
"шестнадцатеричный код UTF-8-представления α и заключите его в выражение "
"``X'...'``. Затем нужно привести выражение к STRING, поскольку значения вида"
" ``X'...'`` имеют тип данных VARBINARY, а не STRING: ``CAST(X'CEB1' AS "
"STRING)``. |br| 3. Выясните кодовую позицию (code point) Unicode для α и "
"передайте ее в функцию :ref:`CHAR <sql_function_char>`. |br| ``CHAR(945)  /*"
" помните, что это α как STRING, а не VARBINARY */`` |br| 4. Заключите "
"инструкции в двойные кавычки и добавьте управляющие последовательности Lua, "
"например ``box.execute(\"SELECT '\\206\\177';\")``. |br| Объединить символы,"
" полученные любым из этих методов, можно с помощью оператора конкатенации "
"``||``."

msgid ""
"Limitations: (`Issue#2344 "
"<https://github.com/tarantool/tarantool/issues/2344>`_) |br| * "
"``LENGTH('A''B') = 3`` which is correct, but on the Tarantool console the "
"display from ``SELECT A''B;`` is ``A''B``, which is misleading. |br| * It is"
" unfortunate that ``X'41'`` is a byte sequence which looks the same as "
"``'A'``, but it is not the same. ``box.execute(\"select 'A' < X'41';\")`` is"
" not legal at the moment. This happens because ``TYPEOF(X'41')`` yields "
"``'varbinary'``. Also it is illegal to say ``UPDATE ... SET string_column = "
"X'41'``, one must say ``UPDATE ... SET string_column = CAST(X'41' AS "
"STRING);``. |br| * It is non-standard to say that any numeric which contains"
" a period has data type = DOUBLE."
msgstr ""
"Ограничения (подробнее в `Issue#2344 на GitHub "
"<https://github.com/tarantool/tarantool/issues/2344>`_): |br| * Выражения, "
"подобные ``LENGTH('A''B') = 3``, корректны, но в консоли Tarantool вывод "
"``SELECT A''B;`` будет ``A''B``, что вводит в заблуждение. |br| * Хотя "
"последовательность байтов ``X'41'`` выглядит так же, как ``'A'``, но это не "
"одно и то же. Выражения, подобные ``box.execute(\"select 'A' < X'41';\")``, "
"в настоящее время недопустимы, поскольку ``TYPEOF(X'41')`` возвращает "
"``'varbinary'``. Также нельзя выполнить ``UPDATE ... SET string_column = "
"X'41'``; правильным вариантом будет ``UPDATE ... SET string_column = "
"CAST(X'41' AS STRING);``. |br| * Не принято говорить, что типом данных "
"DOUBLE обладает любое числовое значение, содержащее десятичную точку."

msgid "Identifiers"
msgstr ""

msgid ""
"All database objects -- tables, triggers, indexes, columns, constraints, "
"functions, collations -- have identifiers. An identifier should begin with a"
" letter or underscore (``'_'``) and should contain only letters, digits, "
"dollar signs (``'$'``), or underscores. The maximum number of bytes in an "
"identifier is between 64982 and 65000. For compatibility reasons, Tarantool "
"recommends that an identifier should not have more than 30 characters."
msgstr ""

msgid ""
"Letters in identifiers do not have to come from the Latin alphabet, for "
"example the Japanese syllabic ひ and the Cyrillic letter д are legal. But be "
"aware that a Latin letter needs only one byte but a Cyrillic letter needs "
"two bytes, so Cyrillic identifiers consume a tiny amount more space."
msgstr ""

msgid "Reserved words"
msgstr ""

msgid ""
"Certain words are reserved and should not be used for identifiers. The "
"simple rule is: if a word means something in Tarantool SQL syntax, do not "
"try to use it for an identifier. The current list of reserved words is:"
msgstr ""

msgid ""
"ALL ALTER ANALYZE AND ANY AS ASC ASENSITIVE AUTOINCREMENT BEGIN BETWEEN "
"BINARY BLOB BOOL BOOLEAN BOTH BY CALL CASE CAST CHAR CHARACTER CHECK COLLATE"
" COLUMN COMMIT CONDITION CONNECT CONSTRAINT CREATE CROSS CURRENT "
"CURRENT_DATE CURRENT_TIME CURRENT_TIMESTAMP CURRENT_USER CURSOR DATE "
"DATETIME DEC DECIMAL DECLARE DEFAULT DEFERRABLE DELETE DENSE_RANK DESC "
"DESCRIBE DETERMINISTIC DISTINCT DOUBLE DROP EACH ELSE ELSEIF END ESCAPE "
"EXCEPT EXISTS EXPLAIN FALSE FETCH FLOAT FOR FOREIGN FROM FULL FUNCTION GET "
"GRANT GROUP HAVING IF IMMEDIATE IN INDEX INNER INOUT INSENSITIVE INSERT INT "
"INTEGER INTERSECT INTO IS ITERATE JOIN LEADING LEAVE LEFT LIKE LIMIT "
"LOCALTIME LOCALTIMESTAMP LOOP MATCH NATURAL NOT NULL NUM NUMBER NUMERIC OF "
"ON OR ORDER OUT OUTER OVER PARTIAL PARTITION PRAGMA PRECISION PRIMARY "
"PROCEDURE RANGE RANK READS REAL RECURSIVE REFERENCES REGEXP RELEASE RENAME "
"REPEAT REPLACE RESIGNAL RETURN REVOKE RIGHT ROLLBACK ROW ROWS ROW_NUMBER "
"SAVEPOINT SCALAR SELECT SENSITIVE SESSION SET SIGNAL SIMPLE SMALLINT "
"SPECIFIC SQL START STRING SYSTEM TABLE TEXT THEN TO TRAILING TRANSACTION "
"TRIGGER TRIM TRUE TRUNCATE UNION UNIQUE UNKNOWN UNSIGNED UPDATE USER USING "
"UUID VALUES VARBINARY VARCHAR VIEW WHEN WHENEVER WHERE WHILE WITH"
msgstr ""
"ALL ALTER ANALYZE AND ANY AS ASC ASENSITIVE AUTOINCREMENT BEGIN BETWEEN "
"BINARY BLOB BOOL BOOLEAN BOTH BY CALL CASE CAST CHAR CHARACTER CHECK COLLATE"
" COLUMN COMMIT CONDITION CONNECT CONSTRAINT CREATE CROSS CURRENT "
"CURRENT_DATE CURRENT_TIME CURRENT_TIMESTAMP CURRENT_USER CURSOR DATE "
"DATETIME DEC DECIMAL DECLARE DEFAULT DEFERRABLE DELETE DENSE_RANK DESC "
"DESCRIBE DETERMINISTIC DISTINCT DOUBLE DROP EACH ELSE ELSEIF END ESCAPE "
"EXCEPT EXISTS EXPLAIN FALSE FETCH FLOAT FOR FOREIGN FROM FULL FUNCTION GET "
"GRANT GROUP HAVING IF IMMEDIATE IN INDEX INNER INOUT INSENSITIVE INSERT INT "
"INTEGER INTERSECT INTO IS ITERATE JOIN LEADING LEAVE LEFT LIKE LIMIT "
"LOCALTIME LOCALTIMESTAMP LOOP MATCH NATURAL NOT NULL NUM NUMBER NUMERIC OF "
"ON OR ORDER OUT OUTER OVER PARTIAL PARTITION PRAGMA PRECISION PRIMARY "
"PROCEDURE RANGE RANK READS REAL RECURSIVE REFERENCES REGEXP RELEASE RENAME "
"REPEAT REPLACE RESIGNAL RETURN REVOKE RIGHT ROLLBACK ROW ROWS ROW_NUMBER "
"SAVEPOINT SCALAR SELECT SENSITIVE SESSION SET SIGNAL SIMPLE SMALLINT "
"SPECIFIC SQL START STRING SYSTEM TABLE TEXT THEN TO TRAILING TRANSACTION "
"TRIGGER TRIM TRUE TRUNCATE UNION UNIQUE UNKNOWN UNSIGNED UPDATE USER USING "
"UUID VALUES VARBINARY VARCHAR VIEW WHEN WHENEVER WHERE WHILE WITH"

msgid ""
"Identifiers may be enclosed in double quotes. These are called quoted "
"identifiers or \"delimited identifiers\" (unquoted identifiers may be called"
" \"regular identifiers\"). The double quotes are not part of the identifier."
" A delimited identifier may be a reserved word and may contain any printable"
" character. Tarantool converts letters in regular identifiers to upper case "
"before it accesses the database, so for statements like ``CREATE TABLE a (a "
"INTEGER PRIMARY KEY);`` or ``SELECT a FROM a;`` the table name is A and the "
"column name is A. However, Tarantool does not convert delimited identifiers "
"to upper case, so for statements like ``CREATE TABLE \"a\" (\"a\" INTEGER "
"PRIMARY KEY);`` or ``SELECT \"a\" FROM \"a\";`` the table name is a and the "
"column name is a. The sequence ``\"\"`` is treated as ``\"`` when enclosed "
"in double quotes, that is, ``\"A\"\"B\"`` is interpreted as ``\"A\"B\"``."
msgstr ""

msgid "Examples: things, t45, journal_entries_for_2017, ддд, ``\"into\"``"
msgstr ""

msgid ""
"Inside certain statements, identifiers may have \"qualifiers\" to prevent "
"ambiguity. A qualifier is an identifier of a higher-level object, followed "
"by a period. For example column1 within table1 may be referred to as "
"table1.column1. The \"name\" of an object is the same as its identifier, or "
"its qualified identifier. For example, inside ``SELECT table1.column1, "
"table2.column1 FROM table1, table2;`` the qualifiers make it clear that the "
"first column is column1 from table1 and the second column is column1 from "
"table2."
msgstr ""
"Внутри некоторых инструкций к идентификаторам можно добавлять квалификаторы "
"для исключения двусмысленности. Квалификатор --- это идентификатор объекта "
"более высокого уровня, за которым следует точка. Например, к столбцу "
"``column1`` в таблице ``table1`` можно обратиться как ``table1.column1``. "
"Идентификатор, в том числе с добавленным квалификатором, --- своего рода имя"
" объекта. Например, в ``SELECT table1.column1, table2.column1 FROM table1, "
"table2;`` соответствующие квалификаторы дают понять, что первый используемый"
" столбец --- это ``column1`` из ``table1``, а второй --- ``column1`` из "
"``table2``."

msgid ""
"The rules are sometimes relaxed for compatibility reasons, for example some "
"non-letter characters such as $ and « are legal in regular identifiers. "
"However, it is better to assume that rules are never relaxed."
msgstr ""

msgid "The following are examples of legal and illegal identifiers."
msgstr ""

msgid ""
"_A1   -- legal, begins with underscore and contains underscore | letter | digit\n"
"1_A   -- illegal, begins with digit\n"
"A$« -- legal, but not recommended, try to stick with digits and letters and underscores\n"
"+ -- illegal, operator token\n"
"grant -- illegal, GRANT is a reserved word\n"
"\"grant\" -- legal, delimited identifiers may be reserved words\n"
"\"_space\" -- legal, but Tarantool already uses this name for a system space\n"
"\"A\".\"X\" -- legal, for columns only, inside statements where qualifiers may be necessary\n"
"'a' -- illegal, single quotes are for literals not identifiers\n"
"A123456789012345678901234567890 -- legal, identifiers can be long\n"
"ддд -- legal, and will be converted to upper case in identifiers"
msgstr ""

msgid ""
"The following example shows that conversion to upper case affects regular "
"identifiers but not delimited identifiers."
msgstr ""

msgid ""
"CREATE TABLE \"q\" (\"q\" INTEGER PRIMARY KEY);\n"
"SELECT * FROM q;\n"
"-- Result = \"error: 'no such table: Q'."
msgstr ""

msgid "Operands"
msgstr ""

msgid ""
"An operand is something that can be operated on. Literals and column "
"identifiers are operands. So are NULL and DEFAULT."
msgstr ""

msgid ""
"NULL and DEFAULT are keywords which represent values whose data types are "
"not known until they are assigned or compared, so they are known by the "
"technical term \"contextually typed value specifications\". (Exception: for "
"the non-standard statement \"SELECT NULL FROM table-name;\"  NULL has data "
"type BOOLEAN.)"
msgstr ""

msgid "Operand data types"
msgstr ""

msgid "Every operand has a data type."
msgstr ""

msgid ""
"For literals, :ref:`as we saw earlier <sql_literals>`, the data type is "
"usually determined by the format."
msgstr ""

msgid ""
"For identifiers, the data type is usually determined by the definition."
msgstr ""

msgid ""
"The usual determination may change because of context or because of "
":ref:`explicit casting <sql_function_cast>`."
msgstr ""

msgid ""
"For some SQL data type names there are *aliases*. An alias may be used for "
"data definition. For example VARCHAR(5) and TEXT are aliases of STRING and "
"may appear in :samp:`CREATE TABLE {table_name} ({column_name} VARCHAR(5) "
"PRIMARY KEY);` but Tarantool, if asked, will report that the data type of "
":samp:`{column_name}` is STRING."
msgstr ""

msgid ""
"For every SQL data type there is a corresponding NoSQL type, for example an "
"SQL STRING is stored in a NoSQL space as :ref:`type = 'string' <index-"
"box_string>`."
msgstr ""

msgid ""
"To avoid confusion in this manual, all references to SQL data type names are"
" in upper case and all similar words which refer to NoSQL types or to other "
"kinds of object are in lower case, for example:"
msgstr ""

msgid "STRING is a data type name, but string is a general term;"
msgstr ""

msgid "NUMBER is a data type name, but numeric is a general term."
msgstr ""
"NUMBER --- имя типа данных, а \"numeric\" и \"числовое значение\" --- общие "
"термины."

msgid ""
"Although it is common to say that a VARBINARY value is a \"binary string\", "
"this manual will not use that term and will instead say \"byte sequence\"."
msgstr ""

msgid ""
"Here are all the SQL data types, their corresponding NoSQL types, their "
"aliases, and minimum / maximum literal examples."
msgstr ""

msgid "SQL type"
msgstr ""

msgid "NoSQL type"
msgstr ""

msgid "Aliases"
msgstr ""

msgid "Minimum"
msgstr ""

msgid "Maximum"
msgstr ""

msgid "BOOLEAN"
msgstr ""

msgid "boolean"
msgstr "boolean (логический)"

msgid "BOOL"
msgstr ""

msgid "FALSE"
msgstr ""

msgid "TRUE"
msgstr ""

msgid "INTEGER"
msgstr ""

msgid "integer"
msgstr "integer (целое число)"

msgid "INT"
msgstr ""

msgid "-9223372036854775808"
msgstr ""

msgid "18446744073709551615"
msgstr ""

msgid "UNSIGNED"
msgstr ""

msgid "unsigned"
msgstr ""

msgid "(none)"
msgstr ""

msgid "0"
msgstr "0"

msgid "DOUBLE"
msgstr ""

msgid "double"
msgstr "double (числа с двойной точностью)"

msgid "-1.79769e308"
msgstr ""

msgid "1.79769e308"
msgstr ""

msgid "NUMBER"
msgstr "NUMBER"

msgid "number"
msgstr "number"

msgid "DECIMAL"
msgstr "DECIMAL"

msgid "decimal"
msgstr "decimal"

msgid "DEC"
msgstr "DEC"

msgid "-9999999999999999999"
msgstr "-9999999999999999999"

msgid "9999999999999999999"
msgstr "9999999999999999999"

msgid "9999999999999999999 9999999999999999999"
msgstr "9999999999999999999 9999999999999999999"

msgid "STRING"
msgstr ""

msgid "string"
msgstr "строка"

msgid "TEXT, VARCHAR(n)"
msgstr ""

msgid "``''``"
msgstr ""

msgid "``'many-characters'``"
msgstr ""

msgid "VARBINARY"
msgstr ""

msgid "varbinary"
msgstr ""

msgid "``X''``"
msgstr ""

msgid "``X'many-hex-digits'``"
msgstr ""

msgid "UUID"
msgstr "UUID"

msgid "uuid"
msgstr "uuid"

msgid "00000000-0000-0000- 0000-000000000000"
msgstr "00000000-0000-0000- 0000-000000000000"

msgid "ffffffff-ffff-ffff- dfff-ffffffffffff"
msgstr "ffffffff-ffff-ffff- dfff-ffffffffffff"

msgid "SCALAR"
msgstr ""

msgid "(varies)"
msgstr "(различные)"

msgid "maximum UUID value"
msgstr "максимальное значение UUID"

msgid ""
"BOOLEAN values are FALSE, TRUE, and UNKNOWN (which is the same as NULL). "
"FALSE is less than TRUE."
msgstr ""

msgid ""
"INTEGER values are numerics that do not contain decimal points and are not "
"expressed with exponential notation. The range of possible values is between"
" -2^63 and +2^64, or NULL."
msgstr ""
"Значения INTEGER --- это числовые значения, которые не содержат десятичной "
"точки и не представлены в экспоненциальной форме записи. Возможные значения:"
" от ``-2^63`` до ``+2^64``, а также ``NULL``."

msgid ""
"UNSIGNED values are numerics that do not contain decimal points and are not "
"expressed with exponential notation. The range of possible values is between"
" 0 and +2^64, or NULL."
msgstr ""
"Значения UNSIGNED --- это числовые значения, которые не содержат десятичной "
"точки и не представлены в экспоненциальной форме записи. Возможные значения:"
" от ``0`` до ``+2^64``, а также ``NULL``."

msgid ""
"DOUBLE values are numerics that do contain decimal points (for example 0.5) "
"or are expressed with exponential notation (for example 5E-1). The range of "
"possible values is the same as for the IEEE 754 floating-point standard, or "
"NULL. Numerics outside the range of DOUBLE literals may be displayed as -inf"
" or inf."
msgstr ""
"Значения DOUBLE --- это числовые значения, которые содержат десятичную точку"
" (например, ``0.5``) или представлены в экспоненциальной форме записи "
"(например, ``5E-1``). Диапазон возможных значений соответствует стандарту "
"IEEE 754 чисел с плавающей точкой, а также включает в себя ``NULL``. Числа, "
"выходящие за пределы диапазона DOUBLE, могут быть представлены как ``-inf`` "
"или ``inf``."

msgid ""
"NUMBER values have the same range as DOUBLE values. But NUMBER values may "
"also be integers. There is no literal format for NUMBER (literals like "
"``1.5`` or ``1E555`` are considered to be DOUBLEs), so use :ref:`CAST "
"<sql_function_cast>` to insist that a numeric has data type NUMBER, but that"
" is rarely necessary. See the description of NoSQL type :ref:`'number' "
"<index-box_number>`. Support for arithmetic and built-in arithmetic "
"functions with NUMBERs was removed in Tarantool version 2.10.1."
msgstr ""
"Значения NUMBER имеют тот же диапазон, что и значения DOUBLE, но могут быть "
"и целыми числами. Для NUMBER не существует отдельного формата записи "
"(значения типа ``1.5`` или ``1E555`` считаются DOUBLE), поэтому при "
"необходимость используйте :ref:`CAST <sql_function_cast>`, чтобы привести "
"значение к типу NUMBER. См. также описание типа :ref:`'number' <index-"
"box_number>` в NoSQL. Арифметические операции и встроенные арифметические "
"функции с типами NUMBER не поддерживаются начиная с версии Tarantool 2.10.1."

msgid ""
"DECIMAL values can contain up to 38 digits on either side of a decimal "
"point. and any arithmetic with DECIMAL values has exact results (arithmetic "
"with DOUBLE values could have approximate results instead of exact results)."
" There is no literal format for DECIMAL, so use :ref:`CAST "
"<sql_function_cast>` to insist that a numeric has data type DECIMAL, for "
"example ``CAST(1.1 AS DECIMAL)`` or "
"``CAST('99999999999999999999999999999999999999' AS DECIMAL)``. See the "
"description of NoSQL type :ref:`'decimal' <decimal>`. DECIMAL support in SQL"
" was added in Tarantool version 2.10.1."
msgstr ""
"Значения DECIMAL могут содержать до 38 цифр по обе стороны от десятичной "
"точки. Любая арифметическая операция со значениями DECIMAL имеет точные "
"результаты (тогда как арифметическая операция со значениями DOUBLE может "
"иметь приблизительные результаты вместо точных). Для DECIMAL не существует "
"отдельного формата записи, поэтому используйте :ref:`CAST "
"<sql_function_cast>`, чтобы привести значение к типу DECIMAL: например, "
"``CAST(1.1 AS DECIMAL)`` или ``CAST('99999999999999999999999999999999999999'"
" AS DECIMAL)``. См. также описание типа :ref:`'decimal' <decimal>` в NoSQL. "
"Поддержка типа DECIMAL в SQL добавлена в версии Tarantool 2.10.1."

msgid ""
"STRING values are any sequence of zero or more characters encoded with "
"UTF-8, or NULL. The possible character values are the same as for the "
"Unicode standard. Byte sequences which are not valid UTF-8 characters are "
"allowed but not recommended. STRING literal values are enclosed within "
"single quotes, for example ``'literal'``. If the VARCHAR alias is used for "
"column definition, it must include a maximum length, for example column_1 "
"VARCHAR(40). However, the maximum length is ignored. The data-type may be "
"followed by :ref:`[COLLATE collation-name] <sql_collate_clause>`."
msgstr ""

msgid ""
"VARBINARY values are any sequence of zero or more octets (bytes), or NULL. "
"VARBINARY literal values are expressed as X followed by pairs of hexadecimal"
" digits enclosed within single quotes, for example ``X'0044'``. VARBINARY's "
"NoSQL equivalent is ``'varbinary'`` but not character string -- the "
"MessagePack storage is MP_BIN (MsgPack binary)."
msgstr ""

msgid ""
"UUID (Universally unique identifier) values are 32 hexadecimal digits, or "
"NULL. The usual format is a string with five fields separated by hyphens, "
"8-4-4-4-12, for example ``'000024ac-7ca6-4ab2-bd75-34742ac91213'``. The "
"MessagePack storage is MP_EXT (MsgPack extension) with 16 bytes. UUID values"
" may be created with Tarantool/NoSQL :ref:`Module uuid <uuid-module>`, or "
"with the :ref:`UUID() function <sql_function_uuid>`, or with the "
":ref:`CAST() function <sql_function_cast>`. UUID support in SQL was added in"
" Tarantool version 2.9.1."
msgstr ""
"Значения UUID (универсальные уникальные идентификаторы) — это 32 "
"шестнадцатеричные цифры или NULL. Обычный формат UUID это строка, "
"разделённая дефисами на пять групп в формате 8-4-4-4-12, например, "
"``'000024ac-7ca6-4ab2-bd75-34742ac91213'``. В MessagePack (расширение "
"MP_EXT) для хранения UUID требуется 16 байт. Значения UUID могут быть "
"созданы с помощью :ref:`модуля uuid <uuid-module>` Tarantool/NoSQL или c "
"помощью функций :ref:`UUID() <sql_function_uuid>`или :ref:`CAST() "
"<sql_function_cast>`. Поддержка UUID в SQL была добавлена в версии Tarantool"
" 2.9.1."

msgid ""
"SCALAR can be used for :ref:`column definitions <sql_column_def_data_type>` "
"and the individual column values have type SCALAR. See :ref:`Column "
"definition -- the rules for the SCALAR data type <sql_column_def_scalar>`. "
"The data-type may be followed by :ref:`[COLLATE collation-name] "
"<sql_collate_clause>`. Prior to Tarantool version 2.10.1, individual column "
"values had one of the preceding types -- BOOLEAN, INTEGER, DOUBLE, DECIMAL, "
"STRING, VARBINARY, or UUID. Starting in Tarantool version 2.10.1, all values"
" have type SCALAR."
msgstr ""
"SCALAR может использоваться в :ref:`определениях столбцов "
"<sql_column_def_data_type>`. Отдельные значения столбца также могут иметь "
"тип SCALAR. Подробную информацию вы найдете в разделе :ref:`Определение "
"столбцов --- правила для типа данных SCALAR <sql_column_def_scalar>`. Вместе"
" с этим типом данных может использоваться :ref:`[COLLATE название-"
"сортировки] <sql_collate_clause>`. До версии Tarantool 2.10.1 отдельные "
"значения столбцов могли иметь один из перечисленных выше типов: BOOLEAN, "
"INTEGER, DOUBLE, DECIMAL, STRING, VARBINARY или UUID. Начиная с версии "
"Tarantool 2.10.1 все значения в столбце SCALAR имеют тип SCALAR."

msgid ""
"Any value of any data type may be NULL. Ordinarily NULL will be cast to the "
"data type of any operand it is being compared to or to the data type of the "
"column it is in. If the data type of NULL cannot be determined from context,"
" it is BOOLEAN."
msgstr ""

msgid ""
"Most of the SQL data types correspond to :ref:`Tarantool/NoSQL types "
"<details_about_index_field_types>` with the same name. There are also some "
"Tarantool/NoSQL data types which have no corresponding SQL data types. If "
"Tarantool/SQL reads a Tarantool/NoSQL value which has a type which has no "
"SQL equivalent, Tarantool/SQL may treat it as NULL or INTEGER or VARBINARY. "
"For example, ``SELECT \"flags\" FROM \"_vspace\";`` will return a column "
"whose type is ``'map'``. Such columns can only be manipulated in SQL by "
":ref:`invoking Lua functions <sql_calling_lua>`."
msgstr ""
"Большинство типов данных в SQL аналогичны :ref:`типам в Tarantool/NoSQL "
"<details_about_index_field_types>` с тем же именем. В Tarantool/NoSQL также "
"есть типы, не имеющие аналогов в SQL. Если Tarantool/SQL считывает значение "
"Tarantool/NoSQL с типом, не имеющим эквивалента в SQL, Tarantool/SQL может "
"рассматривать его как NULL, INTEGER или VARBINARY. Например, ``SELECT "
"\"flags\" FROM \"_vspace\";`` вернет столбец, тип которого --- ``'map'``. "
"Такими столбцами можно оперировать в SQL только вызывая :ref:`Lua-функции "
"<sql_calling_lua>`."

msgid "Operators"
msgstr ""

msgid "An operator signifies what operation can be performed on operands."
msgstr ""

msgid ""
"Almost all operators are easy to recognize because they consist of one-"
"character or two-character non-alphabetic tokens, except for six keyword "
"operators (AND IN IS LIKE NOT OR)."
msgstr ""

msgid ""
"Almost all operators are \"dyadic\", that is, they are performed on a pair "
"of operands -- the only operators that are performed on a single operand are"
" NOT and ~ and (sometimes) -."
msgstr ""

msgid ""
"The result of an operation is a new operand. If the operator is a comparison"
" operator then the result has data type BOOLEAN (TRUE or FALSE or UNKNOWN). "
"Otherwise the result has the same data type as the original operands, except"
" that: promotion to a broader type may occur to avoid overflow. Arithmetic "
"with NULL operands will result in a NULL operand."
msgstr ""

msgid ""
"In the following list of operators, the tag \"(arithmetic)\" indicates that "
"all operands are expected to be numerics (other than NUMBER) and should "
"result in a numeric; the tag \"(comparison)\" indicates that operands are "
"expected to have similar data types and should result in a BOOLEAN; the tag "
"\"(logic)\" indicates that operands are expected to be BOOLEAN and should "
"result in a BOOLEAN. Exceptions may occur where operations are not possible,"
" but see the \"special situations\" which are described after this list. "
"Although all examples show literals, they could just as easily show column "
"identifiers."
msgstr ""
"В списке операторов ниже пометка \"(арифметическая операция)\" указывает на "
"то, что все операнды должны быть числовыми значениями (кроме NUMBER) и в "
"результате тоже должно получиться число. Пометка \"(сравнение)\" указывает, "
"что операнды должны иметь схожие типы данных и результат будет типа BOOLEAN."
" Пометка \"(логическая операция)\" указывает, что операнды должны быть типа "
"BOOLEAN и результат также будет типа BOOLEAN. Если операция невозможна, "
"выбрасывается исключение. Кроме того, существуют особые ситуации: их "
"описание приводится после списка операторов. На месте указанных в примерах "
"конкретных значений (литералов) могут с тем же успехом стоять идентификаторы"
" столбцов."

msgid ""
"Starting with Tarantool version 2.10.1, arithmetic operands cannot be "
"NUMBERs."
msgstr ""
"Начиная с версии Tarantool 2.10.1 арифметические операнды не могут быть типа"
" NUMBER."

msgid ""
"``+`` addition (arithmetic) Add two numerics according to standard "
"arithmetic rules. Example: ``1 + 5``, result = 6."
msgstr ""
"``+`` --- сложение (арифметическая операция). Сложение двух чисел в "
"соответствии со стандартными правилами арифметики. Пример: ``1 + 5``, "
"результат --- ``6``."

msgid ""
"``-`` subtraction (arithmetic) Subtract second numeric from first numeric "
"according to standard arithmetic rules. Example: ``1 - 5``, result = -4."
msgstr ""
"``-`` --- вычитание (арифметическая операция). Вычитание второго числа из "
"первого в соответствии со стандартными правилами арифметики. Пример: ``1 - "
"5``, результат --- ``-4``."

msgid ""
"``*`` multiplication (arithmetic) Multiply two numerics according to "
"standard arithmetic rules. Example: ``2 * 5``, result = 10."
msgstr ""
"``*`` --- умножение (арифметическая операция). Умножение двух чисел в "
"соответствии со стандартными правилами арифметики. Пример: ``2 * 5``, "
"результат --- ``10``."

msgid ""
"``/`` division (arithmetic) Divide second numeric into first numeric "
"according to standard arithmetic rules. Division by zero is not legal. "
"Division of integers always results in rounding toward zero, use :ref:`CAST "
"<sql_function_cast>` to DOUBLE to get non-integer results. Example: ``5 / "
"2``, result = 2."
msgstr ""
"``/`` --- деление (арифметическая операция). Деление второго числа на первое"
" число в соответствии со стандартными правилами арифметики. Деление на ноль "
"недопустимо. Деление целых чисел всегда приводит к округлению в сторону "
"нуля; чтобы получить дробный результат, приведите тип к DOUBLE с помощью "
":ref:`CAST <sql_function_cast>`. Пример: ``5 / 2``, результат --- ``2``."

msgid ""
"``%`` modulus (arithmetic) Divide second numeric into first numeric "
"according to standard arithmetic rules. The result is the remainder. "
"Starting with Tarantool version 2.10.1, operands must be INTEGER or "
"UNSIGNED. Example: ``17 % 5``, result = 2. Example: ``-123 % 4``, result = "
"-3."
msgstr ""
"``%`` остаток по модулю (арифметическая операция). Деление второго числа на "
"первое в соответствии со стандартными правилами арифметики. Результатом "
"будет остаток деления. Начиная с версии Tarantool 2.10.1 операнды должны "
"быть типов INTEGER или UNSIGNED. Примеры: ``17 % 5``, результатом будет "
"``2``; ``-123 % 4``, результат --- ``-3``."

msgid ""
"``<<`` shift left (arithmetic) Shift the first numeric to the left N times, "
"where N = the second numeric. For positive numerics, each 1-bit shift to the"
" left is equivalent to multiplying times 2. Example: ``5 << 1``, result = "
"10. Starting with Tarantool version 2.10.1, operands must be non-negative "
"INTEGER or UNSIGNED."
msgstr ""
"``<<`` сдвиг влево (арифметическая операция). Сдвигает первое числовое "
"значение влево N раз, где N --- второе числовое значение. Для положительных "
"чисел каждый сдвиг на 1 бит влево эквивалентен умножению числа на 2. Пример:"
" ``5 << 1``, результат --- ``10``. Начиная с версии Tarantool 2.10.1 "
"операнды должны быть неотрицательными числами INTEGER или UNSIGNED."

msgid ""
"``>>`` shift right (arithmetic) Shift the first numeric to the right N "
"times, where N = the second numeric. For positive numerics, each 1-bit shift"
" to the right is equivalent to dividing by 2. Example: ``5 >> 1``, result = "
"2. Starting with Tarantool version 2.10.1, operands must be non-negative "
"INTEGER or UNSIGNED."
msgstr ""
"``>>`` сдвиг вправо (арифметическая операция). Сдвигает первое числовое "
"значение вправо N раз, где N --- второе числовое значение. Для положительных"
" чисел каждый сдвиг на 1 бит вправо эквивалентен делению числа на 2. Пример:"
" ``5 >> 1``, результат --- ``2``. Начиная с версии Tarantool 2.10.1 операнды"
" должны быть неотрицательными числами INTEGER или UNSIGNED."

msgid ""
"``&`` and (arithmetic) Combine the two numerics, with 1 bits in the result "
"if and only if both original numerics have 1 bits. Example: ``5 & 4``, "
"result = 4. Starting with Tarantool version 2.10.1, operands must be non-"
"negative INTEGER or UNSIGNED."
msgstr ""
"``&`` побитовое \"и\" (арифметическая операция). Побитовое объединение двух "
"чисел, где в результат записывается ``1``, только если у обоих операндов на "
"этой позиции был бит ``1``. Пример: ``5 & 4``, результат --- ``4``. Начиная "
"с версии Tarantool 2.10.1 операнды должны быть неотрицательными числами "
"INTEGER или UNSIGNED."

msgid ""
"``|`` or (arithmetic) Combine the two numerics, with 1 bits in the result if"
" either original numeric has a 1 bit. Example: ``5 | 2``, result = 7. "
"Starting with Tarantool version 2.10.1, operands must be non-negative "
"INTEGER or UNSIGNED."
msgstr ""
"``|`` побитовое \"или\" (арифметическая операция). Побитовое объединение "
"двух чисел, где в результат записывается ``1``, если хотя бы у одного "
"операнда на этой позиции был бит ``1``. Пример: ``5 | 2``, результат --- "
"``7``. Начиная с версии Tarantool 2.10.1 операнды должны быть "
"неотрицательными числами INTEGER или UNSIGNED."

msgid ""
"``~`` negate (arithmetic), sometimes called bit inversion Change 0 bits to 1"
" bits, change 1 bits to 0 bits. Example: ``~5``, result = -6. Starting with "
"Tarantool version 2.10.1, the operand must be non-negative INTEGER or "
"UNSIGNED."
msgstr ""
"``~`` negate, инверсия битов (арифметическая операция). Замена всех битов "
"``0`` на ``1``, а ``1`` --- на ``0``. Пример: ``~5``, результат --- ``-6``. "
"Начиная с версии Tarantool 2.10.1 операнд должен быть неотрицательным числом"
" INTEGER или UNSIGNED."

msgid ""
"``<`` less than (comparison) Return TRUE if the first operand is less than "
"the second by arithmetic or collation rules. Example for numerics: ``5 < "
"2``, result = FALSE. Example for strings: ``'C' < ' '``, result = FALSE."
msgstr ""
"``<`` меньше чем (сравнение). Возвращает ``TRUE``, если первый операнд "
"меньше второго по арифметическим правилам или правилам сопоставления. Пример"
" с числами: ``5 < 2``, результат --- ``FALSE``. Пример со строками: ``'C' < "
"' '``, результат --- ``FALSE``."

msgid ""
"``<=`` less than or equal (comparison) Return TRUE if the first operand is "
"less than or equal to the second by arithmetic or collation rules. Example "
"for numerics: ``5 <= 5``, result = TRUE. Example for strings: ``'C' <= "
"'B'``, result = FALSE."
msgstr ""
"``<=`` меньше или равно (сравнение). Возвращает ``TRUE``, если первый "
"операнд по арифметическим правилам или правилам сопоставления меньше второго"
" или равен ему. Пример с числами: ``5 <= 5``, результат --- ``TRUE``. Пример"
" со строками: ``'C' <= 'B'``, результат --- ``FALSE``."

msgid ""
"``>`` greater than (comparison) Return TRUE if the first operand is greater "
"than the second by arithmetic or collation rules. Example for numerics: ``5 "
"> -5``, result = TRUE. Example for strings: ``'C' > '!'``, result = TRUE."
msgstr ""
"``>`` больше чем (сравнение). Возвращает ``TRUE``, если первый операнд "
"больше второго по арифметическим правилам или правилам сопоставления. Пример"
" с числами: ``5 > -5``, результат --- ``TRUE``. Пример со строками: ``'C' > "
"'!'``, результат --- ``TRUE``."

msgid ""
"``>=`` greater than or equal (comparison) Return TRUE if the first operand "
"is greater than or equal to the second by arithmetic or collation rules. "
"Example for numerics: ``0 >= 0``, result = TRUE. Example for strings: ``'Z' "
">= 'Γ'``, result = FALSE."
msgstr ""
"``>=`` больше или равно (сравнение). Возвращает ``TRUE``, если первый "
"операнд по арифметическим правилам или правилам сопоставления больше второго"
" или равен ему. Пример с числами: ``0 >= 0``, результат --- ``TRUE``. Пример"
" со строками: ``'Z' >= 'Γ'``, результат --- ``FALSE``."

msgid ""
"``=`` equal (assignment or comparison) After the word SET, \"=\" means the "
"first operand gets the value from the second operand. In other contexts, "
"\"=\" returns TRUE if operands are equal. Example for assignment: ``... SET "
"column1 = 'a';`` Example for numerics: ``0 = 0``, result = TRUE. Example for"
" strings: ``'1' = '2 '``, result = FALSE."
msgstr ""
"``=`` equal (присваивание или сравнение). После ключевого слова SET знак "
"``=`` означает, что первый операнд получит значение второго. В других "
"контекстах ``=`` возвращает ``TRUE``, если операнды равны. Пример "
"присваивания: ``... SET column1 = 'a';``. Пример сравнения числовых "
"значений: ``0 = 0``, результат --- ``TRUE``. Пример сравнения строк: ``'1' ="
" '2 '``, результат --- ``FALSE``."

msgid ""
"``==`` equal (assignment), or equal (comparison) This is a non-standard "
"equivalent of :ref:`\"= equal (assignment or comparison)\" <sql_equal>`."
msgstr ""

msgid ""
"``<>`` not equal (comparison) Return TRUE if the first operand is not equal "
"to the second by arithmetic or collation rules. Example for strings: ``'A' "
"<> 'A     '`` is TRUE."
msgstr ""

msgid ""
"``!=`` not equal (comparison) This is a non-standard equivalent of "
":ref:`\"\\<\\> not equal (comparison)\" <sql_not_equal>`."
msgstr ""

msgid ""
"``IS NULL`` and ``IS NOT NULL`` (comparison) For IS NULL: Return TRUE if the"
" first operand is NULL, otherwise return FALSE. Example: column1 IS NULL, "
"result = TRUE if column1 contains NULL. For IS NOT NULL: Return FALSE if the"
" first operand is NULL, otherwise return TRUE. Example: ``column1 IS NOT "
"NULL``, result = FALSE if column1 contains NULL."
msgstr ""

msgid ""
"``LIKE`` (comparison) Perform a comparison of two string operands. If the "
"second operand contains ``'_'``, the ``'_'`` matches any single character in"
" the first operand. If the second operand contains ``'%'``, the ``'%'`` "
"matches 0 or more characters in the first operand. If it is necessary to "
"search for either ``'_'`` or ``'%'`` within a string without treating it "
"specially, an optional clause can be added, ESCAPE single-character-operand,"
" for example ``'abc_' LIKE 'abcX_' ESCAPE 'X'`` is TRUE because ``X'`` means"
" \"following character is not special\". Matching is also affected by the "
"string's collation."
msgstr ""

msgid ""
"``BETWEEN`` (comparison) :samp:`{x} BETWEEN {y} AND {z}` is shorthand for "
":samp:`{x} >= {y} AND {x} <= {z}`."
msgstr ""

msgid ""
"``NOT`` negation (logic) Return TRUE if operand is FALSE return FALSE if "
"operand is TRUE, else return UNKNOWN. Example: ``NOT (1 > 1)``, result = "
"TRUE."
msgstr ""

msgid ""
"``IN`` is equal to one of a list of operands (comparison) Return TRUE if "
"first operand equals any of the operands in a parenthesized list. Example: "
"``1 IN (2,3,4,1,7)``, result = TRUE."
msgstr ""

msgid ""
"``AND`` and (logic) Return TRUE if both operands are TRUE. Return UNKNOWN if"
" both operands are UNKNOWN. Return UNKNOWN if one operand is TRUE and the "
"other operand is UNKNOWN. Return FALSE if one operand is FALSE and the other"
" operand is (UNKNOWN or TRUE or FALSE)."
msgstr ""

msgid ""
"``OR`` or (logic) Return TRUE if either operand is TRUE. Return FALSE if "
"both operands are FALSE. Return UNKNOWN if one operand is UNKNOWN and the "
"other operand is (UNKNOWN or FALSE)."
msgstr ""

msgid ""
"``||`` concatenate (string manipulation) Return the value of the first "
"operand concatenated with the value of the second operand. Example: ``'A' ||"
" 'B'``, result = ``'AB'``."
msgstr ""

msgid "The precedence of dyadic operators is:"
msgstr ""

msgid ""
"||\n"
"* / %\n"
"+ -\n"
"<< >> & |\n"
"<  <= > >=\n"
"=  == != <> IS IS NOT IN LIKE\n"
"AND\n"
"OR"
msgstr ""

msgid "To ensure a desired precedence, use () parentheses."
msgstr ""

msgid "Special Situations"
msgstr ""

msgid ""
"If one of the operands has data type DOUBLE, Tarantool uses floating-point "
"arithmetic. This means that exact results are not guaranteed and rounding "
"may occur without warning. For example, 4.7777777777777778 = "
"4.7777777777777777 is TRUE."
msgstr ""

msgid ""
"The floating-point values inf and -inf are possible. For example, ``SELECT "
"1e318, -1e318;`` will return \"inf, -inf\". Arithmetic on infinite values "
"may cause NULL results, for example ``SELECT 1e318 - 1e318;`` is NULL and "
"``SELECT 1e318 * 0;`` is NULL."
msgstr ""

msgid ""
"SQL operations never return the floating-point value -nan, although it may "
"exist in data created by Tarantool's NoSQL. In SQL, -nan is treated as NULL."
msgstr ""

msgid ""
"In older Tarantool versions, a string would be converted to a numeric if it "
"was used with an arithmetic operator and conversion was possible, for "
"example ``'7' + '7'`` = 14. And for comparison, ``'7'`` = 7. This is called "
"implicit casting. It was applicable for STRINGs and all numeric data types. "
"Starting with Tarantool version 2.10, it is no longer supported."
msgstr ""
"В предыдущих версиях Tarantool строка преобразовывалась в числовое значение,"
" если она использовалась с арифметическим оператором и преобразование было "
"возможно. Например, результатом выражения ``'7' + '7'`` было ``14``. Для "
"операций сравнения строка ``'7'`` преобразовывалась в значение ``7``. Это "
"называется неявным приведением. Оно было применимо для значений типа STRING "
"и всех числовых типов данных. Начиная с версии Tarantool 2.10 неявное "
"приведение в числа больше не поддерживается."

msgid ""
"Limitations: (`Issue#2346 "
"<https://github.com/tarantool/tarantool/issues/2346>`_) |br| * Some words, "
"for example MATCH and REGEXP, are reserved but are not necessary for current"
" or planned Tarantool versions |br| * 999999999999999 << 210 yields 0."
msgstr ""
"Ограничения (подробнее в `Issue#2346 на GitHub "
"<https://github.com/tarantool/tarantool/issues/2346>`_): |br| * Некоторые "
"ключевые слова, например MATCH и REGEXP, зарезервированы, но в текущих или "
"планируемых версиях Tarantool их использовать необязательно. |br| * "
"``99999999999999999 << 210`` возвращает ``0``."

msgid "Expressions"
msgstr ""

msgid ""
"An expression is a chunk of syntax that causes return of a value. "
"Expressions may contain literals, column-names, operators, and parentheses."
msgstr ""

msgid ""
"Therefore these are examples of expressions: ``1``, ``1 + 1 << 1``, ``(1 = "
"2) OR 4 > 3``, ``'x' || 'y' || 'z'``."
msgstr ""

msgid "Also there are two expressions that involve keywords:"
msgstr ""

msgid "value IS [NOT] NULL |br|"
msgstr ""

msgid "... for determining whether value is (not) NULL"
msgstr ""

msgid "CASE ... WHEN ... THEN ... ELSE ... END |br|"
msgstr ""

msgid "... for setting a series of conditions."
msgstr ""

msgid "See also: :ref:`subquery <sql_subquery>`."
msgstr ""

msgid "Comparing and Ordering"
msgstr ""

msgid ""
"There are rules for determining whether value-1 is \"less than\", \"equal "
"to\", or \"greater than\" value-2. These rules are applied for searches, for"
" sorting results in order by column values, and for determining whether a "
"column is unique. The result of a comparison of two values can be TRUE, "
"FALSE, or UNKNOWN (the three BOOLEAN values). For any comparisons where "
"neither operand is NULL, the operands are \"distinct\" if the comparison "
"result is FALSE. For any set of operands where all operands are distinct "
"from each other, the set is considered to be \"unique\"."
msgstr ""
"Определить, равны ли два значения или первое больше/меньше второго, помогают"
" специальные правила. Они применяются при поиске, сортировке результатов в "
"порядке возрастания значений в столбце, а также определении уникальности "
"содержимого столбца. Результатом сравнения могут быть три значения типа "
"BOOLEAN: ``TRUE``, ``FALSE`` или ``UNKNOWN``. В любом сравнении, где ни один"
" из операндов не является ``NULL``, операнды считаются различными, если "
"результат сравнения равен ``FALSE``. Любой набор операндов, где все операнды"
" отличаются друг от друга, считается уникальным."

msgid ""
"When comparing a numeric to a numeric: |br| * infinity = infinity is true "
"|br| * regular numerics are compared according to usual arithmetic rules"
msgstr ""
"Сравнение двух числовых значений: |br| * infinity = infinity вернет "
"``TRUE``; |br| * обычные числовые значения сравниваются по обычным "
"арифметическим правилам."

msgid ""
"When comparing any value to NULL: |br| (for examples in this paragraph "
"assume that column1 in table T contains {NULL, NULL, 1, 2}) |br| * value "
"comparison-operator NULL is UNKNOWN (not TRUE and not FALSE), which affects "
"\"WHERE condition\" because the condition must be TRUE, and does not affect"
"  \"CHECK (condition)\" because the condition must be either TRUE or "
"UNKNOWN. Therefore SELECT * FROM T WHERE column1 > 0 OR column1 < 0 OR "
"column1 = 0; returns only  {1,2}, and the table can have been created with "
"CREATE TABLE T (... column1 INTEGER, CHECK (column1 >= 0)); |br| * for any "
"operations that contain the keyword DISTINCT, NULLs are not distinct. "
"Therefore SELECT DISTINCT column1 FROM T; will return {NULL,1,2}. |br| * for"
" grouping, NULL values sort together. Therefore SELECT column1, COUNT(*) "
"FROM T GROUP BY column1; will include a row {NULL, 2}. |br| * for ordering, "
"NULL values sort together and are less than non-NULL values. Therefore "
"SELECT column1 FROM T ORDER BY column1; returns {NULL, NULL, 1,2}. |br| * "
"for evaluating a UNIQUE constraint or UNIQUE index, any number of NULLs is "
"okay. Therefore CREATE UNIQUE INDEX i ON T (column1); will succeed."
msgstr ""

msgid ""
"When comparing any value to a SCALAR: |br| * This is always legal, and the "
"result depends on the underlying type of the value. For example, if COLUMN1 "
"is defined as SCALAR, and a value in the column is 'a', then COLUMN1 < 5 is "
"a legal comparison and the result is FALSE because numeric is less than "
"STRING."
msgstr ""
"Сравнение любого значения со SCALAR: |br| * Всегда разрешено, результат "
"зависит от базового типа значения. Например, если столбец ``COLUMN1`` "
"определен как SCALAR и значение в столбце --- ``'a'``, то ``COLUMN1 < 5`` "
"--- допустимое сравнение. Его результатом будет ``FALSE``, потому что "
"числовое значение всегда меньше STRING."

msgid ""
"When comparing a numeric to a STRING: |br| * Comparison is legal if the "
"STRING value can be converted to a numeric with an explicit cast."
msgstr ""
"Сравнение числового значения со значением типа STRING: |br| * Сравнение "
"разрешено, если значение STRING можно явно привести к числовому."

msgid ""
"When comparing a BOOLEAN to a BOOLEAN: |br| TRUE is greater than FALSE."
msgstr ""

msgid ""
"When comparing a VARBINARY to a VARBINARY: |br| * The numeric value of each "
"pair of bytes is compared until the end of the byte sequences or until "
"inequality. If two byte sequences are otherwise equal but one is longer, "
"then the longer one is greater."
msgstr ""

msgid ""
"When comparing for the sake of eliminating duplicates: |br| * This is "
"usually signalled by the word DISTINCT, so it applies to SELECT DISTINCT, to"
" set operators such as UNION (where DISTINCT is implied), and to aggregate "
"functions such as  AVG(DISTINCT). |br| * Two operators are \"not distinct\" "
"if they are equal to each other, or are both NULL |br| * If two values are "
"equal but not identical, for example 1.0 and 1.00, they are non-distinct and"
" there is no way to specify which one will be eliminated |br| * Values in "
"primary-key or unique columns are distinct due to definition."
msgstr ""

msgid ""
"When comparing a STRING to a STRING: |br| * Ordinarily collation is "
"\"binary\", that is, comparison is done according to the numeric values of "
"the bytes. This can be cancelled by adding a :ref:`COLLATE clause "
"<sql_collate_clause>` at the end of either expression. So ``'A' < 'a'`` and "
"``'a' < 'Ä'``, but ``'A' COLLATE \"unicode_ci\" = 'a'`` and ``'a' COLLATE "
"\"unicode_ci\" = 'Ä'``. |br| * When comparing a column with a string "
"literal, the column's defined collation is used. |br| * Ordinarily trailing "
"spaces matter. So ``'a' = 'a  '`` is not TRUE. This can be cancelled by "
"using the :ref:`TRIM(TRAILING ...) <sql_function_trim>` function. |br|"
msgstr ""

msgid "Limitations: |br| * LIKE is not expected to work with VARBINARY."
msgstr ""
"Ограничения: |br| * Ожидается, что при работе с VARBINARY не будет "
"применяться LIKE."

msgid "Statements"
msgstr ""

msgid ""
"A statement consists of SQL-language keywords and expressions that direct "
"Tarantool to do something with a database. Statements begin with one of the "
"words ALTER ANALYZE COMMIT CREATE DELETE DROP EXPLAIN INSERT PRAGMA RELEASE "
"REPLACE ROLLBACK SAVEPOINT SELECT SET START TRUNCATE UPDATE VALUES WITH. "
"Statements should end with ``;`` semicolon although this is not mandatory."
msgstr ""
"Инструкция (statement) состоит из ключевых слов и выражений языка SQL, "
"которые предписывают Tarantool выполнять какие-либо действия с базой данных."
" Инструкции начинаются с одного из ключевых слов: ALTER, ANALYZE, COMMIT, "
"CREATE, DELETE, DROP, EXPLAIN, INSERT, PRAGMA, RELEASE, REPLACE, ROLLBACK, "
"SAVEPOINT, SELECT, SET, START, TRUNCATE, UPDATE, VALUES или WITH. В конце "
"инструкции ставится точка с запятой ``;``, хотя это и не является "
"обязательным."

msgid ""
"A client sends a statement to the Tarantool server. The Tarantool server "
"parses the statement and executes it. If there is an error, Tarantool "
"returns an error message."
msgstr ""

msgid "List of legal statements"
msgstr ""

msgid "In alphabetical order, the following statements are legal."
msgstr ""

msgid ""
"|nbsp| :ref:`ALTER TABLE table-name [RENAME or ADD CONSTRAINT or DROP "
"CONSTRAINT clauses]; <sql_alter_table>` |br| |nbsp| ANALYZE [table-name]; --"
" temporarily disabled in current version |br| |nbsp| :ref:`COMMIT; "
"<sql_commit>` |br| |nbsp| :ref:`CREATE [UNIQUE] INDEX [IF NOT EXISTS] index-"
"name <sql_create_index>` |br| |nbsp| |nbsp| |nbsp| |nbsp| :ref:`ON table-"
"name (column-name [, column-name ...]); <sql_create_index>` |br| |nbsp| "
":ref:`CREATE TABLE [IF NOT EXISTS] table-name <sql_create_table>` |br| "
"|nbsp| |nbsp| |nbsp| |nbsp| :ref:`(column-or-constraint-definition "
"<sql_create_table>` |br| |nbsp| |nbsp| |nbsp| |nbsp| :ref:`[, column-or-"
"constraint-definition ...]) <sql_create_table>` |br| |nbsp| |nbsp| |nbsp| "
"|nbsp| :ref:`[WITH ENGINE = engine-name]; <sql_create_table>` |br| |nbsp| "
":ref:`CREATE TRIGGER [IF NOT EXISTS] trigger-name <sql_create_trigger>` |br|"
" |nbsp| |nbsp| |nbsp| |nbsp| :ref:`BEFORE|AFTER INSERT|UPDATE|DELETE ON "
"table-name <sql_create_trigger>` |br| |nbsp| |nbsp| |nbsp| |nbsp| :ref:`FOR "
"EACH ROW <sql_create_trigger>` |br| |nbsp| |nbsp| |nbsp| |nbsp| :ref:`BEGIN "
"dml-statement [, dml-statement ...] END; <sql_create_trigger>` |br| |nbsp| "
":ref:`CREATE VIEW [IF NOT EXISTS] view-name <sql_create_view>`  |br| |nbsp| "
"|nbsp| |nbsp| |nbsp| :ref:`[(column-name [, column-name ...])] "
"<sql_create_view>`  |br| |nbsp| |nbsp| |nbsp| |nbsp| :ref:`AS select-"
"statement | values-statement; <sql_create_view>`  |br| |nbsp| :ref:`DROP "
"INDEX [IF EXISTS] index-name ON table-name; <sql_drop_index>`  |br| |nbsp| "
":ref:`DROP TABLE [IF EXISTS] table-name; <sql_drop_table>`  |br| |nbsp| "
":ref:`DROP TRIGGER [IF EXISTS] trigger-name; <sql_drop_trigger>` |br| |nbsp|"
" :ref:`DROP VIEW [IF EXISTS] view-name; <sql_drop_view>` |br| |nbsp| "
":ref:`EXPLAIN explainable-statement; <sql_explain>` |br| |nbsp| :ref:`INSERT"
" INTO table-name <sql_insert>` |br| |nbsp| |nbsp| |nbsp| |nbsp| "
":ref:`[(column-name [, column-name ...])] <sql_insert>` |br| |nbsp| |nbsp| "
"|nbsp| |nbsp| :ref:`values-statement | select-statement; <sql_insert>` |br| "
"|nbsp| :ref:`PRAGMA pragma-name[(value)]; <sql_pragma>` |br| |nbsp| "
":ref:`RELEASE SAVEPOINT savepoint-name; <sql_release_savepoint>` |br| |nbsp|"
" :ref:`REPLACE INTO table-name VALUES (expression [, expression ...]); "
"<sql_replace>` |br| |nbsp| :ref:`ROLLBACK [TO [SAVEPOINT] savepoint-name]; "
"<sql_rollback>` |br| |nbsp| :ref:`SAVEPOINT savepoint-name; <sql_savepoint>`"
" |br| |nbsp| :ref:`SELECT [DISTINCT|ALL] expression [, expression ...] "
"<sql_select>` |br| |nbsp| |nbsp| |nbsp| |nbsp| :ref:`FROM table-name | "
"joined-table-names [AS alias]  <sql_select>` |br| |nbsp| |nbsp| |nbsp| "
"|nbsp| :ref:`[WHERE expression] <sql_select>` |br| |nbsp| |nbsp| |nbsp| "
"|nbsp| :ref:`[GROUP BY expression [, expression ...]] <sql_group_by>` |br| "
"|nbsp| |nbsp| |nbsp| |nbsp| :ref:`[HAVING expression] <sql_having>` |br| "
"|nbsp| |nbsp| |nbsp| |nbsp| :ref:`[ORDER BY expression] <sql_order_by>` |br|"
" |nbsp| |nbsp| |nbsp| |nbsp| :ref:`LIMIT expression [OFFSET expression]]; "
"<sql_limit>` |br| |nbsp| :ref:`SET SESSION session-name = session-value; "
"<sql_set>` |br| |nbsp| :ref:`START TRANSACTION; <sql_start_transaction>` "
"|br| |nbsp| :ref:`TRUNCATE TABLE table-name; <sql_truncate>` |br| |nbsp| "
":ref:`UPDATE table-name <sql_update>` |br| |nbsp| |nbsp| |nbsp| |nbsp| "
":ref:`SET column-name=expression [,column-name=expression...] <sql_update>` "
"|br| |nbsp| |nbsp| |nbsp| |nbsp| :ref:`[WHERE expression]; <sql_update>` "
"|br| |nbsp| :ref:`VALUES (expression [, expression ...]; <sql_values>` |br| "
"|nbsp| :ref:`WITH [RECURSIVE] common-table-expression; <sql_with>`"
msgstr ""

msgid "Data Type Conversion"
msgstr ""

msgid ""
"Data type conversion, also called casting, is necessary for any operation "
"involving two operands X and Y, when X and Y have different data types. |br|"
" Or, casting is necessary for assignment operations (when INSERT or UPDATE "
"is putting a value of type X into a column defined as type Y). |br| Casting "
"can be \"explicit\" when a user uses the :ref:`CAST <sql_function_cast>` "
"function, or \"implicit\" when Tarantool does a conversion automatically."
msgstr ""

msgid ""
"The general rules are fairly simple: |br| Assignments and operations "
"involving NULL cause NULL or UNKNOWN results. |br| For arithmetic, convert "
"to the data type which can contain both operands and the result. |br| For "
"explicit casts, if a meaningful result is possible, the operation is "
"allowed. |br| For implicit casts, if a meaningful result is possible and the"
" data types on both sides are either STRINGs or most numeric types (that is,"
" are STRING or INTEGER or UNSIGNED or DOUBLE but not NUMBER), the operation "
"is sometimes allowed."
msgstr ""
"Общие правила довольно просты: |br| Присвоения и операции с ``NULL`` "
"приводят к результатам ``NULL`` или ``UNKNOWN``. |br| Чтобы провести "
"арифметическую операцию, преобразуйте значение в тот тип данных, который "
"подойдет как для операндов, так и для результата. |br| Явное приведение "
"разрешено, если оно приводит к осмысленному результату. |br| Неявное "
"приведение разрешено, если оно приводит к осмысленному результату, а типы "
"данных с обеих сторон --- либо STRING, либо почти любые числовые типы (то "
"есть STRING, INTEGER, UNSIGNED или DOUBLE, но не NUMBER)."

msgid "The specific situations in this chart follow the general rules:"
msgstr ""

msgid ""
"~                To BOOLEAN | To numeric | To STRING | To VARBINARY | To UUID\n"
"---------------  ----------   ----------   ---------   ------------   -------\n"
"From BOOLEAN   | AAA        | ---        | A--       | ---          | ---\n"
"From numeric   | ---        | SSA        | A--       | ---          | ---\n"
"From STRING    | S--        | S--        | AAA       | A--          | S--\n"
"From VARBINARY | ---        | ---        | A--       | AAA          | S--\n"
"From UUID      | ---        | ---        | A--       | A--          | AAA"
msgstr ""
"~                В BOOLEAN  | В число    | В STRING  | В VARBINARY  | В UUID\n"
"---------------  ----------   ----------   ---------   ------------   -------\n"
"Из BOOLEAN     | AAA        | ---        | A--       | ---          | ---\n"
"Из числа       | ---        | SSA        | A--       | ---          | ---\n"
"Из STRING      | S--        | S--        | AAA       | A--          | S--\n"
"Из VARBINARY   | ---        | ---        | A--       | AAA          | S--\n"
"Из UUID        | ---        | ---        | A--       | A--          | AAA"

msgid ""
"Where each entry in the chart has 3 characters: |br| Where A = Always "
"allowed, S = Sometimes allowed, - = Never allowed. |br| The first character "
"of an entry is for explicit casts, |br| the second character is for implicit"
" casts for assignment, |br| the third character is for implicit cast for "
"comparison. |br| So AAA = Always for explicit, Always for Implicit "
"(assignment), Always for Implicit (comparison)."
msgstr ""

msgid ""
"The S \"Sometimes allowed\" character applies for these special situations: "
"|br| From STRING To BOOLEAN is allowed if UPPER(string-value) = ``'TRUE'`` "
"or ``'FALSE'``. |br| From numeric to INTEGER or UNSIGNED is allowed for cast"
" and assignment only if the result is not out of range, and the numeric has "
"no post-decimal digits. |br| From STRING to INTEGER or UNSIGNED or DECIMAL "
"is allowed only if the string has a representation of a numeric, and the "
"result is not out of range, and the numeric has no post-decimal digits. |br|"
" From STRING to DOUBLE or NUMBER is allowed only if the string has a "
"representation of a numeric. |br| From STRING to UUID is allowed only if the"
" value is (8 hexadecimal digits) hyphen (4 hexadecimal digits) hyphen (4 "
"hexadecimal digits) hyphen (4 hexadecimal digits) hyphen (12 hexadecimal "
"digits), such as ``'8e3b281b-78ad-4410-bfe9-54806a586a90'``. |br| From "
"VARBINARY to UUID is allowed only if the value is 16 bytes long, as in "
"``X'8e3b281b78ad4410bfe954806a586a90'``. |br| The chart does not show "
"To|From SCALAR because the conversions depend on the type of the value, not "
"the type of the column definition. Explicit cast to SCALAR is always "
"allowed."
msgstr ""
"Символ ``S`` в таблице означает \"Иногда разрешено\" (\"Sometimes "
"allowed\"). Он относится ко следующим особым ситуациям: |br| Приведение "
"STRING к BOOLEAN разрешено, если UPPER(строка) = ``'TRUE'`` или ``'FALSE'``."
" |br| Приведение числового значения INTEGER к UNSIGNED и соответствующее "
"присваивание разрешено, только если число не имеет цифр после десятичной "
"точки и результат не выходит за пределы диапазона. |br| Приведение STRING к "
"INTEGER, UNSIGNED или DECIMAL разрешено, только если строка представлена "
"числом, это число не имеет цифр после десятичной точки и результат не "
"выходит за пределы диапазона. |br| Приведение STRING к DOUBLE или NUMBER "
"разрешено, только если строка представляет собой число. |br| Приведение "
"STRING к UUID разрешено, только если значение имеет вид (8 шестнадцатеричных"
" цифр)-(4 шестнадцатеричные цифры)-(4 шестнадцатеричные цифры)-(4 "
"шестнадцатеричные цифры)-(12 шестнадцатеричных цифр), например: "
"``'8e3b281b-78ad-4410-bfe9-54806a586a90'``. |br| Приведение VARBINARY к UUID"
" разрешено, только если значение занимает 16 байт, например: "
"``X'8e3b281b78ad4410bfe954806a586a90'``. |br| В таблице не упомянут тип "
"SCALAR, поскольку преобразования зависят от типа значения, а не от "
"определения столбца. Явное приведение к SCALAR всегда разрешено."

msgid ""
"Since version :doc:`2.4.1 </release/2.4.1>`, the NUMBER type is processed in"
" the same way as the :ref:`number <index-box_number>` type in NoSQL "
"Tarantool."
msgstr ""

msgid ""
"Starting with Tarantool 2.10.1, these conversions which used to be legal are"
" now illegal: |br| Explicit cast from numeric to BOOLEAN, |br| Explicit cast"
" from BOOLEAN to numeric, |br| Implicit cast from NUMBER to other numeric "
"types for arithmetic or built-in functions. |br| Implicit cast from numeric "
"to STRING. |br| Implicit cast from STRING to numeric."
msgstr ""
"Начиная с версии Tarantool 2.10.1 недопустимы некоторые преобразования, "
"которые раньше были разрешены: |br| Явное приведение числового типа к "
"BOOLEAN. |br| Явное приведение BOOLEAN к числовому типу. |br| Неявное "
"приведение NUMBER к другим числовым типам при выполнении арифметических или "
"встроенных функций. |br| Неявное приведение числового типа к STRING. |br| "
"Неявное приведение STRING к числовому типу."

msgid "Examples of casts, illustrating the situations in the chart:"
msgstr ""

msgid ""
"``CAST(TRUE AS STRING)`` is legal. The intersection of the \"From BOOLEAN\" "
"row with the \"To STRING\" column is ``A--`` and the first letter of ``A--``"
" is for explicit cast and A means Always Allowed. The result is 'TRUE'."
msgstr ""
"Выполнение ``CAST(TRUE AS STRING)`` допустимо. В строке \"Из BOOLEAN\", "
"столбце \"В STRING\" приведенной выше таблицы стоит значение ``A--``, где "
"буква ``A`` относится к явному приведению и означает \"Always Allowed\" --- "
"всегда разрешено. Таким образом, результатом операции будет ``'TRUE'``."

msgid ""
"``UPDATE ... SET varbinary_column = 'A'`` is illegal. The intersection of "
"the \"From STRING\" row with the \"To VARBINARY\" column is ``A--`` and the "
"second letter of ``A--`` is for implicit cast (assignment) and - means not "
"allowed. The result is an error message."
msgstr ""
"Выполнение ``UPDATE ... SET varbinary_column = 'A'`` завершится ошибкой. В "
"строке \"Из STRING\", столбце \"В VARBINARY\" приведенной выше таблицы стоит"
" значение ``A--``, где второй символ ``-`` относится к неявному приведению "
"при присваивании и` означает \"не разрешено\". Результатом будет сообщение "
"об ошибке."

msgid ""
"``1.7E-1 > 0`` is legal. The intersection of the \"From numeric\" row with "
"the \"To numeric\" column is SSA, and the third letter of SSA is for "
"implicit cast (comparison) and A means Always Allowed. The result is TRUE."
msgstr ""
"Выражение ``1.7E-1 > 0`` допустимо. В строке \"Из числа\", столбце \"В "
"число\" приведенной выше таблицы стоит значение ``SSA``, где третья буква А "
"относится к неявному приведению при сравнении и означает \"Always Allowed\" "
"--- всегда разрешено. Таким образом, результатом операции будет ``'TRUE'``."

msgid ""
"``11 > '2'`` is illegal. The intersection of the \"From numeric\" row with "
"the \"To STRING\" column is A-- and the third letter of A-- is for implicit "
"cast (comparison) and - means not allowed. The result is an error message. "
"For detailed explanation see the following section."
msgstr ""
"Выполнение ``11 > '2'`` завершится ошибкой. В строке \"Из числа\", столбце "
"\"В STRING\" приведенной выше таблицы стоит значение ``A--``, где третий "
"символ ``-`` относится к неявному приведению при сравнении и` означает \"не "
"разрешено\". Результатом операции будет сообщение об ошибке. Подробное "
"объяснение приводится ниже."

msgid ""
"``CAST('5' AS INTEGER)`` is legal. The intersection of the \"From STRING\" "
"row with the \"To numeric\" column is S-- and the first letter of S-- is for"
" explicit cast and S means Sometimes Allowed. However, ``CAST('5.5' AS "
"INTEGER)`` is illegal because 5.5 is not an integer -- if the string "
"contains post-decimal digits and the target is INTEGER or UNSIGNED, the "
"assignment will fail."
msgstr ""
"Выполнение ``CAST('5' AS INTEGER)`` допустимо. В строке \"Из STRING\", "
"столбце \"В число\" приведенной выше таблицы стоит значение ``S--``, где "
"первая буква ``S`` относится к явному приведению и означает \"Sometimes "
"allowed\" --- иногда разрешено. При этом приведение ``CAST('5.5' AS "
"INTEGER)`` завершится ошибкой, поскольку это не целое число. Если число "
"содержит цифры после десятичной точки, а целевой тип приведения --- INTEGER "
"или UNSIGNED, присвоение не будет выполнено."

msgid "Implicit string/numeric cast"
msgstr ""

msgid ""
"The examples in this section are true only for Tarantool versions before "
"Tarantool 2.10. Starting with Tarantool 2.10, implicit string/numeric cast "
"is no longer allowed."
msgstr ""
"Примеры в этом разделе справедливы только для версий Tarantool до 2.10. "
"Начиная с Tarantool 2.10 неявное приведение строк и числовых значений больше"
" не допускается."

msgid ""
"Special considerations may apply for casting STRINGs to/from "
"INTEGERs/DOUBLEs/NUMBERs/UNSIGNEDs (numerics) for comparison or assignment."
msgstr ""
"Приведение STRING к INTEGER/DOUBLE/NUMBER/UNSIGNED (любому числовому типу) и"
" наоборот, выполняемое в ходе операции присвоения или сравнения, может "
"требовать особых условий."

msgid ""
"``1 = '1' /* compare a STRING with a numeric */`` |br| ``UPDATE ... SET "
"string_column = 1 /* assign a numeric to a STRING */``"
msgstr ""
"``1 = '1' /* сравнение значения STRING с числовым значением */`` |br| "
"``UPDATE ... SET string_column = 1 /* запись в STRING числового значения "
"*/``"

msgid ""
"For comparisons, the cast is always from STRING to numeric. |br| Therefore "
"``1e2 = '100'`` is TRUE, and ``11 > '2'`` is TRUE. |br| If the cast fails, "
"then the numeric is less than the STRING. |br| Therefore ``1e400 < ''`` is "
"TRUE. |br| Exception: for BETWEEN the cast is to the data type of the first "
"and last operands. |br| Therefore ``'66' BETWEEN 5 AND '7'`` is TRUE."
msgstr ""
"Для операций сравнения всегда выполняется приведение STRING к числовому "
"значению. |br| Поэтому ``1e2 = '100'`` вернет ``TRUE``, как и ``11 > '2'``. "
"|br| Если приведение не удалось, числовое значение считается меньше, чем "
"значение типа STRING. |br| Так что ``1e400 < ''`` тоже вернет ``TRUE``. |br|"
" Исключение: для оператора BETWEEN приведение производится к типу данных "
"первого и последнего операндов. |br| Поэтому выражение ``'66' BETWEEN 5 AND "
"'7'`` вернет ``TRUE``."

msgid ""
"For assignments, due to a change in behavior starting with Tarantool "
":doc:`2.5.1 </release/2.5.1>`, implicit casts from strings to numerics are "
"not legal. Therefore ``INSERT INTO t (integer_column) VALUES ('5');`` is an "
"error."
msgstr ""
"Начиная с Tarantool :doc:`2.5.1 </release/2.5.1>` действует измененный "
"алгоритм присваивания. В связи с этим неявные приведения строк к числам "
"недопустимы. Например, ``INSERT INTO t (integer_column) VALUES ('5');`` "
"выдаст ошибку."

msgid ""
"Implicit cast does happen if STRINGS are used in arithmetic. |br| Therefore "
"``'5' / '5' = 1``. If the cast fails, then the result is an error. |br| "
"Therefore ``'5' / ''`` is an error."
msgstr ""

msgid ""
"Implicit cast does NOT happen if numerics are used in concatenation, or in "
"LIKE. |br| Therefore ``5 || '5'`` is illegal."
msgstr ""
"Неявное приведение не производится, если числовые значения используются в "
"конкатенации или в LIKE. |br| Поэтому выражение ``5 || '5'`` недопустимо."

msgid ""
"In the following examples, implicit cast does not happen for values in "
"SCALAR columns: |br| ``DROP TABLE scalars;`` |br| ``CREATE TABLE scalars "
"(scalar_column SCALAR PRIMARY KEY);`` |br| ``INSERT INTO scalars VALUES "
"(11), ('2');`` |br| ``SELECT * FROM scalars WHERE scalar_column > 11;   /* 0"
" rows. So 11 > '2'. */`` |br| ``SELECT * FROM scalars WHERE scalar_column < "
"'2';  /* 1 row. So 11 < '2'. */`` |br| ``SELECT max(scalar_column) FROM "
"scalars; /* 1 row: '2'. So 11 < '2'. */`` |br| ``SELECT sum(scalar_column) "
"FROM scalars; /* 1 row: 13. So cast happened. */`` |br| These results are "
"not affected by indexing, or by reversing the operands."
msgstr ""

msgid ""
"Implicit cast does NOT happen for :ref:`GREATEST() <sql_function_greatest>` "
"or :ref:`LEAST() <sql_function_least>`. Therefore ``LEAST('5',6)`` is 6."
msgstr ""

msgid ""
"For function arguments: |br| If the function description says that a "
"parameter has a specific data type, and implicit assignment casts are "
"allowed, then arguments which are not passed with that data type will be "
"converted before the function is applied. |br| For example, the "
":ref:`LENGTH() <sql_function_length>` function expects a STRING or "
"VARBINARY, and INTEGER  can be converted to STRING, therefore LENGTH(15) "
"will return the length of ``'15'``, that is, 2. |br| But implicit cast "
"sometimes does NOT happen for parameters. Therefore ``ABS('5')`` will cause "
"an error message after `Issue#4159 "
"<https://github.com/tarantool/tarantool/issues/4159>`_ is fixed. However, "
":ref:`TRIM(5) <sql_function_trim>` will still be legal."
msgstr ""

msgid ""
"Although it is not a requirement of the SQL standard, implicit cast is "
"supposed to help compatibility with other DBMSs. However, other DBMSs have "
"different rules about what can be converted (for example they may allow "
"assignment of ``'inf'`` but disallow comparison with ``'1e5'``). And, of "
"course, it is not possible to be compatible with other DBMSs and at the same"
" time support SCALAR, which other DBMSs do not have."
msgstr ""
