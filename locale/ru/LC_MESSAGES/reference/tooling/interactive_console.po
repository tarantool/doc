
msgid "Interactive console"
msgstr ""

msgid ""
"The interactive console is Tarantool's basic command-line interface for "
"entering requests and seeing results. It is what users see when they start "
"the server without an :ref:`instance file <admin-instance_file>`. The "
"interactive console is often called the Lua console to distinguish it from "
"the administrative console, but in fact it can handle both Lua and SQL "
"input."
msgstr ""

msgid ""
"The majority of examples in this manual show what users see with the "
"interactive console. It includes:"
msgstr ""

msgid "``tarantool>`` prompt"
msgstr ""

msgid "instruction (a Lua request or an SQL statement)"
msgstr ""

msgid "response (a display in either YAML or Lua format)"
msgstr ""

msgid ""
"-- Interactive console example with Lua input and YAML output --\n"
"tarantool> box.info().replication\n"
"---\n"
"- 1:\n"
"    id: 1\n"
"    uuid: a5d22f66-2d28-4a35-b78f-5bf73baf6c8a\n"
"    lsn: 0\n"
"..."
msgstr ""

msgid "Interactive console input and output"
msgstr ""

msgid ""
"The **input language** can be either Lua (default) or SQL. To change the "
"input language, run ``\\set language <language>``, for example:"
msgstr ""

msgid ""
"-- Set input language to SQL --\n"
"tarantool> \\set language sql\n"
"---\n"
"- true\n"
"..."
msgstr ""

msgid ""
"The **delimiter** can be changed to any character with ``\\set delimiter "
"<character>``. By default, the delimiter is empty, which means the input "
"does not need to end with a delimiter. For example, a common recommendation "
"for SQL input is to use the semicolon delimiter:"
msgstr ""

msgid ""
"-- Set ';' delimiter --\n"
"tarantool> \\set delimiter ;\n"
"---\n"
"..."
msgstr ""

msgid ""
"The **output format** can be either `YAML <http://yaml.org/spec>`_ (default)"
" or Lua. To change the output format, run ``\\set output <format>``, for "
"example:"
msgstr ""

msgid ""
"-- Set output format Lua --\n"
"tarantool> \\set output lua\n"
"true"
msgstr ""

msgid "The default YAML output format is the following:"
msgstr ""

msgid "The output starts from a document-start line ``\"---\"``."
msgstr ""

msgid "Each item begins on a separate line starting with ``\"- \"``."
msgstr ""

msgid "Each sub-item in a nested structure is indented."
msgstr ""

msgid "The output ends with a document-end line ``\"...\"``."
msgstr ""

msgid "The alternative Lua format for console output is the following:"
msgstr ""

msgid "There are no lines for document-start or document-end."
msgstr ""

msgid "Items are separated by commas."
msgstr ""

msgid "Each sub-item in a nested structure is placed inside \"``{}``\" braces."
msgstr ""

msgid ""
"So, when an input is a Lua object description, the output in the Lua format "
"equals it."
msgstr ""

msgid ""
"For the Lua output format, you can specify an **end of statement** symbol. "
"It is added to the end of each output statement in the current session and "
"can be used for parsing the output by scripts. By default, the end of "
"statement symbol is empty. You can change it to any character or character "
"sequence. To set an end of statement symbol for the current session, run "
"`\\`set output lua,local_eos=<symbol>``, for example:"
msgstr ""

msgid ""
"-- Set output format Lua and '#' end of statement symbol --\n"
"tarantool> \\set output lua,local_eos=#\n"
"true#"
msgstr ""

msgid "To switch back to the empty end of statement symbol:"
msgstr ""

msgid ""
"-- Set output format Lua and empty end of statement symbol --\n"
"tarantool> \\set output lua,local_eos=\n"
"true"
msgstr ""

msgid ""
"The YAML output has better readability. The Lua output can be reused in "
"requests. The table below shows output examples in these formats compared "
"with the MsgPack format, which is good for database storage."
msgstr ""

msgid "Type"
msgstr "Тип"

msgid "Lua input"
msgstr ""

msgid "Lua output"
msgstr ""

msgid "YAML output"
msgstr ""

msgid "MsgPack storage"
msgstr ""

msgid "scalar"
msgstr "скалярный"

msgid ":code:`1`"
msgstr ""

msgid ":code:`---`"
msgstr ""

msgid ":code:`- 1`"
msgstr ""

msgid ":code:`...`"
msgstr ""

msgid ":code:`\\x01`"
msgstr ""

msgid "scalar sequence"
msgstr ""

msgid ":code:`1, 2, 3`"
msgstr ""

msgid ":code:`- 2`"
msgstr ""

msgid ":code:`- 3`"
msgstr ""

msgid ":code:`\\x01 \\x02 \\x03`"
msgstr ""

msgid "2-element table"
msgstr ""

msgid ":code:`{1, 2}`"
msgstr ""

msgid ":code:`- - 1`"
msgstr ""

msgid ":literal:`\\   - 2`"
msgstr ""

msgid ":code:`0x92 0x01 0x02`"
msgstr ""

msgid "map"
msgstr "map (ассоциативный массив)"

msgid ":code:`{key = 1}`"
msgstr ""

msgid ":code:`- key: 1`"
msgstr ""

msgid ":code:`\\x81 \\xa3 \\x6b \\x65 \\x79 \\x01`"
msgstr ""

msgid ""
"The console parameters of a Tarantool instance can also be changed from "
"another instance using the :ref:`console <console-module>` built-in module "
"functions."
msgstr ""

msgid "Keyboard shortcuts"
msgstr ""

msgid "Since :doc:`2.10.0 </release/2.10.0>`."
msgstr ""

msgid "Keyboard shortcut"
msgstr ""

msgid "Effect"
msgstr ""

msgid "``CTRL+C``"
msgstr ""

msgid ""
"Discard current input with the ``SIGINT`` signal in the console mode and "
"jump to a new line with a default prompt."
msgstr ""

msgid "``CTRL+D``"
msgstr ""

msgid "Quit Tarantool interactive console."
msgstr ""

msgid ""
"Keep in mind that ``CTRL+C`` shortcut will shut Tarantool down if there is "
"any currently running command in the console. The :ref:`SIGINT <admin-"
"server_signals>` signal stops the instance running in a daemon mode."
msgstr ""

#~ msgid ""
#~ "The interactive console is Tarantool's basic command-line interface for "
#~ "entering requests and seeing results. It is what users see when they start "
#~ "the server without an :ref:`instance file <admin-instance_file>`, or start "
#~ ":ref:`tarantoolctl <tarantoolctl>` with ``enter``. The interactive console "
#~ "is often called the Lua console to distinguish it from the administrative "
#~ "console, but in fact it can handle both Lua and SQL input."
#~ msgstr ""

#~ msgid ""
#~ "The majority of examples in this manual show what users see with the "
#~ "interactive console, including the prompt (which can be ``tarantool>``), the"
#~ " instruction (which can be a Lua request or an SQL statement), and the "
#~ "response (which can be a display in either YAML format or Lua format)."
#~ msgstr ""

#~ msgid ""
#~ "-- Typical interactive console example with Lua input and YAML output\n"
#~ "tarantool> box.info().replication\n"
#~ "---\n"
#~ "- 1:\n"
#~ "    id: 1\n"
#~ "    uuid: a5d22f66-2d28-4a35-b78f-5bf73baf6c8a\n"
#~ "    lsn: 0\n"
#~ "..."
#~ msgstr ""

#~ msgid ""
#~ "The **input language** can be changed to SQL with ``\\set language sql`` or "
#~ "changed to Lua (the default) with ``\\set language lua``."
#~ msgstr ""

#~ msgid ""
#~ "The **delimiter** can be changed to any character with :samp:`\\set "
#~ "delimiter <character>`. The default is nothing, which means input does not "
#~ "need to end with a delimiter. But a common recommendation is to say ``set "
#~ "delimiter ;`` especially if input is SQL."
#~ msgstr ""

#~ msgid ""
#~ "The **output format** can be changed to Lua with ``\\set output lua`` or "
#~ "changed to YAML (the default) with ``\\set output yaml``."
#~ msgstr ""

#~ msgid ""
#~ "Ordinarily. output from the console has `YAML format "
#~ "<http://yaml.org/spec>`_. That means that there is a line for document-start"
#~ " ``\"---\"``, and each item begins on a separate line starting with ``\"- "
#~ "\"``, and each sub-item in a nested structure is indented, and there is a "
#~ "line for document-end ``\"...\"``."
#~ msgstr ""

#~ msgid ""
#~ "Optionally, output from the console can have Lua format. That means that "
#~ "there are no lines for document-start or document-end, and items are not on "
#~ "separate lines (they are only separated by commas), and each sub-item in a "
#~ "nested structure is placed inside \"``{}``\" braces. So, when input is a Lua"
#~ " object description, output will equal input."
#~ msgstr ""

#~ msgid ""
#~ "YAML is good for readability. Lua is good for re-using results as requests. "
#~ "A third format, MsgPack, is good for database storage. Currently the default"
#~ " output format is YAML but it may be Lua in a future version, and it may be "
#~ "Lua if the last :ref:`set_default_output <console-set_default_output>` call "
#~ "was ``console.set_default_output('lua')``."
#~ msgstr ""
