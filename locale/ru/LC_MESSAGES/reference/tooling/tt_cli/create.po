
msgid "Creating an application from a template"
msgstr ""

msgid "$ tt create TEMPLATE_NAME [OPTION ...]"
msgstr ""

msgid "``tt create`` creates a new Tarantool application from a template."
msgstr ""

msgid "Options"
msgstr ""

msgid "Path to the directory where the application will be created."
msgstr ""

msgid "Force rewrite the application directory if it already exists."
msgstr ""

msgid "Application name."
msgstr ""

msgid "Non-interactive mode."
msgstr ""

msgid "Variable definition. Usage: ``--var var_name=value``."
msgstr ""

msgid "Path to the file with variable definitions."
msgstr ""

msgid "Details"
msgstr ""

msgid ""
"*Application templates* speed up the development of Tarantool applications "
"by defining their initial structure and content. A template can include "
"application code, configuration, build scripts, and other resources."
msgstr ""

msgid ""
"``tt`` searches templates in the directories specified in the ``templates`` "
"section of its :ref:`configuration file <tt-config_file>`."
msgstr ""

msgid "Template structure"
msgstr ""

msgid "Application templates are directories with files."
msgstr ""

msgid ""
"The main file of a template is its *manifest*. It defines how the "
"applications are instantiated from this template."
msgstr ""

msgid ""
"A template manifest is a YAML file named ``MANIFEST.yaml``. It can contain "
"the following sections:"
msgstr ""

msgid "``description`` -- the template description."
msgstr ""

msgid "``vars`` -- :ref:`template variables <template-variables>`."
msgstr ""

msgid ""
"``pre-hook`` and ``post-hook`` -- paths to executables to run before and "
"after the template instantiation."
msgstr ""

msgid ""
"``include`` -- a list of files to keep in the application directory after "
"instantiation. If this section is omitted, the application will contain all "
"template files and directories."
msgstr ""

msgid "All sections are optional."
msgstr ""

msgid "Example:"
msgstr ""

msgid ""
"description: Template description\n"
"vars:\n"
"  - prompt: User name\n"
"    name: user_name\n"
"    default: admin\n"
"    re: ^\\w+$\n"
"\n"
"  - prompt: Retry count\n"
"    default: \"3\"\n"
"    name: retry_count\n"
"    re: ^\\d+$\n"
"pre-hook: ./hooks/pre-gen.sh\n"
"post-hook: ./hooks/post-gen.sh\n"
"include:\n"
"  - init.lua\n"
"  - instances.yml"
msgstr ""

msgid ""
"Files and directories of a template are copied to the application directory "
"according to the ``include`` section of the manifest (or its absence)."
msgstr ""

msgid ""
"Don't include the ``.rocks`` directory in application templates. To specify "
"application dependencies, use the ``.rockspec`` files."
msgstr ""

msgid ""
"There is a special file type ``*.tt.template``. The content of such files is"
" adjusted for each application with the help of :ref:`template variables "
"<template-variables>`. During the instantiation, the variables in these "
"files are replaced with provided values and the ``*.tt.template`` extension "
"is removed."
msgstr ""

msgid "Variables"
msgstr ""

msgid ""
"Templates variables are replaced with their values provided upon the "
"instantiation."
msgstr ""

msgid ""
"All templates have the ``name`` variable. Its value is taken from the "
"``--name`` flag."
msgstr ""

msgid ""
"To add other variables, define them in the ``vars`` section of the template "
"manifest. A variable can have the following attributes:"
msgstr ""

msgid ""
"``prompt``: a line of text inviting to enter the variable value in the "
"interactive mode. Required."
msgstr ""

msgid "``name``: the variable name. Required."
msgstr ""

msgid "``default``: the default value. Optional."
msgstr ""

msgid "``re``: a regular expression that the value must match. Optional."
msgstr ""

msgid ""
"vars:\n"
"  - prompt: Cluster cookie\n"
"    name: cluster_cookie\n"
"    default: cookie\n"
"    re: ^\\w+$"
msgstr ""

msgid ""
"Variables can be used in all file names and the content of ``*.tt template``"
" files."
msgstr ""

msgid "Variables don't work in directory names."
msgstr ""

msgid ""
"To use a variable, enclose its name with a period in the beginning in double"
" curly braces: ``{{.var_name}}`` (as in the `Golang text templates "
"<https://golang.org/pkg/text/template/>`__ syntax)."
msgstr ""

msgid "Examples:"
msgstr ""

msgid "``init.lua.tt.template`` file:"
msgstr ""

msgid ""
"local app_name = {{.name}}\n"
"local login = {{.user_name}}"
msgstr ""

msgid "A file name ``{{.user_name}}.txt``"
msgstr ""

msgid ""
"Variables receive their values during the template instantiation. By "
"default, ``tt create`` asks you to provide the values interactively. You can"
" use the ``-s`` (or ``--non-interactive``) flag to disable the interactive "
"input. In this case, the values are searched in the following order:"
msgstr ""

msgid ""
"In the ``--var`` flag. Pass a string of the ``var=value`` format after the "
"``--var`` flag. You can pass multiple variables, each after a separate "
"``--var`` flag:"
msgstr ""

msgid "$ tt create template app --var user_name=admin"
msgstr ""

msgid ""
"In a file. Specify ``var=value`` pairs in a plain text file, each on a new "
"line, and pass it as the value of the ``--vars-file`` flag:"
msgstr ""

msgid "$ tt create template app --vars-file variables.txt"
msgstr ""

msgid "``variables.txt`` can look like this:"
msgstr ""

msgid ""
"user_name=admin\n"
"password=p4$$w0rd\n"
"version=2"
msgstr ""

msgid ""
"If a variable isn't initialized in any of these ways, the default value from"
" the manifest will be used."
msgstr ""

msgid ""
"You can combine different ways of passing variables in a single call of ``tt"
" create``."
msgstr ""

msgid "Application directory"
msgstr ""

msgid ""
"By default, the application will appear in the directory named after the "
"provided application name (``--name`` value)."
msgstr ""

msgid "To change the application location, use the ``-dst`` flag."
msgstr ""

msgid "Examples"
msgstr ""

msgid ""
"Create the application ``app1`` from the ``simple_app`` template in the "
"current directory:"
msgstr ""

msgid "$ tt create simple_app --name app1"
msgstr ""

msgid ""
"Create the ``app1`` application in ``/opt/tt/apps/``, set the ``user_name`` "
"variable to ``admin``, force rewrite the application directory if it already"
" exists. User interaction is disabled."
msgstr ""

msgid ""
"$ tt create cartridge --name app1 --var user_name=admin -f --non-interactive"
" -dst /opt/tt/apps/"
msgstr ""
