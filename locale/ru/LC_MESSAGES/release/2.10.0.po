
msgid "Tarantool 2.10.0"
msgstr ""

msgid "Released on 2022-05-22."
msgstr ""

msgid "Release: :tarantool-release:`2.10.0`."
msgstr ""

msgid "Tag: ``2.10.0``."
msgstr ""

msgid "Overview"
msgstr ""

msgid ""
"2.10.0 is the first :doc:`stable </release/policy/>` version of the 2.10 "
"release series. It introduces 107 improvements and resolves 131 bugs since "
"version :doc:`2.8.1 </release/2.8.1>`."
msgstr ""

msgid ""
"The “stable” label means that we have all planned features implemented and "
"we see no high-impact issues. However, if you encounter an issue, feel free "
"to `report it <https://github.com/tarantool/tarantool/issues>`__ on GitHub."
msgstr ""

msgid "Notable changes are:"
msgstr ""

msgid "HTTP client now supports HTTP/2."
msgstr ""

msgid "Support of the new DATETIME type."
msgstr ""

msgid "Improved type consistency in SQL."
msgstr ""

msgid "Added transaction isolation levels."
msgstr ""

msgid "Implemented fencing and pre-voting in RAFT."
msgstr ""

msgid "Introduced foreign keys and constraints."
msgstr ""

msgid "Compatibility"
msgstr ""

msgid ""
"Tarantool 2.x is backward compatible with Tarantool 1.10.x in the binary "
"data layout, client-server protocol, and replication protocol."
msgstr ""

msgid ""
"Please :doc:`upgrade </book/admin/upgrades>` using the "
"``box.schema.upgrade()`` procedure to unlock all the new features of the 2.x"
" series."
msgstr ""

msgid ""
"Some changes are labeled as **[Breaking change]**. It means that the old "
"behavior was considered error-prone and therefore changed to protect users "
"from unintended mistakes. However, there is a small probability that someone"
" can rely on the old behavior, and this label is to bring attention to the "
"things that have been changed."
msgstr ""

msgid "The changes that break backward compatibility are listed below:"
msgstr ""

msgid ""
"``fiber.wakeup()`` in Lua and ``fiber_wakeup()`` in C became NOP on the "
"currently running fiber."
msgstr ""

msgid "The ``timeout()`` method of ``net.box`` connection was dropped."
msgstr ""

msgid "The net.box console support was dropped."
msgstr ""

msgid ""
"The return value type for all time64 functions was changed from ``uint64_t``"
" to ``int64_t``."
msgstr ""

msgid "Functionality added or changed"
msgstr ""

msgid "Core"
msgstr ""

msgid ""
"The ``UUID`` field type is now part of the ``SCALAR`` field type "
"(:tarantool-issue:`6042`)."
msgstr ""

msgid ""
"The ``UUID`` field type is now available in SQL. A new ``UUID`` can be "
"generated using the new SQL built-in ``UUID()`` function (:tarantool-"
"issue:`5886`)."
msgstr ""

msgid ""
"**[Breaking change]** The ``timeout()`` method of ``net.box`` connection, "
"marked deprecated more than four years ago (in ``1.7.4``), has been dropped."
" It negatively affected the performance of hot ``net.box`` methods, such as "
"``call()`` and ``select()`` if they were called without specifying a timeout"
" (:tarantool-issue:`6242`)."
msgstr ""

msgid ""
"Improved ``net.box`` performance by up to 70% by rewriting hot code paths in"
" C (:tarantool-issue:`6241`)."
msgstr ""

msgid ""
"Introduced compact tuples that allow saving 4 bytes per tuple in case of "
"small user data (:tarantool-issue:`5385`)."
msgstr ""

msgid ""
"Now streams and interactive transactions over streams are implemented in "
"iproto. Every stream is associated with its ID, which is unique within one "
"connection. All requests with the same non-zero stream ID belong to the same"
" stream. All requests in the stream are processed synchronously. The next "
"request will not start executing until the previous one is completed. If a "
"request's stream ID is ``0``, it does not belong to a stream and is "
"processed in the old way."
msgstr ""

msgid ""
"In ``net.box``, a stream is an object above the connection that has the same"
" methods but allows executing requests sequentially. The ID is generated on "
"the client-side automatically. If a user writes his own connector and wants "
"to use streams, they must transmit the ``stream_id`` over the iproto "
"protocol."
msgstr ""

msgid ""
"The primary purpose of streams is transactions via iproto. As each stream "
"can start a transaction, several transactions can be multiplexed over one "
"connection. There are multiple ways to begin, commit, and rollback a "
"transaction. One can do that using the appropriate stream methods, ``call``,"
" ``eval``, or ``execute`` with the SQL transaction syntax. Users can mix "
"these methods. For example, one might start a transaction using "
"``stream:begin()``, and commit it with ``stream:call('box.commit')`` or "
"``stream:execute('COMMIT')``."
msgstr ""

msgid ""
"If any request fails during the transaction, it will not affect the other "
"requests in the transaction. If a disconnect occurs while there is an active"
" transaction in the stream, that transaction will be rolled back if it "
"hasn't been committed before the connection failure (:tarantool-"
"issue:`5860`)."
msgstr ""

msgid ""
"Added the new ``memtx_allocator`` option to ``box.cfg{}``. It allows "
"selecting the appropriate allocator for memtx tuples if necessary. The "
"possible values are ``system`` for malloc allocator and ``small`` for the "
"default small allocator."
msgstr ""

msgid ""
"Implemented the system allocator based on malloc. The slab allocator, which "
"is used for tuple allocation, has a particular disadvantage -- it is prone "
"to unresolvable fragmentation on specific workloads (size migration). In "
"this case, the user should be able to choose another allocator. The system "
"allocator is based on the malloc function but restricted by the same quota "
"as the slab allocator. The system allocator does not alloc all the memory at"
" the start. Instead, it allocates memory as needed, checking that the quota "
"is not exceeded (:tarantool-issue:`5419`)."
msgstr ""

msgid ""
"Added ``box.stat.net.thread()`` for reporting per thread net statistics "
"(:tarantool-issue:`6293`)."
msgstr ""

msgid ""
"Added the new ``STREAMS`` metric to ``box.stat.net``. It contains statistics"
" for iproto streams. The ``STREAMS`` contains the same counters as the "
"``CONNECTIONS`` metric in ``box.stat.net``: ``current``, ``RPS``, and "
"``total`` (:tarantool-issue:`6293`)."
msgstr ""

msgid ""
"Extended the network protocol (IPROTO) with a new request type "
"(``IPROTO_ID``). It is supposed to be used for exchanging sets of supported "
"features between the server and client (:tarantool-issue:`6253`)."
msgstr ""

msgid ""
"Added ``required_protocol_version`` and ``required_protocol_features`` to "
"``net.box`` connection options. The new options allow specifying the IPROTO "
"protocol version and features that must be supported by the server for the "
"connection to pass (:tarantool-issue:`6253`)."
msgstr ""

msgid ""
"**[Breaking change]** Added the ``msgpack.cfg.encode_error_as_ext`` "
"configuration option to enable/disable encoding errors as ``MP_ERROR`` "
"MsgPack extension. The option is enabled by default (:tarantool-"
"issue:`6433`)."
msgstr ""

msgid ""
"**[Breaking change]** Removed "
"``box.session.setting.error_marshaling_enabled``. Error marshalling is now "
"enabled automatically if the connector supports it (:tarantool-"
"issue:`6428`)."
msgstr ""

msgid ""
"Added the new ``REQUESTS_IN_PROGRESS`` and ``REQUESTS_IN_STREAM_QUEUE`` "
"metrics  to ``box.stat.net`` that contains detailed statistics for iproto "
"requests. These metrics contain the same counters as other metrics in "
"``box.stat.net``: ``current``, ``RPS``, and ``total`` (:tarantool-"
"issue:`6293`)."
msgstr ""

msgid ""
"Implemented a timeout for ``fiber:join`` in Lua (:tarantool-issue:`6203`)."
msgstr ""

msgid "Updated libev to version 4.33 (:tarantool-issue:`4909`)."
msgstr ""

msgid ""
"Added the new ``box.txn_id()`` function. It returns the ID of the current "
"transaction if called within a transaction, nil otherwise."
msgstr ""

msgid ""
"Previously, if a yield occurs for a transaction that does not support it, "
"all its statements are rolled back but still its new statements are "
"processed (they will roll back with each yield). Also, the transaction will "
"be rolled back when a commit is attempted. Now we stop processing any new "
"statements right after the first yield if a transaction does not support it."
msgstr ""

msgid ""
"Implemented a timeout for transactions after which they are rolled back "
"(:tarantool-issue:`6177`)."
msgstr ""

msgid ""
"Implemented the new C API ``box_txn_set_timeout`` function to set a timeout "
"for transactions."
msgstr ""

msgid ""
"Implemented a timeout for iproto transactions after which they are rolled "
"back (:tarantool-issue:`6177`)."
msgstr ""

msgid ""
"Implemented the new ``IPROTO_TIMEOUT 0x56`` key, which is used to set a "
"timeout for transactions over iproto streams. It is stored in the body of "
"``IPROTO_BEGIN`` request."
msgstr ""

msgid ""
"Introduced ``box.broadcast`` and ``box.watch`` functions to signal/watch "
"user-defined state changes (:tarantool-issue:`6257`)."
msgstr ""

msgid ""
"Added watchers support to the network protocol (:tarantool-issue:`6257`)."
msgstr ""

msgid ""
"Added watchers support to the ``net.box`` connector (:tarantool-"
"issue:`6257`)."
msgstr ""

msgid ""
"Now error objects with the code ``box.error.READONLY`` now have the "
"additional fields explaining why the error happened."
msgstr ""

msgid ""
"Also, there is a new field ``box.info.ro_reason``. It is ``nil`` on a "
"writable instance, but reports a reason when ``box.info.ro`` is ``true`` "
"(:tarantool-issue:`5568`)."
msgstr ""

msgid ""
"Implemented the ability to open several listening sockets. In addition to "
"the ability to pass uri as a number or string, added the ability to pass uri"
" as a table of numbers or strings (:tarantool-issue:`3554`)."
msgstr ""

msgid ""
"**[Breaking change]** ``net.box`` console support, which was marked "
"deprecated in 1.10, has been dropped. Use ``require('console').connect()`` "
"instead."
msgstr ""

msgid ""
"Added the ``takes_raw_args`` Lua function option for wrapping arguments in "
"``msgpack.object`` to skip decoding (:tarantool-issue:`3349`)."
msgstr ""

msgid ""
"Implemented the graceful shutdown protocol for IPROTO connections "
"(:tarantool-issue:`5924`)."
msgstr ""

msgid ""
"Added ``fetch_schema`` flag to ``netbox.connect`` to control schema fetching"
" from remote instance (:tarantool-issue:`4789`)."
msgstr ""

msgid "Added linking type (dynamic or static) to Tarantool build info."
msgstr ""

msgid ""
"Changed log level of some information messages from critical to info "
"(:tarantool-issue:`4675`)."
msgstr ""

msgid ""
"Added predefined system events: ``box.status``, ``box.id``, "
"``box.election``, and ``box.schema`` (:tarantool-issue:`6260`)."
msgstr ""

msgid ""
"Introduced transaction isolation levels in Lua and IPROTO (:tarantool-"
"issue:`6930`)."
msgstr ""

msgid ""
"Added support for backtrace feature on AARCH64 architecture (:tarantool-"
"issue:`6060`)."
msgstr ""

msgid ""
"Implemented collection of parent backtrace for the newly created fibers. To "
"enable the feature, call ``fiber.parent_backtrace_enable``. To disable it, "
"call ``fiber.parent_backtrace_disable``: disabled by default (:tarantool-"
"issue:`4302`)."
msgstr ""

msgid "Memtx"
msgstr ""

msgid "Introduced memtx MVCC memory monitoring (:tarantool-issue:`6150`)."
msgstr ""

msgid "Vinyl"
msgstr ""

msgid ""
"Disabled the deferred ``DELETE`` optimization in Vinyl to avoid possible "
"performance degradation of secondary index reads. Now, to enable the "
"optimization, one has to set the ``defer_deletes`` flag in space options "
"(:tarantool-issue:`4501`)."
msgstr ""

msgid "Replication"
msgstr ""

msgid ""
"Introduced ``box.info.replication[n].downstream.lag`` field to monitor the "
"state of replication. This member represents a lag between the main node "
"writing a certain transaction to its own WAL and the moment it receives an "
"ack for this transaction from a replica (:tarantool-issue:`5447`)."
msgstr ""

msgid ""
"Introduced ``on_election`` triggers. The triggers may be registered via "
"``box.ctl.on_election()`` interface and are run asynchronously each time "
"``box.info.election`` changes (:tarantool-issue:`5819`)."
msgstr ""

msgid ""
"It is now possible to decode incoming replication data in a separate thread."
" Added the ``replication_threads`` configuration option that controls how "
"many threads may be spawned to do the task (default is 1) (:tarantool-"
"issue:`6329`)."
msgstr ""

msgid "Raft"
msgstr ""

msgid ""
"Added the ``term`` field to ``box.info.synchro.queue``. It contains a term "
"of the last ``PROMOTE``. It is usually equal to ``box.info.election.term`` "
"but may be less than the election term when the new round of elections "
"started, but no one promoted yet."
msgstr ""

msgid ""
"Servers with elections enabled won’t start new elections as long as at least"
" one of their peers sees the current leader. They also won’t start the "
"elections when they don’t have a quorum of connected peers. This should "
"reduce cases when a server that has lost connectivity to the leader disrupts"
" the whole cluster by starting new elections (:tarantool-issue:`6654`)."
msgstr ""

msgid ""
"Added the ``leader_idle`` field to ``box.info.election`` table. The value "
"shows time in seconds since the last communication with a known leader "
"(:tarantool-issue:`6654`)."
msgstr ""

msgid "LuaJIT"
msgstr ""

msgid ""
"Introduced support for ``LJ_DUALNUM`` mode in ``luajit-gdb.py`` (:tarantool-"
"issue:`6224`)."
msgstr ""

msgid ""
"Introduced preliminary support of GNU/Linux ARM64 and macOS M1. In the scope"
" of this activity, the following issues have been resolved:"
msgstr ""

msgid ""
"Introduced support for a full 64-bit range of lightuserdata values "
"(:tarantool-issue:`2712`)."
msgstr ""

msgid "Fixed memory remapping issue when the page leaves 47-bit segments."
msgstr ""

msgid "Fixed M1 architecture detection (:tarantool-issue:`6065`)."
msgstr ""

msgid ""
"Fixed variadic arguments handling in FFI on M1 (:tarantool-issue:`6066`)."
msgstr ""

msgid ""
"Fixed ``table.move`` misbehavior when table reallocation occurs (:tarantool-"
"issue:`6084`)."
msgstr ""

msgid ""
"Fixed Lua stack inconsistency when xpcall is called with an invalid second "
"argument on ARM64 (:tarantool-issue:`6093`)."
msgstr ""

msgid ""
"Fixed ``BC_USETS`` bytecode semantics for closed upvalues and gray strings."
msgstr ""

msgid ""
"Fixed side exit jump target patching considering the range values of the "
"particular instruction (:tarantool-issue:`6098`)."
msgstr ""

msgid ""
"Fixed current Lua coroutine restoring on an exceptional path on ARM64 "
"(:tarantool-issue:`6189`)."
msgstr ""

msgid ""
"Now memory profiler records allocations from traces grouping them by the "
"trace number (:tarantool-issue:`5814`). The memory profiler parser can "
"display the new type of allocation sources in the following format:"
msgstr ""

msgid "| TRACE [<trace-no>] <trace-addr> started at @<sym-chunk>:<sym-line>"
msgstr ""

msgid ""
"Now the memory profiler reports allocations made by the JIT engine while "
"compiling the trace as INTERNAL (:tarantool-issue:`5679`)."
msgstr ""

msgid ""
"Now the memory profiler emits events of the new type when a function or a "
"trace is created. As a result, the memory profiler parser can enrich its "
"symbol table with the new functions and traces (:tarantool-issue:`5815`)."
msgstr ""

msgid ""
"Furthermore, there are symbol generations introduced within the internal "
"parser structure to handle possible collisions of function addresses and "
"trace numbers."
msgstr ""

msgid ""
"Now the memory profiler dumps symbol table for C functions. As a result, "
"memory profiler parser can enrich its symbol table with C symbols "
"(:tarantool-issue:`5813`). Furthermore, now memory profiler dumps special "
"events for symbol table when it encounters a new C symbol, that has not been"
" dumped yet."
msgstr ""

msgid ""
"Introduced the LuaJIT platform profiler (:tarantool-issue:`781`) and the "
"profile parser. This profiler is able to capture both host and VM stacks, so"
" it can show the whole picture. Both C and Lua API’s are available for the "
"profiler. Profiler comes with the default parser, which produces output in a"
" ``flamegraph.pl``-suitable format. The following profiling modes are "
"available:"
msgstr ""

msgid "Default: only virtual machine state counters."
msgstr ""

msgid "Leaf: shows the last frame on the stack."
msgstr ""

msgid "Callchain: performs a complete stack dump."
msgstr ""

msgid "Lua"
msgstr ""

msgid ""
"Introduced the new method ``table.equals``. It compares two tables by value "
"and respects the ``__eq`` metamethod."
msgstr ""

msgid ""
"Added support of console autocompletion for ``net.box`` objects ``stream`` "
"and ``future`` (:tarantool-issue:`6305`)."
msgstr ""

msgid ""
"Added the ``box.runtime.info().tuple`` metric to track the amount of memory "
"occupied by tuples allocated on runtime arena (:tarantool-issue:`5872`)."
msgstr ""

msgid ""
"It does not count tuples that arrive from memtx or vinyl but counts tuples "
"created on-the-fly: say, using ``box.tuple.new(<...>)``."
msgstr ""

msgid "Datetime"
msgstr ""

msgid ""
"Added a new built-in module ``datetime.lua`` that allows operating "
"timestamps and intervals values (:tarantool-issue:`5941`)."
msgstr ""

msgid ""
"Added the method to allow converting string literals in extended iso-8601 or"
" rfc3339 formats (:tarantool-issue:`6731`)."
msgstr ""

msgid ""
"Extended the range of supported years in all parsers to cover fully "
"-5879610-06-22..5879611-07-11 (:tarantool-issue:`6731`)."
msgstr ""

msgid ""
"Datetime interval support has been reimplemented in C to make possible "
"future Olson/tzdata and SQL extensions (:tarantool-issue:`6923`)."
msgstr ""

msgid ""
"Now all components of the interval values are kept and operated separately "
"(years, months, weeks, days, hours, seconds, and nanoseconds). This allows "
"applying date/time arithmetic correctly when we add/subtract intervals to "
"datetime values."
msgstr ""

msgid ""
"Extended datetime literal parser with the ability to handle known timezone "
"abbreviations (‘MSK’, ‘CET’, etc.) which are deterministically translated to"
" their offset (:tarantool-issue:`5941`, :tarantool-issue:`6751`)."
msgstr ""

msgid ""
"Timezone abbreviations can be used in addition to the timezone offset in the"
" datetime literals. For example, these literals produce equivalent datetime "
"values:"
msgstr ""

#, python-format
msgid ""
"local date = require('datetime')\n"
"local d1 = date.parse('2000-01-01T02:00:00+0300')\n"
"local d2 = date.parse('2000-01-01T02:00:00 MSK')\n"
"local d3 = date.parse('2000-01-01T02:00:00 MSK', {format = '%FT%T %Z'})"
msgstr ""

msgid ""
"Parser fails if one uses ambiguous names (for example, ‘AT’) which could not"
" be directly translated into timezone offsets."
msgstr ""

msgid ""
"Enabled support for timezone names in the constructor and ``date:set{}`` "
"modifier via ``tz`` attribute. Currently, only timezone name abbreviations "
"are supported (:tarantool-issue:`7076`)."
msgstr ""

msgid ""
"Timezone abbreviations can be used in addition to the timezone offset. They "
"can be used during constructing or modifying a date object, or while parsing"
" datetime literals. Numeric time offsets and named abbreviations produce "
"equivalent datetime values:"
msgstr ""

msgid ""
"local date = require('datetime')\n"
"local d2 = date.parse('2000-01-01T02:00:00 MSK')\n"
"\n"
"local d1 = date.new{year = 1980, tz = 'MSK'}\n"
"d2 = date.new{year = 1980, tzoffset = 180}\n"
"d2:set{tz = 'MSK'}"
msgstr ""

msgid ""
"Note that the timezone name parser fails if one uses ambiguous names, which "
"could not be translated into timezone offsets directly (for example, ‘AT’)."
msgstr ""

msgid "Digest"
msgstr ""

msgid ""
"Introduced new hash types in digest module -- ``xxhash32`` and ``xxhash64`` "
"(:tarantool-issue:`2003`)."
msgstr ""

msgid "Fiber"
msgstr ""

msgid ""
"Introduced ``fiber_object:info()`` to get ``info`` from fiber. Works as "
"``require('fiber').info()`` but only for one fiber."
msgstr ""

msgid ""
"Introduced ``fiber_object:csw()`` to get ``csw`` from fiber (:tarantool-"
"issue:`5799`)."
msgstr ""

msgid ""
"Changed ``fiber.info()`` to hide backtraces of idle fibers (:tarantool-"
"issue:`4235`)."
msgstr ""

msgid ""
"Improved fiber ``fiber.self()``, ``fiber.id()`` and ``fiber.find()`` "
"performance by 2-3 times."
msgstr ""

msgid "Log"
msgstr ""

msgid ""
"Implemented support of symbolic log levels representation in ``log`` module "
"(:tarantool-issue:`5882`). Now it is possible to specify levels the same way"
" as in ``box.cfg{}`` call."
msgstr ""

msgid "For example, instead of"
msgstr ""

msgid "require('log').cfg{level = 6}"
msgstr ""

msgid "one can use"
msgstr ""

msgid "require('log').cfg{level = 'verbose'}"
msgstr ""

msgid "Msgpack"
msgstr ""

msgid ""
"Added the ``msgpack.object`` container for marshaling arbitrary MsgPack data"
" (:tarantool-issue:`1629`, :tarantool-issue:`3349`, :tarantool-issue:`3909`,"
" :tarantool-issue:`4861`, :tarantool-issue:`5316`)."
msgstr ""

msgid "Netbox"
msgstr ""

msgid ""
"Added the ``return_raw`` net.box option for returning ``msgpack.object`` "
"instead of decoding the response (:tarantool-issue:`4861`)."
msgstr ""

msgid "Schema"
msgstr ""

msgid ""
"``is_multikey`` option may now be passed to ``box.schema.func.create`` "
"directly, without ``opts`` sub-table."
msgstr ""

msgid "SQL"
msgstr ""

msgid ""
"Descriptions of type mismatch error and inconsistent type error became more "
"informative (:tarantool-issue:`6176`)."
msgstr ""

msgid ""
"Removed explicit cast from ``BOOLEAN`` to numeric types and vice versa "
"(:tarantool-issue:`4770`)."
msgstr ""

msgid ""
"Removed explicit cast from ``VARBINARY`` to numeric types and vice versa "
"(:tarantool-issue:`4772`, :tarantool-issue:`5852`)."
msgstr ""

msgid ""
"Fixed a bug due to which a string that is not ``NULL``-terminated could not "
"be cast to ``BOOLEAN``, even if the conversion should be successful "
"according to the rules."
msgstr ""

msgid ""
"Now a numeric value can be cast to another numeric type only if the cast is "
"precise. In addition, a ``UUID`` value cannot be implicitly cast to "
"``STRING``/``VARBINARY``. Also, a ``STRING``/``VARBINARY`` value cannot be "
"implicitly cast to a ``UUID`` (:tarantool-issue:`4470`)."
msgstr ""

msgid ""
"Now any number can be compared to any other number, and values of any scalar"
" type can be compared to any other value of the same type. A value of a non-"
"numeric scalar type cannot be compared with a value of any other scalar type"
" (:tarantool-issue:`4230`)."
msgstr ""

msgid ""
"SQL built-in functions were removed from the ``_func`` system space "
"(:tarantool-issue:`6106`)."
msgstr ""

msgid ""
"Functions are now looked up first in SQL built-in functions and then in "
"user-defined functions."
msgstr ""

msgid ""
"Fixed incorrect error message in case of misuse of the function used to set "
"the default value."
msgstr ""

msgid ""
"The ``typeof()`` function with ``NULL`` as an argument now returns ``NULL`` "
"(:tarantool-issue:`5956`)."
msgstr ""

msgid ""
"The ``SCALAR`` and ``NUMBER`` types have been reworked in SQL. Now "
"``SCALAR`` values cannot be implicitly cast to any other scalar type, and "
"``NUMBER`` values cannot be implicitly cast to any other numeric type. This "
"means that arithmetic and bitwise operations and concatenation are no longer"
" allowed for ``SCALAR`` and ``NUMBER`` values. In addition, any ``SCALAR`` "
"value can now be compared with values of any other scalar type using the "
"``SCALAR`` rules (:tarantool-issue:`6221`)."
msgstr ""

msgid ""
"The ``DECIMAL`` field type is now available in SQL. Decimal can be "
"implicitly cast to and from ``INTEGER`` and ``DOUBLE``, it can participate "
"in arithmetic operations and comparison between ``DECIMAL``, and all other "
"numeric types are defined (:tarantool-issue:`4415`)."
msgstr ""

msgid ""
"The argument types of SQL built-in functions are now checked in most cases "
"during parsing. In addition, the number of arguments is now always checked "
"during parsing (:tarantool-issue:`6105`)."
msgstr ""

msgid "``DECIMAL`` values can now be bound in SQL (:tarantool-issue:`4717`)."
msgstr ""

msgid ""
"A value consisting of digits and a decimal point is now parsed as "
"``DECIMAL`` (:tarantool-issue:`6456`)."
msgstr ""

msgid ""
"The ``ANY`` field type is now available in SQL (:tarantool-issue:`3174`)."
msgstr ""

msgid ""
"Built-in SQL functions now work correctly with ``DECIMAL`` values "
"(:tarantool-issue:`6355`)."
msgstr ""

msgid ""
"The default type is now defined in case the argument type of an SQL built-in"
" function cannot be determined during parsing (:tarantool-issue:`4415`)."
msgstr ""

msgid ""
"The ``ARRAY`` field type is now available in SQL. The syntax has also been "
"implemented to allow the creation of ``ARRAY`` values (:tarantool-"
"issue:`4762`)."
msgstr ""

msgid ""
"User-defined aggregate functions are now available in SQL (:tarantool-"
"issue:`2579`)."
msgstr ""

msgid ""
"Introduced SQL built-in functions ``NOW()`` and ``DATE_PART()`` (:tarantool-"
"issue:`6773`)."
msgstr ""

msgid ""
"The left operand is now checked before the right operand in an arithmetic "
"operation. (:tarantool-issue:`6773`)."
msgstr ""

msgid ""
"The ``INTERVAL`` field type is introduced in SQL (:tarantool-issue:`6773`)."
msgstr ""

msgid ""
"Bitwise operations can now only accept ``UNSIGNED`` and positive ``INTEGER``"
" values (:tarantool-issue:`5364`)."
msgstr ""

msgid ""
"The ``MAP`` field type is now available in SQL. Also, the syntax has been "
"implemented to allow the creation of ``MAP`` values (:tarantool-"
"issue:`4763`)."
msgstr ""

msgid ""
"Introduced ``[]`` operator for ``MAP`` and ``ARRAY`` values (:tarantool-"
"issue:`6251`)."
msgstr ""

msgid "Box"
msgstr ""

msgid ""
"Public role now has read, write access on ``_session_settings`` space "
"(:tarantool-issue:`6310`)."
msgstr ""

msgid ""
"The ``INTERVAL`` field type is introduced to ``BOX`` (:tarantool-"
"issue:`6773`)."
msgstr ""

msgid ""
"The behavior of empty or nil ``select`` calls on user spaces was changed. A "
"critical log entry containing the current stack traceback is created upon "
"such function calls. The user can explicitly request a full scan though by "
"passing ``fullscan=true`` to ``select`` ’s ``options`` table argument, in "
"which case a log entry will not be created (:tarantool-issue:`6539`)."
msgstr ""

msgid ""
"Improved checking for dangerous ``select`` calls. The calls with ``offset + "
"limit <= 1000`` are now considered safe, which means a warning is not "
"issued. The ‘ALL’, ‘GE’, ‘GT’, ‘LE’, ‘LT’ iterators are now considered "
"dangerous by default even with the key present (:tarantool-issue:`7129`)."
msgstr ""

msgid ""
"Allowed using human-readable timezone names (for example, ‘Europe/Moscow’) "
"in datetime strings. Use IANA ``tzdata`` (Olson DB) for timezone-related "
"operations, such as DST-based timezone offset calculations (:tarantool-"
"issue:`6751`)."
msgstr ""

msgid ""
"The ``isdst`` field in the datetime object is now calculated correctly, "
"according to the IANA ``tzdata`` (aka Olson DB) rules for the given "
"date/time moment (:tarantool-issue:`6751`)."
msgstr ""

msgid ""
"The ``datetime`` module exports the bidirectional ``TZ`` array, which can be"
" used to translate the timezone index (``tzindex``) into timezone names, and"
" vice versa (:tarantool-issue:`6751`)."
msgstr ""

msgid ""
"Previously csw (Context SWitch) of a new fiber could be more than 0, now it "
"is always 0 (:tarantool-issue:`5799`)."
msgstr ""

msgid "Luarocks"
msgstr ""

msgid ""
"Set ``FORCE_CONFIG=false`` for luarocks config to allow loading project-side"
" ``.rocks/config-5.1.lua``."
msgstr ""

msgid "Xlog"
msgstr ""

msgid "Reduced snapshot verbosity (:tarantool-issue:`6620`)."
msgstr ""

msgid "Build"
msgstr ""

msgid "Support fedora-34 build (:tarantool-issue:`6074`)."
msgstr ""

msgid "Stopped support fedora-28 and fedora-29."
msgstr ""

msgid "Stopped support of Ubuntu Trusty (14.04) (:tarantool-issue:`6502`)."
msgstr ""

msgid ""
"Bumped Debian package compatibility level to 10 (:tarantool-issue:`5429`)."
msgstr ""

msgid ""
"Bumped minimal required debhelper to version 10 (except for Ubuntu Xenial)."
msgstr ""

msgid ""
"Removed Windows binaries from Debian source packages (:tarantool-"
"issue:`6390`)."
msgstr ""

msgid ""
"Bumped Debian control Standards-Version to 4.5.1 (:tarantool-issue:`6390`)."
msgstr ""

msgid ""
"Added bundling of libnghttp2 for bundled libcurl to support HTTP/2 for http "
"client. The CMake version requirement is updated from 3.2 to 3.3."
msgstr ""

msgid "Support fedora-35 build (:tarantool-issue:`6692`)."
msgstr ""

msgid ""
"Added bundling of GNU libunwind to support backtrace feature on AARCH64 "
"architecture and distributives that don’t provide libunwind package."
msgstr ""

msgid ""
"Re-enabled backtrace feature for all RHEL distributions by default, except "
"for AARCH64 architecture and ancient GCC versions, which lack compiler "
"features required for backtrace (:tarantool-issue:`4611`)."
msgstr ""

msgid "Updated ``libicu`` version to 71.1 for static build."
msgstr ""

msgid ""
"Bumped OpenSSL from 1.1.1f to 1.1.1n for static build (:tarantool-"
"issue:`6947`)."
msgstr ""

msgid "Updated libcurl to version 7.83.0 (:tarantool-issue:`6029`)."
msgstr ""

msgid "Support Fedora-36 build."
msgstr ""

msgid "Support Ubuntu Jammy (22.04) build."
msgstr ""

msgid "Bugs fixed"
msgstr ""

msgid ""
"**[Breaking change]** ``fiber.wakeup()`` in Lua and ``fiber_wakeup()`` in C "
"became NOP on the currently running fiber."
msgstr ""

msgid ""
"Previously they allowed ignoring the next yield or sleep, which resulted in "
"unexpected erroneous wake-ups. Calling these functions right before "
"``fiber.create()`` in Lua or ``fiber_start()`` in C could lead to a crash "
"(in debug build) or undefined behaviour (in release build) (:tarantool-"
"issue:`6043`)."
msgstr ""

msgid ""
"There was a single use case for that—reschedule in the same event loop "
"iteration which is not the same as ``fiber.sleep(0)`` in Lua and "
"``fiber_sleep(0)`` in C. It could be done in the following way:"
msgstr ""

msgid "in C:"
msgstr ""

msgid ""
"fiber_wakeup(fiber_self());\n"
"fiber_yield();"
msgstr ""

msgid "in Lua:"
msgstr ""

msgid ""
"fiber.self():wakeup()\n"
"fiber.yield()"
msgstr ""

msgid ""
"To get the same effect in C, one can use ``fiber_reschedule()``. In Lua, it "
"is now impossible to reschedule the current fiber directly in the same event"
" loop iteration. One can reschedule self through a second fiber, but it is "
"strongly discouraged:"
msgstr ""

msgid ""
"local self = fiber.self()\n"
"fiber.new(function() self:wakeup() end)\n"
"fiber.sleep(0)"
msgstr ""

msgid ""
"Fixed memory leak on each ``box.on_commit()`` and ``box.on_rollback()`` "
"(:tarantool-issue:`6025`)."
msgstr ""

msgid ""
"Fixed the lack of testing for non-joinable fibers in ``fiber_join()`` call. "
"This could lead to unpredictable results. Note the issue affects C level "
"only, in Lua interface ``fiber:join()`` the protection is turned on already."
msgstr ""

msgid ""
"Now Tarantool yields when scanning ``.xlog`` files for the latest applied "
"vclock and when finding the right place in ``.xlog``\\ s to start "
"recovering. This means that the instance is responsive right after "
"``box.cfg`` call even when an empty ``.xlog`` was not created on the "
"previous exit. Also, this prevents the relay from timing out when a freshly "
"subscribed replica needs rows from the end of a relatively long (hundreds of"
" MBs) ``.xlog`` (:tarantool-issue:`5979`)."
msgstr ""

msgid ""
"The counter in ``x.yM rows processed`` log messages does not reset on each "
"new recovered ``xlog`` anymore."
msgstr ""

msgid ""
"Fixed wrong type specification when printing fiber state change which led to"
" negative fiber’s ID logging (:tarantool-issue:`5846`)."
msgstr ""

msgid "For example,"
msgstr ""

msgid "main/-244760339/cartridge.failover.task I> Instance state changed"
msgstr ""

msgid "instead of proper"
msgstr ""

msgid "main/4050206957/cartridge.failover.task I> Instance state changed"
msgstr ""

msgid ""
"Fiber IDs were switched to monotonically increasing unsigned 8-byte integers"
" so that there would not be IDs wrapping anymore. This allows detecting "
"fiber’s precedence by their IDs if needed (:tarantool-issue:`5846`)."
msgstr ""

msgid ""
"Fixed a crash in JSON update on tuple/space when it had more than one "
"operation, they accessed fields in reversed order, and these fields did not "
"exist. Example: ``box.tuple.new({1}):update({{'=', 4, 4}, {'=', 3, 3}})`` "
"(:tarantool-issue:`6069`)."
msgstr ""

msgid ""
"Fixed invalid results produced by the ``json`` module’s ``encode`` function "
"when it was used from Lua’s garbage collector. For instance, in functions "
"used as ``ffi.gc()`` (:tarantool-issue:`6050`)."
msgstr ""

msgid ""
"Added check for user input of the number of iproto threads—value must be > 0"
" and less than or equal to 1000 (:tarantool-issue:`6005`)."
msgstr ""

msgid ""
"Fixed error related to the fact that if a user changed the listen address, "
"all iproto threads closed the same socket multiple times."
msgstr ""

msgid ""
"Fixed error related to Tarantool not deleting the unix socket path when the "
"work is finished."
msgstr ""

msgid ""
"Fixed a crash in MVCC during simultaneous update of a key in different "
"transactions (:tarantool-issue:`6131`)."
msgstr ""

msgid ""
"Fixed a bug when memtx MVCC crashed during reading uncommitted DDL "
"(:tarantool-issue:`5515`)."
msgstr ""

msgid ""
"Fixed a bug when memtx MVCC crashed if an index was created in the "
"transaction (:tarantool-issue:`6137`)."
msgstr ""

msgid ""
"Fixed segmentation fault with MVCC when an entire space was updated "
"concurrently (:tarantool-issue:`5892`)."
msgstr ""

msgid ""
"Fixed a bug with failed assertion after stress update of the same key "
"(:tarantool-issue:`6193`)."
msgstr ""

msgid ""
"Fixed a crash that happened when a user called ``box.snapshot`` during an "
"incomplete transaction (:tarantool-issue:`6229`)."
msgstr ""

msgid ""
"Fixed console client connection breakage if request times out (:tarantool-"
"issue:`6249`)."
msgstr ""

msgid ""
"Added missing broadcast to ``net.box.future:discard()``. Now fibers waiting "
"for a request result are woken up when the request is discarded (:tarantool-"
"issue:`6250`)."
msgstr ""

msgid ""
"``box.info.uuid``, ``box.info.cluster.uuid``, and ``tostring(decimal)`` with"
" any decimal number in Lua sometimes could return garbage if ``__gc`` "
"handlers were used in the user’s code (:tarantool-issue:`6259`)."
msgstr ""

msgid ""
"Fixed the error message that happened in a very specific case during MVCC "
"operation (:tarantool-issue:`6247`)."
msgstr ""

msgid ""
"Fixed a repeatable read violation after delete (:tarantool-issue:`6206`)."
msgstr ""

msgid ""
"Fixed a bug when hash ``select{}`` was not tracked by MVCC engine "
"(:tarantool-issue:`6040`)."
msgstr ""

msgid ""
"Fixed a crash in MVCC after the drop of a space with several indexes "
"(:tarantool-issue:`6274`)."
msgstr ""

msgid ""
"Fixed a bug when GC at some state could leave tuples in secondary indexes "
"(:tarantool-issue:`6234`)."
msgstr ""

msgid ""
"Disallowed yields after DDL operations in MVCC mode. It fixes a crash which "
"takes place in case several transactions refer to system spaces (:tarantool-"
"issue:`5998`)."
msgstr ""

msgid ""
"Fixed a bug in MVCC connected which happened on a rollback after DDL "
"operation (:tarantool-issue:`5998`)."
msgstr ""

msgid ""
"Fixed a bug when rollback resulted in unserializable behaviour (:tarantool-"
"issue:`6325`)."
msgstr ""

msgid ""
"At the moment, when a ``net.box`` connection is closed, all requests that "
"have not been sent will be discarded. This patch fixes this behavior: all "
"requests queued for sending before the connection is closed are guaranteed "
"to be sent (:tarantool-issue:`6338`)."
msgstr ""

msgid ""
"Fixed a crash during replace of malformed tuple into ``_schema`` system "
"space (:tarantool-issue:`6332`)."
msgstr ""

msgid ""
"Fixed dropping incoming messages when the connection is closed or "
"``SHUT_RDWR`` received and ``net_msg_max`` or readahead limit is reached "
"(:tarantool-issue:`6292`)."
msgstr ""

msgid ""
"Fixed memory leak in case of replace during background alter of the primary "
"index (:tarantool-issue:`6290`)."
msgstr ""

msgid ""
"Fixed a bug when rolled back changes appear in the built-in-background index"
" (:tarantool-issue:`5958`)."
msgstr ""

msgid ""
"Fixed a crash while encoding an error object in the MsgPack format "
"(:tarantool-issue:`6431`)."
msgstr ""

msgid ""
"Fixed a bug when an index was inconsistent after background build in case "
"the primary index was hash (:tarantool-issue:`5977`)."
msgstr ""

msgid ""
"Now inserting a tuple with the wrong ``id``` field into the ``_priv`` space "
"returns the correct error (:tarantool-issue:`6295`)."
msgstr ""

msgid ""
"Fixed dirty read in MVCC after space alter (:tarantool-issue:`6263`, "
":tarantool-issue:`6318`)."
msgstr ""

msgid ""
"Fixed a crash in case the fiber changing ``box.cfg.listen`` is woken up "
"(:tarantool-issue:`6480`)."
msgstr ""

msgid ""
"Fixed ``box.cfg.listen`` not reverted to the old address in case the new one"
" is invalid (:tarantool-issue:`6092`)."
msgstr ""

msgid ""
"Fixed a crash caused by a race between ``box.session.push()`` and closing "
"connection (:tarantool-issue:`6520`)."
msgstr ""

msgid ""
"Fixed a bug because of which the garbage collector could remove an ``xlog`` "
"file that was still in use (:tarantool-issue:`6554`)."
msgstr ""

msgid ""
"Fixed crash during granting privileges from guest (:tarantool-issue:`5389`)."
msgstr ""

msgid ""
"Fixed an error in listening when the user passed uri in numerical form after"
" listening unix socket (:tarantool-issue:`6535`)."
msgstr ""

msgid ""
"Fixed a crash that could happen in case a tuple is deleted from a functional"
" index while there is an iterator pointing to it (:tarantool-issue:`6786`)."
msgstr ""

msgid "Fixed memory leak in interactive console (:tarantool-issue:`6817`)."
msgstr ""

msgid ""
"Fixed an assertion fail when passing a tuple without primary key fields to "
"``before_replace`` trigger. Now tuple format is checked before execution of "
"``before_replace`` triggers and after each one (:tarantool-issue:`6780`)."
msgstr ""

msgid ""
"Banned DDL operations in space ``on_replace`` triggers, since they could "
"lead to a crash (:tarantool-issue:`6920`)."
msgstr ""

msgid ""
"Implemented constraints and foreign keys. Now users can create function "
"constraints and foreign key relations (:tarantool-issue:`6436`)."
msgstr ""

msgid ""
"Fixed a bug due to which all fibers created with "
"``fiber_attr_setstacksize()`` leaked until the thread exit. Their stacks "
"also leaked except when ``fiber_set_joinable(..., true)`` was used."
msgstr ""

msgid ""
"Fixed a crash in MVCC related to a secondary index conflict (:tarantool-"
"issue:`6452`)."
msgstr ""

msgid ""
"Fixed a bug which resulted in wrong space count (:tarantool-issue:`6421`)."
msgstr ""

msgid ""
"``SELECT`` in RO transaction now reads confirmed data, like a standalone "
"(autocommit) ``SELECT`` does (:tarantool-issue:`6452`)."
msgstr ""

msgid ""
"Fixed a crash when Tarantool was launched with multiple ``-e`` or ``-l`` "
"options without a space between the option and the value (:tarantool-"
"issue:`5747`)."
msgstr ""

msgid ""
"Fixed effective session and user not propagated to ``box.on_commit`` and "
"``box.on_rollback`` trigger callbacks (:tarantool-issue:`7005`)."
msgstr ""

msgid ""
"Fixed usage of ``box.session.peer()`` in ``box.session.on_disconnect()`` "
"trigger. Now it’s safe to assume that ``box.session.peer()`` returns the "
"address of the disconnected peer, not nil, as it used to (:tarantool-"
"issue:`7014`)."
msgstr ""

msgid ""
"Fixed creation of a space with a foreign key pointing to the same space "
"(:tarantool-issue:`6961`)."
msgstr ""

msgid ""
"Fixed a bug when MVCC failed to track nothing-found range ``select`` "
"(:tarantool-issue:`7025`)."
msgstr ""

msgid ""
"Allowed complex foreign keys with NULL fields (:tarantool-issue:`7046`)."
msgstr ""

msgid ""
"Added decoding of election messages: ``RAFT`` and ``PROMOTE`` to ``xlog`` "
"Lua module (:tarantool-issue:`6088`). Otherwise ``tarantoolctl`` shows plain"
" number in ``type``"
msgstr ""

msgid ""
"HEADER:\n"
"  lsn: 1\n"
"  replica_id: 4\n"
"  type: 31\n"
"  timestamp: 1621541912.4592"
msgstr ""

msgid "instead of symbolic representation"
msgstr ""

msgid ""
"HEADER:\n"
"  lsn: 1\n"
"  replica_id: 4\n"
"  type: PROMOTE\n"
"  timestamp: 1621541912.4592"
msgstr ""

msgid ""
"**[Breaking change]** Return value signedness of 64-bit time functions in "
"``clock`` and ``fiber`` was changed from ``uint64_t`` to ``int64_t`` both in"
" Lua and C (:tarantool-issue:`5989`)."
msgstr ""

msgid ""
"Fixed reversed iterators gap tracking. Instead of tracking gaps for the "
"successors of keys, gaps for tuples shifted by one to the left of the "
"successor were tracked (:tarantool-issue:`7113`)."
msgstr ""

msgid ""
"Now memtx raises an error if the “clear” dictionary is passed to "
"``s:select()`` (:tarantool-issue:`6167`)."
msgstr ""

msgid ""
"Fixed MVCC transaction manager story garbage collection breaking memtx TREE "
"index iterator (:tarantool-issue:`6344`)."
msgstr ""

msgid ""
"Fixed possible keys divergence during secondary index build, which might "
"lead to missing tuples (:tarantool-issue:`6045`)."
msgstr ""

msgid ""
"Fixed the race between Vinyl garbage collection and compaction that resulted"
" in a broken vylog and recovery failure (:tarantool-issue:`5436`)."
msgstr ""

msgid ""
"Immediate removal of compacted run files created after the last checkpoint "
"optimization now works for replica’s initial JOIN stage (:tarantool-"
"issue:`6568`)."
msgstr ""

msgid ""
"Fixed crash during recovery of a secondary index in case the primary index "
"contains incompatible phantom tuples (:tarantool-issue:`6778`)."
msgstr ""

msgid ""
"Fixed the use after free in the relay thread when using elections "
"(:tarantool-issue:`6031`)."
msgstr ""

msgid ""
"Fixed a possible crash when a synchronous transaction was followed by an "
"asynchronous transaction right when its confirmation was being written "
"(:tarantool-issue:`6057`)."
msgstr ""

msgid ""
"Fixed an error where a replica, while attempting to subscribe to a foreign "
"cluster with a different replicaset UUID, did not notice it is impossible "
"and instead became stuck in an infinite retry loop printing a "
"``TOO_EARLY_SUBSCRIBE`` error (:tarantool-issue:`6094`)."
msgstr ""

msgid ""
"Fixed an error where a replica, while attempting to join a cluster with "
"exclusively read-only replicas available, just booted its own replicaset, "
"instead of failing or retrying. Now it fails with an error about the other "
"nodes being read-only so they can’t register the new replica (:tarantool-"
"issue:`5613`)."
msgstr ""

msgid ""
"Fixed error reporting associated with transactions received from remote "
"instances via replication. Any error raised while such a transaction was "
"being applied was always reported as ``Failed to write to disk`` regardless "
"of what really happened. Now the correct error is shown. For example, ``Out "
"of memory``, or ``Transaction has been aborted by conflict``, and so on "
"(:tarantool-issue:`6027`)."
msgstr ""

msgid ""
"Fixed replication stopping occasionally with ``ER_INVALID_MSGPACK`` when "
"replica is under high load (:tarantool-issue:`4040`)."
msgstr ""

msgid ""
"Fixed a cluster that sometimes could not bootstrap if it contained nodes "
"with ``election_mode`` ``manual`` or ``voter`` (:tarantool-issue:`6018`)."
msgstr ""

msgid ""
"Fixed a possible crash when ``box.ctl.promote()`` was called in a cluster "
"with >= 3 instances, happened in debug build. In release build, it could "
"lead to undefined behavior. It was likely to happen if a new node was added "
"shortly before the promotion (:tarantool-issue:`5430`)."
msgstr ""

msgid ""
"Fixed a rare error appearing when MVCC (``box.cfg.memtx_use_mvcc_engine``) "
"was enabled and more than one replica was joined to a cluster. The join "
"could fail with the error ``\"ER_TUPLE_FOUND: Duplicate key exists in unique"
" index 'primary' in space '_cluster'\"``. The same could happen at the "
"bootstrap of a cluster having >= 3 nodes (:tarantool-issue:`5601`)."
msgstr ""

msgid ""
"Fixed replica reconnecting to a living master on any "
"``box.cfg{replication=...}`` change. Such reconnects could lead to replica "
"failing to restore connection for ``replication_timeout`` seconds "
"(:tarantool-issue:`4669`)."
msgstr ""

msgid ""
"Fixed potential obsolete data write in synchronous replication due to race "
"in accessing terms while disk write operation is in progress and not yet "
"completed."
msgstr ""

msgid ""
"Fixed replicas failing to bootstrap when the master has just restarted "
"(:tarantool-issue:`6966`)."
msgstr ""

msgid ""
"Fixed a bug when replication was broken on the master side with "
"``ER_INVALID_MSGPACK`` (:tarantool-issue:`7089`)."
msgstr ""

msgid ""
"Fixed ``box.ctl.promote()`` entering an infinite election loop when a node "
"does not have enough peers to win the elections (:tarantool-issue:`6654`)."
msgstr ""

msgid ""
"Servers with elections enabled will resign the leadership and become read-"
"only when the number of connected replicas becomes less than a quorum. This "
"should prevent split-brain in some situations (:tarantool-issue:`6661`)."
msgstr ""

msgid ""
"Fixed a rare crash with the leader election enabled (any mode except "
"``off``), which could happen if a leader resigned from its role at the same "
"time as some other node was writing something related to the elections to "
"WAL. The crash was in debug build. In the release build, it would lead to "
"undefined behavior (:tarantool-issue:`6129`)."
msgstr ""

msgid ""
"Fixed an error when a new replica in a Raft cluster could try to join from a"
" follower instead of a leader and failed with an error ``ER_READONLY`` "
"(:tarantool-issue:`6127`)."
msgstr ""

msgid ""
"Reconfiguration of ``box.cfg.election_timeout`` could lead to a crash or "
"undefined behavior if done during an ongoing election with a special WAL "
"write in progress."
msgstr ""

msgid ""
"Fixed several crashes and/or undefined behaviors (assertions in debug build)"
" which could appear when new synchronous transactions were made during "
"ongoing elections (:tarantool-issue:`6842`)."
msgstr ""

msgid ""
"Fixed optimization for single-char strings in the ``IR_BUFPUT`` assembly "
"routine."
msgstr ""

msgid ""
"Fixed slots alignment in ``lj-stack`` command output when ``LJ_GC64`` is "
"enabled (:tarantool-issue:`5876`)."
msgstr ""

msgid "Fixed dummy frame unwinding in ``lj-stack`` command."
msgstr ""

msgid ""
"Fixed top part of Lua stack (red zone, free slots, top slot) unwinding in "
"``lj-stack`` command."
msgstr ""

msgid "Added the value of ``g->gc.mmudata`` field to ``lj-gc`` output."
msgstr ""

msgid ""
"Fixed detection of inconsistent renames even in the presence of sunk values "
"(:tarantool-issue:`4252`, :tarantool-issue:`5049`, :tarantool-issue:`5118`)."
msgstr ""

msgid ""
"Fixed the order VM registers are allocated by LuaJIT frontend in case of "
"``BC_ISGE`` and ``BC_ISGT`` (:tarantool-issue:`6227`)."
msgstr ""

msgid ""
"Fixed inconsistency while searching for an error function when unwinding a "
"C-protected frame to handle a runtime error (an error in ``__gc`` handler)."
msgstr ""

msgid ""
"``string.char()`` builtin recording is fixed in case when no arguments are "
"given (:tarantool-issue:`6371`, :tarantool-issue:`6548`)."
msgstr ""

msgid ""
"Actually made JIT respect ``maxirconst`` trace limit while recording "
"(:tarantool-issue:`6548`)."
msgstr ""

msgid ""
"Fixed a bug when multibyte characters broke ``space:fselect()`` output."
msgstr ""

msgid ""
"When an error is raised during encoding call results, the auxiliary "
"lightuserdata value is not removed from the main Lua coroutine stack. Prior "
"to the fix, it leads to undefined behavior during the next usage of this Lua"
" coroutine (:tarantool-issue:`4617`)."
msgstr ""

msgid ""
"Fixed Lua C API misuse, when the error is raised during call results "
"encoding on unprotected coroutine and expected to be caught on the different"
" one that is protected (:tarantool-issue:`6248`)."
msgstr ""

msgid ""
"Fixed ``net.box`` error in case connections are frequently opened and closed"
" (:tarantool-issue:`6217`)."
msgstr ""

msgid ""
"Fixed incorrect handling of variable number of arguments in "
"``box.func:call()`` (:tarantool-issue:`6405`)."
msgstr ""

msgid ""
"Fixed ``table.equals`` result when booleans compared (:tarantool-"
"issue:`6386`)."
msgstr ""

msgid ""
"Tap subtests inherit strict mode from parent (:tarantool-issue:`6868`)."
msgstr ""

msgid ""
"Fixed the behavior of Tarantool console on ``SIGINT``. Now ``Ctrl+C`` "
"discards the current input and prints the new prompt (:tarantool-"
"issue:`2717`)."
msgstr ""

msgid "Triggers"
msgstr ""

msgid "Fixed the possibility of a crash in case when trigger removes itself."
msgstr ""

msgid ""
"Fixed the possibility of a crash in case someone destroys trigger when it’s "
"yielding (:tarantool-issue:`6266`)."
msgstr ""

msgid ""
"User-defined functions can now return ``VARBINARY`` to SQL as a result "
"(:tarantool-issue:`6024`)."
msgstr ""

msgid ""
"Fixed assert on a cast of ``DOUBLE`` value greater than -1.0 and less than "
"0.0 to ``INTEGER`` and ``UNSIGNED`` (:tarantool-issue:`6255`)."
msgstr ""

msgid ""
"Removed spontaneous conversion from ``INTEGER`` to ``DOUBLE`` in a field of "
"type ``NUMBER`` (:tarantool-issue:`5335`)."
msgstr ""

msgid ""
"All arithmetic operations can now only accept numeric values (:tarantool-"
"issue:`5756`)."
msgstr ""

msgid ""
"Now function ``quote()`` returns an argument in case the argument is "
"``DOUBLE``. The same for all other numeric types. For types other than "
"numeric, ``STRING`` is returned (:tarantool-issue:`6239`)."
msgstr ""

msgid ""
"The ``TRIM()`` function now does not lose collation when executed with the "
"keywords ``BOTH``, ``LEADING``, or ``TRAILING`` (:tarantool-issue:`6299`)."
msgstr ""

msgid ""
"Now getting unsupported msgpack extension in SQL throws the correct error "
"(:tarantool-issue:`6375`)."
msgstr ""

msgid ""
"Now, when copying an empty string, an error will not be set unnecessarily "
"(:tarantool-issue:`6157`, :tarantool-issue:`6399`)."
msgstr ""

msgid ""
"Fixed wrong comparison between ``DECIMAL`` and large ``DOUBLE`` values "
"(:tarantool-issue:`6376`)."
msgstr ""

msgid ""
"Fixed truncation of ``DECIMAL`` during implicit cast to ``INTEGER`` in "
"``LIMIT`` and ``OFFSET``."
msgstr ""

msgid ""
"Fixed truncation of ``DECIMAL`` during implicit cast to ``INTEGER`` when "
"value is used in an index."
msgstr ""

msgid ""
"Fixed assert on a cast of ``DECIMAL`` value that is greater than -1.0 and "
"less than 0.0 to ``INTEGER`` (:tarantool-issue:`6485`)."
msgstr ""

msgid ""
"The ``HEX()`` SQL built-in function no longer throws an assert when its "
"argument consists of zero-bytes (:tarantool-issue:`6113`)."
msgstr ""

msgid ""
"``LIMIT`` is now allowed in ``ORDER BY`` where sort order is in both "
"directions (:tarantool-issue:`6664`)."
msgstr ""

msgid ""
"Fixed a memory leak in SQL during calling of user-defined function "
"(:tarantool-issue:`6789`)."
msgstr ""

msgid ""
"Fixed assertion or segmentation fault when ``MP_EXT`` received via "
"``net.box`` (:tarantool-issue:`6766`)."
msgstr ""

msgid ""
"Now the ``ROUND()`` function properly supports ``INTEGER`` and ``DECIMAL`` "
"as the first argument (:tarantool-issue:`6988`)."
msgstr ""

msgid ""
"Fixed a crash when a table inserted data into itself with an incorrect "
"number of columns (:tarantool-issue:`7132`)."
msgstr ""

msgid ""
"Fixed ``log.cfg`` getting updated on ``box.cfg`` error (:tarantool-"
"issue:`6086`)."
msgstr ""

msgid ""
"Fixed the error message in an attempt to insert into a tuple the size of "
"which equals to ``box.schema.FIELD_MAX`` (:tarantool-issue:`6198`)."
msgstr ""

msgid ""
"We now check that all privileges passed to ``box.schema.grant`` are resolved"
" (:tarantool-issue:`6199`)."
msgstr ""

msgid ""
"Added iterator type checking and allow passing iterator as a "
"``box.index.{ALL,GT,...}`` directly (:tarantool-issue:`6501`)."
msgstr ""

msgid ""
"Intervals received after datetime arithmetic operations may be improperly "
"normalized if the result was negative"
msgstr ""

msgid ""
"tarantool> date.now() - date.now()\n"
"---\n"
"- -1.000026000 seconds\n"
"..."
msgstr ""

msgid ""
"It means that two immediately called ``date.now()`` produce very close "
"values, which difference should be close to 0, not 1 second (:tarantool-"
"issue:`6882`)."
msgstr ""

msgid ""
"Fixed a bug in datetime module when ``date:set{tzoffset=XXX}`` did not "
"produce the same result with ``date.new{tzoffset=XXX}`` for the same set of "
"attributes passed (:tarantool-issue:`6793`)."
msgstr ""

msgid "HTTP client"
msgstr ""

msgid "Fixed invalid headers after redirect (:tarantool-issue:`6101`)."
msgstr ""

msgid "Mvcc"
msgstr ""

msgid ""
"Fixed MVCC interaction with ephemeral spaces: TX manager now ignores such "
"spaces (:tarantool-issue:`6095`)."
msgstr ""

msgid ""
"Fixed a loss of tuple after a conflict exception (:tarantool-issue:`6132`)."
msgstr ""

msgid ""
"Fixed a segmentation fault in update/delete of the same tuple (:tarantool-"
"issue:`6021`)."
msgstr ""

msgid "Net.box"
msgstr ""

msgid ""
"Changed the type of the error returned by ``net.box`` on timeout from "
"ClientError to TimedOut (:tarantool-issue:`6144`)."
msgstr ""

msgid "Recovery"
msgstr ""

msgid ""
"When ``force_recovery`` cfg option is set, Tarantool is able to boot from "
"``snap``/``xlog`` combinations where ``xlog`` covers changes committed both "
"before and after ``snap`` creation. For example, ``0...0.xlog``, covering "
"everything up to ``vclock {1: 15}`` and ``0...09.snap``, corresponding to "
"``vclock {1: 9}`` (:tarantool-issue:`6794`)."
msgstr ""

msgid "Tarantoolctl"
msgstr ""

msgid ""
"Fixed the missing ``rocks`` keyword in ``tarantoolctl rocks`` help messages."
msgstr ""

msgid ""
"Bumped Debian packages tarantool-common dependency to use luarocks 3 "
"(:tarantool-issue:`5429`)."
msgstr ""

msgid ""
"Fixed an error when it was possible to have new Tarantool package (version "
">= 2.2.1) installed with pre-luarocks 3 tarantool-common package (version <<"
" 2.2.1), which caused rocks install to fail."
msgstr ""

msgid ""
"The Debian package does not depend on binutils anymore (:tarantool-"
"issue:`6699`)."
msgstr ""

msgid "Fixed build errors with glibc-2.34 (:tarantool-issue:`6686`)."
msgstr ""

msgid "Changed size of alt. signal stack for ASAN needs."
msgstr ""

msgid "Fixed build errors on arm64 with ``CMAKE_BUILD_TYPE=Debug``."
msgstr ""
