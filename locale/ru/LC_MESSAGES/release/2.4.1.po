
msgid "Tarantool 2.4.1"
msgstr ""

msgid "Date: 2020-04-20 Tag: 2.4.1-1-g6c75f80"
msgstr ""

msgid "Overview"
msgstr "Общие сведения"

msgid "2.4.1 is the beta version of the 2.4 release series."
msgstr ""

msgid ""
"This release introduces roughly 20 features and resolves 92 bugs since the "
"2.3.1 version. There may be bugs in less common areas. If you find any, feel"
" free to report an issue at `GitHub "
"<https://github.com/tarantool/tarantool/issues>`__."
msgstr ""

msgid "Notable changes are:"
msgstr ""

msgid "UUID type was introduced"
msgstr ""

msgid "It is now possible to report stack of errors"
msgstr ""

msgid "Added popen built-in module"
msgstr ""

msgid "Create errors of custom type and transparent marshaling over net.box"
msgstr ""

msgid "Compatibility"
msgstr "Совместимость"

msgid ""
"Tarantool 2.x is backward compatible with Tarantool 1.10.x in binary data "
"layout, client-server protocol and replication protocol."
msgstr ""

msgid ""
"Please `upgrade "
"<https://www.tarantool.io/en/doc/2.3/book/admin/upgrades/>`__ using the "
"box.schema.upgrade() procedure to unlock all the new features of the 2.x "
"series."
msgstr ""

msgid "Functionality added or changed"
msgstr "Изменения или добавления функциональности"

msgid "Core"
msgstr ""

msgid ""
"Possibility to create errors of a custom user type (gh-4398). Read more:"
msgstr ""

msgid ":ref:`box_protocol-responses_error`"
msgstr ""

msgid ":ref:`MessagePack extensions (ERROR type) <msgpack_ext-error>`"
msgstr ""

msgid ":doc:`/reference/reference_lua/box_error/new`."
msgstr ""

msgid "Transparent marshalling error through net.box (gh-4398). Read more:"
msgstr ""

msgid ":doc:`/reference/reference_lua/box_error/new`"
msgstr ""

msgid ":ref:`MessagePack extensions (ERROR type) <msgpack_ext-error>`."
msgstr ""

msgid ""
"``box_session_push()``: a new public C API function. It takes ``const char *"
" MessagePack`` and returns it to the client out of order, just like the Lua "
"``box.session.push()`` does (gh-4734). Read more: :ref:`box_session_push() "
"<box_box_session_push>`."
msgstr ""

msgid ""
"Introduce a new field type and a new index type: UUID (gh-4268, gh-2916). "
"Read more:"
msgstr ""

msgid ":ref:`UUID field type <index-box_uuid>`"
msgstr ""

msgid ":ref:`mapping UUID field to index types <box_space-index_field_types>`"
msgstr ""

msgid ":ref:`uuid.new() <uuid-new>`."
msgstr ""

msgid ""
"Add ability to encode/decode UUIDs to MsgPack (gh-4268, gh-2916). Read more:"
" :ref:`MessagePack extensions (UUID type) <msgpack_ext-uuid>`."
msgstr ""

msgid ""
"Introduce stacked diagnostic area: now each Lua table representing an error "
"object features the ``.prev`` member and the ``:set_prev()`` method so that "
"errors can be organized into lists. IProto protocol is extended with new "
"command keys to support this feature as well (gh-1148). For details, refer "
"to :doc:`/reference/reference_lua/box_error/error_object`."
msgstr ""

msgid "Lua"
msgstr "Lua"

msgid "Added ``popen`` built-in module (gh-4031)."
msgstr ""

msgid ""
"The module provides popen implementation that is integrated with tarantool’s"
" event loop (like built-in ``fio`` and ``socket`` modules)."
msgstr ""

msgid ""
"It support bidirectional communication with a process: the module can feed "
"input to a process and capture its output. This way it allows to run "
"streaming programs (like ``grep``) and even work interactively with outside "
"REPL (say, ``python -i``)."
msgstr ""

msgid ""
"A key feature of the implementation is that it uses vfork() under hood and "
"so does not copy virtual memory tables. Copying of them may be quite time "
"consuming: os.execute() takes ~2.5 seconds when 80 GiB is allocated for "
"memtx. Moreover, when memory overcommit is disabled (which is default) it "
"would be not possible to fork a process when more then half of available "
"physical memory is mapped to tarantool’s process."
msgstr ""

msgid ""
"The API should be considered as beta: it is quite basic and will be extended"
" with convenience features. On the other hand, it may be changed in a "
"backward-incompatible manner in the future releases if it will be valuable "
"enough."
msgstr ""

msgid ""
"For more details, refer to the ``popen`` module :doc:`documentation "
"</reference/reference_lua/popen>`."
msgstr ""

msgid ""
"``fio`` descriptors are closed on garbage collection (gh-4727). Read more in"
" description of :ref:`fio.open() <fio-open>`."
msgstr ""

msgid ""
":ref:`fio.tempdir() <fio-tempdir>` uses the ``$TMPDIR`` environment variable"
" as a path indication to create temporary directories (gh-4794)."
msgstr ""

msgid "Expose ``lua_checktuple`` function (gh-2553)."
msgstr ""

msgid ""
":ref:`fiber.name <fiber_object-name_set>` maximal length is extended to 255 "
"(gh-4394)."
msgstr ""

msgid ""
"Add ``tarantoolctl rocks`` commands: ``build``, ``config``, ``download``, "
"``init``, ``lint``, ``new_version``, ``purge``, ``which``, "
"``write_rockspec`` (gh-4629). Read more in :ref:`tarantoolctl-"
"module_management`."
msgstr ""

msgid "Misc"
msgstr "Разное"

msgid ""
"``box.info.listen``: a new variable in the ``box.info``. Shows the real port"
" when bound to the port ``0``. For example, if the ``listen`` parameter of "
"``box.cfg`` is set to ``127.0.0.1:0``, the ``box.info.listen`` shows "
"``127.0.0.1:<real_port>`` (gh-4620). Read more: "
":doc:`/reference/reference_lua/box_info/listen`."
msgstr ""

msgid ""
"``sequence:current()``: a new function to get the current sequence value "
"without changing it (gh-4752). Read more: "
":doc:`/reference/reference_lua/box_schema_sequence/current`."
msgstr ""

msgid "Bugs fixed"
msgstr "Исправленные ошибки"

msgid ""
":ref:`fiber.storage <fiber_object-storage>` is cleaned between requests, and"
" can be used as a request-local storage. Previously ``fiber.storage`` could "
"contain some old values in the beginning of an iproto request execution, and"
" it needed to be nullified manually. Now the cleanup is unneeded (gh-4662)."
msgstr ""

msgid ""
"``tuple``/``space``/``index``:``update()``/``upsert()`` were fixed not to "
"turn a value into an infinity when a float value was added to or subtracted "
"from a float column and exceeded the float value range (gh-4701)."
msgstr ""

msgid ""
"Fix potential execution abort when operating the system runs under heavy "
"memory load (gh-4722)."
msgstr ""

msgid ""
"Make RTREE indexes handle the out of memory error: before this fix, OOM "
"during the recovery of an RTREE index resulted in segmentation fault "
"(gh-4619)."
msgstr ""

msgid ""
"Fix the error message returned on using an already dropped sequence "
"(gh-4753)."
msgstr ""

msgid "Add cancellation guard to avoid WAL thread stuck (gh-4127)."
msgstr ""

msgid ""
"Fix execution abort when ``memtx_memory`` and ``vinyl_memory`` are set to "
"more than 4398046510080 bytes. Now an error message is returned (gh-4705)."
msgstr ""

msgid ""
"``box.error.new()`` doesn’t add a created error to the Tarantool’s "
"diagnostic area anymore (gh-4778). Read more:"
msgstr ""

msgid ":doc:`/reference/reference_lua/box_error/set`."
msgstr ""

msgid "Add Lua output format support for ``box.session.push()`` (gh-4686)."
msgstr ""

msgid "Replication"
msgstr "Репликация"

msgid ""
"Fix rebootstrap procedure not working in case replica itself is listed in "
"``box.cfg.replication`` (gh-4759)."
msgstr ""

msgid "Fix possible user password leaking via replication logs (gh-4493)."
msgstr ""

msgid ""
"Refactor ``vclock`` map to be exactly 4 bytes in size to fit all 32 replicas"
" regardless of the compiler used (see in this `commit "
"<https://github.com/tarantool/tarantool/commit/e5679980aa5f813553a95ab7d31f111dd0893df6>`__)."
msgstr ""

msgid ""
"Fix crash when the replication applier rollbacks a transaction (gh-4730, "
"gh-4776)."
msgstr ""

msgid ""
"Fix segmentation fault on master side when one of the replicas transitions "
"from anonymous to normal (gh-4731)."
msgstr ""

msgid ""
"Local space operations are now counted in 0th vclock component. Every "
"instance may have its own 0-th vclock component not matching others’. Local "
"space operations are not replicated at all, even as NOPs (gh-4114)."
msgstr ""

msgid ""
"Gc consumers are now ordered by their vclocks and not by vclock signatures. "
"Only the WALS that contain no entries needed by any of the consumers are "
"deleted (gh-4114)."
msgstr ""

msgid ""
"json: ``:decode()`` doesn’t spoil instance’s options with per-call ones "
"(when it is called with the second argument) (gh-4761)."
msgstr ""

msgid "Handle empty input for ``uri.format()`` properly (gh-4779)."
msgstr ""

msgid ""
"``os.environ()`` is now changed when ``os.setenv()`` is called (gh-4733)."
msgstr ""

msgid ""
"``netbox.self:call/eval()`` now returns the same types as "
"``netbox_connection:call``/``eval``. Previously it could return a tuple or "
"``box.error`` cdata (gh-4513)."
msgstr ""

msgid ""
"``box.tuple.*`` namespace is cleaned up from private functions. "
":doc:`/reference/reference_lua/box_tuple/is` description is added to "
"documentation (gh-4684)."
msgstr ""

msgid "``tarantoolctl rocks search``: fix the ``--all`` flag (gh-4529)."
msgstr ""

msgid "``tarantoolctl rocks remove``: fix the ``--force`` flag (gh-3632)."
msgstr ""

msgid ""
"libev: backport fix for listening for more then 1024 file descriptors on Mac"
" OS (gh-3867)."
msgstr ""

msgid "SQL"
msgstr ""

msgid ""
"Fix ``box.stat()`` behavior: now it collects statistics on the ``PREPARE`` "
"and ``EXECUTE`` methods as expected (gh-4756)."
msgstr ""

msgid ""
"Add ability to drop any table constraint using the following statement: "
"``ALTER TABLE  <table_name> DROP CONSTRAINT <constraint_name>``. Previously,"
" it was possible to drop only foreign key constraints with such a statement "
"(gh-4120). Read more in :ref:`<sql_alter_table>`."
msgstr ""

msgid ""
"“No such constraint” error now contains the name of the table this "
"constraint belongs to."
msgstr ""

msgid "Add an empty body to the ``UNPREPARE`` IProto response (gh-4769)."
msgstr ""

msgid ""
"Reset all the placeholders’ bound values after execution of a prepared "
"statement (gh-4825)."
msgstr ""

msgid ""
"The inserted values are inserted in the order in which they are given in "
"case of INSERT into space with autoincrement (gh-4256)."
msgstr ""

msgid "Types related changes"
msgstr ""

msgid ""
"Rework the ``NUMBER`` type in SQL: now it completely matches with NoSQL "
"definition. Integers inserted into a field of the ``NUMBER`` type are no "
"longer forced to floating point representation; ``CAST AS NUMBER`` operation"
" applied to an integer value doesn’t change it; ``CAST AS NUMBER`` operation"
" applied to a boolean value now converts it into ``1``, ``0`` or ``NULL`` "
"depending on particular boolean value (gh-4233). Read more in "
":ref:`<sql_data_type_conversion>`."
msgstr ""

msgid ""
"Fix the ``CAST AS NUMBER`` operation applied to blob values: floating point "
"representation of the result is no longer forced (gh-4463)."
msgstr ""

msgid ""
"Fix integer overflow error during addition of the integer and floating point"
" values stored in the ``SCALAR`` column (gh-4369)."
msgstr ""

msgid ""
"Explicit and implicit cast from string containing floating point value to "
"integer or unsigned types are disallowed."
msgstr ""

msgid ""
"Maximum length of a blob value that is allowed to be cast to integer or "
"unsigned types are limited to 12287 bytes."
msgstr ""

msgid ""
"Fix wrong result of CAST() operator from blob to integer type in case a blob"
" value does not have terminating ‘\\\\0’ (gh-4766)."
msgstr ""

msgid "HTTP client"
msgstr ""

msgid ""
"When building Tarantool with bundled ``libcurl``, link it with the "
"``c-ares`` library by default (gh-4591)."
msgstr ""

msgid "LuaJIT"
msgstr ""

msgid ""
"``__pairs``/``__ipairs`` metamethods handling is removed since we faced the "
"issues with the backward compatibility between Lua 5.1 and Lua 5.2 within "
"Tarantool modules as well as other third party code (gh-4770)."
msgstr ""

msgid ""
"Introduce ``luajit-gdb.py`` extension with commands for inspecting LuaJIT "
"internals. The extension obliges one to provide gdbinfo for ``libluajit``, "
"otherwise loading fails. The extension provides the following commands:"
msgstr ""

msgid "``lj-arch`` dumps values of LJ_64 and LJ_GC64 macro definitions"
msgstr ""

msgid "``lj-tv`` dumps the type and GCobj info related to the given TValue"
msgstr ""

msgid "``lj-str`` dumps the contents of the given GCstr"
msgstr ""

msgid "``lj-tab`` dumps the contents of the given GCtab"
msgstr ""

msgid "``lj-stack`` dumps Lua stack of the given lua_State"
msgstr ""

msgid "``lj-state`` shows current VM, GC and JIT states"
msgstr ""

msgid "``lj-gc`` shows current GC stats"
msgstr ""

msgid ""
"Fix string to number conversion: current implementation respects the buffer "
"length (gh-4773)."
msgstr ""

msgid ""
"“FFI sandwich” (\\*) detection is introduced. If sandwich is detected while "
"trace recording the recording is aborted. The sandwich detected while mcode "
"execution leads to the platform panic."
msgstr ""

msgid ""
"luaJIT_setmode call is prohibited while mcode execution and leads to the "
"platform panic."
msgstr ""

msgid ""
"(\\*) The following stack mix is called FFI sandwich: ``Lua-FFI -> C routine"
" -> Lua-C API -> Lua VM``."
msgstr ""

msgid ""
"This sort of re-entrancy is explicitly not supported by LuaJIT compiler. For"
" more info see gh-4427."
msgstr ""

msgid "Vinyl"
msgstr "Vinyl"

msgid ""
"Fix assertion fault due to triggered dump process during secondary index "
"build (gh-4810)."
msgstr ""

msgid ""
"Fix crashes at attempts to use ``-e`` and ``-l`` command line options "
"concatenated with their values, like this: ``-eprint(100)`` (gh-4775)."
msgstr ""

msgid ""
"Fix inability to upgrade from 2.1 if there was an automatically generated "
"sequence (gh-4771)."
msgstr ""

msgid ""
"Prettify the error message for ``user.grant()``: no extra ’ ’ for universal "
"privileges (gh-714)."
msgstr ""

msgid ""
"Update ``libopenssl`` version to 1.1.1f since the previous one was EOLed "
"(gh-4830)."
msgstr ""

msgid "Building from sources"
msgstr ""

msgid ""
"Update the ``decNumber`` library to silence the build warning produced on "
"too long integer constant (see in this `commit "
"<https://github.com/tarantool/tarantool/commit/aab03a735c7a215b4371ef834f7d08432b1bf0f7>`__)."
msgstr ""

msgid ""
"Fix static build (``-DBUILD_STATIC=ON``) when ``libunwind`` depends on "
"``liblzma`` (gh-4551)."
msgstr ""
